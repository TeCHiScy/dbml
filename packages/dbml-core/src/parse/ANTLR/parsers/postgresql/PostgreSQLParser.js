// Generated from PostgreSQLParser.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import PostgreSQLParserVisitor from './PostgreSQLParserVisitor.js';



import PostgreSQLParserBase from '../../ASTGeneration/postgres/PostgreSQLParserBase.js';

const serializedATN = [4,1,679,10705,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,2,447,7,447,
2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,
2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,
2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,
2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,7,483,
2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,2,489,7,489,
2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,2,495,7,495,
2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,2,501,7,501,
2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,2,507,7,507,
2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,2,513,7,513,
2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,
2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,
2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,
2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,7,549,
2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,2,555,7,555,
2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,2,561,7,561,
2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,2,567,7,567,
2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,2,573,7,573,
2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,2,579,7,579,
2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,
2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,
2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,
2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,2,615,7,615,
2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,2,621,7,621,
2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,7,626,2,627,7,627,
2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,2,632,7,632,2,633,7,633,
2,634,7,634,2,635,7,635,2,636,7,636,2,637,7,637,2,638,7,638,2,639,7,639,
2,640,7,640,2,641,7,641,2,642,7,642,2,643,7,643,2,644,7,644,2,645,7,645,
2,646,7,646,2,647,7,647,2,648,7,648,2,649,7,649,2,650,7,650,2,651,7,651,
2,652,7,652,2,653,7,653,2,654,7,654,2,655,7,655,2,656,7,656,2,657,7,657,
2,658,7,658,2,659,7,659,2,660,7,660,2,661,7,661,2,662,7,662,2,663,7,663,
2,664,7,664,2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,2,669,7,669,
2,670,7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,2,675,7,675,
2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,2,681,7,681,
2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,7,686,2,687,7,687,
2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,2,692,7,692,2,693,7,693,
2,694,7,694,2,695,7,695,2,696,7,696,2,697,7,697,2,698,7,698,2,699,7,699,
2,700,7,700,2,701,7,701,2,702,7,702,2,703,7,703,2,704,7,704,2,705,7,705,
2,706,7,706,2,707,7,707,2,708,7,708,2,709,7,709,2,710,7,710,2,711,7,711,
2,712,7,712,2,713,7,713,2,714,7,714,2,715,7,715,2,716,7,716,2,717,7,717,
2,718,7,718,2,719,7,719,2,720,7,720,2,721,7,721,2,722,7,722,2,723,7,723,
2,724,7,724,2,725,7,725,2,726,7,726,2,727,7,727,2,728,7,728,2,729,7,729,
2,730,7,730,2,731,7,731,2,732,7,732,2,733,7,733,2,734,7,734,2,735,7,735,
2,736,7,736,2,737,7,737,2,738,7,738,2,739,7,739,2,740,7,740,2,741,7,741,
2,742,7,742,2,743,7,743,2,744,7,744,2,745,7,745,2,746,7,746,2,747,7,747,
2,748,7,748,2,749,7,749,2,750,7,750,2,751,7,751,2,752,7,752,2,753,7,753,
2,754,7,754,2,755,7,755,2,756,7,756,2,757,7,757,2,758,7,758,2,759,7,759,
2,760,7,760,2,761,7,761,2,762,7,762,2,763,7,763,2,764,7,764,2,765,7,765,
2,766,7,766,2,767,7,767,2,768,7,768,2,769,7,769,2,770,7,770,2,771,7,771,
2,772,7,772,2,773,7,773,2,774,7,774,2,775,7,775,2,776,7,776,2,777,7,777,
2,778,7,778,2,779,7,779,2,780,7,780,2,781,7,781,2,782,7,782,2,783,7,783,
2,784,7,784,2,785,7,785,2,786,7,786,2,787,7,787,2,788,7,788,2,789,7,789,
2,790,7,790,2,791,7,791,2,792,7,792,2,793,7,793,2,794,7,794,2,795,7,795,
2,796,7,796,2,797,7,797,2,798,7,798,2,799,7,799,2,800,7,800,2,801,7,801,
2,802,7,802,2,803,7,803,2,804,7,804,2,805,7,805,2,806,7,806,2,807,7,807,
2,808,7,808,2,809,7,809,2,810,7,810,2,811,7,811,2,812,7,812,1,0,1,0,1,0,
1,1,1,1,1,2,1,2,1,3,1,3,3,3,1636,8,3,5,3,1638,8,3,10,3,12,3,1641,9,3,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,1768,
8,4,1,5,1,5,3,5,1772,8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,3,8,
1785,8,8,1,9,5,9,1788,8,9,10,9,12,9,1791,9,9,1,10,5,10,1794,8,10,10,10,12,
10,1797,9,10,1,11,1,11,1,11,3,11,1802,8,11,1,11,1,11,1,11,1,11,1,11,1,11,
1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1817,8,11,1,12,1,12,1,12,1,12,1,
12,1,12,1,12,1,12,1,12,1,12,3,12,1829,8,12,1,13,1,13,1,13,1,13,1,13,1,13,
1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,1847,8,15,1,16,1,
16,1,16,3,16,1852,8,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,3,17,1862,
8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,3,21,1886,8,21,1,21,1,21,1,21,
1,21,1,21,3,21,1893,8,21,1,21,1,21,1,22,1,22,3,22,1899,8,22,1,23,5,23,1902,
8,23,10,23,12,23,1905,9,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1913,8,24,
1,25,1,25,3,25,1917,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
26,3,26,1929,8,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
28,1,28,1,28,1,28,3,28,1960,8,28,1,29,1,29,1,29,5,29,1965,8,29,10,29,12,
29,1968,9,29,1,30,1,30,1,30,5,30,1973,8,30,10,30,12,30,1976,9,30,1,31,1,
31,3,31,1980,8,31,1,32,1,32,1,32,1,32,1,32,3,32,1987,8,32,1,33,1,33,1,33,
1,33,3,33,1993,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,34,3,34,2010,8,34,1,35,1,35,1,35,3,35,2015,8,35,1,36,
1,36,3,36,2019,8,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
38,3,38,2032,8,38,1,39,1,39,3,39,2036,8,39,1,40,1,40,1,40,3,40,2041,8,40,
1,41,1,41,1,41,3,41,2046,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
42,1,42,3,42,2058,8,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,3,44,2067,8,44,
1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,2080,8,48,1,
48,1,48,1,48,3,48,2085,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
3,48,2096,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2107,8,
48,1,48,1,48,1,48,3,48,2112,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
1,48,3,48,2123,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2134,
8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2143,8,48,1,48,1,48,1,48,1,
48,1,48,1,48,1,48,1,48,3,48,2153,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
1,48,1,48,1,48,1,48,1,48,1,48,3,48,2168,8,48,1,48,1,48,1,48,1,48,1,48,1,
48,1,48,1,48,1,48,1,48,3,48,2180,8,48,1,48,1,48,1,48,3,48,2185,8,48,1,49,
1,49,1,49,5,49,2190,8,49,10,49,12,49,2193,9,49,1,50,1,50,1,50,1,50,1,50,
1,50,1,50,1,50,3,50,2203,8,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,3,52,2461,8,52,1,53,1,53,1,53,1,53,1,53,3,53,2468,8,53,1,54,1,54,1,
54,3,54,2473,8,54,1,55,1,55,1,55,3,55,2478,8,55,1,56,1,56,1,56,3,56,2483,
8,56,1,57,1,57,1,57,1,57,1,57,1,57,3,57,2491,8,57,1,58,1,58,1,58,1,58,1,
59,1,59,1,59,3,59,2500,8,59,1,60,1,60,1,60,5,60,2505,8,60,10,60,12,60,2508,
9,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,2517,8,61,3,61,2519,8,61,1,
62,4,62,2522,8,62,11,62,12,62,2523,1,63,1,63,1,63,1,63,3,63,2530,8,63,1,
63,1,63,1,63,1,63,3,63,2536,8,63,3,63,2538,8,63,1,64,1,64,1,64,1,64,1,64,
1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2566,8,64,1,65,1,65,1,65,1,66,1,66,
1,66,5,66,2574,8,66,10,66,12,66,2577,9,66,1,67,1,67,1,67,1,67,1,67,1,68,
1,68,1,68,5,68,2587,8,68,10,68,12,68,2590,9,68,1,69,1,69,1,69,1,69,1,69,
1,69,1,69,1,69,1,69,3,69,2601,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
69,1,69,1,69,1,69,1,69,3,69,2615,8,69,1,70,1,70,1,70,3,70,2620,8,70,1,71,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,2644,8,71,1,72,1,72,1,73,1,73,3,73,
2650,8,73,1,74,1,74,1,74,3,74,2655,8,74,1,75,1,75,1,75,1,75,1,75,3,75,2662,
8,75,1,76,5,76,2665,8,76,10,76,12,76,2668,9,76,1,77,1,77,1,77,1,77,1,77,
1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
1,77,3,77,2705,8,77,1,78,1,78,3,78,2709,8,78,1,79,1,79,1,79,1,79,1,79,3,
79,2716,8,79,1,80,1,80,3,80,2720,8,80,1,81,1,81,1,81,5,81,2725,8,81,10,81,
12,81,2728,9,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,
83,2741,8,83,1,84,1,84,1,84,5,84,2746,8,84,10,84,12,84,2749,9,84,1,85,1,
85,1,86,1,86,1,86,1,86,1,86,1,86,3,86,2759,8,86,1,86,1,86,1,86,1,86,1,86,
1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,2792,8,86,
1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2802,8,87,1,88,1,88,3,88,2806,
8,88,1,89,1,89,1,89,1,89,1,89,3,89,2813,8,89,1,90,1,90,1,90,5,90,2818,8,
90,10,90,12,90,2821,9,90,1,91,1,91,1,91,5,91,2826,8,91,10,91,12,91,2829,
9,91,1,92,1,92,1,92,3,92,2834,8,92,1,93,1,93,3,93,2838,8,93,1,94,1,94,1,
94,1,94,1,94,1,95,1,95,1,95,3,95,2848,8,95,1,95,1,95,1,96,5,96,2853,8,96,
10,96,12,96,2856,9,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,2866,
8,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
1,98,1,98,3,98,2898,8,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2906,8,98,1,
99,1,99,1,99,3,99,2911,8,99,1,100,1,100,1,100,1,100,1,100,3,100,2918,8,100,
1,101,1,101,1,101,1,101,1,102,1,102,5,102,2926,8,102,10,102,12,102,2929,
9,102,1,103,1,103,1,104,1,104,1,104,1,104,1,104,3,104,2938,8,104,1,105,1,
105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,
105,1,105,1,105,1,105,1,105,3,105,2958,8,105,1,105,1,105,1,105,1,105,1,105,
1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,2973,8,105,1,105,1,
105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,
105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,2998,8,105,
1,106,1,106,1,106,3,106,3003,8,106,1,107,1,107,1,107,1,107,1,107,3,107,3010,
8,107,1,108,1,108,1,108,5,108,3015,8,108,10,108,12,108,3018,9,108,1,109,
1,109,1,110,1,110,1,110,1,110,1,110,1,110,3,110,3028,8,110,1,111,1,111,1,
111,3,111,3033,8,111,1,112,1,112,1,112,5,112,3038,8,112,10,112,12,112,3041,
9,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,3051,8,113,1,
114,1,114,1,114,1,114,1,114,1,114,3,114,3059,8,114,1,115,1,115,1,115,1,115,
1,115,1,115,1,115,1,115,1,115,3,115,3070,8,115,1,116,1,116,1,116,1,116,1,
117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,118,3,118,3086,8,118,
1,119,1,119,1,119,1,119,1,119,1,119,3,119,3094,8,119,1,120,1,120,3,120,3098,
8,120,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,5,122,
3110,8,122,10,122,12,122,3113,9,122,1,123,1,123,1,123,1,123,1,123,1,123,
1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,3129,8,123,1,124,1,
124,1,124,3,124,3134,8,124,1,125,1,125,1,125,1,125,1,125,3,125,3141,8,125,
1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,3150,8,126,1,126,3,126,3153,
8,126,1,127,1,127,1,127,3,127,3158,8,127,1,128,1,128,1,128,1,128,1,128,3,
128,3165,8,128,1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,3,130,
3176,8,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,
131,3,131,3189,8,131,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,
1,132,1,132,3,132,3202,8,132,1,132,1,132,1,132,1,132,1,132,1,133,1,133,1,
133,1,133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,3,134,3220,8,134,1,134,
3,134,3223,8,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,3232,8,
135,1,135,1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,1,136,1,
137,1,137,3,137,3247,8,137,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,139,
1,139,1,139,1,139,1,139,1,139,3,139,3262,8,139,1,139,1,139,1,139,1,140,1,
140,1,140,1,140,3,140,3271,8,140,1,140,1,140,1,140,1,141,1,141,3,141,3278,
8,141,1,142,1,142,1,142,1,142,1,142,3,142,3285,8,142,1,143,4,143,3288,8,
143,11,143,12,143,3289,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,
144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,
144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,3320,8,144,3,144,3322,
8,144,1,145,1,145,3,145,3326,8,145,1,146,1,146,1,146,1,146,1,146,1,146,3,
146,3334,8,146,1,147,1,147,1,147,5,147,3339,8,147,10,147,12,147,3342,9,147,
1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,3,148,
3355,8,148,1,149,1,149,3,149,3359,8,149,1,150,1,150,3,150,3363,8,150,1,151,
1,151,1,151,3,151,3368,8,151,1,152,1,152,1,152,1,152,3,152,3374,8,152,1,
153,1,153,3,153,3378,8,153,1,154,1,154,3,154,3382,8,154,1,155,1,155,1,155,
1,155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,3,156,3395,8,156,1,157,1,
157,1,157,1,157,3,157,3401,8,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,
3,158,3410,8,158,1,158,1,158,1,158,1,158,1,159,5,159,3417,8,159,10,159,12,
159,3420,9,159,1,160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,3429,8,160,
1,161,1,161,1,161,1,161,1,161,1,161,1,162,5,162,3438,8,162,10,162,12,162,
3441,9,162,1,163,1,163,1,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,
164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,
164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,
164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,
164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,
164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,
164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,
164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,
164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,
164,3,164,3550,8,164,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,166,
1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,3568,8,166,1,167,4,167,3571,
8,167,11,167,12,167,3572,1,168,1,168,3,168,3577,8,168,1,169,1,169,1,169,
1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
3,169,3594,8,169,1,170,1,170,1,170,1,170,1,170,1,170,3,170,3602,8,170,1,
171,1,171,1,171,5,171,3607,8,171,10,171,12,171,3610,9,171,1,172,1,172,1,
172,1,172,1,172,1,173,1,173,1,173,5,173,3620,8,173,10,173,12,173,3623,9,
173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,3632,8,174,1,175,1,175,
1,175,1,176,1,176,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
1,178,1,178,1,178,1,178,1,178,1,178,3,178,3666,8,178,1,179,1,179,1,179,3,
179,3671,8,179,1,180,1,180,1,180,3,180,3676,8,180,1,181,1,181,3,181,3680,
8,181,1,182,1,182,1,182,1,182,1,182,1,182,3,182,3688,8,182,3,182,3690,8,
182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,
183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,
183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,
183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,
183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,3748,8,183,1,184,
1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,185,
1,185,1,185,3,185,3765,8,185,1,186,1,186,1,186,1,186,1,186,1,186,3,186,3773,
8,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3796,8,
187,1,188,1,188,3,188,3800,8,188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,
3820,8,189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,191,1,
191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,192,1,192,1,
192,1,192,1,192,1,192,1,192,1,192,1,192,1,193,1,193,1,193,1,193,1,193,1,
193,3,193,3857,8,193,1,194,1,194,1,194,1,194,1,194,1,194,1,194,3,194,3866,
8,194,1,195,1,195,1,195,3,195,3871,8,195,1,196,1,196,1,196,3,196,3876,8,
196,1,197,1,197,1,197,3,197,3881,8,197,1,198,1,198,1,198,3,198,3886,8,198,
1,199,1,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,201,
1,201,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
1,202,1,202,1,202,3,202,3939,8,202,1,203,1,203,1,203,1,203,3,203,3945,8,
203,1,204,1,204,1,204,5,204,3950,8,204,10,204,12,204,3953,9,204,1,205,1,
205,1,205,1,205,1,205,1,205,1,205,3,205,3962,8,205,1,206,1,206,1,206,3,206,
3967,8,206,1,207,4,207,3970,8,207,11,207,12,207,3971,1,208,1,208,1,208,1,
208,1,208,1,209,1,209,1,210,1,210,1,211,1,211,1,212,1,212,1,212,1,212,1,
212,3,212,3990,8,212,1,213,1,213,3,213,3994,8,213,1,214,1,214,1,215,1,215,
1,215,1,215,1,215,1,215,3,215,4004,8,215,1,216,1,216,1,217,1,217,3,217,4010,
8,217,1,217,1,217,5,217,4014,8,217,10,217,12,217,4017,9,217,1,218,1,218,
1,218,1,218,3,218,4023,8,218,1,219,1,219,1,219,3,219,4028,8,219,1,220,5,
220,4031,8,220,10,220,12,220,4034,9,220,1,221,1,221,1,221,1,221,1,221,1,
221,1,221,1,221,1,221,1,221,1,221,3,221,4047,8,221,1,222,1,222,1,222,1,222,
1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,3,222,4075,8,
222,1,223,1,223,1,223,5,223,4080,8,223,10,223,12,223,4083,9,223,1,224,1,
224,1,224,1,224,1,224,1,224,1,225,1,225,1,225,5,225,4094,8,225,10,225,12,
225,4097,9,225,1,226,1,226,1,226,1,226,1,226,1,226,1,227,1,227,1,227,1,227,
1,227,1,227,3,227,4111,8,227,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,
228,1,228,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,
229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,
229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,
229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,
229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,
229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,
229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,
229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,
229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,3,
229,4228,8,229,1,230,1,230,1,230,1,230,1,231,1,231,1,231,5,231,4237,8,231,
10,231,12,231,4240,9,231,1,232,1,232,1,232,3,232,4245,8,232,1,233,1,233,
1,233,1,233,1,233,1,233,3,233,4253,8,233,1,234,1,234,1,234,1,234,1,235,1,
235,1,235,5,235,4262,8,235,10,235,12,235,4265,9,235,1,236,1,236,1,236,1,
236,1,237,1,237,3,237,4273,8,237,1,238,1,238,1,238,5,238,4278,8,238,10,238,
12,238,4281,9,238,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
1,239,1,239,1,239,1,239,3,239,4320,8,239,1,240,1,240,1,240,1,240,3,240,4326,
8,240,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,
1,241,1,241,1,241,1,242,1,242,1,242,5,242,4345,8,242,10,242,12,242,4348,
9,242,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
1,243,1,243,3,243,4375,8,243,1,244,1,244,3,244,4379,8,244,1,245,1,245,1,
245,3,245,4384,8,245,1,246,1,246,1,246,1,246,1,246,1,246,1,246,3,246,4393,
8,246,1,247,1,247,3,247,4397,8,247,1,248,1,248,1,248,1,248,1,248,1,248,1,
248,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,
249,1,249,1,249,1,249,1,249,1,249,1,249,3,249,4424,8,249,1,250,1,250,1,250,
5,250,4429,8,250,10,250,12,250,4432,9,250,1,251,1,251,1,251,1,251,1,251,
1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,251,4446,8,251,1,252,1,252,1,
252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,
252,1,252,1,252,1,252,3,252,4466,8,252,1,253,1,253,1,253,1,253,1,253,1,253,
1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
3,253,4486,8,253,1,254,1,254,1,254,1,254,1,254,1,254,1,255,1,255,1,255,1,
255,1,255,1,255,1,255,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,
256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,
256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,
256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,
256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,
256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,
256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,3,256,4579,8,256,
1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,
1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,3,257,
4604,8,257,1,258,1,258,1,258,1,258,1,258,3,258,4611,8,258,1,259,1,259,1,
259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,3,
259,4627,8,259,1,260,1,260,1,261,1,261,1,261,5,261,4634,8,261,10,261,12,
261,4637,9,261,1,262,1,262,3,262,4641,8,262,1,263,1,263,4,263,4645,8,263,
11,263,12,263,4646,1,264,1,264,1,264,5,264,4652,8,264,10,264,12,264,4655,
9,264,1,265,1,265,1,265,1,265,1,265,1,265,1,266,1,266,1,266,1,266,1,266,
3,266,4668,8,266,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,
267,1,267,1,267,1,267,1,267,1,267,3,267,4817,8,267,1,268,1,268,3,268,4821,
8,268,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,269,4914,8,269,1,270,1,
270,1,270,3,270,4919,8,270,1,271,1,271,3,271,4923,8,271,1,272,1,272,1,272,
1,272,3,272,4929,8,272,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,
273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,
273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,
273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,
273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,
273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,3,273,4997,8,273,
1,274,1,274,1,275,1,275,3,275,5003,8,275,1,276,1,276,1,276,1,276,1,276,1,
276,1,276,1,276,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,
277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,5032,8,277,
1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,
1,278,1,278,1,278,3,278,5049,8,278,1,279,1,279,1,279,5,279,5054,8,279,10,
279,12,279,5057,9,279,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,
280,3,280,5068,8,280,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
1,281,3,281,5128,8,281,1,282,1,282,1,282,5,282,5133,8,282,10,282,12,282,
5136,9,282,1,283,1,283,1,283,3,283,5141,8,283,1,284,1,284,1,284,1,284,3,
284,5147,8,284,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,286,1,286,1,286,
1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
1,286,1,286,3,286,5173,8,286,1,287,1,287,1,287,1,287,3,287,5179,8,287,1,
288,1,288,1,288,1,288,3,288,5185,8,288,1,289,1,289,1,289,1,289,1,289,1,289,
1,290,5,290,5194,8,290,10,290,12,290,5197,9,290,1,291,1,291,1,291,1,291,
1,291,1,291,1,291,1,291,1,291,3,291,5208,8,291,1,292,1,292,1,292,1,292,1,
292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,
292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,3,292,5237,
8,292,1,293,1,293,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
1,294,1,294,3,294,5276,8,294,1,295,1,295,3,295,5280,8,295,1,296,1,296,3,
296,5284,8,296,1,297,1,297,3,297,5288,8,297,1,298,1,298,1,298,3,298,5293,
8,298,1,299,1,299,1,299,5,299,5298,8,299,10,299,12,299,5301,9,299,1,300,
1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,3,300,5314,8,
300,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,3,
301,5327,8,301,1,302,1,302,1,302,1,302,1,302,1,302,3,302,5335,8,302,1,303,
1,303,1,303,5,303,5340,8,303,10,303,12,303,5343,9,303,1,304,1,304,1,304,
3,304,5348,8,304,1,305,1,305,3,305,5352,8,305,1,306,1,306,1,306,3,306,5357,
8,306,1,307,1,307,1,307,1,307,1,307,3,307,5364,8,307,1,308,1,308,1,308,1,
308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,3,308,5378,8,308,3,308,
5380,8,308,1,308,1,308,1,309,1,309,1,309,3,309,5387,8,309,1,310,1,310,3,
310,5391,8,310,1,310,1,310,1,311,1,311,1,311,5,311,5398,8,311,10,311,12,
311,5401,9,311,1,312,1,312,1,312,5,312,5406,8,312,10,312,12,312,5409,9,312,
1,313,1,313,1,313,1,313,1,313,1,313,3,313,5417,8,313,3,313,5419,8,313,1,
314,1,314,3,314,5423,8,314,1,314,1,314,1,315,1,315,1,315,5,315,5430,8,315,
10,315,12,315,5433,9,315,1,316,1,316,3,316,5437,8,316,1,316,1,316,1,316,
1,316,3,316,5443,8,316,1,316,1,316,1,316,3,316,5448,8,316,1,317,1,317,3,
317,5452,8,317,1,317,1,317,1,317,3,317,5457,8,317,1,318,1,318,1,318,1,318,
3,318,5463,8,318,1,319,1,319,1,320,1,320,3,320,5469,8,320,1,320,1,320,1,
320,1,320,3,320,5475,8,320,1,320,1,320,1,320,1,320,3,320,5481,8,320,1,321,
1,321,1,321,3,321,5486,8,321,1,322,1,322,1,323,1,323,1,323,1,323,1,323,1,
323,1,323,1,323,1,323,1,323,1,323,3,323,5501,8,323,1,323,1,323,1,324,1,324,
1,324,5,324,5508,8,324,10,324,12,324,5511,9,324,1,325,1,325,1,325,1,326,
1,326,1,326,5,326,5519,8,326,10,326,12,326,5522,9,326,1,327,4,327,5525,8,
327,11,327,12,327,5526,1,327,1,327,1,328,1,328,1,328,1,328,1,328,1,328,1,
328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,
328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,
328,1,328,1,328,1,328,1,328,3,328,5566,8,328,1,329,1,329,1,329,1,329,1,329,
1,329,1,329,1,329,3,329,5576,8,329,1,330,1,330,1,330,1,330,1,330,3,330,5583,
8,330,1,331,1,331,1,331,1,331,1,331,1,331,1,331,5,331,5592,8,331,10,331,
12,331,5595,9,331,1,332,1,332,1,332,3,332,5600,8,332,1,333,1,333,1,333,1,
334,1,334,1,334,5,334,5608,8,334,10,334,12,334,5611,9,334,1,335,1,335,1,
335,1,335,1,335,1,335,1,336,4,336,5620,8,336,11,336,12,336,5621,1,337,1,
337,3,337,5626,8,337,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
1,338,1,338,1,338,3,338,5664,8,338,1,339,1,339,1,339,1,339,1,339,1,339,1,
339,1,339,1,339,1,339,1,339,1,339,3,339,5678,8,339,1,340,1,340,1,340,1,340,
1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,3,340,5692,8,340,1,341,1,
341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,
341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,3,341,5716,8,341,1,342,
1,342,1,342,5,342,5721,8,342,10,342,12,342,5724,9,342,1,342,1,342,1,343,
1,343,1,343,5,343,5731,8,343,10,343,12,343,5734,9,343,1,344,1,344,1,344,
1,345,1,345,1,345,1,346,4,346,5743,8,346,11,346,12,346,5744,1,347,1,347,
1,347,3,347,5750,8,347,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,
348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,
348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,
348,1,348,3,348,5786,8,348,1,349,1,349,1,349,1,349,1,349,3,349,5793,8,349,
1,350,1,350,1,350,1,350,1,350,1,350,1,350,1,350,1,350,1,350,1,351,1,351,
1,351,3,351,5808,8,351,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,
352,1,352,1,352,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,
353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,
353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,
353,3,353,5855,8,353,1,354,1,354,1,354,1,354,1,354,1,354,1,354,1,354,1,354,
1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,
1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,
1,355,1,355,3,355,5892,8,355,1,356,1,356,1,357,1,357,1,358,1,358,1,358,5,
358,5901,8,358,10,358,12,358,5904,9,358,1,359,1,359,1,360,1,360,1,360,1,
360,1,360,1,360,1,360,1,360,1,360,1,360,1,360,1,360,3,360,5920,8,360,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,3,361,
6390,8,361,1,362,1,362,3,362,6394,8,362,1,363,1,363,1,363,3,363,6399,8,363,
1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,3,364,6458,8,364,1,
365,1,365,3,365,6462,8,365,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
1,366,1,366,1,366,1,366,1,366,3,366,6681,8,366,1,367,1,367,1,367,1,367,1,
367,1,367,1,367,1,367,1,368,1,368,1,368,5,368,6694,8,368,10,368,12,368,6697,
9,368,1,369,1,369,1,369,1,369,1,369,1,369,1,369,1,369,3,369,6707,8,369,1,
370,1,370,1,370,1,370,1,370,3,370,6714,8,370,1,371,1,371,1,371,1,371,1,371,
1,371,1,371,1,371,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,1,372,1,372,1,372,1,372,1,372,3,372,6907,8,372,1,373,1,373,1,373,1,
373,1,373,1,373,1,374,1,374,3,374,6917,8,374,1,375,1,375,1,375,1,375,1,375,
1,375,3,375,6925,8,375,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,
376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,
376,1,376,1,376,1,376,1,376,1,376,1,376,3,376,6954,8,376,1,377,1,377,1,377,
1,377,1,377,1,377,1,377,1,377,1,377,1,378,1,378,1,378,5,378,6968,8,378,10,
378,12,378,6971,9,378,1,379,1,379,1,380,1,380,1,380,1,380,1,380,1,380,1,
380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,
380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,
380,1,380,1,380,1,380,1,380,1,380,1,380,3,380,7012,8,380,1,381,1,381,1,381,
1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,3,381,7026,8,381,1,
382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,
382,1,382,1,383,1,383,1,383,1,383,1,383,1,383,3,383,7048,8,383,1,384,1,384,
1,384,5,384,7053,8,384,10,384,12,384,7056,9,384,1,385,1,385,1,385,1,385,
1,385,3,385,7063,8,385,1,386,1,386,3,386,7067,8,386,1,387,1,387,1,388,1,
388,1,388,3,388,7074,8,388,1,389,1,389,1,389,1,389,1,390,1,390,1,390,3,390,
7083,8,390,1,391,1,391,1,391,1,392,1,392,1,392,1,392,3,392,7092,8,392,1,
393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,
393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,
393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,
393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,
393,1,393,3,393,7144,8,393,1,394,1,394,1,394,3,394,7149,8,394,1,395,1,395,
1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,3,395,7161,8,395,1,396,1,
396,3,396,7165,8,396,1,396,5,396,7168,8,396,10,396,12,396,7171,9,396,1,397,
1,397,3,397,7175,8,397,1,398,1,398,3,398,7179,8,398,1,398,1,398,3,398,7183,
8,398,1,399,1,399,1,399,3,399,7188,8,399,1,399,1,399,1,399,1,399,1,399,1,
399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,3,399,7204,8,399,1,399,
1,399,1,399,1,399,1,400,1,400,3,400,7212,8,400,1,400,1,400,1,400,3,400,7217,
8,400,1,401,1,401,1,401,1,402,1,402,1,402,1,402,1,402,1,402,1,403,1,403,
3,403,7230,8,403,1,404,4,404,7233,8,404,11,404,12,404,7234,1,405,1,405,1,
405,1,405,1,405,3,405,7242,8,405,1,406,1,406,1,406,1,406,1,406,1,406,1,406,
1,406,3,406,7252,8,406,1,407,1,407,3,407,7256,8,407,1,408,1,408,1,408,1,
408,1,408,1,408,1,408,1,408,1,408,3,408,7267,8,408,1,409,1,409,1,409,1,409,
1,409,1,410,1,410,1,410,1,410,3,410,7278,8,410,1,410,1,410,1,410,1,410,1,
410,1,410,3,410,7286,8,410,1,411,1,411,1,411,5,411,7291,8,411,10,411,12,
411,7294,9,411,1,412,1,412,1,413,1,413,1,413,1,413,1,413,1,413,1,414,1,414,
1,414,1,414,1,414,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,416,1,416,
1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,
1,416,1,416,3,416,7332,8,416,1,416,1,416,1,416,1,416,1,416,1,416,3,416,7340,
8,416,1,417,1,417,3,417,7344,8,417,1,418,1,418,1,418,1,418,1,418,1,418,1,
418,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,
419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,
419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,
419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,
419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,
419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,
419,3,419,7425,8,419,1,420,1,420,1,421,1,421,1,421,1,421,1,421,1,421,1,421,
1,421,1,421,1,421,1,421,1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,
1,422,1,422,1,422,1,422,1,422,3,422,7453,8,422,1,423,1,423,1,423,3,423,7458,
8,423,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,
1,424,1,424,3,424,7473,8,424,1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,
425,1,425,1,425,3,425,7485,8,425,1,426,1,426,1,426,5,426,7490,8,426,10,426,
12,426,7493,9,426,1,427,1,427,1,428,1,428,1,428,1,429,1,429,3,429,7502,8,
429,1,430,1,430,1,430,3,430,7507,8,430,1,431,1,431,3,431,7511,8,431,1,432,
1,432,3,432,7515,8,432,1,433,1,433,3,433,7519,8,433,1,434,1,434,3,434,7523,
8,434,1,435,1,435,1,435,1,435,1,435,3,435,7530,8,435,1,436,1,436,1,436,1,
437,1,437,1,437,5,437,7538,8,437,10,437,12,437,7541,9,437,1,438,1,438,3,
438,7545,8,438,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,
1,439,1,439,1,439,1,439,1,439,1,439,3,439,7563,8,439,1,440,1,440,1,440,1,
440,1,440,1,440,1,440,1,440,1,440,3,440,7574,8,440,1,441,1,441,1,441,5,441,
7579,8,441,10,441,12,441,7582,9,441,1,442,1,442,1,442,1,443,1,443,3,443,
7589,8,443,1,444,1,444,1,444,3,444,7594,8,444,1,445,1,445,1,445,1,445,1,
445,1,445,1,446,1,446,1,446,1,446,1,446,3,446,7607,8,446,1,447,1,447,1,447,
1,447,3,447,7613,8,447,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,
448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,
448,1,448,1,448,1,448,1,448,1,448,1,448,3,448,7642,8,448,1,449,1,449,1,449,
1,449,1,449,3,449,7649,8,449,1,450,1,450,1,450,1,450,1,450,1,450,1,450,1,
450,1,450,1,450,3,450,7661,8,450,1,451,1,451,1,451,1,451,1,451,1,451,1,451,
1,451,1,452,1,452,1,452,3,452,7674,8,452,1,453,1,453,1,453,1,453,1,453,1,
453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,3,453,7689,8,453,1,453,1,453,
1,453,1,453,3,453,7695,8,453,1,454,1,454,1,455,1,455,1,455,5,455,7702,8,
455,10,455,12,455,7705,9,455,1,456,1,456,1,456,1,457,1,457,1,457,1,457,1,
457,1,457,1,457,1,457,1,457,1,457,3,457,7720,8,457,1,457,3,457,7723,8,457,
1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,3,458,7734,8,458,1,
459,1,459,1,459,3,459,7739,8,459,1,460,1,460,3,460,7743,8,460,1,460,1,460,
3,460,7747,8,460,1,460,1,460,1,460,3,460,7752,8,460,1,460,3,460,7755,8,460,
1,460,1,460,1,460,1,460,3,460,7761,8,460,1,460,1,460,3,460,7765,8,460,3,
460,7767,8,460,1,460,3,460,7770,8,460,1,461,1,461,1,461,1,461,1,461,3,461,
7777,8,461,1,461,3,461,7780,8,461,1,461,1,461,1,461,1,461,1,461,3,461,7787,
8,461,1,461,1,461,1,462,1,462,1,462,1,462,3,462,7795,8,462,1,462,3,462,7798,
8,462,1,462,1,462,1,462,1,462,1,463,1,463,1,463,3,463,7807,8,463,1,463,1,
463,1,464,1,464,1,464,1,464,1,464,1,464,1,464,1,464,1,465,1,465,1,465,3,
465,7822,8,465,1,466,1,466,1,466,1,466,1,466,1,466,1,467,1,467,1,467,1,467,
1,467,3,467,7835,8,467,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,
468,3,468,7846,8,468,1,468,3,468,7849,8,468,1,469,1,469,3,469,7853,8,469,
1,470,1,470,1,470,1,470,3,470,7859,8,470,1,471,1,471,1,471,1,471,1,471,1,
471,1,471,1,471,1,471,1,472,1,472,1,472,5,472,7873,8,472,10,472,12,472,7876,
9,472,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,3,473,
7888,8,473,1,474,1,474,1,474,1,475,1,475,1,475,5,475,7896,8,475,10,475,12,
475,7899,9,475,1,476,1,476,1,476,1,476,1,476,1,476,1,476,1,476,1,477,1,477,
1,478,1,478,1,478,1,478,1,478,5,478,7916,8,478,10,478,12,478,7919,9,478,
1,479,1,479,1,479,1,479,1,479,3,479,7926,8,479,1,480,1,480,3,480,7930,8,
480,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,3,481,7940,8,481,1,482,
1,482,1,482,1,482,1,482,1,482,1,482,1,482,3,482,7950,8,482,1,482,1,482,1,
482,1,482,1,482,1,482,1,482,1,482,1,482,3,482,7961,8,482,3,482,7963,8,482,
1,483,1,483,3,483,7967,8,483,1,484,1,484,1,484,1,484,1,484,1,484,1,484,1,
484,3,484,7977,8,484,1,484,1,484,1,484,1,484,1,484,1,484,1,484,1,484,1,484,
1,484,1,484,1,484,1,484,1,484,3,484,7993,8,484,3,484,7995,8,484,1,484,1,
484,1,484,3,484,8000,8,484,5,484,8002,8,484,10,484,12,484,8005,9,484,1,485,
1,485,1,485,3,485,8010,8,485,1,486,1,486,1,486,1,487,1,487,3,487,8017,8,
487,1,487,1,487,1,488,1,488,1,488,5,488,8024,8,488,10,488,12,488,8027,9,
488,1,489,1,489,1,489,1,489,1,489,1,489,1,489,1,489,1,490,1,490,1,490,1,
490,3,490,8041,8,490,1,491,1,491,3,491,8045,8,491,1,492,1,492,1,492,1,492,
1,492,3,492,8052,8,492,1,492,3,492,8055,8,492,1,493,1,493,3,493,8059,8,493,
1,494,3,494,8062,8,494,1,494,1,494,1,494,1,494,1,494,1,494,1,494,1,494,1,
494,1,494,1,494,3,494,8075,8,494,1,495,1,495,3,495,8079,8,495,1,496,1,496,
1,496,3,496,8084,8,496,1,497,1,497,1,497,1,497,1,497,1,497,3,497,8092,8,
497,1,498,1,498,3,498,8096,8,498,1,499,1,499,3,499,8100,8,499,1,500,1,500,
1,500,1,500,1,501,1,501,1,501,5,501,8109,8,501,10,501,12,501,8112,9,501,
1,502,1,502,1,502,1,502,3,502,8118,8,502,1,502,1,502,1,503,1,503,3,503,8124,
8,503,1,503,1,503,3,503,8128,8,503,3,503,8130,8,503,1,504,1,504,3,504,8134,
8,504,1,505,1,505,1,505,1,505,3,505,8140,8,505,1,505,1,505,1,505,1,505,1,
505,1,505,1,505,3,505,8149,8,505,1,505,1,505,1,505,1,505,3,505,8155,8,505,
3,505,8157,8,505,3,505,8159,8,505,1,506,1,506,1,506,1,506,1,506,3,506,8166,
8,506,1,507,1,507,3,507,8170,8,507,1,508,1,508,1,509,1,509,1,509,1,509,1,
509,3,509,8179,8,509,1,510,1,510,3,510,8183,8,510,1,511,1,511,1,512,1,512,
1,513,1,513,1,513,1,513,3,513,8193,8,513,1,514,1,514,1,514,5,514,8198,8,
514,10,514,12,514,8201,9,514,1,515,1,515,1,515,1,515,1,515,3,515,8208,8,
515,1,516,1,516,1,516,1,517,1,517,1,517,1,517,1,517,1,518,1,518,1,518,1,
518,1,518,1,519,1,519,1,519,1,519,1,519,1,519,1,520,1,520,1,520,3,520,8232,
8,520,1,521,1,521,1,521,1,521,3,521,8238,8,521,1,522,1,522,3,522,8242,8,
522,1,523,4,523,8245,8,523,11,523,12,523,8246,1,524,1,524,1,524,1,524,1,
525,1,525,1,525,3,525,8256,8,525,1,525,1,525,3,525,8260,8,525,1,525,3,525,
8263,8,525,1,526,1,526,1,526,3,526,8268,8,526,1,527,1,527,1,527,1,527,1,
527,1,527,1,527,1,527,1,527,5,527,8279,8,527,10,527,12,527,8282,9,527,1,
528,1,528,1,528,3,528,8287,8,528,1,529,1,529,1,529,1,529,5,529,8293,8,529,
10,529,12,529,8296,9,529,3,529,8298,8,529,1,530,1,530,1,530,4,530,8303,8,
530,11,530,12,530,8304,1,531,1,531,1,531,3,531,8310,8,531,1,531,1,531,1,
531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,
531,1,531,1,531,1,531,1,531,3,531,8331,8,531,1,531,1,531,1,531,1,531,1,531,
1,531,1,531,3,531,8340,8,531,1,531,1,531,1,531,3,531,8345,8,531,1,531,1,
531,1,531,1,531,3,531,8351,8,531,1,531,1,531,1,531,3,531,8356,8,531,1,531,
1,531,1,531,1,531,1,531,3,531,8363,8,531,1,531,1,531,1,531,3,531,8368,8,
531,1,531,1,531,1,531,1,531,5,531,8374,8,531,10,531,12,531,8377,9,531,1,
532,3,532,8380,8,532,1,532,1,532,1,532,1,532,1,532,3,532,8387,8,532,1,533,
1,533,3,533,8391,8,533,1,534,3,534,8394,8,534,1,534,1,534,1,534,1,534,1,
534,3,534,8401,8,534,1,535,1,535,1,535,3,535,8406,8,535,1,535,3,535,8409,
8,535,1,535,1,535,1,535,1,535,1,535,3,535,8416,8,535,1,536,1,536,3,536,8420,
8,536,1,537,1,537,1,537,1,537,1,537,1,537,1,537,3,537,8429,8,537,1,538,1,
538,3,538,8433,8,538,1,538,1,538,1,538,1,538,1,538,1,538,3,538,8441,8,538,
3,538,8443,8,538,1,539,1,539,1,539,5,539,8448,8,539,10,539,12,539,8451,9,
539,1,540,1,540,3,540,8455,8,540,1,540,3,540,8458,8,540,1,541,1,541,1,541,
1,541,1,541,1,541,1,541,1,542,1,542,1,542,1,542,1,542,1,542,3,542,8473,8,
542,1,543,1,543,1,543,1,543,1,543,1,543,1,543,1,543,1,543,1,543,3,543,8485,
8,543,1,544,1,544,1,544,1,545,1,545,1,545,5,545,8493,8,545,10,545,12,545,
8496,9,545,1,546,1,546,1,546,1,546,1,546,1,546,3,546,8504,8,546,1,547,1,
547,1,547,3,547,8509,8,547,1,548,1,548,1,548,3,548,8514,8,548,1,549,1,549,
1,549,1,549,1,549,3,549,8521,8,549,1,549,3,549,8524,8,549,1,550,1,550,3,
550,8528,8,550,1,551,1,551,1,551,5,551,8533,8,551,10,551,12,551,8536,9,551,
1,552,1,552,1,552,1,552,1,553,1,553,1,553,1,553,1,553,1,553,1,553,1,553,
1,553,1,553,1,553,1,553,1,553,1,553,1,553,1,553,1,553,3,553,8559,8,553,1,
553,1,553,1,554,1,554,1,554,5,554,8566,8,554,10,554,12,554,8569,9,554,1,
555,1,555,1,555,3,555,8574,8,555,1,555,1,555,3,555,8578,8,555,1,556,4,556,
8581,8,556,11,556,12,556,8582,1,557,1,557,1,557,1,557,1,557,1,557,1,557,
1,557,3,557,8593,8,557,1,558,1,558,1,558,5,558,8598,8,558,10,558,12,558,
8601,9,558,1,559,1,559,1,559,1,559,1,559,1,559,3,559,8609,8,559,1,560,3,
560,8612,8,560,1,560,1,560,1,560,1,560,1,560,1,560,1,560,3,560,8621,8,560,
3,560,8623,8,560,1,560,1,560,1,560,1,560,3,560,8629,8,560,1,561,1,561,3,
561,8633,8,561,1,561,5,561,8636,8,561,10,561,12,561,8639,9,561,1,562,1,562,
1,562,1,562,1,562,1,562,1,562,1,562,1,562,1,562,1,562,3,562,8652,8,562,3,
562,8654,8,562,1,563,1,563,1,563,1,563,3,563,8660,8,563,1,564,1,564,1,564,
1,564,3,564,8666,8,564,1,564,3,564,8669,8,564,1,564,1,564,1,565,1,565,1,
565,1,565,1,565,3,565,8678,8,565,1,566,1,566,1,566,1,566,1,566,1,566,1,566,
1,566,1,566,1,566,1,566,1,566,1,566,1,566,1,566,1,566,3,566,8696,8,566,1,
567,1,567,1,567,1,567,1,567,3,567,8703,8,567,1,568,1,568,3,568,8707,8,568,
1,569,1,569,3,569,8711,8,569,1,570,1,570,1,570,1,570,1,570,1,570,1,571,1,
571,1,571,1,572,1,572,1,572,1,572,1,572,3,572,8727,8,572,1,573,1,573,1,573,
1,573,1,573,3,573,8734,8,573,1,574,1,574,1,574,1,574,1,574,1,574,3,574,8742,
8,574,1,575,1,575,3,575,8746,8,575,1,576,1,576,1,576,1,576,1,576,3,576,8753,
8,576,1,576,1,576,1,577,1,577,1,578,1,578,1,578,1,578,1,578,1,578,1,578,
3,578,8766,8,578,1,579,1,579,1,579,1,579,1,579,1,579,1,579,1,579,1,579,1,
579,1,579,1,579,1,579,1,579,3,579,8782,8,579,1,579,1,579,1,579,1,579,3,579,
8788,8,579,1,579,1,579,1,579,1,579,3,579,8794,8,579,1,580,1,580,1,580,1,
580,1,580,3,580,8801,8,580,1,581,1,581,1,581,3,581,8806,8,581,1,582,1,582,
1,583,1,583,3,583,8812,8,583,1,584,1,584,1,584,5,584,8817,8,584,10,584,12,
584,8820,9,584,1,585,1,585,1,585,5,585,8825,8,585,10,585,12,585,8828,9,585,
1,586,1,586,1,586,5,586,8833,8,586,10,586,12,586,8836,9,586,1,587,1,587,
3,587,8840,8,587,1,587,1,587,3,587,8844,8,587,1,587,1,587,1,587,1,587,3,
587,8850,8,587,1,588,1,588,3,588,8854,8,588,1,588,1,588,3,588,8858,8,588,
1,589,3,589,8861,8,589,1,589,1,589,1,590,1,590,3,590,8867,8,590,1,591,1,
591,1,591,3,591,8872,8,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,
1,591,1,591,1,591,1,591,1,591,1,591,3,591,8888,8,591,1,591,3,591,8891,8,
591,3,591,8893,8,591,1,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,
1,592,3,592,8905,8,592,3,592,8907,8,592,1,593,1,593,3,593,8911,8,593,1,593,
1,593,1,593,1,593,3,593,8917,8,593,1,593,1,593,1,593,3,593,8922,8,593,1,
594,1,594,1,594,1,594,5,594,8928,8,594,10,594,12,594,8931,9,594,1,595,3,
595,8934,8,595,1,595,1,595,1,596,1,596,1,596,5,596,8941,8,596,10,596,12,
596,8944,9,596,1,597,1,597,1,597,5,597,8949,8,597,10,597,12,597,8952,9,597,
1,598,1,598,1,598,3,598,8957,8,598,1,599,3,599,8960,8,599,1,599,1,599,1,
600,1,600,1,600,1,600,1,600,3,600,8969,8,600,1,601,1,601,1,601,3,601,8974,
8,601,1,602,1,602,1,602,5,602,8979,8,602,10,602,12,602,8982,9,602,1,603,
1,603,1,603,1,603,1,603,1,603,1,603,3,603,8991,8,603,1,603,1,603,1,603,1,
603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,
603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,3,603,9017,8,603,1,603,
1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,3,603,9028,8,603,5,603,9030,
8,603,10,603,12,603,9033,9,603,1,604,1,604,1,604,1,604,1,604,3,604,9040,
8,604,1,604,1,604,1,604,1,604,1,604,1,604,1,604,1,604,1,604,1,604,1,604,
1,604,1,604,1,604,1,604,1,604,1,604,1,604,1,604,1,604,1,604,3,604,9063,8,
604,1,604,1,604,1,604,1,604,1,604,1,604,3,604,9071,8,604,1,605,1,605,1,606,
1,606,1,606,1,606,1,606,1,606,3,606,9081,8,606,1,606,1,606,1,606,1,606,1,
606,1,606,1,606,1,606,1,606,1,606,1,606,1,606,3,606,9095,8,606,1,606,1,606,
1,607,1,607,1,607,1,607,1,607,1,607,3,607,9105,8,607,1,608,1,608,3,608,9109,
8,608,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,
1,609,3,609,9123,8,609,1,609,1,609,1,609,1,609,1,609,3,609,9130,8,609,1,
609,1,609,1,609,1,609,1,609,3,609,9137,8,609,1,609,1,609,1,609,1,609,1,609,
3,609,9144,8,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,
609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,
609,1,609,3,609,9169,8,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,
1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,
1,609,1,609,1,609,1,609,1,609,1,609,1,609,3,609,9198,8,609,1,609,1,609,1,
609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,
609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,
609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,3,609,9237,
8,609,3,609,9239,8,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,
609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,
609,1,609,1,609,1,609,1,609,1,609,3,609,9267,8,609,1,609,1,609,1,609,1,609,
1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,
1,609,1,609,1,609,3,609,9288,8,609,1,610,1,610,1,610,1,610,1,610,3,610,9295,
8,610,1,611,1,611,1,611,1,611,1,611,1,611,1,611,1,611,1,611,1,611,1,611,
3,611,9308,8,611,1,612,1,612,1,612,1,612,1,612,1,613,1,613,1,613,5,613,9318,
8,613,10,613,12,613,9321,9,613,1,614,1,614,1,614,3,614,9326,8,614,1,615,
1,615,1,616,1,616,1,616,1,616,1,616,3,616,9335,8,616,1,617,1,617,1,617,1,
617,1,617,1,617,1,617,1,617,1,617,1,617,1,617,1,617,1,617,1,617,1,617,3,
617,9352,8,617,1,618,1,618,1,618,1,619,1,619,1,619,1,619,1,619,1,619,1,619,
3,619,9364,8,619,1,620,1,620,1,620,1,620,1,620,1,620,1,620,3,620,9373,8,
620,1,621,1,621,1,621,3,621,9378,8,621,1,622,1,622,1,622,5,622,9383,8,622,
10,622,12,622,9386,9,622,1,623,1,623,1,623,1,623,1,624,1,624,1,624,3,624,
9395,8,624,1,624,3,624,9398,8,624,1,625,1,625,1,625,1,625,1,625,1,625,1,
625,1,626,1,626,3,626,9409,8,626,1,627,1,627,1,627,1,627,3,627,9415,8,627,
1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,
1,628,3,628,9430,8,628,1,629,1,629,1,629,1,629,1,629,1,629,3,629,9438,8,
629,1,630,1,630,1,630,1,630,1,630,1,630,1,630,3,630,9447,8,630,1,631,1,631,
1,631,1,631,1,631,1,631,1,631,3,631,9456,8,631,1,631,3,631,9459,8,631,1,
632,1,632,1,632,3,632,9464,8,632,1,632,1,632,1,632,1,632,1,632,1,632,1,632,
3,632,9473,8,632,1,633,1,633,1,633,3,633,9478,8,633,1,633,1,633,1,634,1,
634,1,634,1,634,1,634,1,634,1,635,1,635,1,636,1,636,3,636,9492,8,636,1,637,
1,637,1,638,1,638,1,638,1,638,1,638,1,638,3,638,9502,8,638,1,639,1,639,1,
639,1,639,1,639,1,639,3,639,9510,8,639,1,640,1,640,1,640,1,640,1,640,1,640,
1,640,1,640,1,640,1,640,1,640,1,640,3,640,9524,8,640,1,641,1,641,1,641,5,
641,9529,8,641,10,641,12,641,9532,9,641,1,642,1,642,1,642,5,642,9537,8,642,
10,642,12,642,9540,9,642,1,643,1,643,1,643,1,643,1,643,3,643,9547,8,643,
1,644,1,644,1,644,5,644,9552,8,644,10,644,12,644,9555,9,644,1,645,1,645,
1,645,3,645,9560,8,645,1,645,1,645,1,646,1,646,1,646,5,646,9567,8,646,10,
646,12,646,9570,9,646,1,647,1,647,1,647,1,647,1,647,3,647,9577,8,647,1,648,
1,648,1,648,1,648,1,648,1,648,1,648,1,648,3,648,9587,8,648,1,649,1,649,1,
650,1,650,1,650,1,650,1,650,1,650,1,650,3,650,9598,8,650,1,651,1,651,1,651,
1,651,1,651,3,651,9605,8,651,1,652,1,652,1,652,1,652,1,652,1,652,1,652,1,
652,1,652,1,652,1,652,1,652,1,652,1,652,1,652,1,652,1,652,1,652,1,652,1,
652,1,652,1,652,1,652,1,652,1,652,1,652,1,652,1,652,3,652,9635,8,652,1,653,
1,653,1,653,1,653,1,653,1,653,1,653,3,653,9644,8,653,1,654,1,654,1,654,1,
654,1,654,3,654,9651,8,654,1,655,1,655,1,655,1,655,1,655,1,655,1,656,4,656,
9660,8,656,11,656,12,656,9661,1,657,1,657,1,657,1,657,1,657,1,658,1,658,
1,658,3,658,9672,8,658,1,659,1,659,3,659,9676,8,659,1,660,1,660,3,660,9680,
8,660,1,661,1,661,1,661,3,661,9685,8,661,1,661,1,661,1,661,1,661,1,661,1,
661,3,661,9693,8,661,1,661,1,661,3,661,9697,8,661,1,662,1,662,3,662,9701,
8,662,1,663,4,663,9704,8,663,11,663,12,663,9705,1,664,5,664,9709,8,664,10,
664,12,664,9712,9,664,1,665,1,665,3,665,9716,8,665,1,666,1,666,1,666,5,666,
9721,8,666,10,666,12,666,9724,9,666,1,667,1,667,1,667,1,667,1,667,3,667,
9731,8,667,1,667,3,667,9734,8,667,1,668,1,668,1,668,5,668,9739,8,668,10,
668,12,668,9742,9,668,1,669,1,669,3,669,9746,8,669,1,670,1,670,1,670,5,670,
9751,8,670,10,670,12,670,9754,9,670,1,671,1,671,1,672,1,672,1,673,1,673,
1,674,1,674,1,674,1,674,1,674,1,674,1,674,3,674,9769,8,674,1,675,1,675,1,
675,1,675,1,675,1,675,1,675,1,675,1,675,1,675,1,675,1,675,1,675,3,675,9784,
8,675,1,675,1,675,1,675,1,675,1,675,1,675,1,675,1,675,1,675,1,675,1,675,
1,675,3,675,9798,8,675,1,675,1,675,1,675,3,675,9803,8,675,1,676,1,676,1,
677,1,677,1,678,1,678,1,679,1,679,1,680,1,680,1,680,1,681,1,681,1,681,1,
681,5,681,9820,8,681,10,681,12,681,9823,9,681,1,681,1,681,3,681,9827,8,681,
1,682,1,682,1,682,3,682,9832,8,682,1,683,1,683,1,683,1,683,1,683,3,683,9839,
8,683,1,684,1,684,1,685,1,685,1,685,3,685,9846,8,685,1,686,1,686,1,686,5,
686,9851,8,686,10,686,12,686,9854,9,686,1,687,1,687,1,687,1,687,1,687,1,
687,3,687,9862,8,687,1,688,1,688,1,688,1,688,3,688,9868,8,688,1,689,1,689,
1,689,1,689,3,689,9874,8,689,1,690,1,690,1,690,1,690,3,690,9880,8,690,1,
691,1,691,1,691,1,691,1,691,1,691,3,691,9888,8,691,1,692,1,692,1,692,1,692,
1,692,1,692,1,692,3,692,9897,8,692,1,693,1,693,1,694,1,694,1,695,1,695,1,
695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,
695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,
695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,
695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,
695,1,695,3,695,9955,8,695,1,696,1,696,1,697,1,697,1,698,1,698,1,699,1,699,
1,699,1,699,1,700,5,700,9968,8,700,10,700,12,700,9971,9,700,1,701,1,701,
1,701,1,701,1,701,1,701,1,701,1,701,1,701,1,701,1,701,1,701,1,701,1,701,
1,701,1,701,1,701,1,701,1,701,1,701,3,701,9993,8,701,1,702,1,702,1,703,1,
703,1,703,1,703,3,703,10001,8,703,1,704,1,704,3,704,10005,8,704,1,705,1,
705,1,705,1,705,1,705,1,705,1,705,1,706,1,706,1,706,3,706,10017,8,706,3,
706,10019,8,706,1,707,1,707,1,708,4,708,10024,8,708,11,708,12,708,10025,
1,709,1,709,1,709,1,709,1,710,1,710,1,710,3,710,10035,8,710,1,711,1,711,
1,711,1,711,1,711,1,711,1,711,1,711,1,711,1,711,1,711,1,711,1,711,1,711,
1,711,1,711,3,711,10053,8,711,1,711,1,711,1,712,1,712,1,712,1,712,3,712,
10061,8,712,1,713,1,713,1,714,1,714,1,714,1,714,1,714,3,714,10070,8,714,
1,715,1,715,1,715,5,715,10075,8,715,10,715,12,715,10078,9,715,1,716,1,716,
1,716,1,717,1,717,1,718,1,718,3,718,10087,8,718,1,719,1,719,1,720,1,720,
3,720,10093,8,720,1,721,1,721,1,722,1,722,1,722,3,722,10100,8,722,1,723,
1,723,1,723,3,723,10105,8,723,1,724,1,724,1,724,1,724,3,724,10111,8,724,
1,725,1,725,3,725,10115,8,725,1,726,1,726,1,727,5,727,10120,8,727,10,727,
12,727,10123,9,727,1,728,1,728,1,728,1,728,1,728,1,728,1,728,1,728,1,728,
1,728,1,728,1,728,1,728,1,728,1,728,1,728,1,728,1,728,1,728,1,728,1,728,
1,728,1,728,1,728,1,728,1,728,1,728,3,728,10152,8,728,1,729,1,729,1,729,
1,729,1,730,1,730,1,730,1,730,1,730,1,730,1,730,1,730,1,730,1,730,1,730,
1,730,1,730,1,730,3,730,10172,8,730,1,731,1,731,3,731,10176,8,731,1,732,
1,732,1,732,1,732,1,732,1,733,1,733,1,733,1,733,1,733,1,733,1,734,1,734,
1,734,3,734,10192,8,734,1,735,1,735,1,735,5,735,10197,8,735,10,735,12,735,
10200,9,735,1,736,1,736,1,736,1,736,1,737,1,737,1,738,1,738,1,739,1,739,
3,739,10212,8,739,1,739,1,739,1,739,1,739,5,739,10218,8,739,10,739,12,739,
10221,9,739,1,740,1,740,1,740,1,740,1,740,1,740,1,740,1,740,1,740,1,740,
1,741,1,741,1,741,1,741,1,741,5,741,10238,8,741,10,741,12,741,10241,9,741,
1,742,1,742,1,742,3,742,10246,8,742,1,743,1,743,1,743,1,743,1,743,1,743,
1,743,1,743,1,744,1,744,3,744,10258,8,744,1,745,4,745,10261,8,745,11,745,
12,745,10262,1,746,1,746,1,746,1,746,1,746,1,747,1,747,1,747,3,747,10273,
8,747,1,748,1,748,1,748,1,749,1,749,1,749,1,749,1,749,1,750,1,750,1,750,
1,750,1,750,1,751,1,751,1,751,1,751,1,751,1,751,1,751,1,751,1,751,1,751,
1,751,1,751,1,751,1,751,1,751,1,751,1,751,3,751,10305,8,751,1,752,1,752,
1,752,3,752,10310,8,752,1,753,1,753,1,753,1,753,1,753,5,753,10317,8,753,
10,753,12,753,10320,9,753,1,753,1,753,3,753,10324,8,753,1,754,1,754,3,754,
10328,8,754,1,755,1,755,1,755,3,755,10333,8,755,1,756,1,756,1,757,1,757,
1,757,1,757,1,757,1,757,1,757,1,757,1,757,1,758,1,758,1,758,3,758,10349,
8,758,1,759,1,759,1,759,1,759,1,759,1,760,1,760,1,761,1,761,1,761,1,761,
1,761,1,761,1,761,1,761,1,761,3,761,10367,8,761,1,761,3,761,10370,8,761,
1,761,1,761,1,762,1,762,3,762,10376,8,762,1,763,1,763,1,763,1,763,1,763,
1,763,1,763,1,763,1,763,1,763,1,763,1,763,1,763,1,763,1,763,1,763,1,763,
1,763,1,763,1,763,1,763,1,763,1,763,1,763,1,763,1,763,3,763,10404,8,763,
1,764,1,764,1,764,1,764,1,764,1,764,1,764,1,764,3,764,10414,8,764,1,765,
1,765,1,765,4,765,10419,8,765,11,765,12,765,10420,3,765,10423,8,765,1,766,
1,766,1,766,3,766,10428,8,766,1,767,1,767,1,767,1,767,1,768,1,768,1,768,
5,768,10437,8,768,10,768,12,768,10440,9,768,1,769,1,769,1,769,1,769,1,769,
1,770,1,770,1,770,3,770,10450,8,770,1,771,1,771,1,771,1,771,1,771,1,771,
1,771,1,772,1,772,1,772,1,773,1,773,1,773,1,773,1,773,1,773,1,773,1,773,
1,773,3,773,10471,8,773,1,773,1,773,1,774,1,774,1,774,3,774,10478,8,774,
1,775,1,775,1,775,5,775,10483,8,775,10,775,12,775,10486,9,775,1,776,1,776,
1,776,3,776,10491,8,776,1,776,3,776,10494,8,776,1,777,1,777,1,777,1,777,
1,777,1,777,1,777,1,777,1,777,3,777,10505,8,777,1,777,1,777,1,777,1,777,
1,777,3,777,10512,8,777,3,777,10514,8,777,1,777,1,777,1,778,1,778,1,778,
1,778,1,778,3,778,10523,8,778,1,779,1,779,1,779,5,779,10528,8,779,10,779,
12,779,10531,9,779,1,780,1,780,1,780,3,780,10536,8,780,1,781,1,781,1,781,
1,781,3,781,10542,8,781,1,782,1,782,3,782,10546,8,782,1,783,1,783,1,783,
1,783,1,783,1,783,1,783,1,783,1,784,1,784,1,785,1,785,1,785,3,785,10561,
8,785,1,786,1,786,1,786,1,786,1,786,1,786,1,786,1,786,1,786,1,786,1,786,
1,786,1,786,1,786,1,786,3,786,10578,8,786,3,786,10580,8,786,1,787,1,787,
1,787,1,787,1,787,1,788,1,788,1,788,1,788,1,789,1,789,1,789,1,790,1,790,
1,790,1,790,1,791,1,791,1,791,1,791,1,792,1,792,3,792,10604,8,792,1,792,
1,792,3,792,10608,8,792,1,793,1,793,1,793,1,793,1,793,1,793,1,793,1,793,
1,793,3,793,10619,8,793,1,793,3,793,10622,8,793,1,794,1,794,3,794,10626,
8,794,1,795,1,795,1,795,3,795,10631,8,795,1,796,4,796,10634,8,796,11,796,
12,796,10635,1,797,1,797,1,797,1,797,1,797,1,798,1,798,1,798,5,798,10646,
8,798,10,798,12,798,10649,9,798,1,799,1,799,1,799,3,799,10654,8,799,1,800,
1,800,3,800,10658,8,800,1,801,1,801,3,801,10662,8,801,1,802,1,802,3,802,
10666,8,802,1,803,1,803,1,803,3,803,10671,8,803,1,804,1,804,3,804,10675,
8,804,1,805,1,805,1,806,1,806,1,806,1,806,1,806,1,806,1,806,1,806,1,807,
1,807,1,808,1,808,1,809,1,809,1,810,1,810,1,811,1,811,1,811,1,812,1,812,
1,812,1,812,1,812,3,812,10703,8,812,1,812,0,1,1206,813,0,2,4,6,8,10,12,14,
16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,
398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,
434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,
470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,
542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,
578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,
614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,
650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,
686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,
722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,
758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,
794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,
830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,
866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,
902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,
938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,
974,976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,
1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,
1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,
1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,
1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,
1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,
1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,
1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,
1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,
1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,1274,1276,
1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,1302,1304,1306,
1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,
1338,1340,1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,1366,
1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,1392,1394,1396,
1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,1418,1420,1422,1424,1426,
1428,1430,1432,1434,1436,1438,1440,1442,1444,1446,1448,1450,1452,1454,1456,
1458,1460,1462,1464,1466,1468,1470,1472,1474,1476,1478,1480,1482,1484,1486,
1488,1490,1492,1494,1496,1498,1500,1502,1504,1506,1508,1510,1512,1514,1516,
1518,1520,1522,1524,1526,1528,1530,1532,1534,1536,1538,1540,1542,1544,1546,
1548,1550,1552,1554,1556,1558,1560,1562,1564,1566,1568,1570,1572,1574,1576,
1578,1580,1582,1584,1586,1588,1590,1592,1594,1596,1598,1600,1602,1604,1606,
1608,1610,1612,1614,1616,1618,1620,1622,1624,0,66,2,0,195,195,357,357,2,
0,66,66,311,311,2,0,99,99,311,311,3,0,66,66,99,99,311,311,2,0,133,133,191,
191,2,0,245,245,325,325,2,0,10,10,94,94,2,0,162,162,356,356,2,0,180,180,
221,221,5,0,30,30,281,281,322,322,345,345,347,347,2,0,64,64,94,94,2,0,345,
345,347,347,2,0,200,200,224,224,9,0,30,30,160,160,165,165,179,179,219,219,
227,227,335,335,338,338,438,438,3,0,113,113,277,277,329,329,2,0,53,53,78,
78,3,0,173,173,252,252,255,255,5,0,30,30,88,88,182,182,232,232,362,362,2,
0,92,92,226,226,1,0,448,449,2,0,92,92,407,407,2,0,334,334,407,407,2,0,211,
211,289,289,3,0,314,314,350,350,445,445,2,0,64,64,68,68,5,0,212,212,322,
322,343,343,354,354,455,456,2,0,10,10,53,53,3,0,211,211,289,289,442,442,
3,0,175,175,316,316,342,342,4,0,88,88,182,182,232,232,362,362,2,0,151,151,
245,245,2,0,306,306,326,326,1,0,31,32,2,0,99,99,342,342,2,0,201,201,327,
327,2,0,213,213,245,245,2,0,313,313,407,407,2,0,207,207,261,261,4,0,113,
113,115,115,119,119,126,126,2,0,353,353,477,477,2,0,384,385,399,399,1,0,
384,385,1,0,411,412,1,0,18,19,2,0,117,117,122,122,5,0,10,10,16,17,21,21,
23,23,25,25,1,0,12,13,3,0,9,9,14,14,27,27,2,0,30,30,56,56,3,0,39,39,73,73,
95,95,2,0,166,166,188,188,2,0,297,297,450,450,2,0,208,208,282,282,3,0,30,
30,34,34,90,90,6,0,9,10,12,17,21,21,23,23,25,25,27,27,2,0,20,20,22,22,1,
0,483,486,11,0,124,124,129,249,251,252,254,303,305,379,433,452,455,469,471,
471,473,473,475,475,478,488,5,0,106,118,120,123,125,125,127,128,472,472,
4,0,30,52,54,70,72,105,454,454,5,0,304,304,418,424,504,504,513,513,521,635,
2,0,62,62,116,116,2,0,10,10,20,20,2,0,167,167,507,507,2,0,144,144,210,210,
36,0,33,33,35,35,43,44,53,53,57,57,61,61,92,92,116,116,123,123,130,130,144,
144,153,153,157,157,161,161,167,167,172,172,207,207,210,210,232,232,240,
240,258,258,261,262,272,272,286,286,300,300,306,306,312,312,316,317,326,
326,353,353,433,434,477,477,490,502,506,512,514,518,520,520,11570,0,1626,
1,0,0,0,2,1629,1,0,0,0,4,1631,1,0,0,0,6,1639,1,0,0,0,8,1767,1,0,0,0,10,1769,
1,0,0,0,12,1773,1,0,0,0,14,1776,1,0,0,0,16,1784,1,0,0,0,18,1789,1,0,0,0,
20,1795,1,0,0,0,22,1816,1,0,0,0,24,1828,1,0,0,0,26,1830,1,0,0,0,28,1836,
1,0,0,0,30,1846,1,0,0,0,32,1848,1,0,0,0,34,1857,1,0,0,0,36,1865,1,0,0,0,
38,1871,1,0,0,0,40,1878,1,0,0,0,42,1880,1,0,0,0,44,1898,1,0,0,0,46,1903,
1,0,0,0,48,1912,1,0,0,0,50,1914,1,0,0,0,52,1928,1,0,0,0,54,1930,1,0,0,0,
56,1959,1,0,0,0,58,1961,1,0,0,0,60,1969,1,0,0,0,62,1979,1,0,0,0,64,1986,
1,0,0,0,66,1992,1,0,0,0,68,2009,1,0,0,0,70,2014,1,0,0,0,72,2018,1,0,0,0,
74,2020,1,0,0,0,76,2031,1,0,0,0,78,2035,1,0,0,0,80,2040,1,0,0,0,82,2045,
1,0,0,0,84,2047,1,0,0,0,86,2059,1,0,0,0,88,2066,1,0,0,0,90,2068,1,0,0,0,
92,2070,1,0,0,0,94,2072,1,0,0,0,96,2184,1,0,0,0,98,2186,1,0,0,0,100,2202,
1,0,0,0,102,2204,1,0,0,0,104,2460,1,0,0,0,106,2467,1,0,0,0,108,2472,1,0,
0,0,110,2477,1,0,0,0,112,2482,1,0,0,0,114,2490,1,0,0,0,116,2492,1,0,0,0,
118,2499,1,0,0,0,120,2501,1,0,0,0,122,2509,1,0,0,0,124,2521,1,0,0,0,126,
2537,1,0,0,0,128,2565,1,0,0,0,130,2567,1,0,0,0,132,2570,1,0,0,0,134,2578,
1,0,0,0,136,2583,1,0,0,0,138,2614,1,0,0,0,140,2616,1,0,0,0,142,2643,1,0,
0,0,144,2645,1,0,0,0,146,2649,1,0,0,0,148,2654,1,0,0,0,150,2661,1,0,0,0,
152,2666,1,0,0,0,154,2704,1,0,0,0,156,2708,1,0,0,0,158,2715,1,0,0,0,160,
2719,1,0,0,0,162,2721,1,0,0,0,164,2729,1,0,0,0,166,2740,1,0,0,0,168,2742,
1,0,0,0,170,2750,1,0,0,0,172,2752,1,0,0,0,174,2801,1,0,0,0,176,2805,1,0,
0,0,178,2812,1,0,0,0,180,2814,1,0,0,0,182,2822,1,0,0,0,184,2833,1,0,0,0,
186,2837,1,0,0,0,188,2839,1,0,0,0,190,2844,1,0,0,0,192,2854,1,0,0,0,194,
2865,1,0,0,0,196,2905,1,0,0,0,198,2910,1,0,0,0,200,2917,1,0,0,0,202,2919,
1,0,0,0,204,2927,1,0,0,0,206,2930,1,0,0,0,208,2937,1,0,0,0,210,2997,1,0,
0,0,212,3002,1,0,0,0,214,3009,1,0,0,0,216,3011,1,0,0,0,218,3019,1,0,0,0,
220,3027,1,0,0,0,222,3032,1,0,0,0,224,3034,1,0,0,0,226,3042,1,0,0,0,228,
3058,1,0,0,0,230,3069,1,0,0,0,232,3071,1,0,0,0,234,3075,1,0,0,0,236,3085,
1,0,0,0,238,3093,1,0,0,0,240,3097,1,0,0,0,242,3099,1,0,0,0,244,3106,1,0,
0,0,246,3128,1,0,0,0,248,3133,1,0,0,0,250,3140,1,0,0,0,252,3152,1,0,0,0,
254,3157,1,0,0,0,256,3164,1,0,0,0,258,3166,1,0,0,0,260,3170,1,0,0,0,262,
3184,1,0,0,0,264,3195,1,0,0,0,266,3208,1,0,0,0,268,3222,1,0,0,0,270,3224,
1,0,0,0,272,3238,1,0,0,0,274,3246,1,0,0,0,276,3248,1,0,0,0,278,3255,1,0,
0,0,280,3266,1,0,0,0,282,3277,1,0,0,0,284,3284,1,0,0,0,286,3287,1,0,0,0,
288,3321,1,0,0,0,290,3325,1,0,0,0,292,3333,1,0,0,0,294,3335,1,0,0,0,296,
3343,1,0,0,0,298,3358,1,0,0,0,300,3360,1,0,0,0,302,3367,1,0,0,0,304,3373,
1,0,0,0,306,3377,1,0,0,0,308,3381,1,0,0,0,310,3383,1,0,0,0,312,3394,1,0,
0,0,314,3396,1,0,0,0,316,3404,1,0,0,0,318,3418,1,0,0,0,320,3428,1,0,0,0,
322,3430,1,0,0,0,324,3439,1,0,0,0,326,3442,1,0,0,0,328,3549,1,0,0,0,330,
3551,1,0,0,0,332,3567,1,0,0,0,334,3570,1,0,0,0,336,3576,1,0,0,0,338,3593,
1,0,0,0,340,3601,1,0,0,0,342,3603,1,0,0,0,344,3611,1,0,0,0,346,3616,1,0,
0,0,348,3631,1,0,0,0,350,3633,1,0,0,0,352,3636,1,0,0,0,354,3638,1,0,0,0,
356,3665,1,0,0,0,358,3670,1,0,0,0,360,3672,1,0,0,0,362,3679,1,0,0,0,364,
3681,1,0,0,0,366,3747,1,0,0,0,368,3749,1,0,0,0,370,3764,1,0,0,0,372,3772,
1,0,0,0,374,3795,1,0,0,0,376,3799,1,0,0,0,378,3819,1,0,0,0,380,3821,1,0,
0,0,382,3830,1,0,0,0,384,3841,1,0,0,0,386,3856,1,0,0,0,388,3865,1,0,0,0,
390,3870,1,0,0,0,392,3875,1,0,0,0,394,3880,1,0,0,0,396,3885,1,0,0,0,398,
3887,1,0,0,0,400,3889,1,0,0,0,402,3898,1,0,0,0,404,3938,1,0,0,0,406,3944,
1,0,0,0,408,3946,1,0,0,0,410,3961,1,0,0,0,412,3966,1,0,0,0,414,3969,1,0,
0,0,416,3973,1,0,0,0,418,3978,1,0,0,0,420,3980,1,0,0,0,422,3982,1,0,0,0,
424,3989,1,0,0,0,426,3993,1,0,0,0,428,3995,1,0,0,0,430,4003,1,0,0,0,432,
4005,1,0,0,0,434,4009,1,0,0,0,436,4022,1,0,0,0,438,4027,1,0,0,0,440,4032,
1,0,0,0,442,4046,1,0,0,0,444,4074,1,0,0,0,446,4076,1,0,0,0,448,4084,1,0,
0,0,450,4090,1,0,0,0,452,4098,1,0,0,0,454,4110,1,0,0,0,456,4112,1,0,0,0,
458,4227,1,0,0,0,460,4229,1,0,0,0,462,4233,1,0,0,0,464,4241,1,0,0,0,466,
4252,1,0,0,0,468,4254,1,0,0,0,470,4258,1,0,0,0,472,4266,1,0,0,0,474,4272,
1,0,0,0,476,4274,1,0,0,0,478,4319,1,0,0,0,480,4325,1,0,0,0,482,4327,1,0,
0,0,484,4341,1,0,0,0,486,4374,1,0,0,0,488,4378,1,0,0,0,490,4383,1,0,0,0,
492,4392,1,0,0,0,494,4396,1,0,0,0,496,4398,1,0,0,0,498,4423,1,0,0,0,500,
4425,1,0,0,0,502,4445,1,0,0,0,504,4465,1,0,0,0,506,4485,1,0,0,0,508,4487,
1,0,0,0,510,4493,1,0,0,0,512,4578,1,0,0,0,514,4603,1,0,0,0,516,4610,1,0,
0,0,518,4626,1,0,0,0,520,4628,1,0,0,0,522,4630,1,0,0,0,524,4638,1,0,0,0,
526,4644,1,0,0,0,528,4648,1,0,0,0,530,4656,1,0,0,0,532,4667,1,0,0,0,534,
4816,1,0,0,0,536,4820,1,0,0,0,538,4913,1,0,0,0,540,4918,1,0,0,0,542,4922,
1,0,0,0,544,4928,1,0,0,0,546,4996,1,0,0,0,548,4998,1,0,0,0,550,5002,1,0,
0,0,552,5004,1,0,0,0,554,5031,1,0,0,0,556,5048,1,0,0,0,558,5050,1,0,0,0,
560,5067,1,0,0,0,562,5127,1,0,0,0,564,5129,1,0,0,0,566,5140,1,0,0,0,568,
5146,1,0,0,0,570,5148,1,0,0,0,572,5172,1,0,0,0,574,5178,1,0,0,0,576,5184,
1,0,0,0,578,5186,1,0,0,0,580,5195,1,0,0,0,582,5207,1,0,0,0,584,5236,1,0,
0,0,586,5238,1,0,0,0,588,5275,1,0,0,0,590,5279,1,0,0,0,592,5283,1,0,0,0,
594,5287,1,0,0,0,596,5292,1,0,0,0,598,5294,1,0,0,0,600,5313,1,0,0,0,602,
5326,1,0,0,0,604,5334,1,0,0,0,606,5336,1,0,0,0,608,5347,1,0,0,0,610,5351,
1,0,0,0,612,5356,1,0,0,0,614,5363,1,0,0,0,616,5365,1,0,0,0,618,5386,1,0,
0,0,620,5388,1,0,0,0,622,5394,1,0,0,0,624,5402,1,0,0,0,626,5418,1,0,0,0,
628,5420,1,0,0,0,630,5426,1,0,0,0,632,5447,1,0,0,0,634,5456,1,0,0,0,636,
5462,1,0,0,0,638,5464,1,0,0,0,640,5480,1,0,0,0,642,5482,1,0,0,0,644,5487,
1,0,0,0,646,5489,1,0,0,0,648,5504,1,0,0,0,650,5512,1,0,0,0,652,5515,1,0,
0,0,654,5524,1,0,0,0,656,5565,1,0,0,0,658,5575,1,0,0,0,660,5582,1,0,0,0,
662,5584,1,0,0,0,664,5599,1,0,0,0,666,5601,1,0,0,0,668,5604,1,0,0,0,670,
5612,1,0,0,0,672,5619,1,0,0,0,674,5625,1,0,0,0,676,5663,1,0,0,0,678,5677,
1,0,0,0,680,5691,1,0,0,0,682,5715,1,0,0,0,684,5722,1,0,0,0,686,5727,1,0,
0,0,688,5735,1,0,0,0,690,5738,1,0,0,0,692,5742,1,0,0,0,694,5749,1,0,0,0,
696,5785,1,0,0,0,698,5792,1,0,0,0,700,5794,1,0,0,0,702,5807,1,0,0,0,704,
5809,1,0,0,0,706,5854,1,0,0,0,708,5856,1,0,0,0,710,5891,1,0,0,0,712,5893,
1,0,0,0,714,5895,1,0,0,0,716,5897,1,0,0,0,718,5905,1,0,0,0,720,5919,1,0,
0,0,722,6389,1,0,0,0,724,6393,1,0,0,0,726,6398,1,0,0,0,728,6457,1,0,0,0,
730,6461,1,0,0,0,732,6680,1,0,0,0,734,6682,1,0,0,0,736,6690,1,0,0,0,738,
6706,1,0,0,0,740,6713,1,0,0,0,742,6715,1,0,0,0,744,6906,1,0,0,0,746,6908,
1,0,0,0,748,6916,1,0,0,0,750,6924,1,0,0,0,752,6953,1,0,0,0,754,6955,1,0,
0,0,756,6964,1,0,0,0,758,6972,1,0,0,0,760,7011,1,0,0,0,762,7025,1,0,0,0,
764,7027,1,0,0,0,766,7047,1,0,0,0,768,7049,1,0,0,0,770,7062,1,0,0,0,772,
7066,1,0,0,0,774,7068,1,0,0,0,776,7073,1,0,0,0,778,7075,1,0,0,0,780,7082,
1,0,0,0,782,7084,1,0,0,0,784,7091,1,0,0,0,786,7143,1,0,0,0,788,7148,1,0,
0,0,790,7160,1,0,0,0,792,7162,1,0,0,0,794,7174,1,0,0,0,796,7182,1,0,0,0,
798,7184,1,0,0,0,800,7216,1,0,0,0,802,7218,1,0,0,0,804,7221,1,0,0,0,806,
7229,1,0,0,0,808,7232,1,0,0,0,810,7236,1,0,0,0,812,7251,1,0,0,0,814,7255,
1,0,0,0,816,7257,1,0,0,0,818,7268,1,0,0,0,820,7273,1,0,0,0,822,7287,1,0,
0,0,824,7295,1,0,0,0,826,7297,1,0,0,0,828,7303,1,0,0,0,830,7308,1,0,0,0,
832,7315,1,0,0,0,834,7343,1,0,0,0,836,7345,1,0,0,0,838,7424,1,0,0,0,840,
7426,1,0,0,0,842,7428,1,0,0,0,844,7452,1,0,0,0,846,7457,1,0,0,0,848,7472,
1,0,0,0,850,7484,1,0,0,0,852,7486,1,0,0,0,854,7494,1,0,0,0,856,7496,1,0,
0,0,858,7501,1,0,0,0,860,7506,1,0,0,0,862,7510,1,0,0,0,864,7514,1,0,0,0,
866,7518,1,0,0,0,868,7522,1,0,0,0,870,7529,1,0,0,0,872,7531,1,0,0,0,874,
7534,1,0,0,0,876,7544,1,0,0,0,878,7562,1,0,0,0,880,7573,1,0,0,0,882,7575,
1,0,0,0,884,7583,1,0,0,0,886,7588,1,0,0,0,888,7593,1,0,0,0,890,7595,1,0,
0,0,892,7606,1,0,0,0,894,7612,1,0,0,0,896,7641,1,0,0,0,898,7648,1,0,0,0,
900,7660,1,0,0,0,902,7662,1,0,0,0,904,7670,1,0,0,0,906,7694,1,0,0,0,908,
7696,1,0,0,0,910,7698,1,0,0,0,912,7706,1,0,0,0,914,7722,1,0,0,0,916,7733,
1,0,0,0,918,7738,1,0,0,0,920,7740,1,0,0,0,922,7771,1,0,0,0,924,7790,1,0,
0,0,926,7803,1,0,0,0,928,7810,1,0,0,0,930,7821,1,0,0,0,932,7823,1,0,0,0,
934,7834,1,0,0,0,936,7848,1,0,0,0,938,7852,1,0,0,0,940,7858,1,0,0,0,942,
7860,1,0,0,0,944,7869,1,0,0,0,946,7887,1,0,0,0,948,7889,1,0,0,0,950,7892,
1,0,0,0,952,7900,1,0,0,0,954,7908,1,0,0,0,956,7917,1,0,0,0,958,7925,1,0,
0,0,960,7929,1,0,0,0,962,7939,1,0,0,0,964,7962,1,0,0,0,966,7966,1,0,0,0,
968,7994,1,0,0,0,970,8009,1,0,0,0,972,8011,1,0,0,0,974,8014,1,0,0,0,976,
8020,1,0,0,0,978,8028,1,0,0,0,980,8040,1,0,0,0,982,8044,1,0,0,0,984,8054,
1,0,0,0,986,8058,1,0,0,0,988,8074,1,0,0,0,990,8078,1,0,0,0,992,8083,1,0,
0,0,994,8085,1,0,0,0,996,8095,1,0,0,0,998,8099,1,0,0,0,1000,8101,1,0,0,0,
1002,8105,1,0,0,0,1004,8113,1,0,0,0,1006,8129,1,0,0,0,1008,8133,1,0,0,0,
1010,8158,1,0,0,0,1012,8160,1,0,0,0,1014,8169,1,0,0,0,1016,8171,1,0,0,0,
1018,8178,1,0,0,0,1020,8182,1,0,0,0,1022,8184,1,0,0,0,1024,8186,1,0,0,0,
1026,8192,1,0,0,0,1028,8194,1,0,0,0,1030,8207,1,0,0,0,1032,8209,1,0,0,0,
1034,8212,1,0,0,0,1036,8217,1,0,0,0,1038,8222,1,0,0,0,1040,8231,1,0,0,0,
1042,8237,1,0,0,0,1044,8241,1,0,0,0,1046,8244,1,0,0,0,1048,8248,1,0,0,0,
1050,8252,1,0,0,0,1052,8267,1,0,0,0,1054,8269,1,0,0,0,1056,8286,1,0,0,0,
1058,8297,1,0,0,0,1060,8299,1,0,0,0,1062,8355,1,0,0,0,1064,8379,1,0,0,0,
1066,8390,1,0,0,0,1068,8393,1,0,0,0,1070,8415,1,0,0,0,1072,8417,1,0,0,0,
1074,8428,1,0,0,0,1076,8442,1,0,0,0,1078,8444,1,0,0,0,1080,8452,1,0,0,0,
1082,8459,1,0,0,0,1084,8472,1,0,0,0,1086,8484,1,0,0,0,1088,8486,1,0,0,0,
1090,8489,1,0,0,0,1092,8503,1,0,0,0,1094,8508,1,0,0,0,1096,8513,1,0,0,0,
1098,8523,1,0,0,0,1100,8527,1,0,0,0,1102,8529,1,0,0,0,1104,8537,1,0,0,0,
1106,8541,1,0,0,0,1108,8562,1,0,0,0,1110,8570,1,0,0,0,1112,8580,1,0,0,0,
1114,8592,1,0,0,0,1116,8594,1,0,0,0,1118,8608,1,0,0,0,1120,8628,1,0,0,0,
1122,8637,1,0,0,0,1124,8653,1,0,0,0,1126,8659,1,0,0,0,1128,8665,1,0,0,0,
1130,8677,1,0,0,0,1132,8695,1,0,0,0,1134,8702,1,0,0,0,1136,8706,1,0,0,0,
1138,8710,1,0,0,0,1140,8712,1,0,0,0,1142,8718,1,0,0,0,1144,8721,1,0,0,0,
1146,8728,1,0,0,0,1148,8741,1,0,0,0,1150,8745,1,0,0,0,1152,8747,1,0,0,0,
1154,8756,1,0,0,0,1156,8765,1,0,0,0,1158,8793,1,0,0,0,1160,8795,1,0,0,0,
1162,8805,1,0,0,0,1164,8807,1,0,0,0,1166,8809,1,0,0,0,1168,8813,1,0,0,0,
1170,8821,1,0,0,0,1172,8829,1,0,0,0,1174,8837,1,0,0,0,1176,8851,1,0,0,0,
1178,8860,1,0,0,0,1180,8864,1,0,0,0,1182,8868,1,0,0,0,1184,8894,1,0,0,0,
1186,8908,1,0,0,0,1188,8923,1,0,0,0,1190,8933,1,0,0,0,1192,8937,1,0,0,0,
1194,8945,1,0,0,0,1196,8953,1,0,0,0,1198,8959,1,0,0,0,1200,8963,1,0,0,0,
1202,8970,1,0,0,0,1204,8975,1,0,0,0,1206,8990,1,0,0,0,1208,9070,1,0,0,0,
1210,9072,1,0,0,0,1212,9074,1,0,0,0,1214,9104,1,0,0,0,1216,9108,1,0,0,0,
1218,9287,1,0,0,0,1220,9294,1,0,0,0,1222,9307,1,0,0,0,1224,9309,1,0,0,0,
1226,9314,1,0,0,0,1228,9322,1,0,0,0,1230,9327,1,0,0,0,1232,9334,1,0,0,0,
1234,9351,1,0,0,0,1236,9353,1,0,0,0,1238,9363,1,0,0,0,1240,9372,1,0,0,0,
1242,9377,1,0,0,0,1244,9379,1,0,0,0,1246,9387,1,0,0,0,1248,9397,1,0,0,0,
1250,9399,1,0,0,0,1252,9408,1,0,0,0,1254,9414,1,0,0,0,1256,9429,1,0,0,0,
1258,9437,1,0,0,0,1260,9446,1,0,0,0,1262,9458,1,0,0,0,1264,9472,1,0,0,0,
1266,9474,1,0,0,0,1268,9481,1,0,0,0,1270,9487,1,0,0,0,1272,9491,1,0,0,0,
1274,9493,1,0,0,0,1276,9501,1,0,0,0,1278,9509,1,0,0,0,1280,9523,1,0,0,0,
1282,9525,1,0,0,0,1284,9533,1,0,0,0,1286,9546,1,0,0,0,1288,9548,1,0,0,0,
1290,9556,1,0,0,0,1292,9563,1,0,0,0,1294,9576,1,0,0,0,1296,9586,1,0,0,0,
1298,9588,1,0,0,0,1300,9590,1,0,0,0,1302,9604,1,0,0,0,1304,9634,1,0,0,0,
1306,9643,1,0,0,0,1308,9650,1,0,0,0,1310,9652,1,0,0,0,1312,9659,1,0,0,0,
1314,9663,1,0,0,0,1316,9671,1,0,0,0,1318,9675,1,0,0,0,1320,9677,1,0,0,0,
1322,9696,1,0,0,0,1324,9700,1,0,0,0,1326,9703,1,0,0,0,1328,9710,1,0,0,0,
1330,9715,1,0,0,0,1332,9717,1,0,0,0,1334,9733,1,0,0,0,1336,9735,1,0,0,0,
1338,9743,1,0,0,0,1340,9747,1,0,0,0,1342,9755,1,0,0,0,1344,9757,1,0,0,0,
1346,9759,1,0,0,0,1348,9768,1,0,0,0,1350,9802,1,0,0,0,1352,9804,1,0,0,0,
1354,9806,1,0,0,0,1356,9808,1,0,0,0,1358,9810,1,0,0,0,1360,9812,1,0,0,0,
1362,9826,1,0,0,0,1364,9831,1,0,0,0,1366,9838,1,0,0,0,1368,9840,1,0,0,0,
1370,9845,1,0,0,0,1372,9847,1,0,0,0,1374,9861,1,0,0,0,1376,9867,1,0,0,0,
1378,9873,1,0,0,0,1380,9879,1,0,0,0,1382,9887,1,0,0,0,1384,9896,1,0,0,0,
1386,9898,1,0,0,0,1388,9900,1,0,0,0,1390,9954,1,0,0,0,1392,9956,1,0,0,0,
1394,9958,1,0,0,0,1396,9960,1,0,0,0,1398,9962,1,0,0,0,1400,9969,1,0,0,0,
1402,9992,1,0,0,0,1404,9994,1,0,0,0,1406,10000,1,0,0,0,1408,10004,1,0,0,
0,1410,10006,1,0,0,0,1412,10013,1,0,0,0,1414,10020,1,0,0,0,1416,10023,1,
0,0,0,1418,10027,1,0,0,0,1420,10034,1,0,0,0,1422,10036,1,0,0,0,1424,10060,
1,0,0,0,1426,10062,1,0,0,0,1428,10069,1,0,0,0,1430,10071,1,0,0,0,1432,10079,
1,0,0,0,1434,10082,1,0,0,0,1436,10086,1,0,0,0,1438,10088,1,0,0,0,1440,10092,
1,0,0,0,1442,10094,1,0,0,0,1444,10099,1,0,0,0,1446,10104,1,0,0,0,1448,10110,
1,0,0,0,1450,10114,1,0,0,0,1452,10116,1,0,0,0,1454,10121,1,0,0,0,1456,10151,
1,0,0,0,1458,10153,1,0,0,0,1460,10171,1,0,0,0,1462,10175,1,0,0,0,1464,10177,
1,0,0,0,1466,10182,1,0,0,0,1468,10191,1,0,0,0,1470,10193,1,0,0,0,1472,10201,
1,0,0,0,1474,10205,1,0,0,0,1476,10207,1,0,0,0,1478,10211,1,0,0,0,1480,10222,
1,0,0,0,1482,10239,1,0,0,0,1484,10245,1,0,0,0,1486,10247,1,0,0,0,1488,10257,
1,0,0,0,1490,10260,1,0,0,0,1492,10264,1,0,0,0,1494,10272,1,0,0,0,1496,10274,
1,0,0,0,1498,10277,1,0,0,0,1500,10282,1,0,0,0,1502,10287,1,0,0,0,1504,10309,
1,0,0,0,1506,10323,1,0,0,0,1508,10327,1,0,0,0,1510,10332,1,0,0,0,1512,10334,
1,0,0,0,1514,10336,1,0,0,0,1516,10348,1,0,0,0,1518,10350,1,0,0,0,1520,10355,
1,0,0,0,1522,10357,1,0,0,0,1524,10375,1,0,0,0,1526,10403,1,0,0,0,1528,10413,
1,0,0,0,1530,10422,1,0,0,0,1532,10427,1,0,0,0,1534,10429,1,0,0,0,1536,10433,
1,0,0,0,1538,10441,1,0,0,0,1540,10449,1,0,0,0,1542,10451,1,0,0,0,1544,10458,
1,0,0,0,1546,10461,1,0,0,0,1548,10477,1,0,0,0,1550,10479,1,0,0,0,1552,10493,
1,0,0,0,1554,10495,1,0,0,0,1556,10522,1,0,0,0,1558,10524,1,0,0,0,1560,10535,
1,0,0,0,1562,10541,1,0,0,0,1564,10545,1,0,0,0,1566,10547,1,0,0,0,1568,10555,
1,0,0,0,1570,10560,1,0,0,0,1572,10579,1,0,0,0,1574,10581,1,0,0,0,1576,10586,
1,0,0,0,1578,10590,1,0,0,0,1580,10593,1,0,0,0,1582,10597,1,0,0,0,1584,10607,
1,0,0,0,1586,10621,1,0,0,0,1588,10625,1,0,0,0,1590,10630,1,0,0,0,1592,10633,
1,0,0,0,1594,10637,1,0,0,0,1596,10642,1,0,0,0,1598,10653,1,0,0,0,1600,10657,
1,0,0,0,1602,10661,1,0,0,0,1604,10665,1,0,0,0,1606,10670,1,0,0,0,1608,10674,
1,0,0,0,1610,10676,1,0,0,0,1612,10678,1,0,0,0,1614,10686,1,0,0,0,1616,10688,
1,0,0,0,1618,10690,1,0,0,0,1620,10692,1,0,0,0,1622,10694,1,0,0,0,1624,10702,
1,0,0,0,1626,1627,3,4,2,0,1627,1628,5,0,0,1,1628,1,1,0,0,0,1629,1630,3,1398,
699,0,1630,3,1,0,0,0,1631,1632,3,6,3,0,1632,5,1,0,0,0,1633,1635,3,8,4,0,
1634,1636,5,7,0,0,1635,1634,1,0,0,0,1635,1636,1,0,0,0,1636,1638,1,0,0,0,
1637,1633,1,0,0,0,1638,1641,1,0,0,0,1639,1637,1,0,0,0,1639,1640,1,0,0,0,
1640,7,1,0,0,0,1641,1639,1,0,0,0,1642,1768,3,452,226,0,1643,1768,3,826,413,
0,1644,1768,3,816,408,0,1645,1768,3,818,409,0,1646,1768,3,578,289,0,1647,
1768,3,832,416,0,1648,1768,3,478,239,0,1649,1768,3,322,161,0,1650,1768,3,
328,164,0,1651,1768,3,338,169,0,1652,1768,3,364,182,0,1653,1768,3,670,335,
0,1654,1768,3,38,19,0,1655,1768,3,728,364,0,1656,1768,3,732,366,0,1657,1768,
3,744,372,0,1658,1768,3,734,367,0,1659,1768,3,742,371,0,1660,1768,3,384,
192,0,1661,1768,3,280,140,0,1662,1768,3,828,414,0,1663,1768,3,96,48,0,1664,
1768,3,720,360,0,1665,1768,3,134,67,0,1666,1768,3,752,376,0,1667,1768,3,
32,16,0,1668,1768,3,28,14,0,1669,1768,3,760,380,0,1670,1768,3,262,131,0,
1671,1768,3,838,419,0,1672,1768,3,836,418,0,1673,1768,3,380,190,0,1674,1768,
3,850,425,0,1675,1768,3,12,6,0,1676,1768,3,92,46,0,1677,1768,3,140,70,0,
1678,1768,3,844,422,0,1679,1768,3,534,267,0,1680,1768,3,86,43,0,1681,1768,
3,142,71,0,1682,1768,3,400,200,0,1683,1768,3,264,132,0,1684,1768,3,456,228,
0,1685,1768,3,696,348,0,1686,1768,3,842,421,0,1687,1768,3,830,415,0,1688,
1768,3,316,158,0,1689,1768,3,330,165,0,1690,1768,3,356,178,0,1691,1768,3,
366,183,0,1692,1768,3,616,308,0,1693,1768,3,36,18,0,1694,1768,3,270,135,
0,1695,1768,3,482,241,0,1696,1768,3,496,248,0,1697,1768,3,746,373,0,1698,
1768,3,498,249,0,1699,1768,3,382,191,0,1700,1768,3,296,148,0,1701,1768,3,
42,21,0,1702,1768,3,278,139,0,1703,1768,3,172,86,0,1704,1768,3,754,377,0,
1705,1768,3,260,130,0,1706,1768,3,310,155,0,1707,1768,3,704,352,0,1708,1768,
3,404,202,0,1709,1768,3,444,222,0,1710,1768,3,14,7,0,1711,1768,3,26,13,0,
1712,1768,3,374,187,0,1713,1768,3,804,402,0,1714,1768,3,900,450,0,1715,1768,
3,952,476,0,1716,1768,3,458,229,0,1717,1768,3,928,464,0,1718,1768,3,94,47,
0,1719,1768,3,690,345,0,1720,1768,3,700,350,0,1721,1768,3,504,252,0,1722,
1768,3,506,253,0,1723,1768,3,508,254,0,1724,1768,3,512,256,0,1725,1768,3,
762,381,0,1726,1768,3,314,157,0,1727,1768,3,708,354,0,1728,1768,3,34,17,
0,1729,1768,3,378,189,0,1730,1768,3,820,410,0,1731,1768,3,896,448,0,1732,
1768,3,878,439,0,1733,1768,3,544,272,0,1734,1768,3,552,276,0,1735,1768,3,
570,285,0,1736,1768,3,368,184,0,1737,1768,3,588,294,0,1738,1768,3,902,451,
0,1739,1768,3,920,460,0,1740,1768,3,782,391,0,1741,1768,3,276,138,0,1742,
1768,3,802,401,0,1743,1768,3,932,466,0,1744,1768,3,778,389,0,1745,1768,3,
890,445,0,1746,1768,3,510,255,0,1747,1768,3,710,355,0,1748,1768,3,678,339,
0,1749,1768,3,676,338,0,1750,1768,3,680,340,0,1751,1768,3,722,361,0,1752,
1768,3,554,277,0,1753,1768,3,572,286,0,1754,1768,3,764,382,0,1755,1768,3,
538,269,0,1756,1768,3,960,480,0,1757,1768,3,786,393,0,1758,1768,3,530,265,
0,1759,1768,3,784,392,0,1760,1768,3,942,471,0,1761,1768,3,848,424,0,1762,
1768,3,74,37,0,1763,1768,3,50,25,0,1764,1768,3,84,42,0,1765,1768,3,798,399,
0,1766,1768,3,10,5,0,1767,1642,1,0,0,0,1767,1643,1,0,0,0,1767,1644,1,0,0,
0,1767,1645,1,0,0,0,1767,1646,1,0,0,0,1767,1647,1,0,0,0,1767,1648,1,0,0,
0,1767,1649,1,0,0,0,1767,1650,1,0,0,0,1767,1651,1,0,0,0,1767,1652,1,0,0,
0,1767,1653,1,0,0,0,1767,1654,1,0,0,0,1767,1655,1,0,0,0,1767,1656,1,0,0,
0,1767,1657,1,0,0,0,1767,1658,1,0,0,0,1767,1659,1,0,0,0,1767,1660,1,0,0,
0,1767,1661,1,0,0,0,1767,1662,1,0,0,0,1767,1663,1,0,0,0,1767,1664,1,0,0,
0,1767,1665,1,0,0,0,1767,1666,1,0,0,0,1767,1667,1,0,0,0,1767,1668,1,0,0,
0,1767,1669,1,0,0,0,1767,1670,1,0,0,0,1767,1671,1,0,0,0,1767,1672,1,0,0,
0,1767,1673,1,0,0,0,1767,1674,1,0,0,0,1767,1675,1,0,0,0,1767,1676,1,0,0,
0,1767,1677,1,0,0,0,1767,1678,1,0,0,0,1767,1679,1,0,0,0,1767,1680,1,0,0,
0,1767,1681,1,0,0,0,1767,1682,1,0,0,0,1767,1683,1,0,0,0,1767,1684,1,0,0,
0,1767,1685,1,0,0,0,1767,1686,1,0,0,0,1767,1687,1,0,0,0,1767,1688,1,0,0,
0,1767,1689,1,0,0,0,1767,1690,1,0,0,0,1767,1691,1,0,0,0,1767,1692,1,0,0,
0,1767,1693,1,0,0,0,1767,1694,1,0,0,0,1767,1695,1,0,0,0,1767,1696,1,0,0,
0,1767,1697,1,0,0,0,1767,1698,1,0,0,0,1767,1699,1,0,0,0,1767,1700,1,0,0,
0,1767,1701,1,0,0,0,1767,1702,1,0,0,0,1767,1703,1,0,0,0,1767,1704,1,0,0,
0,1767,1705,1,0,0,0,1767,1706,1,0,0,0,1767,1707,1,0,0,0,1767,1708,1,0,0,
0,1767,1709,1,0,0,0,1767,1710,1,0,0,0,1767,1711,1,0,0,0,1767,1712,1,0,0,
0,1767,1713,1,0,0,0,1767,1714,1,0,0,0,1767,1715,1,0,0,0,1767,1716,1,0,0,
0,1767,1717,1,0,0,0,1767,1718,1,0,0,0,1767,1719,1,0,0,0,1767,1720,1,0,0,
0,1767,1721,1,0,0,0,1767,1722,1,0,0,0,1767,1723,1,0,0,0,1767,1724,1,0,0,
0,1767,1725,1,0,0,0,1767,1726,1,0,0,0,1767,1727,1,0,0,0,1767,1728,1,0,0,
0,1767,1729,1,0,0,0,1767,1730,1,0,0,0,1767,1731,1,0,0,0,1767,1732,1,0,0,
0,1767,1733,1,0,0,0,1767,1734,1,0,0,0,1767,1735,1,0,0,0,1767,1736,1,0,0,
0,1767,1737,1,0,0,0,1767,1738,1,0,0,0,1767,1739,1,0,0,0,1767,1740,1,0,0,
0,1767,1741,1,0,0,0,1767,1742,1,0,0,0,1767,1743,1,0,0,0,1767,1744,1,0,0,
0,1767,1745,1,0,0,0,1767,1746,1,0,0,0,1767,1747,1,0,0,0,1767,1748,1,0,0,
0,1767,1749,1,0,0,0,1767,1750,1,0,0,0,1767,1751,1,0,0,0,1767,1752,1,0,0,
0,1767,1753,1,0,0,0,1767,1754,1,0,0,0,1767,1755,1,0,0,0,1767,1756,1,0,0,
0,1767,1757,1,0,0,0,1767,1758,1,0,0,0,1767,1759,1,0,0,0,1767,1760,1,0,0,
0,1767,1761,1,0,0,0,1767,1762,1,0,0,0,1767,1763,1,0,0,0,1767,1764,1,0,0,
0,1767,1765,1,0,0,0,1767,1766,1,0,0,0,1768,9,1,0,0,0,1769,1771,5,668,0,0,
1770,1772,5,669,0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,11,1,0,0,0,
1773,1774,5,433,0,0,1774,1775,3,1212,606,0,1775,13,1,0,0,0,1776,1777,5,46,
0,0,1777,1778,5,311,0,0,1778,1779,3,1368,684,0,1779,1780,3,16,8,0,1780,1781,
3,18,9,0,1781,15,1,0,0,0,1782,1785,5,105,0,0,1783,1785,1,0,0,0,1784,1782,
1,0,0,0,1784,1783,1,0,0,0,1785,17,1,0,0,0,1786,1788,3,24,12,0,1787,1786,
1,0,0,0,1788,1791,1,0,0,0,1789,1787,1,0,0,0,1789,1790,1,0,0,0,1790,19,1,
0,0,0,1791,1789,1,0,0,0,1792,1794,3,22,11,0,1793,1792,1,0,0,0,1794,1797,
1,0,0,0,1795,1793,1,0,0,0,1795,1796,1,0,0,0,1796,21,1,0,0,0,1797,1795,1,
0,0,0,1798,1801,5,280,0,0,1799,1802,3,1360,680,0,1800,1802,5,78,0,0,1801,
1799,1,0,0,0,1801,1800,1,0,0,0,1802,1817,1,0,0,0,1803,1804,7,0,0,0,1804,
1805,5,280,0,0,1805,1817,3,1360,680,0,1806,1817,5,228,0,0,1807,1808,5,164,
0,0,1808,1809,5,74,0,0,1809,1817,3,1366,683,0,1810,1811,5,364,0,0,1811,1812,
5,361,0,0,1812,1817,3,1360,680,0,1813,1814,5,99,0,0,1814,1817,3,1372,686,
0,1815,1817,3,1384,692,0,1816,1798,1,0,0,0,1816,1803,1,0,0,0,1816,1806,1,
0,0,0,1816,1807,1,0,0,0,1816,1810,1,0,0,0,1816,1813,1,0,0,0,1816,1815,1,
0,0,0,1817,23,1,0,0,0,1818,1829,3,22,11,0,1819,1820,5,341,0,0,1820,1829,
3,1358,679,0,1821,1822,5,134,0,0,1822,1829,3,1372,686,0,1823,1824,5,311,
0,0,1824,1829,3,1372,686,0,1825,1826,5,68,0,0,1826,1827,7,1,0,0,1827,1829,
3,1372,686,0,1828,1818,1,0,0,0,1828,1819,1,0,0,0,1828,1821,1,0,0,0,1828,
1823,1,0,0,0,1828,1825,1,0,0,0,1829,25,1,0,0,0,1830,1831,5,46,0,0,1831,1832,
5,99,0,0,1832,1833,3,1368,684,0,1833,1834,3,16,8,0,1834,1835,3,18,9,0,1835,
27,1,0,0,0,1836,1837,5,138,0,0,1837,1838,7,2,0,0,1838,1839,3,1370,685,0,
1839,1840,3,16,8,0,1840,1841,3,20,10,0,1841,29,1,0,0,0,1842,1847,1,0,0,0,
1843,1844,5,68,0,0,1844,1845,5,175,0,0,1845,1847,3,1342,671,0,1846,1842,
1,0,0,0,1846,1843,1,0,0,0,1847,31,1,0,0,0,1848,1849,5,138,0,0,1849,1851,
7,2,0,0,1850,1852,5,30,0,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,
1,0,0,0,1853,1854,3,1370,685,0,1854,1855,3,30,15,0,1855,1856,3,80,40,0,1856,
33,1,0,0,0,1857,1858,5,191,0,0,1858,1861,7,3,0,0,1859,1860,5,220,0,0,1860,
1862,5,389,0,0,1861,1859,1,0,0,0,1861,1862,1,0,0,0,1862,1863,1,0,0,0,1863,
1864,3,1372,686,0,1864,35,1,0,0,0,1865,1866,5,46,0,0,1866,1867,5,66,0,0,
1867,1868,3,1368,684,0,1868,1869,3,16,8,0,1869,1870,3,18,9,0,1870,37,1,0,
0,0,1871,1872,5,138,0,0,1872,1873,5,66,0,0,1873,1874,3,1370,685,0,1874,1875,
3,40,20,0,1875,1876,5,99,0,0,1876,1877,3,1372,686,0,1877,39,1,0,0,0,1878,
1879,7,4,0,0,1879,41,1,0,0,0,1880,1881,5,46,0,0,1881,1885,5,316,0,0,1882,
1883,5,220,0,0,1883,1884,5,77,0,0,1884,1886,5,389,0,0,1885,1882,1,0,0,0,
1885,1886,1,0,0,0,1886,1892,1,0,0,0,1887,1888,3,44,22,0,1888,1889,5,106,
0,0,1889,1890,3,1370,685,0,1890,1893,1,0,0,0,1891,1893,3,1374,687,0,1892,
1887,1,0,0,0,1892,1891,1,0,0,0,1893,1894,1,0,0,0,1894,1895,3,46,23,0,1895,
43,1,0,0,0,1896,1899,3,1374,687,0,1897,1899,1,0,0,0,1898,1896,1,0,0,0,1898,
1897,1,0,0,0,1899,45,1,0,0,0,1900,1902,3,48,24,0,1901,1900,1,0,0,0,1902,
1905,1,0,0,0,1903,1901,1,0,0,0,1903,1904,1,0,0,0,1904,47,1,0,0,0,1905,1903,
1,0,0,0,1906,1913,3,172,86,0,1907,1913,3,588,294,0,1908,1913,3,278,139,0,
1909,1913,3,404,202,0,1910,1913,3,552,276,0,1911,1913,3,798,399,0,1912,1906,
1,0,0,0,1912,1907,1,0,0,0,1912,1908,1,0,0,0,1912,1909,1,0,0,0,1912,1910,
1,0,0,0,1912,1911,1,0,0,0,1913,49,1,0,0,0,1914,1916,5,326,0,0,1915,1917,
7,5,0,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1919,
3,52,26,0,1919,51,1,0,0,0,1920,1921,5,349,0,0,1921,1929,3,792,396,0,1922,
1923,5,325,0,0,1923,1924,5,154,0,0,1924,1925,5,36,0,0,1925,1926,5,349,0,
0,1926,1929,3,792,396,0,1927,1929,3,56,28,0,1928,1920,1,0,0,0,1928,1922,
1,0,0,0,1928,1927,1,0,0,0,1929,53,1,0,0,0,1930,1931,3,58,29,0,1931,1932,
7,6,0,0,1932,1933,3,60,30,0,1933,55,1,0,0,0,1934,1960,3,54,27,0,1935,1936,
3,58,29,0,1936,1937,5,64,0,0,1937,1938,5,434,0,0,1938,1960,1,0,0,0,1939,
1940,5,411,0,0,1940,1941,5,379,0,0,1941,1960,3,68,34,0,1942,1943,5,152,0,
0,1943,1960,3,1360,680,0,1944,1945,5,316,0,0,1945,1960,3,1360,680,0,1946,
1947,5,260,0,0,1947,1960,3,70,35,0,1948,1949,5,311,0,0,1949,1960,3,72,36,
0,1950,1951,5,325,0,0,1951,1952,5,106,0,0,1952,1960,3,72,36,0,1953,1954,
5,376,0,0,1954,1955,5,272,0,0,1955,1960,3,1230,615,0,1956,1957,5,349,0,0,
1957,1958,5,330,0,0,1958,1960,3,1360,680,0,1959,1934,1,0,0,0,1959,1935,1,
0,0,0,1959,1939,1,0,0,0,1959,1942,1,0,0,0,1959,1944,1,0,0,0,1959,1946,1,
0,0,0,1959,1948,1,0,0,0,1959,1950,1,0,0,0,1959,1953,1,0,0,0,1959,1956,1,
0,0,0,1960,57,1,0,0,0,1961,1966,3,1374,687,0,1962,1963,5,11,0,0,1963,1965,
3,1374,687,0,1964,1962,1,0,0,0,1965,1968,1,0,0,0,1966,1964,1,0,0,0,1966,
1967,1,0,0,0,1967,59,1,0,0,0,1968,1966,1,0,0,0,1969,1974,3,62,31,0,1970,
1971,5,6,0,0,1971,1973,3,62,31,0,1972,1970,1,0,0,0,1973,1976,1,0,0,0,1974,
1972,1,0,0,0,1974,1975,1,0,0,0,1975,61,1,0,0,0,1976,1974,1,0,0,0,1977,1980,
3,66,33,0,1978,1980,3,292,146,0,1979,1977,1,0,0,0,1979,1978,1,0,0,0,1980,
63,1,0,0,0,1981,1982,5,293,0,0,1982,1987,7,7,0,0,1983,1984,5,303,0,0,1984,
1987,5,293,0,0,1985,1987,5,323,0,0,1986,1981,1,0,0,0,1986,1983,1,0,0,0,1986,
1985,1,0,0,0,1987,65,1,0,0,0,1988,1993,5,96,0,0,1989,1993,5,60,0,0,1990,
1993,5,80,0,0,1991,1993,3,72,36,0,1992,1988,1,0,0,0,1992,1989,1,0,0,0,1992,
1990,1,0,0,0,1992,1991,1,0,0,0,1993,67,1,0,0,0,1994,2010,3,1360,680,0,1995,
2010,3,1384,692,0,1996,1997,3,1154,577,0,1997,1998,3,1360,680,0,1998,1999,
3,1158,579,0,1999,2010,1,0,0,0,2000,2001,3,1154,577,0,2001,2002,5,2,0,0,
2002,2003,3,1358,679,0,2003,2004,5,3,0,0,2004,2005,3,1360,680,0,2005,2010,
1,0,0,0,2006,2010,3,292,146,0,2007,2010,5,53,0,0,2008,2010,5,245,0,0,2009,
1994,1,0,0,0,2009,1995,1,0,0,0,2009,1996,1,0,0,0,2009,2000,1,0,0,0,2009,
2006,1,0,0,0,2009,2007,1,0,0,0,2009,2008,1,0,0,0,2010,69,1,0,0,0,2011,2015,
3,1360,680,0,2012,2015,5,53,0,0,2013,2015,1,0,0,0,2014,2011,1,0,0,0,2014,
2012,1,0,0,0,2014,2013,1,0,0,0,2015,71,1,0,0,0,2016,2019,3,1380,690,0,2017,
2019,3,1360,680,0,2018,2016,1,0,0,0,2018,2017,1,0,0,0,2019,73,1,0,0,0,2020,
2021,5,306,0,0,2021,2022,3,76,38,0,2022,75,1,0,0,0,2023,2032,3,78,39,0,2024,
2025,5,411,0,0,2025,2032,5,379,0,0,2026,2027,5,349,0,0,2027,2028,5,235,0,
0,2028,2032,5,242,0,0,2029,2030,5,325,0,0,2030,2032,5,106,0,0,2031,2023,
1,0,0,0,2031,2024,1,0,0,0,2031,2026,1,0,0,0,2031,2029,1,0,0,0,2032,77,1,
0,0,0,2033,2036,3,58,29,0,2034,2036,5,30,0,0,2035,2033,1,0,0,0,2035,2034,
1,0,0,0,2036,79,1,0,0,0,2037,2038,5,326,0,0,2038,2041,3,52,26,0,2039,2041,
3,74,37,0,2040,2037,1,0,0,0,2040,2039,1,0,0,0,2041,81,1,0,0,0,2042,2043,
5,326,0,0,2043,2046,3,56,28,0,2044,2046,3,74,37,0,2045,2042,1,0,0,0,2045,
2044,1,0,0,0,2046,83,1,0,0,0,2047,2057,5,328,0,0,2048,2058,3,58,29,0,2049,
2050,5,411,0,0,2050,2058,5,379,0,0,2051,2052,5,349,0,0,2052,2053,5,235,0,
0,2053,2058,5,242,0,0,2054,2055,5,325,0,0,2055,2058,5,106,0,0,2056,2058,
5,30,0,0,2057,2048,1,0,0,0,2057,2049,1,0,0,0,2057,2051,1,0,0,0,2057,2054,
1,0,0,0,2057,2056,1,0,0,0,2058,85,1,0,0,0,2059,2060,5,326,0,0,2060,2061,
5,165,0,0,2061,2062,3,88,44,0,2062,2063,3,90,45,0,2063,87,1,0,0,0,2064,2067,
5,30,0,0,2065,2067,3,1336,668,0,2066,2064,1,0,0,0,2066,2065,1,0,0,0,2067,
89,1,0,0,0,2068,2069,7,8,0,0,2069,91,1,0,0,0,2070,2071,5,155,0,0,2071,93,
1,0,0,0,2072,2073,5,187,0,0,2073,2074,7,9,0,0,2074,95,1,0,0,0,2075,2076,
5,138,0,0,2076,2079,5,92,0,0,2077,2078,5,220,0,0,2078,2080,5,389,0,0,2079,
2077,1,0,0,0,2079,2080,1,0,0,0,2080,2081,1,0,0,0,2081,2084,3,1076,538,0,
2082,2085,3,98,49,0,2083,2085,3,100,50,0,2084,2082,1,0,0,0,2084,2083,1,0,
0,0,2085,2185,1,0,0,0,2086,2087,5,138,0,0,2087,2088,5,92,0,0,2088,2089,5,
30,0,0,2089,2090,5,68,0,0,2090,2091,5,344,0,0,2091,2095,3,1342,671,0,2092,
2093,5,274,0,0,2093,2094,5,147,0,0,2094,2096,3,1372,686,0,2095,2092,1,0,
0,0,2095,2096,1,0,0,0,2096,2097,1,0,0,0,2097,2098,5,326,0,0,2098,2099,5,
344,0,0,2099,2100,3,1342,671,0,2100,2101,3,938,469,0,2101,2185,1,0,0,0,2102,
2103,5,138,0,0,2103,2106,5,226,0,0,2104,2105,5,220,0,0,2105,2107,5,389,0,
0,2106,2104,1,0,0,0,2106,2107,1,0,0,0,2107,2108,1,0,0,0,2108,2111,3,1338,
669,0,2109,2112,3,98,49,0,2110,2112,3,102,51,0,2111,2109,1,0,0,0,2111,2110,
1,0,0,0,2112,2185,1,0,0,0,2113,2114,5,138,0,0,2114,2115,5,226,0,0,2115,2116,
5,30,0,0,2116,2117,5,68,0,0,2117,2118,5,344,0,0,2118,2122,3,1342,671,0,2119,
2120,5,274,0,0,2120,2121,5,147,0,0,2121,2123,3,1372,686,0,2122,2119,1,0,
0,0,2122,2123,1,0,0,0,2123,2124,1,0,0,0,2124,2125,5,326,0,0,2125,2126,5,
344,0,0,2126,2127,3,1342,671,0,2127,2128,3,938,469,0,2128,2185,1,0,0,0,2129,
2130,5,138,0,0,2130,2133,5,321,0,0,2131,2132,5,220,0,0,2132,2134,5,389,0,
0,2133,2131,1,0,0,0,2133,2134,1,0,0,0,2134,2135,1,0,0,0,2135,2136,3,1338,
669,0,2136,2137,3,98,49,0,2137,2185,1,0,0,0,2138,2139,5,138,0,0,2139,2142,
5,369,0,0,2140,2141,5,220,0,0,2141,2143,5,389,0,0,2142,2140,1,0,0,0,2142,
2143,1,0,0,0,2143,2144,1,0,0,0,2144,2145,3,1338,669,0,2145,2146,3,98,49,
0,2146,2185,1,0,0,0,2147,2148,5,138,0,0,2148,2149,5,251,0,0,2149,2152,5,
369,0,0,2150,2151,5,220,0,0,2151,2153,5,389,0,0,2152,2150,1,0,0,0,2152,2153,
1,0,0,0,2153,2154,1,0,0,0,2154,2155,3,1338,669,0,2155,2156,3,98,49,0,2156,
2185,1,0,0,0,2157,2158,5,138,0,0,2158,2159,5,251,0,0,2159,2160,5,369,0,0,
2160,2161,5,30,0,0,2161,2162,5,68,0,0,2162,2163,5,344,0,0,2163,2167,3,1342,
671,0,2164,2165,5,274,0,0,2165,2166,5,147,0,0,2166,2168,3,1372,686,0,2167,
2164,1,0,0,0,2167,2168,1,0,0,0,2168,2169,1,0,0,0,2169,2170,5,326,0,0,2170,
2171,5,344,0,0,2171,2172,3,1342,671,0,2172,2173,3,938,469,0,2173,2185,1,
0,0,0,2174,2175,5,138,0,0,2175,2176,5,63,0,0,2176,2179,5,92,0,0,2177,2178,
5,220,0,0,2178,2180,5,389,0,0,2179,2177,1,0,0,0,2179,2180,1,0,0,0,2180,2181,
1,0,0,0,2181,2182,3,1076,538,0,2182,2183,3,98,49,0,2183,2185,1,0,0,0,2184,
2075,1,0,0,0,2184,2086,1,0,0,0,2184,2102,1,0,0,0,2184,2113,1,0,0,0,2184,
2129,1,0,0,0,2184,2138,1,0,0,0,2184,2147,1,0,0,0,2184,2157,1,0,0,0,2184,
2174,1,0,0,0,2185,97,1,0,0,0,2186,2191,3,104,52,0,2187,2188,5,6,0,0,2188,
2190,3,104,52,0,2189,2187,1,0,0,0,2190,2193,1,0,0,0,2191,2189,1,0,0,0,2191,
2192,1,0,0,0,2192,99,1,0,0,0,2193,2191,1,0,0,0,2194,2195,5,435,0,0,2195,
2196,5,278,0,0,2196,2197,3,1338,669,0,2197,2198,3,128,64,0,2198,2203,1,0,
0,0,2199,2200,5,436,0,0,2200,2201,5,278,0,0,2201,2203,3,1338,669,0,2202,
2194,1,0,0,0,2202,2199,1,0,0,0,2203,101,1,0,0,0,2204,2205,5,435,0,0,2205,
2206,5,278,0,0,2206,2207,3,1338,669,0,2207,103,1,0,0,0,2208,2209,5,133,0,
0,2209,2461,3,188,94,0,2210,2211,5,133,0,0,2211,2212,5,220,0,0,2212,2213,
5,77,0,0,2213,2214,5,389,0,0,2214,2461,3,188,94,0,2215,2216,5,133,0,0,2216,
2217,5,44,0,0,2217,2461,3,188,94,0,2218,2219,5,133,0,0,2219,2220,5,44,0,
0,2220,2221,5,220,0,0,2221,2222,5,77,0,0,2222,2223,5,389,0,0,2223,2461,3,
188,94,0,2224,2225,5,138,0,0,2225,2226,3,724,362,0,2226,2227,3,1374,687,
0,2227,2228,3,106,53,0,2228,2461,1,0,0,0,2229,2230,5,138,0,0,2230,2231,3,
724,362,0,2231,2232,3,1374,687,0,2232,2233,5,191,0,0,2233,2234,5,77,0,0,
2234,2235,5,78,0,0,2235,2461,1,0,0,0,2236,2237,5,138,0,0,2237,2238,3,724,
362,0,2238,2239,3,1374,687,0,2239,2240,5,326,0,0,2240,2241,5,77,0,0,2241,
2242,5,78,0,0,2242,2461,1,0,0,0,2243,2244,5,138,0,0,2244,2245,3,724,362,
0,2245,2246,3,1374,687,0,2246,2247,5,191,0,0,2247,2248,5,437,0,0,2248,2461,
1,0,0,0,2249,2250,5,138,0,0,2250,2251,3,724,362,0,2251,2252,3,1374,687,0,
2252,2253,5,191,0,0,2253,2254,5,437,0,0,2254,2255,5,220,0,0,2255,2256,5,
389,0,0,2256,2461,1,0,0,0,2257,2258,5,138,0,0,2258,2259,3,724,362,0,2259,
2260,3,1374,687,0,2260,2261,5,326,0,0,2261,2262,5,335,0,0,2262,2263,3,1366,
683,0,2263,2461,1,0,0,0,2264,2265,5,138,0,0,2265,2266,3,724,362,0,2266,2267,
3,1358,679,0,2267,2268,5,326,0,0,2268,2269,5,335,0,0,2269,2270,3,1366,683,
0,2270,2461,1,0,0,0,2271,2272,5,138,0,0,2272,2273,3,724,362,0,2273,2274,
3,1374,687,0,2274,2275,5,326,0,0,2275,2276,3,116,58,0,2276,2461,1,0,0,0,
2277,2278,5,138,0,0,2278,2279,3,724,362,0,2279,2280,3,1374,687,0,2280,2281,
5,306,0,0,2281,2282,3,116,58,0,2282,2461,1,0,0,0,2283,2284,5,138,0,0,2284,
2285,3,724,362,0,2285,2286,3,1374,687,0,2286,2287,5,326,0,0,2287,2288,5,
338,0,0,2288,2289,3,1374,687,0,2289,2461,1,0,0,0,2290,2291,5,138,0,0,2291,
2292,3,724,362,0,2292,2293,3,1374,687,0,2293,2294,5,133,0,0,2294,2295,5,
438,0,0,2295,2296,3,198,99,0,2296,2297,5,36,0,0,2297,2298,5,219,0,0,2298,
2299,3,284,142,0,2299,2461,1,0,0,0,2300,2301,5,138,0,0,2301,2302,3,724,362,
0,2302,2303,3,1374,687,0,2303,2304,3,124,62,0,2304,2461,1,0,0,0,2305,2306,
5,138,0,0,2306,2307,3,724,362,0,2307,2308,3,1374,687,0,2308,2309,5,191,0,
0,2309,2310,5,219,0,0,2310,2461,1,0,0,0,2311,2312,5,138,0,0,2312,2313,3,
724,362,0,2313,2314,3,1374,687,0,2314,2315,5,191,0,0,2315,2316,5,219,0,0,
2316,2317,5,220,0,0,2317,2318,5,389,0,0,2318,2461,1,0,0,0,2319,2320,5,191,
0,0,2320,2321,3,724,362,0,2321,2322,5,220,0,0,2322,2323,5,389,0,0,2323,2324,
3,1374,687,0,2324,2325,3,108,54,0,2325,2461,1,0,0,0,2326,2327,5,191,0,0,
2327,2328,3,724,362,0,2328,2329,3,1374,687,0,2329,2330,3,108,54,0,2330,2461,
1,0,0,0,2331,2332,5,138,0,0,2332,2333,3,724,362,0,2333,2334,3,1374,687,0,
2334,2335,3,726,363,0,2335,2336,5,353,0,0,2336,2337,3,1120,560,0,2337,2338,
3,110,55,0,2338,2339,3,112,56,0,2339,2461,1,0,0,0,2340,2341,5,138,0,0,2341,
2342,3,724,362,0,2342,2343,3,1374,687,0,2343,2344,3,344,172,0,2344,2461,
1,0,0,0,2345,2346,5,133,0,0,2346,2461,3,208,104,0,2347,2348,5,138,0,0,2348,
2349,5,45,0,0,2349,2350,3,1342,671,0,2350,2351,3,440,220,0,2351,2461,1,0,
0,0,2352,2353,5,365,0,0,2353,2354,5,45,0,0,2354,2461,3,1342,671,0,2355,2356,
5,191,0,0,2356,2357,5,45,0,0,2357,2358,5,220,0,0,2358,2359,5,389,0,0,2359,
2360,3,1342,671,0,2360,2361,3,108,54,0,2361,2461,1,0,0,0,2362,2363,5,191,
0,0,2363,2364,5,45,0,0,2364,2365,3,1342,671,0,2365,2366,3,108,54,0,2366,
2461,1,0,0,0,2367,2368,5,326,0,0,2368,2369,5,372,0,0,2369,2461,5,270,0,0,
2370,2371,5,158,0,0,2371,2372,5,80,0,0,2372,2461,3,1342,671,0,2373,2374,
5,326,0,0,2374,2375,5,372,0,0,2375,2461,5,158,0,0,2376,2377,5,326,0,0,2377,
2461,5,439,0,0,2378,2379,5,326,0,0,2379,2461,5,360,0,0,2380,2381,5,193,0,
0,2381,2382,5,350,0,0,2382,2461,3,1342,671,0,2383,2384,5,193,0,0,2384,2385,
5,139,0,0,2385,2386,5,350,0,0,2386,2461,3,1342,671,0,2387,2388,5,193,0,0,
2388,2389,5,305,0,0,2389,2390,5,350,0,0,2390,2461,3,1342,671,0,2391,2392,
5,193,0,0,2392,2393,5,350,0,0,2393,2461,5,30,0,0,2394,2395,5,193,0,0,2395,
2396,5,350,0,0,2396,2461,5,99,0,0,2397,2398,5,186,0,0,2398,2399,5,350,0,
0,2399,2461,3,1342,671,0,2400,2401,5,186,0,0,2401,2402,5,350,0,0,2402,2461,
5,30,0,0,2403,2404,5,186,0,0,2404,2405,5,350,0,0,2405,2461,5,99,0,0,2406,
2407,5,193,0,0,2407,2408,5,314,0,0,2408,2461,3,1342,671,0,2409,2410,5,193,
0,0,2410,2411,5,139,0,0,2411,2412,5,314,0,0,2412,2461,3,1342,671,0,2413,
2414,5,193,0,0,2414,2415,5,305,0,0,2415,2416,5,314,0,0,2416,2461,3,1342,
671,0,2417,2418,5,186,0,0,2418,2419,5,314,0,0,2419,2461,3,1342,671,0,2420,
2421,5,228,0,0,2421,2461,3,1338,669,0,2422,2423,5,262,0,0,2423,2424,5,228,
0,0,2424,2461,3,1338,669,0,2425,2426,5,268,0,0,2426,2461,3,524,262,0,2427,
2428,5,77,0,0,2428,2461,5,268,0,0,2429,2430,5,275,0,0,2430,2431,5,94,0,0,
2431,2461,3,1370,685,0,2432,2433,5,326,0,0,2433,2434,5,344,0,0,2434,2461,
3,1342,671,0,2435,2436,5,326,0,0,2436,2461,3,116,58,0,2437,2438,5,306,0,
0,2438,2461,3,116,58,0,2439,2440,5,305,0,0,2440,2441,5,219,0,0,2441,2461,
3,114,57,0,2442,2443,5,193,0,0,2443,2444,5,407,0,0,2444,2445,5,242,0,0,2445,
2461,5,320,0,0,2446,2447,5,186,0,0,2447,2448,5,407,0,0,2448,2449,5,242,0,
0,2449,2461,5,320,0,0,2450,2451,5,209,0,0,2451,2452,5,407,0,0,2452,2453,
5,242,0,0,2453,2461,5,320,0,0,2454,2455,5,262,0,0,2455,2456,5,209,0,0,2456,
2457,5,407,0,0,2457,2458,5,242,0,0,2458,2461,5,320,0,0,2459,2461,3,344,172,
0,2460,2208,1,0,0,0,2460,2210,1,0,0,0,2460,2215,1,0,0,0,2460,2218,1,0,0,
0,2460,2224,1,0,0,0,2460,2229,1,0,0,0,2460,2236,1,0,0,0,2460,2243,1,0,0,
0,2460,2249,1,0,0,0,2460,2257,1,0,0,0,2460,2264,1,0,0,0,2460,2271,1,0,0,
0,2460,2277,1,0,0,0,2460,2283,1,0,0,0,2460,2290,1,0,0,0,2460,2300,1,0,0,
0,2460,2305,1,0,0,0,2460,2311,1,0,0,0,2460,2319,1,0,0,0,2460,2326,1,0,0,
0,2460,2331,1,0,0,0,2460,2340,1,0,0,0,2460,2345,1,0,0,0,2460,2347,1,0,0,
0,2460,2352,1,0,0,0,2460,2355,1,0,0,0,2460,2362,1,0,0,0,2460,2367,1,0,0,
0,2460,2370,1,0,0,0,2460,2373,1,0,0,0,2460,2376,1,0,0,0,2460,2378,1,0,0,
0,2460,2380,1,0,0,0,2460,2383,1,0,0,0,2460,2387,1,0,0,0,2460,2391,1,0,0,
0,2460,2394,1,0,0,0,2460,2397,1,0,0,0,2460,2400,1,0,0,0,2460,2403,1,0,0,
0,2460,2406,1,0,0,0,2460,2409,1,0,0,0,2460,2413,1,0,0,0,2460,2417,1,0,0,
0,2460,2420,1,0,0,0,2460,2422,1,0,0,0,2460,2425,1,0,0,0,2460,2427,1,0,0,
0,2460,2429,1,0,0,0,2460,2432,1,0,0,0,2460,2435,1,0,0,0,2460,2437,1,0,0,
0,2460,2439,1,0,0,0,2460,2442,1,0,0,0,2460,2446,1,0,0,0,2460,2450,1,0,0,
0,2460,2454,1,0,0,0,2460,2459,1,0,0,0,2461,105,1,0,0,0,2462,2463,5,326,0,
0,2463,2464,5,53,0,0,2464,2468,3,1164,582,0,2465,2466,5,191,0,0,2466,2468,
5,53,0,0,2467,2462,1,0,0,0,2467,2465,1,0,0,0,2468,107,1,0,0,0,2469,2473,
5,150,0,0,2470,2473,5,308,0,0,2471,2473,1,0,0,0,2472,2469,1,0,0,0,2472,2470,
1,0,0,0,2472,2471,1,0,0,0,2473,109,1,0,0,0,2474,2475,5,43,0,0,2475,2478,
3,524,262,0,2476,2478,1,0,0,0,2477,2474,1,0,0,0,2477,2476,1,0,0,0,2478,111,
1,0,0,0,2479,2480,5,100,0,0,2480,2483,3,1164,582,0,2481,2483,1,0,0,0,2482,
2479,1,0,0,0,2482,2481,1,0,0,0,2483,113,1,0,0,0,2484,2491,5,263,0,0,2485,
2491,5,113,0,0,2486,2491,5,53,0,0,2487,2488,5,100,0,0,2488,2489,5,226,0,
0,2489,2491,3,1342,671,0,2490,2484,1,0,0,0,2490,2485,1,0,0,0,2490,2486,1,
0,0,0,2490,2487,1,0,0,0,2491,115,1,0,0,0,2492,2493,5,2,0,0,2493,2494,3,120,
60,0,2494,2495,5,3,0,0,2495,117,1,0,0,0,2496,2497,5,105,0,0,2497,2500,3,
116,58,0,2498,2500,1,0,0,0,2499,2496,1,0,0,0,2499,2498,1,0,0,0,2500,119,
1,0,0,0,2501,2506,3,122,61,0,2502,2503,5,6,0,0,2503,2505,3,122,61,0,2504,
2502,1,0,0,0,2505,2508,1,0,0,0,2506,2504,1,0,0,0,2506,2507,1,0,0,0,2507,
121,1,0,0,0,2508,2506,1,0,0,0,2509,2518,3,1382,691,0,2510,2511,5,10,0,0,
2511,2519,3,466,233,0,2512,2513,5,11,0,0,2513,2516,3,1382,691,0,2514,2515,
5,10,0,0,2515,2517,3,466,233,0,2516,2514,1,0,0,0,2516,2517,1,0,0,0,2517,
2519,1,0,0,0,2518,2510,1,0,0,0,2518,2512,1,0,0,0,2518,2519,1,0,0,0,2519,
123,1,0,0,0,2520,2522,3,126,63,0,2521,2520,1,0,0,0,2522,2523,1,0,0,0,2523,
2521,1,0,0,0,2523,2524,1,0,0,0,2524,125,1,0,0,0,2525,2529,5,307,0,0,2526,
2527,3,16,8,0,2527,2528,3,292,146,0,2528,2530,1,0,0,0,2529,2526,1,0,0,0,
2529,2530,1,0,0,0,2530,2538,1,0,0,0,2531,2535,5,326,0,0,2532,2536,3,288,
144,0,2533,2534,5,438,0,0,2534,2536,3,198,99,0,2535,2532,1,0,0,0,2535,2533,
1,0,0,0,2536,2538,1,0,0,0,2537,2525,1,0,0,0,2537,2531,1,0,0,0,2538,127,1,
0,0,0,2539,2540,5,62,0,0,2540,2541,5,415,0,0,2541,2542,5,105,0,0,2542,2543,
5,2,0,0,2543,2544,3,132,66,0,2544,2545,5,3,0,0,2545,2566,1,0,0,0,2546,2547,
5,62,0,0,2547,2548,5,415,0,0,2548,2549,5,68,0,0,2549,2550,5,2,0,0,2550,2551,
3,1282,641,0,2551,2552,5,3,0,0,2552,2566,1,0,0,0,2553,2554,5,62,0,0,2554,
2555,5,415,0,0,2555,2556,5,64,0,0,2556,2557,5,2,0,0,2557,2558,3,1282,641,
0,2558,2559,5,3,0,0,2559,2560,5,94,0,0,2560,2561,5,2,0,0,2561,2562,3,1282,
641,0,2562,2563,5,3,0,0,2563,2566,1,0,0,0,2564,2566,5,53,0,0,2565,2539,1,
0,0,0,2565,2546,1,0,0,0,2565,2553,1,0,0,0,2565,2564,1,0,0,0,2566,129,1,0,
0,0,2567,2568,3,1380,690,0,2568,2569,3,1358,679,0,2569,131,1,0,0,0,2570,
2575,3,130,65,0,2571,2572,5,6,0,0,2572,2574,3,130,65,0,2573,2571,1,0,0,0,
2574,2577,1,0,0,0,2575,2573,1,0,0,0,2575,2576,1,0,0,0,2576,133,1,0,0,0,2577,
2575,1,0,0,0,2578,2579,5,138,0,0,2579,2580,5,353,0,0,2580,2581,3,524,262,
0,2581,2582,3,136,68,0,2582,135,1,0,0,0,2583,2588,3,138,69,0,2584,2585,5,
6,0,0,2585,2587,3,138,69,0,2586,2584,1,0,0,0,2587,2590,1,0,0,0,2588,2586,
1,0,0,0,2588,2589,1,0,0,0,2589,137,1,0,0,0,2590,2588,1,0,0,0,2591,2592,5,
133,0,0,2592,2593,5,143,0,0,2593,2594,3,1104,552,0,2594,2595,3,108,54,0,
2595,2615,1,0,0,0,2596,2597,5,191,0,0,2597,2600,5,143,0,0,2598,2599,5,220,
0,0,2599,2601,5,389,0,0,2600,2598,1,0,0,0,2600,2601,1,0,0,0,2601,2602,1,
0,0,0,2602,2603,3,1374,687,0,2603,2604,3,108,54,0,2604,2615,1,0,0,0,2605,
2606,5,138,0,0,2606,2607,5,143,0,0,2607,2608,3,1374,687,0,2608,2609,3,726,
363,0,2609,2610,5,353,0,0,2610,2611,3,1120,560,0,2611,2612,3,110,55,0,2612,
2613,3,108,54,0,2613,2615,1,0,0,0,2614,2591,1,0,0,0,2614,2596,1,0,0,0,2614,
2605,1,0,0,0,2615,139,1,0,0,0,2616,2619,5,157,0,0,2617,2620,3,954,477,0,
2618,2620,5,30,0,0,2619,2617,1,0,0,0,2619,2618,1,0,0,0,2620,141,1,0,0,0,
2621,2622,5,169,0,0,2622,2623,3,156,78,0,2623,2624,3,1338,669,0,2624,2625,
3,214,107,0,2625,2626,3,144,72,0,2626,2627,3,146,73,0,2627,2628,3,148,74,
0,2628,2629,3,158,79,0,2629,2630,3,16,8,0,2630,2631,3,150,75,0,2631,2632,
3,1096,548,0,2632,2644,1,0,0,0,2633,2634,5,169,0,0,2634,2635,5,2,0,0,2635,
2636,3,894,447,0,2636,2637,5,3,0,0,2637,2638,5,94,0,0,2638,2639,3,146,73,
0,2639,2640,3,148,74,0,2640,2641,3,16,8,0,2641,2642,3,150,75,0,2642,2644,
1,0,0,0,2643,2621,1,0,0,0,2643,2633,1,0,0,0,2644,143,1,0,0,0,2645,2646,7,
10,0,0,2646,145,1,0,0,0,2647,2650,5,290,0,0,2648,2650,1,0,0,0,2649,2647,
1,0,0,0,2649,2648,1,0,0,0,2650,147,1,0,0,0,2651,2655,3,1360,680,0,2652,2655,
5,336,0,0,2653,2655,5,337,0,0,2654,2651,1,0,0,0,2654,2652,1,0,0,0,2654,2653,
1,0,0,0,2655,149,1,0,0,0,2656,2662,3,152,76,0,2657,2658,5,2,0,0,2658,2659,
3,162,81,0,2659,2660,5,3,0,0,2660,2662,1,0,0,0,2661,2656,1,0,0,0,2661,2657,
1,0,0,0,2662,151,1,0,0,0,2663,2665,3,154,77,0,2664,2663,1,0,0,0,2665,2668,
1,0,0,0,2666,2664,1,0,0,0,2666,2667,1,0,0,0,2667,153,1,0,0,0,2668,2666,1,
0,0,0,2669,2705,5,107,0,0,2670,2705,5,112,0,0,2671,2672,5,183,0,0,2672,2673,
3,834,417,0,2673,2674,3,1360,680,0,2674,2705,1,0,0,0,2675,2676,5,78,0,0,
2676,2677,3,834,417,0,2677,2678,3,1360,680,0,2678,2705,1,0,0,0,2679,2705,
5,171,0,0,2680,2705,5,216,0,0,2681,2682,5,291,0,0,2682,2683,3,834,417,0,
2683,2684,3,1360,680,0,2684,2705,1,0,0,0,2685,2686,5,197,0,0,2686,2687,3,
834,417,0,2687,2688,3,1360,680,0,2688,2705,1,0,0,0,2689,2690,5,209,0,0,2690,
2691,5,291,0,0,2691,2705,3,216,108,0,2692,2693,5,209,0,0,2693,2694,5,291,
0,0,2694,2705,5,9,0,0,2695,2696,5,209,0,0,2696,2697,5,77,0,0,2697,2698,5,
78,0,0,2698,2705,3,216,108,0,2699,2700,5,209,0,0,2700,2701,5,78,0,0,2701,
2705,3,216,108,0,2702,2703,5,194,0,0,2703,2705,3,1360,680,0,2704,2669,1,
0,0,0,2704,2670,1,0,0,0,2704,2671,1,0,0,0,2704,2675,1,0,0,0,2704,2679,1,
0,0,0,2704,2680,1,0,0,0,2704,2681,1,0,0,0,2704,2685,1,0,0,0,2704,2689,1,
0,0,0,2704,2692,1,0,0,0,2704,2695,1,0,0,0,2704,2699,1,0,0,0,2704,2702,1,
0,0,0,2705,155,1,0,0,0,2706,2709,5,107,0,0,2707,2709,1,0,0,0,2708,2706,1,
0,0,0,2708,2707,1,0,0,0,2709,157,1,0,0,0,2710,2711,3,160,80,0,2711,2712,
5,184,0,0,2712,2713,3,1360,680,0,2713,2716,1,0,0,0,2714,2716,1,0,0,0,2715,
2710,1,0,0,0,2715,2714,1,0,0,0,2716,159,1,0,0,0,2717,2720,5,100,0,0,2718,
2720,1,0,0,0,2719,2717,1,0,0,0,2719,2718,1,0,0,0,2720,161,1,0,0,0,2721,2726,
3,164,82,0,2722,2723,5,6,0,0,2723,2725,3,164,82,0,2724,2722,1,0,0,0,2725,
2728,1,0,0,0,2726,2724,1,0,0,0,2726,2727,1,0,0,0,2727,163,1,0,0,0,2728,2726,
1,0,0,0,2729,2730,3,1382,691,0,2730,2731,3,166,83,0,2731,165,1,0,0,0,2732,
2741,3,66,33,0,2733,2741,3,292,146,0,2734,2741,5,9,0,0,2735,2736,5,2,0,0,
2736,2737,3,168,84,0,2737,2738,5,3,0,0,2738,2741,1,0,0,0,2739,2741,1,0,0,
0,2740,2732,1,0,0,0,2740,2733,1,0,0,0,2740,2734,1,0,0,0,2740,2735,1,0,0,
0,2740,2739,1,0,0,0,2741,167,1,0,0,0,2742,2747,3,170,85,0,2743,2744,5,6,
0,0,2744,2746,3,170,85,0,2745,2743,1,0,0,0,2746,2749,1,0,0,0,2747,2745,1,
0,0,0,2747,2748,1,0,0,0,2748,169,1,0,0,0,2749,2747,1,0,0,0,2750,2751,3,66,
33,0,2751,171,1,0,0,0,2752,2753,5,46,0,0,2753,2754,3,174,87,0,2754,2758,
5,92,0,0,2755,2756,5,220,0,0,2756,2757,5,77,0,0,2757,2759,5,389,0,0,2758,
2755,1,0,0,0,2758,2759,1,0,0,0,2759,2760,1,0,0,0,2760,2791,3,1338,669,0,
2761,2762,5,2,0,0,2762,2763,3,176,88,0,2763,2764,5,3,0,0,2764,2765,3,238,
119,0,2765,2766,3,240,120,0,2766,2767,3,248,124,0,2767,2768,3,250,125,0,
2768,2769,3,252,126,0,2769,2770,3,254,127,0,2770,2792,1,0,0,0,2771,2772,
5,268,0,0,2772,2773,3,524,262,0,2773,2774,3,178,89,0,2774,2775,3,240,120,
0,2775,2776,3,248,124,0,2776,2777,3,250,125,0,2777,2778,3,252,126,0,2778,
2779,3,254,127,0,2779,2792,1,0,0,0,2780,2781,5,278,0,0,2781,2782,5,268,0,
0,2782,2783,3,1338,669,0,2783,2784,3,178,89,0,2784,2785,3,128,64,0,2785,
2786,3,240,120,0,2786,2787,3,248,124,0,2787,2788,3,250,125,0,2788,2789,3,
252,126,0,2789,2790,3,254,127,0,2790,2792,1,0,0,0,2791,2761,1,0,0,0,2791,
2771,1,0,0,0,2791,2780,1,0,0,0,2792,173,1,0,0,0,2793,2802,5,347,0,0,2794,
2802,5,345,0,0,2795,2796,5,245,0,0,2796,2802,7,11,0,0,2797,2798,5,213,0,
0,2798,2802,7,11,0,0,2799,2802,5,360,0,0,2800,2802,1,0,0,0,2801,2793,1,0,
0,0,2801,2794,1,0,0,0,2801,2795,1,0,0,0,2801,2797,1,0,0,0,2801,2799,1,0,
0,0,2801,2800,1,0,0,0,2802,175,1,0,0,0,2803,2806,3,180,90,0,2804,2806,1,
0,0,0,2805,2803,1,0,0,0,2805,2804,1,0,0,0,2806,177,1,0,0,0,2807,2808,5,2,
0,0,2808,2809,3,182,91,0,2809,2810,5,3,0,0,2810,2813,1,0,0,0,2811,2813,1,
0,0,0,2812,2807,1,0,0,0,2812,2811,1,0,0,0,2813,179,1,0,0,0,2814,2819,3,184,
92,0,2815,2816,5,6,0,0,2816,2818,3,184,92,0,2817,2815,1,0,0,0,2818,2821,
1,0,0,0,2819,2817,1,0,0,0,2819,2820,1,0,0,0,2820,181,1,0,0,0,2821,2819,1,
0,0,0,2822,2827,3,186,93,0,2823,2824,5,6,0,0,2824,2826,3,186,93,0,2825,2823,
1,0,0,0,2826,2829,1,0,0,0,2827,2825,1,0,0,0,2827,2828,1,0,0,0,2828,183,1,
0,0,0,2829,2827,1,0,0,0,2830,2834,3,208,104,0,2831,2834,3,202,101,0,2832,
2834,3,188,94,0,2833,2830,1,0,0,0,2833,2831,1,0,0,0,2833,2832,1,0,0,0,2834,
185,1,0,0,0,2835,2838,3,190,95,0,2836,2838,3,208,104,0,2837,2835,1,0,0,0,
2837,2836,1,0,0,0,2838,187,1,0,0,0,2839,2840,3,1374,687,0,2840,2841,3,1120,
560,0,2841,2842,3,340,170,0,2842,2843,3,192,96,0,2843,189,1,0,0,0,2844,2847,
3,1374,687,0,2845,2846,5,105,0,0,2846,2848,5,273,0,0,2847,2845,1,0,0,0,2847,
2848,1,0,0,0,2848,2849,1,0,0,0,2849,2850,3,192,96,0,2850,191,1,0,0,0,2851,
2853,3,194,97,0,2852,2851,1,0,0,0,2853,2856,1,0,0,0,2854,2852,1,0,0,0,2854,
2855,1,0,0,0,2855,193,1,0,0,0,2856,2854,1,0,0,0,2857,2858,5,45,0,0,2858,
2859,3,1342,671,0,2859,2860,3,196,98,0,2860,2866,1,0,0,0,2861,2866,3,196,
98,0,2862,2866,3,200,100,0,2863,2864,5,43,0,0,2864,2866,3,524,262,0,2865,
2857,1,0,0,0,2865,2861,1,0,0,0,2865,2862,1,0,0,0,2865,2863,1,0,0,0,2866,
195,1,0,0,0,2867,2868,5,77,0,0,2868,2906,5,78,0,0,2869,2906,5,78,0,0,2870,
2871,5,98,0,0,2871,2872,3,664,332,0,2872,2873,3,256,128,0,2873,2906,1,0,
0,0,2874,2875,5,85,0,0,2875,2876,5,236,0,0,2876,2877,3,664,332,0,2877,2878,
3,256,128,0,2878,2906,1,0,0,0,2879,2880,5,42,0,0,2880,2881,5,2,0,0,2881,
2882,3,1164,582,0,2882,2883,5,3,0,0,2883,2884,3,212,106,0,2884,2906,1,0,
0,0,2885,2886,5,53,0,0,2886,2906,3,1206,603,0,2887,2888,5,438,0,0,2888,2889,
3,198,99,0,2889,2897,5,36,0,0,2890,2891,5,219,0,0,2891,2898,3,284,142,0,
2892,2893,5,2,0,0,2893,2894,3,1164,582,0,2894,2895,5,3,0,0,2895,2896,5,440,
0,0,2896,2898,1,0,0,0,2897,2890,1,0,0,0,2897,2892,1,0,0,0,2898,2906,1,0,
0,0,2899,2900,5,86,0,0,2900,2901,3,1338,669,0,2901,2902,3,214,107,0,2902,
2903,3,222,111,0,2903,2904,3,230,115,0,2904,2906,1,0,0,0,2905,2867,1,0,0,
0,2905,2869,1,0,0,0,2905,2870,1,0,0,0,2905,2874,1,0,0,0,2905,2879,1,0,0,
0,2905,2885,1,0,0,0,2905,2887,1,0,0,0,2905,2899,1,0,0,0,2906,197,1,0,0,0,
2907,2911,5,139,0,0,2908,2909,5,147,0,0,2909,2911,5,53,0,0,2910,2907,1,0,
0,0,2910,2908,1,0,0,0,2911,199,1,0,0,0,2912,2918,5,54,0,0,2913,2914,5,77,
0,0,2914,2918,5,54,0,0,2915,2916,5,69,0,0,2916,2918,7,8,0,0,2917,2912,1,
0,0,0,2917,2913,1,0,0,0,2917,2915,1,0,0,0,2918,201,1,0,0,0,2919,2920,5,120,
0,0,2920,2921,3,1338,669,0,2921,2922,3,204,102,0,2922,203,1,0,0,0,2923,2924,
7,12,0,0,2924,2926,3,206,103,0,2925,2923,1,0,0,0,2926,2929,1,0,0,0,2927,
2925,1,0,0,0,2927,2928,1,0,0,0,2928,205,1,0,0,0,2929,2927,1,0,0,0,2930,2931,
7,13,0,0,2931,207,1,0,0,0,2932,2933,5,45,0,0,2933,2934,3,1342,671,0,2934,
2935,3,210,105,0,2935,2938,1,0,0,0,2936,2938,3,210,105,0,2937,2932,1,0,0,
0,2937,2936,1,0,0,0,2938,209,1,0,0,0,2939,2940,5,42,0,0,2940,2941,5,2,0,
0,2941,2942,3,1164,582,0,2942,2943,5,3,0,0,2943,2944,3,440,220,0,2944,2998,
1,0,0,0,2945,2957,5,98,0,0,2946,2947,5,2,0,0,2947,2948,3,216,108,0,2948,
2949,5,3,0,0,2949,2950,3,220,110,0,2950,2951,3,664,332,0,2951,2952,3,256,
128,0,2952,2953,3,440,220,0,2953,2958,1,0,0,0,2954,2955,3,258,129,0,2955,
2956,3,440,220,0,2956,2958,1,0,0,0,2957,2946,1,0,0,0,2957,2954,1,0,0,0,2958,
2998,1,0,0,0,2959,2960,5,85,0,0,2960,2972,5,236,0,0,2961,2962,5,2,0,0,2962,
2963,3,216,108,0,2963,2964,5,3,0,0,2964,2965,3,220,110,0,2965,2966,3,664,
332,0,2966,2967,3,256,128,0,2967,2968,3,440,220,0,2968,2973,1,0,0,0,2969,
2970,3,258,129,0,2970,2971,3,440,220,0,2971,2973,1,0,0,0,2972,2961,1,0,0,
0,2972,2969,1,0,0,0,2973,2998,1,0,0,0,2974,2975,5,199,0,0,2975,2976,3,596,
298,0,2976,2977,5,2,0,0,2977,2978,3,224,112,0,2978,2979,5,3,0,0,2979,2980,
3,220,110,0,2980,2981,3,664,332,0,2981,2982,3,256,128,0,2982,2983,3,228,
114,0,2983,2984,3,440,220,0,2984,2998,1,0,0,0,2985,2986,5,63,0,0,2986,2987,
5,236,0,0,2987,2988,5,2,0,0,2988,2989,3,216,108,0,2989,2990,5,3,0,0,2990,
2991,5,86,0,0,2991,2992,3,1338,669,0,2992,2993,3,214,107,0,2993,2994,3,222,
111,0,2994,2995,3,230,115,0,2995,2996,3,440,220,0,2996,2998,1,0,0,0,2997,
2939,1,0,0,0,2997,2945,1,0,0,0,2997,2959,1,0,0,0,2997,2974,1,0,0,0,2997,
2985,1,0,0,0,2998,211,1,0,0,0,2999,3000,5,262,0,0,3000,3003,5,228,0,0,3001,
3003,1,0,0,0,3002,2999,1,0,0,0,3002,3001,1,0,0,0,3003,213,1,0,0,0,3004,3005,
5,2,0,0,3005,3006,3,216,108,0,3006,3007,5,3,0,0,3007,3010,1,0,0,0,3008,3010,
1,0,0,0,3009,3004,1,0,0,0,3009,3008,1,0,0,0,3010,215,1,0,0,0,3011,3016,3,
218,109,0,3012,3013,5,6,0,0,3013,3015,3,218,109,0,3014,3012,1,0,0,0,3015,
3018,1,0,0,0,3016,3014,1,0,0,0,3016,3017,1,0,0,0,3017,217,1,0,0,0,3018,3016,
1,0,0,0,3019,3020,3,1374,687,0,3020,219,1,0,0,0,3021,3022,5,441,0,0,3022,
3023,5,2,0,0,3023,3024,3,216,108,0,3024,3025,5,3,0,0,3025,3028,1,0,0,0,3026,
3028,1,0,0,0,3027,3021,1,0,0,0,3027,3026,1,0,0,0,3028,221,1,0,0,0,3029,3030,
5,249,0,0,3030,3033,7,14,0,0,3031,3033,1,0,0,0,3032,3029,1,0,0,0,3032,3031,
1,0,0,0,3033,223,1,0,0,0,3034,3039,3,226,113,0,3035,3036,5,6,0,0,3036,3038,
3,226,113,0,3037,3035,1,0,0,0,3038,3041,1,0,0,0,3039,3037,1,0,0,0,3039,3040,
1,0,0,0,3040,225,1,0,0,0,3041,3039,1,0,0,0,3042,3043,3,602,301,0,3043,3050,
5,105,0,0,3044,3051,3,684,342,0,3045,3046,5,271,0,0,3046,3047,5,2,0,0,3047,
3048,3,684,342,0,3048,3049,5,3,0,0,3049,3051,1,0,0,0,3050,3044,1,0,0,0,3050,
3045,1,0,0,0,3051,227,1,0,0,0,3052,3053,5,103,0,0,3053,3054,5,2,0,0,3054,
3055,3,1164,582,0,3055,3056,5,3,0,0,3056,3059,1,0,0,0,3057,3059,1,0,0,0,
3058,3052,1,0,0,0,3058,3057,1,0,0,0,3059,229,1,0,0,0,3060,3070,3,232,116,
0,3061,3070,3,234,117,0,3062,3063,3,232,116,0,3063,3064,3,234,117,0,3064,
3070,1,0,0,0,3065,3066,3,234,117,0,3066,3067,3,232,116,0,3067,3070,1,0,0,
0,3068,3070,1,0,0,0,3069,3060,1,0,0,0,3069,3061,1,0,0,0,3069,3062,1,0,0,
0,3069,3065,1,0,0,0,3069,3068,1,0,0,0,3070,231,1,0,0,0,3071,3072,5,80,0,
0,3072,3073,5,362,0,0,3073,3074,3,236,118,0,3074,233,1,0,0,0,3075,3076,5,
80,0,0,3076,3077,5,182,0,0,3077,3078,3,236,118,0,3078,235,1,0,0,0,3079,3080,
5,262,0,0,3080,3086,5,132,0,0,3081,3086,5,308,0,0,3082,3086,5,150,0,0,3083,
3084,5,326,0,0,3084,3086,7,15,0,0,3085,3079,1,0,0,0,3085,3081,1,0,0,0,3085,
3082,1,0,0,0,3085,3083,1,0,0,0,3086,237,1,0,0,0,3087,3088,5,229,0,0,3088,
3089,5,2,0,0,3089,3090,3,1336,668,0,3090,3091,5,3,0,0,3091,3094,1,0,0,0,
3092,3094,1,0,0,0,3093,3087,1,0,0,0,3093,3092,1,0,0,0,3094,239,1,0,0,0,3095,
3098,3,242,121,0,3096,3098,1,0,0,0,3097,3095,1,0,0,0,3097,3096,1,0,0,0,3098,
241,1,0,0,0,3099,3100,5,278,0,0,3100,3101,5,147,0,0,3101,3102,3,1374,687,
0,3102,3103,5,2,0,0,3103,3104,3,244,122,0,3104,3105,5,3,0,0,3105,243,1,0,
0,0,3106,3111,3,246,123,0,3107,3108,5,6,0,0,3108,3110,3,246,123,0,3109,3107,
1,0,0,0,3110,3113,1,0,0,0,3111,3109,1,0,0,0,3111,3112,1,0,0,0,3112,245,1,
0,0,0,3113,3111,1,0,0,0,3114,3115,3,1374,687,0,3115,3116,3,608,304,0,3116,
3117,3,610,305,0,3117,3129,1,0,0,0,3118,3119,3,1216,608,0,3119,3120,3,608,
304,0,3120,3121,3,610,305,0,3121,3129,1,0,0,0,3122,3123,5,2,0,0,3123,3124,
3,1164,582,0,3124,3125,5,3,0,0,3125,3126,3,608,304,0,3126,3127,3,610,305,
0,3127,3129,1,0,0,0,3128,3114,1,0,0,0,3128,3118,1,0,0,0,3128,3122,1,0,0,
0,3129,247,1,0,0,0,3130,3131,5,100,0,0,3131,3134,3,1342,671,0,3132,3134,
1,0,0,0,3133,3130,1,0,0,0,3133,3132,1,0,0,0,3134,249,1,0,0,0,3135,3136,5,
105,0,0,3136,3141,3,116,58,0,3137,3138,5,372,0,0,3138,3141,5,270,0,0,3139,
3141,1,0,0,0,3140,3135,1,0,0,0,3140,3137,1,0,0,0,3140,3139,1,0,0,0,3141,
251,1,0,0,0,3142,3143,5,80,0,0,3143,3149,5,161,0,0,3144,3150,5,191,0,0,3145,
3146,5,182,0,0,3146,3150,5,313,0,0,3147,3148,5,285,0,0,3148,3150,5,313,0,
0,3149,3144,1,0,0,0,3149,3145,1,0,0,0,3149,3147,1,0,0,0,3150,3153,1,0,0,
0,3151,3153,1,0,0,0,3152,3142,1,0,0,0,3152,3151,1,0,0,0,3153,253,1,0,0,0,
3154,3155,5,344,0,0,3155,3158,3,1342,671,0,3156,3158,1,0,0,0,3157,3154,1,
0,0,0,3157,3156,1,0,0,0,3158,255,1,0,0,0,3159,3160,5,100,0,0,3160,3161,5,
226,0,0,3161,3162,5,344,0,0,3162,3165,3,1342,671,0,3163,3165,1,0,0,0,3164,
3159,1,0,0,0,3164,3163,1,0,0,0,3165,257,1,0,0,0,3166,3167,5,100,0,0,3167,
3168,5,226,0,0,3168,3169,3,1342,671,0,3169,259,1,0,0,0,3170,3171,5,46,0,
0,3171,3175,5,335,0,0,3172,3173,5,220,0,0,3173,3174,5,77,0,0,3174,3176,5,
389,0,0,3175,3172,1,0,0,0,3175,3176,1,0,0,0,3176,3177,1,0,0,0,3177,3178,
3,524,262,0,3178,3179,3,870,435,0,3179,3180,5,80,0,0,3180,3181,3,1282,641,
0,3181,3182,5,64,0,0,3182,3183,3,1058,529,0,3183,261,1,0,0,0,3184,3185,5,
138,0,0,3185,3188,5,335,0,0,3186,3187,5,220,0,0,3187,3189,5,389,0,0,3188,
3186,1,0,0,0,3188,3189,1,0,0,0,3189,3190,1,0,0,0,3190,3191,3,524,262,0,3191,
3192,5,326,0,0,3192,3193,5,335,0,0,3193,3194,3,1366,683,0,3194,263,1,0,0,
0,3195,3196,5,46,0,0,3196,3197,3,174,87,0,3197,3201,5,92,0,0,3198,3199,5,
220,0,0,3199,3200,5,77,0,0,3200,3202,5,389,0,0,3201,3198,1,0,0,0,3201,3202,
1,0,0,0,3202,3203,1,0,0,0,3203,3204,3,266,133,0,3204,3205,5,36,0,0,3205,
3206,3,960,480,0,3206,3207,3,268,134,0,3207,265,1,0,0,0,3208,3209,3,1338,
669,0,3209,3210,3,214,107,0,3210,3211,3,248,124,0,3211,3212,3,250,125,0,
3212,3213,3,252,126,0,3213,3214,3,254,127,0,3214,267,1,0,0,0,3215,3219,5,
105,0,0,3216,3220,5,174,0,0,3217,3218,5,262,0,0,3218,3220,5,174,0,0,3219,
3216,1,0,0,0,3219,3217,1,0,0,0,3220,3223,1,0,0,0,3221,3223,1,0,0,0,3222,
3215,1,0,0,0,3222,3221,1,0,0,0,3223,269,1,0,0,0,3224,3225,5,46,0,0,3225,
3226,3,274,137,0,3226,3227,5,251,0,0,3227,3231,5,369,0,0,3228,3229,5,220,
0,0,3229,3230,5,77,0,0,3230,3232,5,389,0,0,3231,3228,1,0,0,0,3231,3232,1,
0,0,0,3232,3233,1,0,0,0,3233,3234,3,272,136,0,3234,3235,5,36,0,0,3235,3236,
3,960,480,0,3236,3237,3,268,134,0,3237,271,1,0,0,0,3238,3239,3,1338,669,
0,3239,3240,3,214,107,0,3240,3241,3,248,124,0,3241,3242,3,118,59,0,3242,
3243,3,254,127,0,3243,273,1,0,0,0,3244,3247,5,360,0,0,3245,3247,1,0,0,0,
3246,3244,1,0,0,0,3246,3245,1,0,0,0,3247,275,1,0,0,0,3248,3249,5,298,0,0,
3249,3250,5,251,0,0,3250,3251,5,369,0,0,3251,3252,3,592,296,0,3252,3253,
3,1338,669,0,3253,3254,3,268,134,0,3254,277,1,0,0,0,3255,3256,5,46,0,0,3256,
3257,3,174,87,0,3257,3261,5,321,0,0,3258,3259,5,220,0,0,3259,3260,5,77,0,
0,3260,3262,5,389,0,0,3261,3258,1,0,0,0,3261,3262,1,0,0,0,3262,3263,1,0,
0,0,3263,3264,3,1338,669,0,3264,3265,3,282,141,0,3265,279,1,0,0,0,3266,3267,
5,138,0,0,3267,3270,5,321,0,0,3268,3269,5,220,0,0,3269,3271,5,389,0,0,3270,
3268,1,0,0,0,3270,3271,1,0,0,0,3271,3272,1,0,0,0,3272,3273,3,1338,669,0,
3273,3274,3,286,143,0,3274,281,1,0,0,0,3275,3278,3,286,143,0,3276,3278,1,
0,0,0,3277,3275,1,0,0,0,3277,3276,1,0,0,0,3278,283,1,0,0,0,3279,3280,5,2,
0,0,3280,3281,3,286,143,0,3281,3282,5,3,0,0,3282,3285,1,0,0,0,3283,3285,
1,0,0,0,3284,3279,1,0,0,0,3284,3283,1,0,0,0,3285,285,1,0,0,0,3286,3288,3,
288,144,0,3287,3286,1,0,0,0,3288,3289,1,0,0,0,3289,3287,1,0,0,0,3289,3290,
1,0,0,0,3290,287,1,0,0,0,3291,3292,5,36,0,0,3292,3322,3,1124,562,0,3293,
3294,5,148,0,0,3294,3322,3,292,146,0,3295,3322,5,173,0,0,3296,3297,5,225,
0,0,3297,3298,3,290,145,0,3298,3299,3,292,146,0,3299,3322,1,0,0,0,3300,3301,
5,252,0,0,3301,3322,3,292,146,0,3302,3303,5,255,0,0,3303,3322,3,292,146,
0,3304,3305,5,262,0,0,3305,3322,7,16,0,0,3306,3307,5,274,0,0,3307,3308,5,
147,0,0,3308,3322,3,524,262,0,3309,3310,5,321,0,0,3310,3311,5,259,0,0,3311,
3322,3,524,262,0,3312,3313,5,333,0,0,3313,3314,3,16,8,0,3314,3315,3,292,
146,0,3315,3322,1,0,0,0,3316,3317,5,307,0,0,3317,3319,3,16,8,0,3318,3320,
3,292,146,0,3319,3318,1,0,0,0,3319,3320,1,0,0,0,3320,3322,1,0,0,0,3321,3291,
1,0,0,0,3321,3293,1,0,0,0,3321,3295,1,0,0,0,3321,3296,1,0,0,0,3321,3300,
1,0,0,0,3321,3302,1,0,0,0,3321,3304,1,0,0,0,3321,3306,1,0,0,0,3321,3309,
1,0,0,0,3321,3312,1,0,0,0,3321,3316,1,0,0,0,3322,289,1,0,0,0,3323,3326,5,
147,0,0,3324,3326,1,0,0,0,3325,3323,1,0,0,0,3325,3324,1,0,0,0,3326,291,1,
0,0,0,3327,3334,3,1356,678,0,3328,3329,5,12,0,0,3329,3334,3,1356,678,0,3330,
3331,5,13,0,0,3331,3334,3,1356,678,0,3332,3334,3,1366,683,0,3333,3327,1,
0,0,0,3333,3328,1,0,0,0,3333,3330,1,0,0,0,3333,3332,1,0,0,0,3334,293,1,0,
0,0,3335,3340,3,292,146,0,3336,3337,5,6,0,0,3337,3339,3,292,146,0,3338,3336,
1,0,0,0,3339,3342,1,0,0,0,3340,3338,1,0,0,0,3340,3341,1,0,0,0,3341,295,1,
0,0,0,3342,3340,1,0,0,0,3343,3344,5,46,0,0,3344,3345,3,618,309,0,3345,3346,
3,298,149,0,3346,3347,3,308,154,0,3347,3348,5,238,0,0,3348,3354,3,1342,671,
0,3349,3350,5,215,0,0,3350,3351,3,300,150,0,3351,3352,3,302,151,0,3352,3353,
3,306,153,0,3353,3355,1,0,0,0,3354,3349,1,0,0,0,3354,3355,1,0,0,0,3355,297,
1,0,0,0,3356,3359,5,352,0,0,3357,3359,1,0,0,0,3358,3356,1,0,0,0,3358,3357,
1,0,0,0,3359,299,1,0,0,0,3360,3362,3,1342,671,0,3361,3363,3,526,263,0,3362,
3361,1,0,0,0,3362,3363,1,0,0,0,3363,301,1,0,0,0,3364,3365,5,230,0,0,3365,
3368,3,300,150,0,3366,3368,1,0,0,0,3367,3364,1,0,0,0,3367,3366,1,0,0,0,3368,
303,1,0,0,0,3369,3370,5,366,0,0,3370,3374,3,300,150,0,3371,3372,5,262,0,
0,3372,3374,5,366,0,0,3373,3369,1,0,0,0,3373,3371,1,0,0,0,3374,305,1,0,0,
0,3375,3378,3,304,152,0,3376,3378,1,0,0,0,3377,3375,1,0,0,0,3377,3376,1,
0,0,0,3378,307,1,0,0,0,3379,3382,5,288,0,0,3380,3382,1,0,0,0,3381,3379,1,
0,0,0,3381,3380,1,0,0,0,3382,309,1,0,0,0,3383,3384,5,46,0,0,3384,3385,5,
344,0,0,3385,3386,3,1342,671,0,3386,3387,3,312,156,0,3387,3388,5,246,0,0,
3388,3389,3,1360,680,0,3389,3390,3,118,59,0,3390,311,1,0,0,0,3391,3392,5,
275,0,0,3392,3395,3,1370,685,0,3393,3395,1,0,0,0,3394,3391,1,0,0,0,3394,
3393,1,0,0,0,3395,313,1,0,0,0,3396,3397,5,191,0,0,3397,3400,5,344,0,0,3398,
3399,5,220,0,0,3399,3401,5,389,0,0,3400,3398,1,0,0,0,3400,3401,1,0,0,0,3401,
3402,1,0,0,0,3402,3403,3,1342,671,0,3403,315,1,0,0,0,3404,3405,5,46,0,0,
3405,3409,5,204,0,0,3406,3407,5,220,0,0,3407,3408,5,77,0,0,3408,3410,5,389,
0,0,3409,3406,1,0,0,0,3409,3410,1,0,0,0,3410,3411,1,0,0,0,3411,3412,3,1342,
671,0,3412,3413,3,16,8,0,3413,3414,3,318,159,0,3414,317,1,0,0,0,3415,3417,
3,320,160,0,3416,3415,1,0,0,0,3417,3420,1,0,0,0,3418,3416,1,0,0,0,3418,3419,
1,0,0,0,3419,319,1,0,0,0,3420,3418,1,0,0,0,3421,3422,5,316,0,0,3422,3429,
3,1342,671,0,3423,3424,5,368,0,0,3424,3429,3,72,36,0,3425,3426,5,64,0,0,
3426,3429,3,72,36,0,3427,3429,5,150,0,0,3428,3421,1,0,0,0,3428,3423,1,0,
0,0,3428,3425,1,0,0,0,3428,3427,1,0,0,0,3429,321,1,0,0,0,3430,3431,5,138,
0,0,3431,3432,5,204,0,0,3432,3433,3,1342,671,0,3433,3434,5,362,0,0,3434,
3435,3,324,162,0,3435,323,1,0,0,0,3436,3438,3,326,163,0,3437,3436,1,0,0,
0,3438,3441,1,0,0,0,3439,3437,1,0,0,0,3439,3440,1,0,0,0,3440,325,1,0,0,0,
3441,3439,1,0,0,0,3442,3443,5,94,0,0,3443,3444,3,72,36,0,3444,327,1,0,0,
0,3445,3446,5,138,0,0,3446,3447,5,204,0,0,3447,3448,3,1342,671,0,3448,3449,
3,40,20,0,3449,3450,3,516,258,0,3450,3451,3,1342,671,0,3451,3550,1,0,0,0,
3452,3453,5,138,0,0,3453,3454,5,204,0,0,3454,3455,3,1342,671,0,3455,3456,
3,40,20,0,3456,3457,3,514,257,0,3457,3458,3,524,262,0,3458,3550,1,0,0,0,
3459,3460,5,138,0,0,3460,3461,5,204,0,0,3461,3462,3,1342,671,0,3462,3463,
3,40,20,0,3463,3464,5,136,0,0,3464,3465,3,650,325,0,3465,3550,1,0,0,0,3466,
3467,5,138,0,0,3467,3468,5,204,0,0,3468,3469,3,1342,671,0,3469,3470,3,40,
20,0,3470,3471,5,41,0,0,3471,3472,5,2,0,0,3472,3473,3,1120,560,0,3473,3474,
5,36,0,0,3474,3475,3,1120,560,0,3475,3476,5,3,0,0,3476,3550,1,0,0,0,3477,
3478,5,138,0,0,3478,3479,5,204,0,0,3479,3480,3,1342,671,0,3480,3481,3,40,
20,0,3481,3482,5,189,0,0,3482,3483,3,1120,560,0,3483,3550,1,0,0,0,3484,3485,
5,138,0,0,3485,3486,5,204,0,0,3486,3487,3,1342,671,0,3487,3488,3,40,20,0,
3488,3489,5,211,0,0,3489,3490,3,626,313,0,3490,3550,1,0,0,0,3491,3492,5,
138,0,0,3492,3493,5,204,0,0,3493,3494,3,1342,671,0,3494,3495,3,40,20,0,3495,
3496,5,271,0,0,3496,3497,3,688,344,0,3497,3550,1,0,0,0,3498,3499,5,138,0,
0,3499,3500,5,204,0,0,3500,3501,3,1342,671,0,3501,3502,3,40,20,0,3502,3503,
5,271,0,0,3503,3504,5,156,0,0,3504,3505,3,524,262,0,3505,3506,5,100,0,0,
3506,3507,3,1342,671,0,3507,3550,1,0,0,0,3508,3509,5,138,0,0,3509,3510,5,
204,0,0,3510,3511,3,1342,671,0,3511,3512,3,40,20,0,3512,3513,5,271,0,0,3513,
3514,5,206,0,0,3514,3515,3,524,262,0,3515,3516,5,100,0,0,3516,3517,3,1342,
671,0,3517,3550,1,0,0,0,3518,3519,5,138,0,0,3519,3520,5,204,0,0,3520,3521,
3,1342,671,0,3521,3522,3,40,20,0,3522,3523,5,289,0,0,3523,3524,3,626,313,
0,3524,3550,1,0,0,0,3525,3526,5,138,0,0,3526,3527,5,204,0,0,3527,3528,3,
1342,671,0,3528,3529,3,40,20,0,3529,3530,5,442,0,0,3530,3531,3,626,313,0,
3531,3550,1,0,0,0,3532,3533,5,138,0,0,3533,3534,5,204,0,0,3534,3535,3,1342,
671,0,3535,3536,3,40,20,0,3536,3537,5,443,0,0,3537,3538,5,62,0,0,3538,3539,
3,1120,560,0,3539,3540,5,238,0,0,3540,3541,3,1342,671,0,3541,3550,1,0,0,
0,3542,3543,5,138,0,0,3543,3544,5,204,0,0,3544,3545,3,1342,671,0,3545,3546,
3,40,20,0,3546,3547,5,353,0,0,3547,3548,3,1120,560,0,3548,3550,1,0,0,0,3549,
3445,1,0,0,0,3549,3452,1,0,0,0,3549,3459,1,0,0,0,3549,3466,1,0,0,0,3549,
3477,1,0,0,0,3549,3484,1,0,0,0,3549,3491,1,0,0,0,3549,3498,1,0,0,0,3549,
3508,1,0,0,0,3549,3518,1,0,0,0,3549,3525,1,0,0,0,3549,3532,1,0,0,0,3549,
3542,1,0,0,0,3550,329,1,0,0,0,3551,3552,5,46,0,0,3552,3553,5,63,0,0,3553,
3554,5,174,0,0,3554,3555,5,374,0,0,3555,3556,3,1342,671,0,3556,3557,3,336,
168,0,3557,3558,3,340,170,0,3558,331,1,0,0,0,3559,3560,5,215,0,0,3560,3568,
3,300,150,0,3561,3562,5,262,0,0,3562,3568,5,215,0,0,3563,3564,5,366,0,0,
3564,3568,3,300,150,0,3565,3566,5,262,0,0,3566,3568,5,366,0,0,3567,3559,
1,0,0,0,3567,3561,1,0,0,0,3567,3563,1,0,0,0,3567,3565,1,0,0,0,3568,333,1,
0,0,0,3569,3571,3,332,166,0,3570,3569,1,0,0,0,3571,3572,1,0,0,0,3572,3570,
1,0,0,0,3572,3573,1,0,0,0,3573,335,1,0,0,0,3574,3577,3,334,167,0,3575,3577,
1,0,0,0,3576,3574,1,0,0,0,3576,3575,1,0,0,0,3577,337,1,0,0,0,3578,3579,5,
138,0,0,3579,3580,5,63,0,0,3580,3581,5,174,0,0,3581,3582,5,374,0,0,3582,
3583,3,1342,671,0,3583,3584,3,336,168,0,3584,3585,3,344,172,0,3585,3594,
1,0,0,0,3586,3587,5,138,0,0,3587,3588,5,63,0,0,3588,3589,5,174,0,0,3589,
3590,5,374,0,0,3590,3591,3,1342,671,0,3591,3592,3,334,167,0,3592,3594,1,
0,0,0,3593,3578,1,0,0,0,3593,3586,1,0,0,0,3594,339,1,0,0,0,3595,3596,5,273,
0,0,3596,3597,5,2,0,0,3597,3598,3,342,171,0,3598,3599,5,3,0,0,3599,3602,
1,0,0,0,3600,3602,1,0,0,0,3601,3595,1,0,0,0,3601,3600,1,0,0,0,3602,341,1,
0,0,0,3603,3608,3,350,175,0,3604,3605,5,6,0,0,3605,3607,3,350,175,0,3606,
3604,1,0,0,0,3607,3610,1,0,0,0,3608,3606,1,0,0,0,3608,3609,1,0,0,0,3609,
343,1,0,0,0,3610,3608,1,0,0,0,3611,3612,5,273,0,0,3612,3613,5,2,0,0,3613,
3614,3,346,173,0,3614,3615,5,3,0,0,3615,345,1,0,0,0,3616,3621,3,348,174,
0,3617,3618,5,6,0,0,3618,3620,3,348,174,0,3619,3617,1,0,0,0,3620,3623,1,
0,0,0,3621,3619,1,0,0,0,3621,3622,1,0,0,0,3622,347,1,0,0,0,3623,3621,1,0,
0,0,3624,3632,3,350,175,0,3625,3626,5,326,0,0,3626,3632,3,350,175,0,3627,
3628,5,133,0,0,3628,3632,3,350,175,0,3629,3630,5,191,0,0,3630,3632,3,352,
176,0,3631,3624,1,0,0,0,3631,3625,1,0,0,0,3631,3627,1,0,0,0,3631,3629,1,
0,0,0,3632,349,1,0,0,0,3633,3634,3,352,176,0,3634,3635,3,354,177,0,3635,
351,1,0,0,0,3636,3637,3,1382,691,0,3637,353,1,0,0,0,3638,3639,3,1360,680,
0,3639,355,1,0,0,0,3640,3641,5,46,0,0,3641,3642,5,324,0,0,3642,3643,3,1342,
671,0,3643,3644,3,358,179,0,3644,3645,3,362,181,0,3645,3646,5,63,0,0,3646,
3647,5,174,0,0,3647,3648,5,374,0,0,3648,3649,3,1342,671,0,3649,3650,3,340,
170,0,3650,3666,1,0,0,0,3651,3652,5,46,0,0,3652,3653,5,324,0,0,3653,3654,
5,220,0,0,3654,3655,5,77,0,0,3655,3656,5,389,0,0,3656,3657,3,1342,671,0,
3657,3658,3,358,179,0,3658,3659,3,362,181,0,3659,3660,5,63,0,0,3660,3661,
5,174,0,0,3661,3662,5,374,0,0,3662,3663,3,1342,671,0,3663,3664,3,340,170,
0,3664,3666,1,0,0,0,3665,3640,1,0,0,0,3665,3651,1,0,0,0,3666,357,1,0,0,0,
3667,3668,5,353,0,0,3668,3671,3,1360,680,0,3669,3671,1,0,0,0,3670,3667,1,
0,0,0,3670,3669,1,0,0,0,3671,359,1,0,0,0,3672,3675,5,368,0,0,3673,3676,3,
1360,680,0,3674,3676,5,78,0,0,3675,3673,1,0,0,0,3675,3674,1,0,0,0,3676,361,
1,0,0,0,3677,3680,3,360,180,0,3678,3680,1,0,0,0,3679,3677,1,0,0,0,3679,3678,
1,0,0,0,3680,363,1,0,0,0,3681,3682,5,138,0,0,3682,3683,5,324,0,0,3683,3689,
3,1342,671,0,3684,3690,3,344,172,0,3685,3687,3,360,180,0,3686,3688,3,344,
172,0,3687,3686,1,0,0,0,3687,3688,1,0,0,0,3688,3690,1,0,0,0,3689,3684,1,
0,0,0,3689,3685,1,0,0,0,3690,365,1,0,0,0,3691,3692,5,46,0,0,3692,3693,5,
63,0,0,3693,3694,5,92,0,0,3694,3695,3,1338,669,0,3695,3696,5,2,0,0,3696,
3697,3,176,88,0,3697,3698,5,3,0,0,3698,3699,3,238,119,0,3699,3700,5,324,
0,0,3700,3701,3,1342,671,0,3701,3702,3,340,170,0,3702,3748,1,0,0,0,3703,
3704,5,46,0,0,3704,3705,5,63,0,0,3705,3706,5,92,0,0,3706,3707,5,220,0,0,
3707,3708,5,77,0,0,3708,3709,5,389,0,0,3709,3710,3,1338,669,0,3710,3711,
5,2,0,0,3711,3712,3,176,88,0,3712,3713,5,3,0,0,3713,3714,3,238,119,0,3714,
3715,5,324,0,0,3715,3716,3,1342,671,0,3716,3717,3,340,170,0,3717,3748,1,
0,0,0,3718,3719,5,46,0,0,3719,3720,5,63,0,0,3720,3721,5,92,0,0,3721,3722,
3,1338,669,0,3722,3723,5,278,0,0,3723,3724,5,268,0,0,3724,3725,3,1338,669,
0,3725,3726,3,178,89,0,3726,3727,3,128,64,0,3727,3728,5,324,0,0,3728,3729,
3,1342,671,0,3729,3730,3,340,170,0,3730,3748,1,0,0,0,3731,3732,5,46,0,0,
3732,3733,5,63,0,0,3733,3734,5,92,0,0,3734,3735,5,220,0,0,3735,3736,5,77,
0,0,3736,3737,5,389,0,0,3737,3738,3,1338,669,0,3738,3739,5,278,0,0,3739,
3740,5,268,0,0,3740,3741,3,1338,669,0,3741,3742,3,178,89,0,3742,3743,3,128,
64,0,3743,3744,5,324,0,0,3744,3745,3,1342,671,0,3745,3746,3,340,170,0,3746,
3748,1,0,0,0,3747,3691,1,0,0,0,3747,3703,1,0,0,0,3747,3718,1,0,0,0,3747,
3731,1,0,0,0,3748,367,1,0,0,0,3749,3750,5,444,0,0,3750,3751,5,63,0,0,3751,
3752,5,316,0,0,3752,3753,3,1342,671,0,3753,3754,3,372,186,0,3754,3755,5,
64,0,0,3755,3756,5,324,0,0,3756,3757,3,1342,671,0,3757,3758,5,71,0,0,3758,
3759,3,1342,671,0,3759,3760,3,340,170,0,3760,369,1,0,0,0,3761,3762,5,74,
0,0,3762,3765,5,94,0,0,3763,3765,5,59,0,0,3764,3761,1,0,0,0,3764,3763,1,
0,0,0,3765,371,1,0,0,0,3766,3767,3,370,185,0,3767,3768,5,2,0,0,3768,3769,
3,1078,539,0,3769,3770,5,3,0,0,3770,3773,1,0,0,0,3771,3773,1,0,0,0,3772,
3766,1,0,0,0,3772,3771,1,0,0,0,3773,373,1,0,0,0,3774,3775,5,46,0,0,3775,
3776,5,99,0,0,3776,3777,5,248,0,0,3777,3778,5,62,0,0,3778,3779,3,376,188,
0,3779,3780,5,324,0,0,3780,3781,3,1342,671,0,3781,3782,3,340,170,0,3782,
3796,1,0,0,0,3783,3784,5,46,0,0,3784,3785,5,99,0,0,3785,3786,5,248,0,0,3786,
3787,5,220,0,0,3787,3788,5,77,0,0,3788,3789,5,389,0,0,3789,3790,5,62,0,0,
3790,3791,3,376,188,0,3791,3792,5,324,0,0,3792,3793,3,1342,671,0,3793,3794,
3,340,170,0,3794,3796,1,0,0,0,3795,3774,1,0,0,0,3795,3783,1,0,0,0,3796,375,
1,0,0,0,3797,3800,3,1370,685,0,3798,3800,5,99,0,0,3799,3797,1,0,0,0,3799,
3798,1,0,0,0,3800,377,1,0,0,0,3801,3802,5,191,0,0,3802,3803,5,99,0,0,3803,
3804,5,248,0,0,3804,3805,5,62,0,0,3805,3806,3,376,188,0,3806,3807,5,324,
0,0,3807,3808,3,1342,671,0,3808,3820,1,0,0,0,3809,3810,5,191,0,0,3810,3811,
5,99,0,0,3811,3812,5,248,0,0,3812,3813,5,220,0,0,3813,3814,5,389,0,0,3814,
3815,5,62,0,0,3815,3816,3,376,188,0,3816,3817,5,324,0,0,3817,3818,3,1342,
671,0,3818,3820,1,0,0,0,3819,3801,1,0,0,0,3819,3809,1,0,0,0,3820,379,1,0,
0,0,3821,3822,5,138,0,0,3822,3823,5,99,0,0,3823,3824,5,248,0,0,3824,3825,
5,62,0,0,3825,3826,3,376,188,0,3826,3827,5,324,0,0,3827,3828,3,1342,671,
0,3828,3829,3,344,172,0,3829,381,1,0,0,0,3830,3831,5,46,0,0,3831,3832,5,
445,0,0,3832,3833,3,1342,671,0,3833,3834,5,80,0,0,3834,3835,3,1338,669,0,
3835,3836,3,394,197,0,3836,3837,3,396,198,0,3837,3838,3,390,195,0,3838,3839,
3,386,193,0,3839,3840,3,388,194,0,3840,383,1,0,0,0,3841,3842,5,138,0,0,3842,
3843,5,445,0,0,3843,3844,3,1342,671,0,3844,3845,5,80,0,0,3845,3846,3,1338,
669,0,3846,3847,3,392,196,0,3847,3848,3,386,193,0,3848,3849,3,388,194,0,
3849,385,1,0,0,0,3850,3851,5,100,0,0,3851,3852,5,2,0,0,3852,3853,3,1164,
582,0,3853,3854,5,3,0,0,3854,3857,1,0,0,0,3855,3857,1,0,0,0,3856,3850,1,
0,0,0,3856,3855,1,0,0,0,3857,387,1,0,0,0,3858,3859,5,105,0,0,3859,3860,5,
42,0,0,3860,3861,5,2,0,0,3861,3862,3,1164,582,0,3862,3863,5,3,0,0,3863,3866,
1,0,0,0,3864,3866,1,0,0,0,3865,3858,1,0,0,0,3865,3864,1,0,0,0,3866,389,1,
0,0,0,3867,3868,5,94,0,0,3868,3871,3,1372,686,0,3869,3871,1,0,0,0,3870,3867,
1,0,0,0,3870,3869,1,0,0,0,3871,391,1,0,0,0,3872,3873,5,94,0,0,3873,3876,
3,1372,686,0,3874,3876,1,0,0,0,3875,3872,1,0,0,0,3875,3874,1,0,0,0,3876,
393,1,0,0,0,3877,3878,5,36,0,0,3878,3881,3,1384,692,0,3879,3881,1,0,0,0,
3880,3877,1,0,0,0,3880,3879,1,0,0,0,3881,395,1,0,0,0,3882,3883,5,62,0,0,
3883,3886,3,398,199,0,3884,3886,1,0,0,0,3885,3882,1,0,0,0,3885,3884,1,0,
0,0,3886,397,1,0,0,0,3887,3888,7,17,0,0,3888,399,1,0,0,0,3889,3890,5,46,
0,0,3890,3891,5,131,0,0,3891,3892,5,446,0,0,3892,3893,3,1342,671,0,3893,
3894,5,353,0,0,3894,3895,3,402,201,0,3895,3896,5,215,0,0,3896,3897,3,300,
150,0,3897,401,1,0,0,0,3898,3899,7,18,0,0,3899,403,1,0,0,0,3900,3901,5,46,
0,0,3901,3902,5,350,0,0,3902,3903,3,1342,671,0,3903,3904,3,406,203,0,3904,
3905,3,408,204,0,3905,3906,5,80,0,0,3906,3907,3,1338,669,0,3907,3908,3,412,
206,0,3908,3909,3,424,212,0,3909,3910,3,430,215,0,3910,3911,5,202,0,0,3911,
3912,3,432,216,0,3912,3913,3,1348,674,0,3913,3914,5,2,0,0,3914,3915,3,434,
217,0,3915,3916,5,3,0,0,3916,3939,1,0,0,0,3917,3918,5,46,0,0,3918,3919,5,
45,0,0,3919,3920,5,350,0,0,3920,3921,3,1342,671,0,3921,3922,5,135,0,0,3922,
3923,3,408,204,0,3923,3924,5,80,0,0,3924,3925,3,1338,669,0,3925,3926,3,438,
219,0,3926,3927,3,440,220,0,3927,3928,5,62,0,0,3928,3929,5,192,0,0,3929,
3930,5,407,0,0,3930,3931,3,430,215,0,3931,3932,5,202,0,0,3932,3933,3,432,
216,0,3933,3934,3,1348,674,0,3934,3935,5,2,0,0,3935,3936,3,434,217,0,3936,
3937,5,3,0,0,3937,3939,1,0,0,0,3938,3900,1,0,0,0,3938,3917,1,0,0,0,3939,
405,1,0,0,0,3940,3945,5,145,0,0,3941,3945,5,135,0,0,3942,3943,5,233,0,0,
3943,3945,5,268,0,0,3944,3940,1,0,0,0,3944,3941,1,0,0,0,3944,3942,1,0,0,
0,3945,407,1,0,0,0,3946,3951,3,410,205,0,3947,3948,5,82,0,0,3948,3950,3,
410,205,0,3949,3947,1,0,0,0,3950,3953,1,0,0,0,3951,3949,1,0,0,0,3951,3952,
1,0,0,0,3952,409,1,0,0,0,3953,3951,1,0,0,0,3954,3962,5,232,0,0,3955,3962,
5,182,0,0,3956,3962,5,362,0,0,3957,3958,5,362,0,0,3958,3959,5,268,0,0,3959,
3962,3,216,108,0,3960,3962,5,351,0,0,3961,3954,1,0,0,0,3961,3955,1,0,0,0,
3961,3956,1,0,0,0,3961,3957,1,0,0,0,3961,3960,1,0,0,0,3962,411,1,0,0,0,3963,
3964,5,447,0,0,3964,3967,3,414,207,0,3965,3967,1,0,0,0,3966,3963,1,0,0,0,
3966,3965,1,0,0,0,3967,413,1,0,0,0,3968,3970,3,416,208,0,3969,3968,1,0,0,
0,3970,3971,1,0,0,0,3971,3969,1,0,0,0,3971,3972,1,0,0,0,3972,415,1,0,0,0,
3973,3974,3,418,209,0,3974,3975,3,420,210,0,3975,3976,3,834,417,0,3976,3977,
3,422,211,0,3977,417,1,0,0,0,3978,3979,7,19,0,0,3979,419,1,0,0,0,3980,3981,
7,20,0,0,3981,421,1,0,0,0,3982,3983,3,1374,687,0,3983,423,1,0,0,0,3984,3985,
5,62,0,0,3985,3986,3,426,213,0,3986,3987,3,428,214,0,3987,3990,1,0,0,0,3988,
3990,1,0,0,0,3989,3984,1,0,0,0,3989,3988,1,0,0,0,3990,425,1,0,0,0,3991,3994,
5,192,0,0,3992,3994,1,0,0,0,3993,3991,1,0,0,0,3993,3992,1,0,0,0,3994,427,
1,0,0,0,3995,3996,7,21,0,0,3996,429,1,0,0,0,3997,3998,5,102,0,0,3998,3999,
5,2,0,0,3999,4000,3,1164,582,0,4000,4001,5,3,0,0,4001,4004,1,0,0,0,4002,
4004,1,0,0,0,4003,3997,1,0,0,0,4003,4002,1,0,0,0,4004,431,1,0,0,0,4005,4006,
7,22,0,0,4006,433,1,0,0,0,4007,4010,3,436,218,0,4008,4010,1,0,0,0,4009,4007,
1,0,0,0,4009,4008,1,0,0,0,4010,4015,1,0,0,0,4011,4012,5,6,0,0,4012,4014,
3,436,218,0,4013,4011,1,0,0,0,4014,4017,1,0,0,0,4015,4013,1,0,0,0,4015,4016,
1,0,0,0,4016,435,1,0,0,0,4017,4015,1,0,0,0,4018,4023,3,1358,679,0,4019,4023,
3,1356,678,0,4020,4023,3,1360,680,0,4021,4023,3,1382,691,0,4022,4018,1,0,
0,0,4022,4019,1,0,0,0,4022,4020,1,0,0,0,4022,4021,1,0,0,0,4023,437,1,0,0,
0,4024,4025,5,64,0,0,4025,4028,3,1338,669,0,4026,4028,1,0,0,0,4027,4024,
1,0,0,0,4027,4026,1,0,0,0,4028,439,1,0,0,0,4029,4031,3,442,221,0,4030,4029,
1,0,0,0,4031,4034,1,0,0,0,4032,4030,1,0,0,0,4032,4033,1,0,0,0,4033,441,1,
0,0,0,4034,4032,1,0,0,0,4035,4036,5,77,0,0,4036,4047,5,54,0,0,4037,4047,
5,54,0,0,4038,4039,5,69,0,0,4039,4047,5,221,0,0,4040,4041,5,69,0,0,4041,
4047,5,180,0,0,4042,4043,5,77,0,0,4043,4047,5,364,0,0,4044,4045,5,262,0,
0,4045,4047,5,228,0,0,4046,4035,1,0,0,0,4046,4037,1,0,0,0,4046,4038,1,0,
0,0,4046,4040,1,0,0,0,4046,4042,1,0,0,0,4046,4044,1,0,0,0,4047,443,1,0,0,
0,4048,4049,5,46,0,0,4049,4050,5,198,0,0,4050,4051,5,350,0,0,4051,4052,3,
1342,671,0,4052,4053,5,80,0,0,4053,4054,3,1382,691,0,4054,4055,5,202,0,0,
4055,4056,3,432,216,0,4056,4057,3,1348,674,0,4057,4058,5,2,0,0,4058,4059,
5,3,0,0,4059,4075,1,0,0,0,4060,4061,5,46,0,0,4061,4062,5,198,0,0,4062,4063,
5,350,0,0,4063,4064,3,1342,671,0,4064,4065,5,80,0,0,4065,4066,3,1382,691,
0,4066,4067,5,102,0,0,4067,4068,3,446,223,0,4068,4069,5,202,0,0,4069,4070,
3,432,216,0,4070,4071,3,1348,674,0,4071,4072,5,2,0,0,4072,4073,5,3,0,0,4073,
4075,1,0,0,0,4074,4048,1,0,0,0,4074,4060,1,0,0,0,4075,445,1,0,0,0,4076,4081,
3,448,224,0,4077,4078,5,33,0,0,4078,4080,3,448,224,0,4079,4077,1,0,0,0,4080,
4083,1,0,0,0,4081,4079,1,0,0,0,4081,4082,1,0,0,0,4082,447,1,0,0,0,4083,4081,
1,0,0,0,4084,4085,3,1374,687,0,4085,4086,5,68,0,0,4086,4087,5,2,0,0,4087,
4088,3,450,225,0,4088,4089,5,3,0,0,4089,449,1,0,0,0,4090,4095,3,1360,680,
0,4091,4092,5,6,0,0,4092,4094,3,1360,680,0,4093,4091,1,0,0,0,4094,4097,1,
0,0,0,4095,4093,1,0,0,0,4095,4096,1,0,0,0,4096,451,1,0,0,0,4097,4095,1,0,
0,0,4098,4099,5,138,0,0,4099,4100,5,198,0,0,4100,4101,5,350,0,0,4101,4102,
3,1342,671,0,4102,4103,3,454,227,0,4103,453,1,0,0,0,4104,4111,5,193,0,0,
4105,4106,5,193,0,0,4106,4111,5,305,0,0,4107,4108,5,193,0,0,4108,4111,5,
139,0,0,4109,4111,5,186,0,0,4110,4104,1,0,0,0,4110,4105,1,0,0,0,4110,4107,
1,0,0,0,4110,4109,1,0,0,0,4111,455,1,0,0,0,4112,4113,5,46,0,0,4113,4114,
5,140,0,0,4114,4115,3,524,262,0,4115,4116,5,42,0,0,4116,4117,5,2,0,0,4117,
4118,3,1164,582,0,4118,4119,5,3,0,0,4119,4120,3,440,220,0,4120,457,1,0,0,
0,4121,4122,5,46,0,0,4122,4123,3,618,309,0,4123,4124,5,136,0,0,4124,4125,
3,1348,674,0,4125,4126,3,646,323,0,4126,4127,3,460,230,0,4127,4228,1,0,0,
0,4128,4129,5,46,0,0,4129,4130,3,618,309,0,4130,4131,5,136,0,0,4131,4132,
3,1348,674,0,4132,4133,3,468,234,0,4133,4228,1,0,0,0,4134,4135,5,46,0,0,
4135,4136,5,271,0,0,4136,4137,3,684,342,0,4137,4138,3,460,230,0,4138,4228,
1,0,0,0,4139,4140,5,46,0,0,4140,4141,5,353,0,0,4141,4142,3,524,262,0,4142,
4143,3,460,230,0,4143,4228,1,0,0,0,4144,4145,5,46,0,0,4145,4146,5,353,0,
0,4146,4228,3,524,262,0,4147,4148,5,46,0,0,4148,4149,5,353,0,0,4149,4150,
3,524,262,0,4150,4151,5,36,0,0,4151,4152,5,2,0,0,4152,4153,3,1100,550,0,
4153,4154,5,3,0,0,4154,4228,1,0,0,0,4155,4156,5,46,0,0,4156,4157,5,353,0,
0,4157,4158,3,524,262,0,4158,4159,5,36,0,0,4159,4160,5,196,0,0,4160,4161,
5,2,0,0,4161,4162,3,474,237,0,4162,4163,5,3,0,0,4163,4228,1,0,0,0,4164,4165,
5,46,0,0,4165,4166,5,353,0,0,4166,4167,3,524,262,0,4167,4168,5,36,0,0,4168,
4169,5,292,0,0,4169,4170,3,460,230,0,4170,4228,1,0,0,0,4171,4172,5,46,0,
0,4172,4173,5,348,0,0,4173,4174,5,318,0,0,4174,4175,5,276,0,0,4175,4176,
3,524,262,0,4176,4177,3,460,230,0,4177,4228,1,0,0,0,4178,4179,5,46,0,0,4179,
4180,5,348,0,0,4180,4181,5,318,0,0,4181,4182,5,185,0,0,4182,4183,3,524,262,
0,4183,4184,3,460,230,0,4184,4228,1,0,0,0,4185,4186,5,46,0,0,4186,4187,5,
348,0,0,4187,4188,5,318,0,0,4188,4189,5,346,0,0,4189,4190,3,524,262,0,4190,
4191,3,460,230,0,4191,4228,1,0,0,0,4192,4193,5,46,0,0,4193,4194,5,348,0,
0,4194,4195,5,318,0,0,4195,4196,5,163,0,0,4196,4197,3,524,262,0,4197,4198,
3,460,230,0,4198,4228,1,0,0,0,4199,4200,5,46,0,0,4200,4201,5,108,0,0,4201,
4202,3,524,262,0,4202,4203,3,460,230,0,4203,4228,1,0,0,0,4204,4205,5,46,
0,0,4205,4206,5,108,0,0,4206,4207,5,220,0,0,4207,4208,5,77,0,0,4208,4209,
5,389,0,0,4209,4210,3,524,262,0,4210,4211,3,460,230,0,4211,4228,1,0,0,0,
4212,4213,5,46,0,0,4213,4214,5,108,0,0,4214,4215,3,524,262,0,4215,4216,5,
64,0,0,4216,4217,3,524,262,0,4217,4228,1,0,0,0,4218,4219,5,46,0,0,4219,4220,
5,108,0,0,4220,4221,5,220,0,0,4221,4222,5,77,0,0,4222,4223,5,389,0,0,4223,
4224,3,524,262,0,4224,4225,5,64,0,0,4225,4226,3,524,262,0,4226,4228,1,0,
0,0,4227,4121,1,0,0,0,4227,4128,1,0,0,0,4227,4134,1,0,0,0,4227,4139,1,0,
0,0,4227,4144,1,0,0,0,4227,4147,1,0,0,0,4227,4155,1,0,0,0,4227,4164,1,0,
0,0,4227,4171,1,0,0,0,4227,4178,1,0,0,0,4227,4185,1,0,0,0,4227,4192,1,0,
0,0,4227,4199,1,0,0,0,4227,4204,1,0,0,0,4227,4212,1,0,0,0,4227,4218,1,0,
0,0,4228,459,1,0,0,0,4229,4230,5,2,0,0,4230,4231,3,462,231,0,4231,4232,5,
3,0,0,4232,461,1,0,0,0,4233,4238,3,464,232,0,4234,4235,5,6,0,0,4235,4237,
3,464,232,0,4236,4234,1,0,0,0,4237,4240,1,0,0,0,4238,4236,1,0,0,0,4238,4239,
1,0,0,0,4239,463,1,0,0,0,4240,4238,1,0,0,0,4241,4244,3,1382,691,0,4242,4243,
5,10,0,0,4243,4245,3,466,233,0,4244,4242,1,0,0,0,4244,4245,1,0,0,0,4245,
465,1,0,0,0,4246,4253,3,640,320,0,4247,4253,3,1394,697,0,4248,4253,3,1278,
639,0,4249,4253,3,292,146,0,4250,4253,3,1360,680,0,4251,4253,5,400,0,0,4252,
4246,1,0,0,0,4252,4247,1,0,0,0,4252,4248,1,0,0,0,4252,4249,1,0,0,0,4252,
4250,1,0,0,0,4252,4251,1,0,0,0,4253,467,1,0,0,0,4254,4255,5,2,0,0,4255,4256,
3,470,235,0,4256,4257,5,3,0,0,4257,469,1,0,0,0,4258,4263,3,472,236,0,4259,
4260,5,6,0,0,4260,4262,3,472,236,0,4261,4259,1,0,0,0,4262,4265,1,0,0,0,4263,
4261,1,0,0,0,4263,4264,1,0,0,0,4264,471,1,0,0,0,4265,4263,1,0,0,0,4266,4267,
3,1384,692,0,4267,4268,5,10,0,0,4268,4269,3,466,233,0,4269,473,1,0,0,0,4270,
4273,3,476,238,0,4271,4273,1,0,0,0,4272,4270,1,0,0,0,4272,4271,1,0,0,0,4273,
475,1,0,0,0,4274,4279,3,1360,680,0,4275,4276,5,6,0,0,4276,4278,3,1360,680,
0,4277,4275,1,0,0,0,4278,4281,1,0,0,0,4279,4277,1,0,0,0,4279,4280,1,0,0,
0,4280,477,1,0,0,0,4281,4279,1,0,0,0,4282,4283,5,138,0,0,4283,4284,5,353,
0,0,4284,4285,3,524,262,0,4285,4286,5,133,0,0,4286,4287,5,450,0,0,4287,4288,
3,480,240,0,4288,4289,3,1360,680,0,4289,4320,1,0,0,0,4290,4291,5,138,0,0,
4291,4292,5,353,0,0,4292,4293,3,524,262,0,4293,4294,5,133,0,0,4294,4295,
5,450,0,0,4295,4296,3,480,240,0,4296,4297,3,1360,680,0,4297,4298,5,145,0,
0,4298,4299,3,1360,680,0,4299,4320,1,0,0,0,4300,4301,5,138,0,0,4301,4302,
5,353,0,0,4302,4303,3,524,262,0,4303,4304,5,133,0,0,4304,4305,5,450,0,0,
4305,4306,3,480,240,0,4306,4307,3,1360,680,0,4307,4308,5,135,0,0,4308,4309,
3,1360,680,0,4309,4320,1,0,0,0,4310,4311,5,138,0,0,4311,4312,5,353,0,0,4312,
4313,3,524,262,0,4313,4314,5,302,0,0,4314,4315,5,450,0,0,4315,4316,3,1360,
680,0,4316,4317,5,94,0,0,4317,4318,3,1360,680,0,4318,4320,1,0,0,0,4319,4282,
1,0,0,0,4319,4290,1,0,0,0,4319,4300,1,0,0,0,4319,4310,1,0,0,0,4320,479,1,
0,0,0,4321,4322,5,220,0,0,4322,4323,5,77,0,0,4323,4326,5,389,0,0,4324,4326,
1,0,0,0,4325,4321,1,0,0,0,4325,4324,1,0,0,0,4326,481,1,0,0,0,4327,4328,5,
46,0,0,4328,4329,5,271,0,0,4329,4330,5,156,0,0,4330,4331,3,524,262,0,4331,
4332,3,488,244,0,4332,4333,5,62,0,0,4333,4334,5,353,0,0,4334,4335,3,1120,
560,0,4335,4336,5,100,0,0,4336,4337,3,1342,671,0,4337,4338,3,490,245,0,4338,
4339,5,36,0,0,4339,4340,3,484,242,0,4340,483,1,0,0,0,4341,4346,3,486,243,
0,4342,4343,5,6,0,0,4343,4345,3,486,243,0,4344,4342,1,0,0,0,4345,4348,1,
0,0,0,4346,4344,1,0,0,0,4346,4347,1,0,0,0,4347,485,1,0,0,0,4348,4346,1,0,
0,0,4349,4350,5,271,0,0,4350,4351,3,1358,679,0,4351,4352,3,684,342,0,4352,
4353,3,492,246,0,4353,4354,3,494,247,0,4354,4375,1,0,0,0,4355,4356,5,271,
0,0,4356,4357,3,1358,679,0,4357,4358,3,688,344,0,4358,4359,3,492,246,0,4359,
4360,3,494,247,0,4360,4375,1,0,0,0,4361,4362,5,211,0,0,4362,4363,3,1358,
679,0,4363,4364,3,626,313,0,4364,4375,1,0,0,0,4365,4366,5,211,0,0,4366,4367,
3,1358,679,0,4367,4368,5,2,0,0,4368,4369,3,1288,644,0,4369,4370,5,3,0,0,
4370,4371,3,626,313,0,4371,4375,1,0,0,0,4372,4373,5,338,0,0,4373,4375,3,
1120,560,0,4374,4349,1,0,0,0,4374,4355,1,0,0,0,4374,4361,1,0,0,0,4374,4365,
1,0,0,0,4374,4372,1,0,0,0,4375,487,1,0,0,0,4376,4379,5,53,0,0,4377,4379,
1,0,0,0,4378,4376,1,0,0,0,4378,4377,1,0,0,0,4379,489,1,0,0,0,4380,4381,5,
206,0,0,4381,4384,3,524,262,0,4382,4384,1,0,0,0,4383,4380,1,0,0,0,4383,4382,
1,0,0,0,4384,491,1,0,0,0,4385,4386,5,62,0,0,4386,4393,5,318,0,0,4387,4388,
5,62,0,0,4388,4389,5,83,0,0,4389,4390,5,147,0,0,4390,4393,3,524,262,0,4391,
4393,1,0,0,0,4392,4385,1,0,0,0,4392,4387,1,0,0,0,4392,4391,1,0,0,0,4393,
493,1,0,0,0,4394,4397,5,295,0,0,4395,4397,1,0,0,0,4396,4394,1,0,0,0,4396,
4395,1,0,0,0,4397,495,1,0,0,0,4398,4399,5,46,0,0,4399,4400,5,271,0,0,4400,
4401,5,206,0,0,4401,4402,3,524,262,0,4402,4403,5,100,0,0,4403,4404,3,1342,
671,0,4404,497,1,0,0,0,4405,4406,5,138,0,0,4406,4407,5,271,0,0,4407,4408,
5,206,0,0,4408,4409,3,524,262,0,4409,4410,5,100,0,0,4410,4411,3,1342,671,
0,4411,4412,5,133,0,0,4412,4413,3,484,242,0,4413,4424,1,0,0,0,4414,4415,
5,138,0,0,4415,4416,5,271,0,0,4416,4417,5,206,0,0,4417,4418,3,524,262,0,
4418,4419,5,100,0,0,4419,4420,3,1342,671,0,4420,4421,5,191,0,0,4421,4422,
3,500,250,0,4422,4424,1,0,0,0,4423,4405,1,0,0,0,4423,4414,1,0,0,0,4424,499,
1,0,0,0,4425,4430,3,502,251,0,4426,4427,5,6,0,0,4427,4429,3,502,251,0,4428,
4426,1,0,0,0,4429,4432,1,0,0,0,4430,4428,1,0,0,0,4430,4431,1,0,0,0,4431,
501,1,0,0,0,4432,4430,1,0,0,0,4433,4434,5,271,0,0,4434,4435,3,1358,679,0,
4435,4436,5,2,0,0,4436,4437,3,1288,644,0,4437,4438,5,3,0,0,4438,4446,1,0,
0,0,4439,4440,5,211,0,0,4440,4441,3,1358,679,0,4441,4442,5,2,0,0,4442,4443,
3,1288,644,0,4443,4444,5,3,0,0,4444,4446,1,0,0,0,4445,4433,1,0,0,0,4445,
4439,1,0,0,0,4446,503,1,0,0,0,4447,4448,5,191,0,0,4448,4449,5,271,0,0,4449,
4450,5,156,0,0,4450,4451,3,524,262,0,4451,4452,5,100,0,0,4452,4453,3,1342,
671,0,4453,4454,3,108,54,0,4454,4466,1,0,0,0,4455,4456,5,191,0,0,4456,4457,
5,271,0,0,4457,4458,5,156,0,0,4458,4459,5,220,0,0,4459,4460,5,389,0,0,4460,
4461,3,524,262,0,4461,4462,5,100,0,0,4462,4463,3,1342,671,0,4463,4464,3,
108,54,0,4464,4466,1,0,0,0,4465,4447,1,0,0,0,4465,4455,1,0,0,0,4466,505,
1,0,0,0,4467,4468,5,191,0,0,4468,4469,5,271,0,0,4469,4470,5,206,0,0,4470,
4471,3,524,262,0,4471,4472,5,100,0,0,4472,4473,3,1342,671,0,4473,4474,3,
108,54,0,4474,4486,1,0,0,0,4475,4476,5,191,0,0,4476,4477,5,271,0,0,4477,
4478,5,206,0,0,4478,4479,5,220,0,0,4479,4480,5,389,0,0,4480,4481,3,524,262,
0,4481,4482,5,100,0,0,4482,4483,3,1342,671,0,4483,4484,3,108,54,0,4484,4486,
1,0,0,0,4485,4467,1,0,0,0,4485,4475,1,0,0,0,4486,507,1,0,0,0,4487,4488,5,
191,0,0,4488,4489,5,274,0,0,4489,4490,5,147,0,0,4490,4491,3,1372,686,0,4491,
4492,3,108,54,0,4492,509,1,0,0,0,4493,4494,5,294,0,0,4494,4495,5,274,0,0,
4495,4496,5,147,0,0,4496,4497,3,1372,686,0,4497,4498,5,94,0,0,4498,4499,
3,1370,685,0,4499,511,1,0,0,0,4500,4501,5,191,0,0,4501,4502,3,514,257,0,
4502,4503,5,220,0,0,4503,4504,5,389,0,0,4504,4505,3,522,261,0,4505,4506,
3,108,54,0,4506,4579,1,0,0,0,4507,4508,5,191,0,0,4508,4509,3,514,257,0,4509,
4510,3,522,261,0,4510,4511,3,108,54,0,4511,4579,1,0,0,0,4512,4513,5,191,
0,0,4513,4514,3,518,259,0,4514,4515,5,220,0,0,4515,4516,5,389,0,0,4516,4517,
3,1340,670,0,4517,4518,3,108,54,0,4518,4579,1,0,0,0,4519,4520,5,191,0,0,
4520,4521,3,518,259,0,4521,4522,3,1340,670,0,4522,4523,3,108,54,0,4523,4579,
1,0,0,0,4524,4525,5,191,0,0,4525,4526,3,520,260,0,4526,4527,3,1342,671,0,
4527,4528,5,80,0,0,4528,4529,3,524,262,0,4529,4530,3,108,54,0,4530,4579,
1,0,0,0,4531,4532,5,191,0,0,4532,4533,3,520,260,0,4533,4534,5,220,0,0,4534,
4535,5,389,0,0,4535,4536,3,1342,671,0,4536,4537,5,80,0,0,4537,4538,3,524,
262,0,4538,4539,3,108,54,0,4539,4579,1,0,0,0,4540,4541,5,191,0,0,4541,4542,
5,353,0,0,4542,4543,3,528,264,0,4543,4544,3,108,54,0,4544,4579,1,0,0,0,4545,
4546,5,191,0,0,4546,4547,5,353,0,0,4547,4548,5,220,0,0,4548,4549,5,389,0,
0,4549,4550,3,528,264,0,4550,4551,3,108,54,0,4551,4579,1,0,0,0,4552,4553,
5,191,0,0,4553,4554,5,189,0,0,4554,4555,3,528,264,0,4555,4556,3,108,54,0,
4556,4579,1,0,0,0,4557,4558,5,191,0,0,4558,4559,5,189,0,0,4559,4560,5,220,
0,0,4560,4561,5,389,0,0,4561,4562,3,528,264,0,4562,4563,3,108,54,0,4563,
4579,1,0,0,0,4564,4565,5,191,0,0,4565,4566,5,226,0,0,4566,4567,5,109,0,0,
4567,4568,3,522,261,0,4568,4569,3,108,54,0,4569,4579,1,0,0,0,4570,4571,5,
191,0,0,4571,4572,5,226,0,0,4572,4573,5,109,0,0,4573,4574,5,220,0,0,4574,
4575,5,389,0,0,4575,4576,3,522,261,0,4576,4577,3,108,54,0,4577,4579,1,0,
0,0,4578,4500,1,0,0,0,4578,4507,1,0,0,0,4578,4512,1,0,0,0,4578,4519,1,0,
0,0,4578,4524,1,0,0,0,4578,4531,1,0,0,0,4578,4540,1,0,0,0,4578,4545,1,0,
0,0,4578,4552,1,0,0,0,4578,4557,1,0,0,0,4578,4564,1,0,0,0,4578,4570,1,0,
0,0,4579,513,1,0,0,0,4580,4604,5,92,0,0,4581,4604,5,321,0,0,4582,4604,5,
369,0,0,4583,4584,5,251,0,0,4584,4604,5,369,0,0,4585,4604,5,226,0,0,4586,
4587,5,63,0,0,4587,4604,5,92,0,0,4588,4604,5,108,0,0,4589,4604,5,168,0,0,
4590,4604,5,335,0,0,4591,4592,5,348,0,0,4592,4593,5,318,0,0,4593,4604,5,
276,0,0,4594,4595,5,348,0,0,4595,4596,5,318,0,0,4596,4604,5,185,0,0,4597,
4598,5,348,0,0,4598,4599,5,318,0,0,4599,4604,5,346,0,0,4600,4601,5,348,0,
0,4601,4602,5,318,0,0,4602,4604,5,163,0,0,4603,4580,1,0,0,0,4603,4581,1,
0,0,0,4603,4582,1,0,0,0,4603,4583,1,0,0,0,4603,4585,1,0,0,0,4603,4586,1,
0,0,0,4603,4588,1,0,0,0,4603,4589,1,0,0,0,4603,4590,1,0,0,0,4603,4591,1,
0,0,0,4603,4594,1,0,0,0,4603,4597,1,0,0,0,4603,4600,1,0,0,0,4604,515,1,0,
0,0,4605,4611,3,518,259,0,4606,4611,5,175,0,0,4607,4611,5,311,0,0,4608,4611,
5,451,0,0,4609,4611,5,344,0,0,4610,4605,1,0,0,0,4610,4606,1,0,0,0,4610,4607,
1,0,0,0,4610,4608,1,0,0,0,4610,4609,1,0,0,0,4611,517,1,0,0,0,4612,4613,5,
131,0,0,4613,4627,5,446,0,0,4614,4615,5,198,0,0,4615,4627,5,350,0,0,4616,
4627,5,204,0,0,4617,4618,5,63,0,0,4618,4619,5,174,0,0,4619,4627,5,374,0,
0,4620,4621,3,308,154,0,4621,4622,5,238,0,0,4622,4627,1,0,0,0,4623,4627,
5,452,0,0,4624,4627,5,316,0,0,4625,4627,5,324,0,0,4626,4612,1,0,0,0,4626,
4614,1,0,0,0,4626,4616,1,0,0,0,4626,4617,1,0,0,0,4626,4620,1,0,0,0,4626,
4623,1,0,0,0,4626,4624,1,0,0,0,4626,4625,1,0,0,0,4627,519,1,0,0,0,4628,4629,
7,23,0,0,4629,521,1,0,0,0,4630,4635,3,524,262,0,4631,4632,5,6,0,0,4632,4634,
3,524,262,0,4633,4631,1,0,0,0,4634,4637,1,0,0,0,4635,4633,1,0,0,0,4635,4636,
1,0,0,0,4636,523,1,0,0,0,4637,4635,1,0,0,0,4638,4640,3,1374,687,0,4639,4641,
3,526,263,0,4640,4639,1,0,0,0,4640,4641,1,0,0,0,4641,525,1,0,0,0,4642,4643,
5,11,0,0,4643,4645,3,1344,672,0,4644,4642,1,0,0,0,4645,4646,1,0,0,0,4646,
4644,1,0,0,0,4646,4647,1,0,0,0,4647,527,1,0,0,0,4648,4653,3,1120,560,0,4649,
4650,5,6,0,0,4650,4652,3,1120,560,0,4651,4649,1,0,0,0,4652,4655,1,0,0,0,
4653,4651,1,0,0,0,4653,4654,1,0,0,0,4654,529,1,0,0,0,4655,4653,1,0,0,0,4656,
4657,5,351,0,0,4657,4658,3,990,495,0,4658,4659,3,1078,539,0,4659,4660,3,
532,266,0,4660,4661,3,108,54,0,4661,531,1,0,0,0,4662,4663,5,167,0,0,4663,
4668,5,219,0,0,4664,4665,5,307,0,0,4665,4668,5,219,0,0,4666,4668,1,0,0,0,
4667,4662,1,0,0,0,4667,4664,1,0,0,0,4667,4666,1,0,0,0,4668,533,1,0,0,0,4669,
4670,5,159,0,0,4670,4671,5,80,0,0,4671,4672,3,514,257,0,4672,4673,3,524,
262,0,4673,4674,5,116,0,0,4674,4675,3,536,268,0,4675,4817,1,0,0,0,4676,4677,
5,159,0,0,4677,4678,5,80,0,0,4678,4679,5,44,0,0,4679,4680,3,524,262,0,4680,
4681,5,116,0,0,4681,4682,3,536,268,0,4682,4817,1,0,0,0,4683,4684,5,159,0,
0,4684,4685,5,80,0,0,4685,4686,3,516,258,0,4686,4687,3,1342,671,0,4687,4688,
5,116,0,0,4688,4689,3,536,268,0,4689,4817,1,0,0,0,4690,4691,5,159,0,0,4691,
4692,5,80,0,0,4692,4693,5,353,0,0,4693,4694,3,1120,560,0,4694,4695,5,116,
0,0,4695,4696,3,536,268,0,4696,4817,1,0,0,0,4697,4698,5,159,0,0,4698,4699,
5,80,0,0,4699,4700,5,189,0,0,4700,4701,3,1120,560,0,4701,4702,5,116,0,0,
4702,4703,3,536,268,0,4703,4817,1,0,0,0,4704,4705,5,159,0,0,4705,4706,5,
80,0,0,4706,4707,5,136,0,0,4707,4708,3,650,325,0,4708,4709,5,116,0,0,4709,
4710,3,536,268,0,4710,4817,1,0,0,0,4711,4712,5,159,0,0,4712,4713,5,80,0,
0,4713,4714,5,211,0,0,4714,4715,3,626,313,0,4715,4716,5,116,0,0,4716,4717,
3,536,268,0,4717,4817,1,0,0,0,4718,4719,5,159,0,0,4719,4720,5,80,0,0,4720,
4721,5,271,0,0,4721,4722,3,688,344,0,4722,4723,5,116,0,0,4723,4724,3,536,
268,0,4724,4817,1,0,0,0,4725,4726,5,159,0,0,4726,4727,5,80,0,0,4727,4728,
5,45,0,0,4728,4729,3,1342,671,0,4729,4730,5,80,0,0,4730,4731,3,524,262,0,
4731,4732,5,116,0,0,4732,4733,3,536,268,0,4733,4817,1,0,0,0,4734,4735,5,
159,0,0,4735,4736,5,80,0,0,4736,4737,5,45,0,0,4737,4738,3,1342,671,0,4738,
4739,5,80,0,0,4739,4740,5,189,0,0,4740,4741,3,524,262,0,4741,4742,5,116,
0,0,4742,4743,3,536,268,0,4743,4817,1,0,0,0,4744,4745,5,159,0,0,4745,4746,
5,80,0,0,4746,4747,3,520,260,0,4747,4748,3,1342,671,0,4748,4749,5,80,0,0,
4749,4750,3,524,262,0,4750,4751,5,116,0,0,4751,4752,3,536,268,0,4752,4817,
1,0,0,0,4753,4754,5,159,0,0,4754,4755,5,80,0,0,4755,4756,5,289,0,0,4756,
4757,3,626,313,0,4757,4758,5,116,0,0,4758,4759,3,536,268,0,4759,4817,1,0,
0,0,4760,4761,5,159,0,0,4761,4762,5,80,0,0,4762,4763,5,442,0,0,4763,4764,
3,626,313,0,4764,4765,5,116,0,0,4765,4766,3,536,268,0,4766,4817,1,0,0,0,
4767,4768,5,159,0,0,4768,4769,5,80,0,0,4769,4770,5,443,0,0,4770,4771,5,62,
0,0,4771,4772,3,1120,560,0,4772,4773,5,238,0,0,4773,4774,3,1342,671,0,4774,
4775,5,116,0,0,4775,4776,3,536,268,0,4776,4817,1,0,0,0,4777,4778,5,159,0,
0,4778,4779,5,80,0,0,4779,4780,5,271,0,0,4780,4781,5,156,0,0,4781,4782,3,
524,262,0,4782,4783,5,100,0,0,4783,4784,3,1342,671,0,4784,4785,5,116,0,0,
4785,4786,3,536,268,0,4786,4817,1,0,0,0,4787,4788,5,159,0,0,4788,4789,5,
80,0,0,4789,4790,5,271,0,0,4790,4791,5,206,0,0,4791,4792,3,524,262,0,4792,
4793,5,100,0,0,4793,4794,3,1342,671,0,4794,4795,5,116,0,0,4795,4796,3,536,
268,0,4796,4817,1,0,0,0,4797,4798,5,159,0,0,4798,4799,5,80,0,0,4799,4800,
5,239,0,0,4800,4801,5,267,0,0,4801,4802,3,292,146,0,4802,4803,5,116,0,0,
4803,4804,3,536,268,0,4804,4817,1,0,0,0,4805,4806,5,159,0,0,4806,4807,5,
80,0,0,4807,4808,5,41,0,0,4808,4809,5,2,0,0,4809,4810,3,1120,560,0,4810,
4811,5,36,0,0,4811,4812,3,1120,560,0,4812,4813,5,3,0,0,4813,4814,5,116,0,
0,4814,4815,3,536,268,0,4815,4817,1,0,0,0,4816,4669,1,0,0,0,4816,4676,1,
0,0,0,4816,4683,1,0,0,0,4816,4690,1,0,0,0,4816,4697,1,0,0,0,4816,4704,1,
0,0,0,4816,4711,1,0,0,0,4816,4718,1,0,0,0,4816,4725,1,0,0,0,4816,4734,1,
0,0,0,4816,4744,1,0,0,0,4816,4753,1,0,0,0,4816,4760,1,0,0,0,4816,4767,1,
0,0,0,4816,4777,1,0,0,0,4816,4787,1,0,0,0,4816,4797,1,0,0,0,4816,4805,1,
0,0,0,4817,535,1,0,0,0,4818,4821,3,1360,680,0,4819,4821,5,78,0,0,4820,4818,
1,0,0,0,4820,4819,1,0,0,0,4821,537,1,0,0,0,4822,4823,5,320,0,0,4823,4824,
5,237,0,0,4824,4825,3,540,270,0,4825,4826,5,80,0,0,4826,4827,3,514,257,0,
4827,4828,3,524,262,0,4828,4829,5,116,0,0,4829,4830,3,542,271,0,4830,4914,
1,0,0,0,4831,4832,5,320,0,0,4832,4833,5,237,0,0,4833,4834,3,540,270,0,4834,
4835,5,80,0,0,4835,4836,5,44,0,0,4836,4837,3,524,262,0,4837,4838,5,116,0,
0,4838,4839,3,542,271,0,4839,4914,1,0,0,0,4840,4841,5,320,0,0,4841,4842,
5,237,0,0,4842,4843,3,540,270,0,4843,4844,5,80,0,0,4844,4845,3,516,258,0,
4845,4846,3,1342,671,0,4846,4847,5,116,0,0,4847,4848,3,542,271,0,4848,4914,
1,0,0,0,4849,4850,5,320,0,0,4850,4851,5,237,0,0,4851,4852,3,540,270,0,4852,
4853,5,80,0,0,4853,4854,5,353,0,0,4854,4855,3,1120,560,0,4855,4856,5,116,
0,0,4856,4857,3,542,271,0,4857,4914,1,0,0,0,4858,4859,5,320,0,0,4859,4860,
5,237,0,0,4860,4861,3,540,270,0,4861,4862,5,80,0,0,4862,4863,5,189,0,0,4863,
4864,3,1120,560,0,4864,4865,5,116,0,0,4865,4866,3,542,271,0,4866,4914,1,
0,0,0,4867,4868,5,320,0,0,4868,4869,5,237,0,0,4869,4870,3,540,270,0,4870,
4871,5,80,0,0,4871,4872,5,136,0,0,4872,4873,3,650,325,0,4873,4874,5,116,
0,0,4874,4875,3,542,271,0,4875,4914,1,0,0,0,4876,4877,5,320,0,0,4877,4878,
5,237,0,0,4878,4879,3,540,270,0,4879,4880,5,80,0,0,4880,4881,5,211,0,0,4881,
4882,3,626,313,0,4882,4883,5,116,0,0,4883,4884,3,542,271,0,4884,4914,1,0,
0,0,4885,4886,5,320,0,0,4886,4887,5,237,0,0,4887,4888,3,540,270,0,4888,4889,
5,80,0,0,4889,4890,5,239,0,0,4890,4891,5,267,0,0,4891,4892,3,292,146,0,4892,
4893,5,116,0,0,4893,4894,3,542,271,0,4894,4914,1,0,0,0,4895,4896,5,320,0,
0,4896,4897,5,237,0,0,4897,4898,3,540,270,0,4898,4899,5,80,0,0,4899,4900,
5,289,0,0,4900,4901,3,626,313,0,4901,4902,5,116,0,0,4902,4903,3,542,271,
0,4903,4914,1,0,0,0,4904,4905,5,320,0,0,4905,4906,5,237,0,0,4906,4907,3,
540,270,0,4907,4908,5,80,0,0,4908,4909,5,442,0,0,4909,4910,3,626,313,0,4910,
4911,5,116,0,0,4911,4912,3,542,271,0,4912,4914,1,0,0,0,4913,4822,1,0,0,0,
4913,4831,1,0,0,0,4913,4840,1,0,0,0,4913,4849,1,0,0,0,4913,4858,1,0,0,0,
4913,4867,1,0,0,0,4913,4876,1,0,0,0,4913,4885,1,0,0,0,4913,4895,1,0,0,0,
4913,4904,1,0,0,0,4914,539,1,0,0,0,4915,4916,5,62,0,0,4916,4919,3,72,36,
0,4917,4919,1,0,0,0,4918,4915,1,0,0,0,4918,4917,1,0,0,0,4919,541,1,0,0,0,
4920,4923,3,1360,680,0,4921,4923,5,78,0,0,4922,4920,1,0,0,0,4922,4921,1,
0,0,0,4923,543,1,0,0,0,4924,4925,5,61,0,0,4925,4929,3,546,273,0,4926,4927,
5,258,0,0,4927,4929,3,546,273,0,4928,4924,1,0,0,0,4928,4926,1,0,0,0,4929,
545,1,0,0,0,4930,4997,3,954,477,0,4931,4932,3,548,274,0,4932,4933,3,954,
477,0,4933,4997,1,0,0,0,4934,4935,5,261,0,0,4935,4936,3,550,275,0,4936,4937,
3,954,477,0,4937,4997,1,0,0,0,4938,4939,5,286,0,0,4939,4940,3,550,275,0,
4940,4941,3,954,477,0,4941,4997,1,0,0,0,4942,4943,5,207,0,0,4943,4944,3,
550,275,0,4944,4945,3,954,477,0,4945,4997,1,0,0,0,4946,4947,5,240,0,0,4947,
4948,3,550,275,0,4948,4949,3,954,477,0,4949,4997,1,0,0,0,4950,4951,5,130,
0,0,4951,4952,3,1366,683,0,4952,4953,3,550,275,0,4953,4954,3,954,477,0,4954,
4997,1,0,0,0,4955,4956,5,300,0,0,4956,4957,3,1366,683,0,4957,4958,3,550,
275,0,4958,4959,3,954,477,0,4959,4997,1,0,0,0,4960,4961,3,1366,683,0,4961,
4962,3,550,275,0,4962,4963,3,954,477,0,4963,4997,1,0,0,0,4964,4965,5,30,
0,0,4965,4966,3,550,275,0,4966,4967,3,954,477,0,4967,4997,1,0,0,0,4968,4969,
5,210,0,0,4969,4970,3,550,275,0,4970,4971,3,954,477,0,4971,4997,1,0,0,0,
4972,4973,5,210,0,0,4973,4974,3,1366,683,0,4974,4975,3,550,275,0,4975,4976,
3,954,477,0,4976,4997,1,0,0,0,4977,4978,5,210,0,0,4978,4979,5,30,0,0,4979,
4980,3,550,275,0,4980,4981,3,954,477,0,4981,4997,1,0,0,0,4982,4983,5,144,
0,0,4983,4984,3,550,275,0,4984,4985,3,954,477,0,4985,4997,1,0,0,0,4986,4987,
5,144,0,0,4987,4988,3,1366,683,0,4988,4989,3,550,275,0,4989,4990,3,954,477,
0,4990,4997,1,0,0,0,4991,4992,5,144,0,0,4992,4993,5,30,0,0,4993,4994,3,550,
275,0,4994,4995,3,954,477,0,4995,4997,1,0,0,0,4996,4930,1,0,0,0,4996,4931,
1,0,0,0,4996,4934,1,0,0,0,4996,4938,1,0,0,0,4996,4942,1,0,0,0,4996,4946,
1,0,0,0,4996,4950,1,0,0,0,4996,4955,1,0,0,0,4996,4960,1,0,0,0,4996,4964,
1,0,0,0,4996,4968,1,0,0,0,4996,4972,1,0,0,0,4996,4977,1,0,0,0,4996,4982,
1,0,0,0,4996,4986,1,0,0,0,4996,4991,1,0,0,0,4997,547,1,0,0,0,4998,4999,7,
24,0,0,4999,549,1,0,0,0,5000,5003,3,548,274,0,5001,5003,1,0,0,0,5002,5000,
1,0,0,0,5002,5001,1,0,0,0,5003,551,1,0,0,0,5004,5005,5,65,0,0,5005,5006,
3,556,278,0,5006,5007,5,80,0,0,5007,5008,3,562,281,0,5008,5009,5,94,0,0,
5009,5010,3,564,282,0,5010,5011,3,568,284,0,5011,553,1,0,0,0,5012,5013,5,
310,0,0,5013,5014,3,556,278,0,5014,5015,5,80,0,0,5015,5016,3,562,281,0,5016,
5017,5,64,0,0,5017,5018,3,564,282,0,5018,5019,3,108,54,0,5019,5032,1,0,0,
0,5020,5021,5,310,0,0,5021,5022,5,65,0,0,5022,5023,5,272,0,0,5023,5024,5,
62,0,0,5024,5025,3,556,278,0,5025,5026,5,80,0,0,5026,5027,3,562,281,0,5027,
5028,5,64,0,0,5028,5029,3,564,282,0,5029,5030,3,108,54,0,5030,5032,1,0,0,
0,5031,5012,1,0,0,0,5031,5020,1,0,0,0,5032,555,1,0,0,0,5033,5049,3,558,279,
0,5034,5049,5,30,0,0,5035,5036,5,30,0,0,5036,5049,5,287,0,0,5037,5038,5,
30,0,0,5038,5039,5,2,0,0,5039,5040,3,216,108,0,5040,5041,5,3,0,0,5041,5049,
1,0,0,0,5042,5043,5,30,0,0,5043,5044,5,287,0,0,5044,5045,5,2,0,0,5045,5046,
3,216,108,0,5046,5047,5,3,0,0,5047,5049,1,0,0,0,5048,5033,1,0,0,0,5048,5034,
1,0,0,0,5048,5035,1,0,0,0,5048,5037,1,0,0,0,5048,5042,1,0,0,0,5049,557,1,
0,0,0,5050,5055,3,560,280,0,5051,5052,5,6,0,0,5052,5054,3,560,280,0,5053,
5051,1,0,0,0,5054,5057,1,0,0,0,5055,5053,1,0,0,0,5055,5056,1,0,0,0,5056,
559,1,0,0,0,5057,5055,1,0,0,0,5058,5059,5,88,0,0,5059,5068,3,214,107,0,5060,
5061,5,86,0,0,5061,5068,3,214,107,0,5062,5063,5,46,0,0,5063,5068,3,214,107,
0,5064,5065,3,1374,687,0,5065,5066,3,214,107,0,5066,5068,1,0,0,0,5067,5058,
1,0,0,0,5067,5060,1,0,0,0,5067,5062,1,0,0,0,5067,5064,1,0,0,0,5068,561,1,
0,0,0,5069,5128,3,1336,668,0,5070,5071,5,92,0,0,5071,5128,3,1336,668,0,5072,
5073,5,321,0,0,5073,5128,3,1336,668,0,5074,5075,5,63,0,0,5075,5076,5,174,
0,0,5076,5077,5,374,0,0,5077,5128,3,1340,670,0,5078,5079,5,63,0,0,5079,5080,
5,324,0,0,5080,5128,3,1340,670,0,5081,5082,5,211,0,0,5082,5128,3,624,312,
0,5083,5084,5,289,0,0,5084,5128,3,624,312,0,5085,5086,5,442,0,0,5086,5128,
3,624,312,0,5087,5088,5,175,0,0,5088,5128,3,1340,670,0,5089,5090,5,189,0,
0,5090,5128,3,522,261,0,5091,5092,5,238,0,0,5092,5128,3,1340,670,0,5093,
5094,5,239,0,0,5094,5095,5,267,0,0,5095,5128,3,294,147,0,5096,5097,5,316,
0,0,5097,5128,3,1340,670,0,5098,5099,5,344,0,0,5099,5128,3,1340,670,0,5100,
5101,5,353,0,0,5101,5128,3,522,261,0,5102,5103,5,30,0,0,5103,5104,5,343,
0,0,5104,5105,5,68,0,0,5105,5106,5,316,0,0,5106,5128,3,1340,670,0,5107,5108,
5,30,0,0,5108,5109,5,322,0,0,5109,5110,5,68,0,0,5110,5111,5,316,0,0,5111,
5128,3,1340,670,0,5112,5113,5,30,0,0,5113,5114,5,212,0,0,5114,5115,5,68,
0,0,5115,5116,5,316,0,0,5116,5128,3,1340,670,0,5117,5118,5,30,0,0,5118,5119,
5,457,0,0,5119,5120,5,68,0,0,5120,5121,5,316,0,0,5121,5128,3,1340,670,0,
5122,5123,5,30,0,0,5123,5124,5,455,0,0,5124,5125,5,68,0,0,5125,5126,5,316,
0,0,5126,5128,3,1340,670,0,5127,5069,1,0,0,0,5127,5070,1,0,0,0,5127,5072,
1,0,0,0,5127,5074,1,0,0,0,5127,5078,1,0,0,0,5127,5081,1,0,0,0,5127,5083,
1,0,0,0,5127,5085,1,0,0,0,5127,5087,1,0,0,0,5127,5089,1,0,0,0,5127,5091,
1,0,0,0,5127,5093,1,0,0,0,5127,5096,1,0,0,0,5127,5098,1,0,0,0,5127,5100,
1,0,0,0,5127,5102,1,0,0,0,5127,5107,1,0,0,0,5127,5112,1,0,0,0,5127,5117,
1,0,0,0,5127,5122,1,0,0,0,5128,563,1,0,0,0,5129,5134,3,566,283,0,5130,5131,
5,6,0,0,5131,5133,3,566,283,0,5132,5130,1,0,0,0,5133,5136,1,0,0,0,5134,5132,
1,0,0,0,5134,5135,1,0,0,0,5135,565,1,0,0,0,5136,5134,1,0,0,0,5137,5141,3,
1370,685,0,5138,5139,5,66,0,0,5139,5141,3,1370,685,0,5140,5137,1,0,0,0,5140,
5138,1,0,0,0,5141,567,1,0,0,0,5142,5143,5,105,0,0,5143,5144,5,65,0,0,5144,
5147,5,272,0,0,5145,5147,1,0,0,0,5146,5142,1,0,0,0,5146,5145,1,0,0,0,5147,
569,1,0,0,0,5148,5149,5,65,0,0,5149,5150,3,558,279,0,5150,5151,5,94,0,0,
5151,5152,3,1372,686,0,5152,5153,3,574,287,0,5153,5154,3,576,288,0,5154,
571,1,0,0,0,5155,5156,5,310,0,0,5156,5157,3,558,279,0,5157,5158,5,64,0,0,
5158,5159,3,1372,686,0,5159,5160,3,576,288,0,5160,5161,3,108,54,0,5161,5173,
1,0,0,0,5162,5163,5,310,0,0,5163,5164,5,134,0,0,5164,5165,5,272,0,0,5165,
5166,5,62,0,0,5166,5167,3,558,279,0,5167,5168,5,64,0,0,5168,5169,3,1372,
686,0,5169,5170,3,576,288,0,5170,5171,3,108,54,0,5171,5173,1,0,0,0,5172,
5155,1,0,0,0,5172,5162,1,0,0,0,5173,573,1,0,0,0,5174,5175,5,105,0,0,5175,
5176,5,134,0,0,5176,5179,5,272,0,0,5177,5179,1,0,0,0,5178,5174,1,0,0,0,5178,
5177,1,0,0,0,5179,575,1,0,0,0,5180,5181,5,214,0,0,5181,5182,5,147,0,0,5182,
5185,3,1370,685,0,5183,5185,1,0,0,0,5184,5180,1,0,0,0,5184,5183,1,0,0,0,
5185,577,1,0,0,0,5186,5187,5,138,0,0,5187,5188,5,53,0,0,5188,5189,5,287,
0,0,5189,5190,3,580,290,0,5190,5191,3,584,292,0,5191,579,1,0,0,0,5192,5194,
3,582,291,0,5193,5192,1,0,0,0,5194,5197,1,0,0,0,5195,5193,1,0,0,0,5195,5196,
1,0,0,0,5196,581,1,0,0,0,5197,5195,1,0,0,0,5198,5199,5,68,0,0,5199,5200,
5,316,0,0,5200,5208,3,1340,670,0,5201,5202,5,62,0,0,5202,5203,5,311,0,0,
5203,5208,3,1372,686,0,5204,5205,5,62,0,0,5205,5206,5,99,0,0,5206,5208,3,
1372,686,0,5207,5198,1,0,0,0,5207,5201,1,0,0,0,5207,5204,1,0,0,0,5208,583,
1,0,0,0,5209,5210,5,65,0,0,5210,5211,3,556,278,0,5211,5212,5,80,0,0,5212,
5213,3,586,293,0,5213,5214,5,94,0,0,5214,5215,3,564,282,0,5215,5216,3,568,
284,0,5216,5237,1,0,0,0,5217,5218,5,310,0,0,5218,5219,3,556,278,0,5219,5220,
5,80,0,0,5220,5221,3,586,293,0,5221,5222,5,64,0,0,5222,5223,3,564,282,0,
5223,5224,3,108,54,0,5224,5237,1,0,0,0,5225,5226,5,310,0,0,5226,5227,5,65,
0,0,5227,5228,5,272,0,0,5228,5229,5,62,0,0,5229,5230,3,556,278,0,5230,5231,
5,80,0,0,5231,5232,3,586,293,0,5232,5233,5,64,0,0,5233,5234,3,564,282,0,
5234,5235,3,108,54,0,5235,5237,1,0,0,0,5236,5209,1,0,0,0,5236,5217,1,0,0,
0,5236,5225,1,0,0,0,5237,585,1,0,0,0,5238,5239,7,25,0,0,5239,587,1,0,0,0,
5240,5241,5,46,0,0,5241,5242,3,590,295,0,5242,5243,5,226,0,0,5243,5244,3,
592,296,0,5244,5245,3,594,297,0,5245,5246,5,80,0,0,5246,5247,3,1076,538,
0,5247,5248,3,596,298,0,5248,5249,5,2,0,0,5249,5250,3,598,299,0,5250,5251,
5,3,0,0,5251,5252,3,604,302,0,5252,5253,3,118,59,0,5253,5254,3,254,127,0,
5254,5255,3,1096,548,0,5255,5276,1,0,0,0,5256,5257,5,46,0,0,5257,5258,3,
590,295,0,5258,5259,5,226,0,0,5259,5260,3,592,296,0,5260,5261,5,220,0,0,
5261,5262,5,77,0,0,5262,5263,5,389,0,0,5263,5264,3,1342,671,0,5264,5265,
5,80,0,0,5265,5266,3,1076,538,0,5266,5267,3,596,298,0,5267,5268,5,2,0,0,
5268,5269,3,598,299,0,5269,5270,5,3,0,0,5270,5271,3,604,302,0,5271,5272,
3,118,59,0,5272,5273,3,254,127,0,5273,5274,3,1096,548,0,5274,5276,1,0,0,
0,5275,5240,1,0,0,0,5275,5256,1,0,0,0,5276,589,1,0,0,0,5277,5280,5,98,0,
0,5278,5280,1,0,0,0,5279,5277,1,0,0,0,5279,5278,1,0,0,0,5280,591,1,0,0,0,
5281,5284,5,109,0,0,5282,5284,1,0,0,0,5283,5281,1,0,0,0,5283,5282,1,0,0,
0,5284,593,1,0,0,0,5285,5288,3,1342,671,0,5286,5288,1,0,0,0,5287,5285,1,
0,0,0,5287,5286,1,0,0,0,5288,595,1,0,0,0,5289,5290,5,100,0,0,5290,5293,3,
1342,671,0,5291,5293,1,0,0,0,5292,5289,1,0,0,0,5292,5291,1,0,0,0,5293,597,
1,0,0,0,5294,5299,3,602,301,0,5295,5296,5,6,0,0,5296,5298,3,602,301,0,5297,
5295,1,0,0,0,5298,5301,1,0,0,0,5299,5297,1,0,0,0,5299,5300,1,0,0,0,5300,
599,1,0,0,0,5301,5299,1,0,0,0,5302,5303,3,608,304,0,5303,5304,3,610,305,
0,5304,5305,3,612,306,0,5305,5306,3,614,307,0,5306,5314,1,0,0,0,5307,5308,
3,608,304,0,5308,5309,3,524,262,0,5309,5310,3,116,58,0,5310,5311,3,612,306,
0,5311,5312,3,614,307,0,5312,5314,1,0,0,0,5313,5302,1,0,0,0,5313,5307,1,
0,0,0,5314,601,1,0,0,0,5315,5316,3,1374,687,0,5316,5317,3,600,300,0,5317,
5327,1,0,0,0,5318,5319,3,1216,608,0,5319,5320,3,600,300,0,5320,5327,1,0,
0,0,5321,5322,5,2,0,0,5322,5323,3,1164,582,0,5323,5324,5,3,0,0,5324,5325,
3,600,300,0,5325,5327,1,0,0,0,5326,5315,1,0,0,0,5326,5318,1,0,0,0,5326,5321,
1,0,0,0,5327,603,1,0,0,0,5328,5329,5,441,0,0,5329,5330,5,2,0,0,5330,5331,
3,606,303,0,5331,5332,5,3,0,0,5332,5335,1,0,0,0,5333,5335,1,0,0,0,5334,5328,
1,0,0,0,5334,5333,1,0,0,0,5335,605,1,0,0,0,5336,5341,3,602,301,0,5337,5338,
5,6,0,0,5338,5340,3,602,301,0,5339,5337,1,0,0,0,5340,5343,1,0,0,0,5341,5339,
1,0,0,0,5341,5342,1,0,0,0,5342,607,1,0,0,0,5343,5341,1,0,0,0,5344,5345,5,
43,0,0,5345,5348,3,524,262,0,5346,5348,1,0,0,0,5347,5344,1,0,0,0,5347,5346,
1,0,0,0,5348,609,1,0,0,0,5349,5352,3,524,262,0,5350,5352,1,0,0,0,5351,5349,
1,0,0,0,5351,5350,1,0,0,0,5352,611,1,0,0,0,5353,5357,5,37,0,0,5354,5357,
5,55,0,0,5355,5357,1,0,0,0,5356,5353,1,0,0,0,5356,5354,1,0,0,0,5356,5355,
1,0,0,0,5357,613,1,0,0,0,5358,5359,5,266,0,0,5359,5364,5,207,0,0,5360,5361,
5,266,0,0,5361,5364,5,240,0,0,5362,5364,1,0,0,0,5363,5358,1,0,0,0,5363,5360,
1,0,0,0,5363,5362,1,0,0,0,5364,615,1,0,0,0,5365,5366,5,46,0,0,5366,5367,
3,618,309,0,5367,5368,7,22,0,0,5368,5369,3,1348,674,0,5369,5379,3,628,314,
0,5370,5377,5,309,0,0,5371,5378,3,638,319,0,5372,5373,5,92,0,0,5373,5374,
5,2,0,0,5374,5375,3,668,334,0,5375,5376,5,3,0,0,5376,5378,1,0,0,0,5377,5371,
1,0,0,0,5377,5372,1,0,0,0,5378,5380,1,0,0,0,5379,5370,1,0,0,0,5379,5380,
1,0,0,0,5380,5381,1,0,0,0,5381,5382,3,654,327,0,5382,617,1,0,0,0,5383,5384,
5,82,0,0,5384,5387,5,304,0,0,5385,5387,1,0,0,0,5386,5383,1,0,0,0,5386,5385,
1,0,0,0,5387,619,1,0,0,0,5388,5390,5,2,0,0,5389,5391,3,622,311,0,5390,5389,
1,0,0,0,5390,5391,1,0,0,0,5391,5392,1,0,0,0,5392,5393,5,3,0,0,5393,621,1,
0,0,0,5394,5399,3,632,316,0,5395,5396,5,6,0,0,5396,5398,3,632,316,0,5397,
5395,1,0,0,0,5398,5401,1,0,0,0,5399,5397,1,0,0,0,5399,5400,1,0,0,0,5400,
623,1,0,0,0,5401,5399,1,0,0,0,5402,5407,3,626,313,0,5403,5404,5,6,0,0,5404,
5406,3,626,313,0,5405,5403,1,0,0,0,5406,5409,1,0,0,0,5407,5405,1,0,0,0,5407,
5408,1,0,0,0,5408,625,1,0,0,0,5409,5407,1,0,0,0,5410,5411,3,1348,674,0,5411,
5412,3,620,310,0,5412,5419,1,0,0,0,5413,5419,3,1392,696,0,5414,5416,3,1374,
687,0,5415,5417,3,1326,663,0,5416,5415,1,0,0,0,5416,5417,1,0,0,0,5417,5419,
1,0,0,0,5418,5410,1,0,0,0,5418,5413,1,0,0,0,5418,5414,1,0,0,0,5419,627,1,
0,0,0,5420,5422,5,2,0,0,5421,5423,3,630,315,0,5422,5421,1,0,0,0,5422,5423,
1,0,0,0,5423,5424,1,0,0,0,5424,5425,5,3,0,0,5425,629,1,0,0,0,5426,5431,3,
642,321,0,5427,5428,5,6,0,0,5428,5430,3,642,321,0,5429,5427,1,0,0,0,5430,
5433,1,0,0,0,5431,5429,1,0,0,0,5431,5432,1,0,0,0,5432,631,1,0,0,0,5433,5431,
1,0,0,0,5434,5436,3,634,317,0,5435,5437,3,636,318,0,5436,5435,1,0,0,0,5436,
5437,1,0,0,0,5437,5438,1,0,0,0,5438,5439,3,640,320,0,5439,5448,1,0,0,0,5440,
5442,3,636,318,0,5441,5443,3,634,317,0,5442,5441,1,0,0,0,5442,5443,1,0,0,
0,5443,5444,1,0,0,0,5444,5445,3,640,320,0,5445,5448,1,0,0,0,5446,5448,3,
640,320,0,5447,5434,1,0,0,0,5447,5440,1,0,0,0,5447,5446,1,0,0,0,5448,633,
1,0,0,0,5449,5451,5,68,0,0,5450,5452,5,453,0,0,5451,5450,1,0,0,0,5451,5452,
1,0,0,0,5452,5457,1,0,0,0,5453,5457,5,453,0,0,5454,5457,5,393,0,0,5455,5457,
5,101,0,0,5456,5449,1,0,0,0,5456,5453,1,0,0,0,5456,5454,1,0,0,0,5456,5455,
1,0,0,0,5457,635,1,0,0,0,5458,5463,3,1378,689,0,5459,5463,3,1396,698,0,5460,
5463,5,119,0,0,5461,5463,5,126,0,0,5462,5458,1,0,0,0,5462,5459,1,0,0,0,5462,
5460,1,0,0,0,5462,5461,1,0,0,0,5463,637,1,0,0,0,5464,5465,3,640,320,0,5465,
639,1,0,0,0,5466,5481,3,1120,560,0,5467,5469,5,408,0,0,5468,5467,1,0,0,0,
5468,5469,1,0,0,0,5469,5474,1,0,0,0,5470,5475,3,1396,698,0,5471,5475,3,1378,
689,0,5472,5475,5,119,0,0,5473,5475,5,126,0,0,5474,5470,1,0,0,0,5474,5471,
1,0,0,0,5474,5472,1,0,0,0,5474,5473,1,0,0,0,5475,5476,1,0,0,0,5476,5477,
3,526,263,0,5477,5478,5,27,0,0,5478,5479,5,353,0,0,5479,5481,1,0,0,0,5480,
5466,1,0,0,0,5480,5468,1,0,0,0,5481,641,1,0,0,0,5482,5485,3,632,316,0,5483,
5484,7,26,0,0,5484,5486,3,1164,582,0,5485,5483,1,0,0,0,5485,5486,1,0,0,0,
5486,643,1,0,0,0,5487,5488,3,632,316,0,5488,645,1,0,0,0,5489,5500,5,2,0,
0,5490,5501,5,9,0,0,5491,5501,3,648,324,0,5492,5493,5,83,0,0,5493,5494,5,
147,0,0,5494,5501,3,648,324,0,5495,5496,3,648,324,0,5496,5497,5,83,0,0,5497,
5498,5,147,0,0,5498,5499,3,648,324,0,5499,5501,1,0,0,0,5500,5490,1,0,0,0,
5500,5491,1,0,0,0,5500,5492,1,0,0,0,5500,5495,1,0,0,0,5501,5502,1,0,0,0,
5502,5503,5,3,0,0,5503,647,1,0,0,0,5504,5509,3,644,322,0,5505,5506,5,6,0,
0,5506,5508,3,644,322,0,5507,5505,1,0,0,0,5508,5511,1,0,0,0,5509,5507,1,
0,0,0,5509,5510,1,0,0,0,5510,649,1,0,0,0,5511,5509,1,0,0,0,5512,5513,3,1348,
674,0,5513,5514,3,646,323,0,5514,651,1,0,0,0,5515,5520,3,650,325,0,5516,
5517,5,6,0,0,5517,5519,3,650,325,0,5518,5516,1,0,0,0,5519,5522,1,0,0,0,5520,
5518,1,0,0,0,5520,5521,1,0,0,0,5521,653,1,0,0,0,5522,5520,1,0,0,0,5523,5525,
3,658,329,0,5524,5523,1,0,0,0,5525,5526,1,0,0,0,5526,5524,1,0,0,0,5526,5527,
1,0,0,0,5527,5528,1,0,0,0,5528,5529,6,327,-1,0,5529,655,1,0,0,0,5530,5531,
5,149,0,0,5531,5532,5,80,0,0,5532,5533,5,78,0,0,5533,5566,5,458,0,0,5534,
5535,5,309,0,0,5535,5536,5,78,0,0,5536,5537,5,80,0,0,5537,5538,5,78,0,0,
5538,5566,5,458,0,0,5539,5566,5,339,0,0,5540,5566,5,222,0,0,5541,5566,5,
331,0,0,5542,5566,5,370,0,0,5543,5544,5,205,0,0,5544,5545,5,320,0,0,5545,
5566,5,181,0,0,5546,5547,5,205,0,0,5547,5548,5,320,0,0,5548,5566,5,234,0,
0,5549,5550,5,320,0,0,5550,5566,5,181,0,0,5551,5552,5,320,0,0,5552,5566,
5,234,0,0,5553,5566,5,241,0,0,5554,5555,5,77,0,0,5555,5566,5,241,0,0,5556,
5557,5,170,0,0,5557,5566,3,292,146,0,5558,5559,5,313,0,0,5559,5566,3,292,
146,0,5560,5561,5,459,0,0,5561,5566,3,524,262,0,5562,5566,3,82,41,0,5563,
5564,5,460,0,0,5564,5566,3,1374,687,0,5565,5530,1,0,0,0,5565,5534,1,0,0,
0,5565,5539,1,0,0,0,5565,5540,1,0,0,0,5565,5541,1,0,0,0,5565,5542,1,0,0,
0,5565,5543,1,0,0,0,5565,5546,1,0,0,0,5565,5549,1,0,0,0,5565,5551,1,0,0,
0,5565,5553,1,0,0,0,5565,5554,1,0,0,0,5565,5556,1,0,0,0,5565,5558,1,0,0,
0,5565,5560,1,0,0,0,5565,5562,1,0,0,0,5565,5563,1,0,0,0,5566,657,1,0,0,0,
5567,5568,5,36,0,0,5568,5576,3,660,330,0,5569,5570,5,238,0,0,5570,5576,3,
72,36,0,5571,5572,5,443,0,0,5572,5576,3,662,331,0,5573,5576,5,104,0,0,5574,
5576,3,656,328,0,5575,5567,1,0,0,0,5575,5569,1,0,0,0,5575,5571,1,0,0,0,5575,
5573,1,0,0,0,5575,5574,1,0,0,0,5576,659,1,0,0,0,5577,5583,3,1360,680,0,5578,
5579,3,1360,680,0,5579,5580,5,6,0,0,5580,5581,3,1360,680,0,5581,5583,1,0,
0,0,5582,5577,1,0,0,0,5582,5578,1,0,0,0,5583,661,1,0,0,0,5584,5585,5,62,
0,0,5585,5586,5,353,0,0,5586,5593,3,1120,560,0,5587,5588,5,6,0,0,5588,5589,
5,62,0,0,5589,5590,5,353,0,0,5590,5592,3,1120,560,0,5591,5587,1,0,0,0,5592,
5595,1,0,0,0,5593,5591,1,0,0,0,5593,5594,1,0,0,0,5594,663,1,0,0,0,5595,5593,
1,0,0,0,5596,5597,5,105,0,0,5597,5600,3,460,230,0,5598,5600,1,0,0,0,5599,
5596,1,0,0,0,5599,5598,1,0,0,0,5600,665,1,0,0,0,5601,5602,3,636,318,0,5602,
5603,3,640,320,0,5603,667,1,0,0,0,5604,5609,3,666,333,0,5605,5606,5,6,0,
0,5606,5608,3,666,333,0,5607,5605,1,0,0,0,5608,5611,1,0,0,0,5609,5607,1,
0,0,0,5609,5610,1,0,0,0,5610,669,1,0,0,0,5611,5609,1,0,0,0,5612,5613,5,138,
0,0,5613,5614,7,27,0,0,5614,5615,3,626,313,0,5615,5616,3,672,336,0,5616,
5617,3,674,337,0,5617,671,1,0,0,0,5618,5620,3,656,328,0,5619,5618,1,0,0,
0,5620,5621,1,0,0,0,5621,5619,1,0,0,0,5621,5622,1,0,0,0,5622,673,1,0,0,0,
5623,5626,5,308,0,0,5624,5626,1,0,0,0,5625,5623,1,0,0,0,5625,5624,1,0,0,
0,5626,675,1,0,0,0,5627,5628,5,191,0,0,5628,5629,5,211,0,0,5629,5630,3,624,
312,0,5630,5631,3,108,54,0,5631,5664,1,0,0,0,5632,5633,5,191,0,0,5633,5634,
5,211,0,0,5634,5635,5,220,0,0,5635,5636,5,389,0,0,5636,5637,3,624,312,0,
5637,5638,3,108,54,0,5638,5664,1,0,0,0,5639,5640,5,191,0,0,5640,5641,5,289,
0,0,5641,5642,3,624,312,0,5642,5643,3,108,54,0,5643,5664,1,0,0,0,5644,5645,
5,191,0,0,5645,5646,5,289,0,0,5646,5647,5,220,0,0,5647,5648,5,389,0,0,5648,
5649,3,624,312,0,5649,5650,3,108,54,0,5650,5664,1,0,0,0,5651,5652,5,191,
0,0,5652,5653,5,442,0,0,5653,5654,3,624,312,0,5654,5655,3,108,54,0,5655,
5664,1,0,0,0,5656,5657,5,191,0,0,5657,5658,5,442,0,0,5658,5659,5,220,0,0,
5659,5660,5,389,0,0,5660,5661,3,624,312,0,5661,5662,3,108,54,0,5662,5664,
1,0,0,0,5663,5627,1,0,0,0,5663,5632,1,0,0,0,5663,5639,1,0,0,0,5663,5644,
1,0,0,0,5663,5651,1,0,0,0,5663,5656,1,0,0,0,5664,677,1,0,0,0,5665,5666,5,
191,0,0,5666,5667,5,136,0,0,5667,5668,3,652,326,0,5668,5669,3,108,54,0,5669,
5678,1,0,0,0,5670,5671,5,191,0,0,5671,5672,5,136,0,0,5672,5673,5,220,0,0,
5673,5674,5,389,0,0,5674,5675,3,652,326,0,5675,5676,3,108,54,0,5676,5678,
1,0,0,0,5677,5665,1,0,0,0,5677,5670,1,0,0,0,5678,679,1,0,0,0,5679,5680,5,
191,0,0,5680,5681,5,271,0,0,5681,5682,3,686,343,0,5682,5683,3,108,54,0,5683,
5692,1,0,0,0,5684,5685,5,191,0,0,5685,5686,5,271,0,0,5686,5687,5,220,0,0,
5687,5688,5,389,0,0,5688,5689,3,686,343,0,5689,5690,3,108,54,0,5690,5692,
1,0,0,0,5691,5679,1,0,0,0,5691,5684,1,0,0,0,5692,681,1,0,0,0,5693,5694,5,
2,0,0,5694,5695,3,1120,560,0,5695,5696,5,3,0,0,5696,5716,1,0,0,0,5697,5698,
5,2,0,0,5698,5699,3,1120,560,0,5699,5700,5,6,0,0,5700,5701,3,1120,560,0,
5701,5702,5,3,0,0,5702,5716,1,0,0,0,5703,5704,5,2,0,0,5704,5705,5,400,0,
0,5705,5706,5,6,0,0,5706,5707,3,1120,560,0,5707,5708,5,3,0,0,5708,5716,1,
0,0,0,5709,5710,5,2,0,0,5710,5711,3,1120,560,0,5711,5712,5,6,0,0,5712,5713,
5,400,0,0,5713,5714,5,3,0,0,5714,5716,1,0,0,0,5715,5693,1,0,0,0,5715,5697,
1,0,0,0,5715,5703,1,0,0,0,5715,5709,1,0,0,0,5716,683,1,0,0,0,5717,5718,3,
1374,687,0,5718,5719,5,11,0,0,5719,5721,1,0,0,0,5720,5717,1,0,0,0,5721,5724,
1,0,0,0,5722,5720,1,0,0,0,5722,5723,1,0,0,0,5723,5725,1,0,0,0,5724,5722,
1,0,0,0,5725,5726,3,1272,636,0,5726,685,1,0,0,0,5727,5732,3,688,344,0,5728,
5729,5,6,0,0,5729,5731,3,688,344,0,5730,5728,1,0,0,0,5731,5734,1,0,0,0,5732,
5730,1,0,0,0,5732,5733,1,0,0,0,5733,687,1,0,0,0,5734,5732,1,0,0,0,5735,5736,
3,684,342,0,5736,5737,3,682,341,0,5737,689,1,0,0,0,5738,5739,5,57,0,0,5739,
5740,3,692,346,0,5740,691,1,0,0,0,5741,5743,3,694,347,0,5742,5741,1,0,0,
0,5743,5744,1,0,0,0,5744,5742,1,0,0,0,5744,5745,1,0,0,0,5745,693,1,0,0,0,
5746,5750,3,1360,680,0,5747,5748,5,238,0,0,5748,5750,3,72,36,0,5749,5746,
1,0,0,0,5749,5747,1,0,0,0,5750,695,1,0,0,0,5751,5752,5,46,0,0,5752,5753,
5,41,0,0,5753,5754,5,2,0,0,5754,5755,3,1120,560,0,5755,5756,5,36,0,0,5756,
5757,3,1120,560,0,5757,5758,5,3,0,0,5758,5759,5,105,0,0,5759,5760,5,211,
0,0,5760,5761,3,626,313,0,5761,5762,3,698,349,0,5762,5786,1,0,0,0,5763,5764,
5,46,0,0,5764,5765,5,41,0,0,5765,5766,5,2,0,0,5766,5767,3,1120,560,0,5767,
5768,5,36,0,0,5768,5769,3,1120,560,0,5769,5770,5,3,0,0,5770,5771,5,372,0,
0,5771,5772,5,211,0,0,5772,5773,3,698,349,0,5773,5786,1,0,0,0,5774,5775,
5,46,0,0,5775,5776,5,41,0,0,5776,5777,5,2,0,0,5777,5778,3,1120,560,0,5778,
5779,5,36,0,0,5779,5780,3,1120,560,0,5780,5781,5,3,0,0,5781,5782,5,105,0,
0,5782,5783,5,393,0,0,5783,5784,3,698,349,0,5784,5786,1,0,0,0,5785,5751,
1,0,0,0,5785,5763,1,0,0,0,5785,5774,1,0,0,0,5786,697,1,0,0,0,5787,5788,5,
36,0,0,5788,5793,5,223,0,0,5789,5790,5,36,0,0,5790,5793,5,141,0,0,5791,5793,
1,0,0,0,5792,5787,1,0,0,0,5792,5789,1,0,0,0,5792,5791,1,0,0,0,5793,699,1,
0,0,0,5794,5795,5,191,0,0,5795,5796,5,41,0,0,5796,5797,3,702,351,0,5797,
5798,5,2,0,0,5798,5799,3,1120,560,0,5799,5800,5,36,0,0,5800,5801,3,1120,
560,0,5801,5802,5,3,0,0,5802,5803,3,108,54,0,5803,701,1,0,0,0,5804,5805,
5,220,0,0,5805,5808,5,389,0,0,5806,5808,1,0,0,0,5807,5804,1,0,0,0,5807,5806,
1,0,0,0,5808,703,1,0,0,0,5809,5810,5,46,0,0,5810,5811,3,618,309,0,5811,5812,
5,443,0,0,5812,5813,5,62,0,0,5813,5814,3,1120,560,0,5814,5815,5,238,0,0,
5815,5816,3,1342,671,0,5816,5817,5,2,0,0,5817,5818,3,706,353,0,5818,5819,
5,3,0,0,5819,705,1,0,0,0,5820,5821,5,64,0,0,5821,5822,5,461,0,0,5822,5823,
5,105,0,0,5823,5824,5,211,0,0,5824,5825,3,626,313,0,5825,5826,5,6,0,0,5826,
5827,5,94,0,0,5827,5828,5,461,0,0,5828,5829,5,105,0,0,5829,5830,5,211,0,
0,5830,5831,3,626,313,0,5831,5855,1,0,0,0,5832,5833,5,94,0,0,5833,5834,5,
461,0,0,5834,5835,5,105,0,0,5835,5836,5,211,0,0,5836,5837,3,626,313,0,5837,
5838,5,6,0,0,5838,5839,5,64,0,0,5839,5840,5,461,0,0,5840,5841,5,105,0,0,
5841,5842,5,211,0,0,5842,5843,3,626,313,0,5843,5855,1,0,0,0,5844,5845,5,
64,0,0,5845,5846,5,461,0,0,5846,5847,5,105,0,0,5847,5848,5,211,0,0,5848,
5855,3,626,313,0,5849,5850,5,94,0,0,5850,5851,5,461,0,0,5851,5852,5,105,
0,0,5852,5853,5,211,0,0,5853,5855,3,626,313,0,5854,5820,1,0,0,0,5854,5832,
1,0,0,0,5854,5844,1,0,0,0,5854,5849,1,0,0,0,5855,707,1,0,0,0,5856,5857,5,
191,0,0,5857,5858,5,443,0,0,5858,5859,3,702,351,0,5859,5860,5,62,0,0,5860,
5861,3,1120,560,0,5861,5862,5,238,0,0,5862,5863,3,1342,671,0,5863,5864,3,
108,54,0,5864,709,1,0,0,0,5865,5866,5,299,0,0,5866,5867,3,712,356,0,5867,
5868,3,592,296,0,5868,5869,3,1338,669,0,5869,5892,1,0,0,0,5870,5871,5,299,
0,0,5871,5872,3,714,357,0,5872,5873,3,592,296,0,5873,5874,3,1342,671,0,5874,
5892,1,0,0,0,5875,5876,5,299,0,0,5876,5877,5,2,0,0,5877,5878,3,716,358,0,
5878,5879,5,3,0,0,5879,5880,3,712,356,0,5880,5881,3,592,296,0,5881,5882,
3,1338,669,0,5882,5892,1,0,0,0,5883,5884,5,299,0,0,5884,5885,5,2,0,0,5885,
5886,3,716,358,0,5886,5887,5,3,0,0,5887,5888,3,714,357,0,5888,5889,3,592,
296,0,5889,5890,3,1342,671,0,5890,5892,1,0,0,0,5891,5865,1,0,0,0,5891,5870,
1,0,0,0,5891,5875,1,0,0,0,5891,5883,1,0,0,0,5892,711,1,0,0,0,5893,5894,7,
18,0,0,5894,713,1,0,0,0,5895,5896,7,28,0,0,5896,715,1,0,0,0,5897,5902,3,
718,359,0,5898,5899,5,6,0,0,5899,5901,3,718,359,0,5900,5898,1,0,0,0,5901,
5904,1,0,0,0,5902,5900,1,0,0,0,5902,5903,1,0,0,0,5903,717,1,0,0,0,5904,5902,
1,0,0,0,5905,5906,5,128,0,0,5906,719,1,0,0,0,5907,5908,5,138,0,0,5908,5909,
5,344,0,0,5909,5910,3,1342,671,0,5910,5911,5,326,0,0,5911,5912,3,116,58,
0,5912,5920,1,0,0,0,5913,5914,5,138,0,0,5914,5915,5,344,0,0,5915,5916,3,
1342,671,0,5916,5917,5,306,0,0,5917,5918,3,116,58,0,5918,5920,1,0,0,0,5919,
5907,1,0,0,0,5919,5913,1,0,0,0,5920,721,1,0,0,0,5921,5922,5,138,0,0,5922,
5923,5,136,0,0,5923,5924,3,650,325,0,5924,5925,5,302,0,0,5925,5926,5,94,
0,0,5926,5927,3,1342,671,0,5927,6390,1,0,0,0,5928,5929,5,138,0,0,5929,5930,
5,108,0,0,5930,5931,3,524,262,0,5931,5932,5,302,0,0,5932,5933,5,94,0,0,5933,
5934,3,1342,671,0,5934,6390,1,0,0,0,5935,5936,5,138,0,0,5936,5937,5,168,
0,0,5937,5938,3,524,262,0,5938,5939,5,302,0,0,5939,5940,5,94,0,0,5940,5941,
3,1342,671,0,5941,6390,1,0,0,0,5942,5943,5,138,0,0,5943,5944,5,175,0,0,5944,
5945,3,1342,671,0,5945,5946,5,302,0,0,5946,5947,5,94,0,0,5947,5948,3,1342,
671,0,5948,6390,1,0,0,0,5949,5950,5,138,0,0,5950,5951,5,189,0,0,5951,5952,
3,524,262,0,5952,5953,5,302,0,0,5953,5954,5,94,0,0,5954,5955,3,1342,671,
0,5955,6390,1,0,0,0,5956,5957,5,138,0,0,5957,5958,5,189,0,0,5958,5959,3,
524,262,0,5959,5960,5,302,0,0,5960,5961,5,45,0,0,5961,5962,3,1342,671,0,
5962,5963,5,94,0,0,5963,5964,3,1342,671,0,5964,6390,1,0,0,0,5965,5966,5,
138,0,0,5966,5967,5,63,0,0,5967,5968,5,174,0,0,5968,5969,5,374,0,0,5969,
5970,3,1342,671,0,5970,5971,5,302,0,0,5971,5972,5,94,0,0,5972,5973,3,1342,
671,0,5973,6390,1,0,0,0,5974,5975,5,138,0,0,5975,5976,5,211,0,0,5976,5977,
3,626,313,0,5977,5978,5,302,0,0,5978,5979,5,94,0,0,5979,5980,3,1342,671,
0,5980,6390,1,0,0,0,5981,5982,5,138,0,0,5982,5983,5,66,0,0,5983,5984,3,1368,
684,0,5984,5985,5,302,0,0,5985,5986,5,94,0,0,5986,5987,3,1368,684,0,5987,
6390,1,0,0,0,5988,5989,5,138,0,0,5989,5990,3,308,154,0,5990,5991,5,238,0,
0,5991,5992,3,1342,671,0,5992,5993,5,302,0,0,5993,5994,5,94,0,0,5994,5995,
3,1342,671,0,5995,6390,1,0,0,0,5996,5997,5,138,0,0,5997,5998,5,271,0,0,5998,
5999,5,156,0,0,5999,6000,3,524,262,0,6000,6001,5,100,0,0,6001,6002,3,1342,
671,0,6002,6003,5,302,0,0,6003,6004,5,94,0,0,6004,6005,3,1342,671,0,6005,
6390,1,0,0,0,6006,6007,5,138,0,0,6007,6008,5,271,0,0,6008,6009,5,206,0,0,
6009,6010,3,524,262,0,6010,6011,5,100,0,0,6011,6012,3,1342,671,0,6012,6013,
5,302,0,0,6013,6014,5,94,0,0,6014,6015,3,1342,671,0,6015,6390,1,0,0,0,6016,
6017,5,138,0,0,6017,6018,5,445,0,0,6018,6019,3,1342,671,0,6019,6020,5,80,
0,0,6020,6021,3,1338,669,0,6021,6022,5,302,0,0,6022,6023,5,94,0,0,6023,6024,
3,1342,671,0,6024,6390,1,0,0,0,6025,6026,5,138,0,0,6026,6027,5,445,0,0,6027,
6028,5,220,0,0,6028,6029,5,389,0,0,6029,6030,3,1342,671,0,6030,6031,5,80,
0,0,6031,6032,3,1338,669,0,6032,6033,5,302,0,0,6033,6034,5,94,0,0,6034,6035,
3,1342,671,0,6035,6390,1,0,0,0,6036,6037,5,138,0,0,6037,6038,5,289,0,0,6038,
6039,3,626,313,0,6039,6040,5,302,0,0,6040,6041,5,94,0,0,6041,6042,3,1342,
671,0,6042,6390,1,0,0,0,6043,6044,5,138,0,0,6044,6045,5,452,0,0,6045,6046,
3,1342,671,0,6046,6047,5,302,0,0,6047,6048,5,94,0,0,6048,6049,3,1342,671,
0,6049,6390,1,0,0,0,6050,6051,5,138,0,0,6051,6052,5,442,0,0,6052,6053,3,
626,313,0,6053,6054,5,302,0,0,6054,6055,5,94,0,0,6055,6056,3,1342,671,0,
6056,6390,1,0,0,0,6057,6058,5,138,0,0,6058,6059,5,316,0,0,6059,6060,3,1342,
671,0,6060,6061,5,302,0,0,6061,6062,5,94,0,0,6062,6063,3,1342,671,0,6063,
6390,1,0,0,0,6064,6065,5,138,0,0,6065,6066,5,324,0,0,6066,6067,3,1342,671,
0,6067,6068,5,302,0,0,6068,6069,5,94,0,0,6069,6070,3,1342,671,0,6070,6390,
1,0,0,0,6071,6072,5,138,0,0,6072,6073,5,451,0,0,6073,6074,3,1342,671,0,6074,
6075,5,302,0,0,6075,6076,5,94,0,0,6076,6077,3,1342,671,0,6077,6390,1,0,0,
0,6078,6079,5,138,0,0,6079,6080,5,92,0,0,6080,6081,3,1076,538,0,6081,6082,
5,302,0,0,6082,6083,5,94,0,0,6083,6084,3,1342,671,0,6084,6390,1,0,0,0,6085,
6086,5,138,0,0,6086,6087,5,92,0,0,6087,6088,5,220,0,0,6088,6089,5,389,0,
0,6089,6090,3,1076,538,0,6090,6091,5,302,0,0,6091,6092,5,94,0,0,6092,6093,
3,1342,671,0,6093,6390,1,0,0,0,6094,6095,5,138,0,0,6095,6096,5,321,0,0,6096,
6097,3,1338,669,0,6097,6098,5,302,0,0,6098,6099,5,94,0,0,6099,6100,3,1342,
671,0,6100,6390,1,0,0,0,6101,6102,5,138,0,0,6102,6103,5,321,0,0,6103,6104,
5,220,0,0,6104,6105,5,389,0,0,6105,6106,3,1338,669,0,6106,6107,5,302,0,0,
6107,6108,5,94,0,0,6108,6109,3,1342,671,0,6109,6390,1,0,0,0,6110,6111,5,
138,0,0,6111,6112,5,369,0,0,6112,6113,3,1338,669,0,6113,6114,5,302,0,0,6114,
6115,5,94,0,0,6115,6116,3,1342,671,0,6116,6390,1,0,0,0,6117,6118,5,138,0,
0,6118,6119,5,369,0,0,6119,6120,5,220,0,0,6120,6121,5,389,0,0,6121,6122,
3,1338,669,0,6122,6123,5,302,0,0,6123,6124,5,94,0,0,6124,6125,3,1342,671,
0,6125,6390,1,0,0,0,6126,6127,5,138,0,0,6127,6128,5,251,0,0,6128,6129,5,
369,0,0,6129,6130,3,1338,669,0,6130,6131,5,302,0,0,6131,6132,5,94,0,0,6132,
6133,3,1342,671,0,6133,6390,1,0,0,0,6134,6135,5,138,0,0,6135,6136,5,251,
0,0,6136,6137,5,369,0,0,6137,6138,5,220,0,0,6138,6139,5,389,0,0,6139,6140,
3,1338,669,0,6140,6141,5,302,0,0,6141,6142,5,94,0,0,6142,6143,3,1342,671,
0,6143,6390,1,0,0,0,6144,6145,5,138,0,0,6145,6146,5,226,0,0,6146,6147,3,
1338,669,0,6147,6148,5,302,0,0,6148,6149,5,94,0,0,6149,6150,3,1342,671,0,
6150,6390,1,0,0,0,6151,6152,5,138,0,0,6152,6153,5,226,0,0,6153,6154,5,220,
0,0,6154,6155,5,389,0,0,6155,6156,3,1338,669,0,6156,6157,5,302,0,0,6157,
6158,5,94,0,0,6158,6159,3,1342,671,0,6159,6390,1,0,0,0,6160,6161,5,138,0,
0,6161,6162,5,63,0,0,6162,6163,5,92,0,0,6163,6164,3,1076,538,0,6164,6165,
5,302,0,0,6165,6166,5,94,0,0,6166,6167,3,1342,671,0,6167,6390,1,0,0,0,6168,
6169,5,138,0,0,6169,6170,5,63,0,0,6170,6171,5,92,0,0,6171,6172,5,220,0,0,
6172,6173,5,389,0,0,6173,6174,3,1076,538,0,6174,6175,5,302,0,0,6175,6176,
5,94,0,0,6176,6177,3,1342,671,0,6177,6390,1,0,0,0,6178,6179,5,138,0,0,6179,
6180,5,92,0,0,6180,6181,3,1076,538,0,6181,6182,5,302,0,0,6182,6183,3,724,
362,0,6183,6184,3,1342,671,0,6184,6185,5,94,0,0,6185,6186,3,1342,671,0,6186,
6390,1,0,0,0,6187,6188,5,138,0,0,6188,6189,5,92,0,0,6189,6190,5,220,0,0,
6190,6191,5,389,0,0,6191,6192,3,1076,538,0,6192,6193,5,302,0,0,6193,6194,
3,724,362,0,6194,6195,3,1342,671,0,6195,6196,5,94,0,0,6196,6197,3,1342,671,
0,6197,6390,1,0,0,0,6198,6199,5,138,0,0,6199,6200,5,369,0,0,6200,6201,3,
1338,669,0,6201,6202,5,302,0,0,6202,6203,3,724,362,0,6203,6204,3,1342,671,
0,6204,6205,5,94,0,0,6205,6206,3,1342,671,0,6206,6390,1,0,0,0,6207,6208,
5,138,0,0,6208,6209,5,369,0,0,6209,6210,5,220,0,0,6210,6211,5,389,0,0,6211,
6212,3,1338,669,0,6212,6213,5,302,0,0,6213,6214,3,724,362,0,6214,6215,3,
1342,671,0,6215,6216,5,94,0,0,6216,6217,3,1342,671,0,6217,6390,1,0,0,0,6218,
6219,5,138,0,0,6219,6220,5,251,0,0,6220,6221,5,369,0,0,6221,6222,3,1338,
669,0,6222,6223,5,302,0,0,6223,6224,3,724,362,0,6224,6225,3,1342,671,0,6225,
6226,5,94,0,0,6226,6227,3,1342,671,0,6227,6390,1,0,0,0,6228,6229,5,138,0,
0,6229,6230,5,251,0,0,6230,6231,5,369,0,0,6231,6232,5,220,0,0,6232,6233,
5,389,0,0,6233,6234,3,1338,669,0,6234,6235,5,302,0,0,6235,6236,3,724,362,
0,6236,6237,3,1342,671,0,6237,6238,5,94,0,0,6238,6239,3,1342,671,0,6239,
6390,1,0,0,0,6240,6241,5,138,0,0,6241,6242,5,92,0,0,6242,6243,3,1076,538,
0,6243,6244,5,302,0,0,6244,6245,5,45,0,0,6245,6246,3,1342,671,0,6246,6247,
5,94,0,0,6247,6248,3,1342,671,0,6248,6390,1,0,0,0,6249,6250,5,138,0,0,6250,
6251,5,92,0,0,6251,6252,5,220,0,0,6252,6253,5,389,0,0,6253,6254,3,1076,538,
0,6254,6255,5,302,0,0,6255,6256,5,45,0,0,6256,6257,3,1342,671,0,6257,6258,
5,94,0,0,6258,6259,3,1342,671,0,6259,6390,1,0,0,0,6260,6261,5,138,0,0,6261,
6262,5,63,0,0,6262,6263,5,92,0,0,6263,6264,3,1076,538,0,6264,6265,5,302,
0,0,6265,6266,3,724,362,0,6266,6267,3,1342,671,0,6267,6268,5,94,0,0,6268,
6269,3,1342,671,0,6269,6390,1,0,0,0,6270,6271,5,138,0,0,6271,6272,5,63,0,
0,6272,6273,5,92,0,0,6273,6274,5,220,0,0,6274,6275,5,389,0,0,6275,6276,3,
1076,538,0,6276,6277,5,302,0,0,6277,6278,3,724,362,0,6278,6279,3,1342,671,
0,6279,6280,5,94,0,0,6280,6281,3,1342,671,0,6281,6390,1,0,0,0,6282,6283,
5,138,0,0,6283,6284,5,314,0,0,6284,6285,3,1342,671,0,6285,6286,5,80,0,0,
6286,6287,3,1338,669,0,6287,6288,5,302,0,0,6288,6289,5,94,0,0,6289,6290,
3,1342,671,0,6290,6390,1,0,0,0,6291,6292,5,138,0,0,6292,6293,5,350,0,0,6293,
6294,3,1342,671,0,6294,6295,5,80,0,0,6295,6296,3,1338,669,0,6296,6297,5,
302,0,0,6297,6298,5,94,0,0,6298,6299,3,1342,671,0,6299,6390,1,0,0,0,6300,
6301,5,138,0,0,6301,6302,5,198,0,0,6302,6303,5,350,0,0,6303,6304,3,1342,
671,0,6304,6305,5,302,0,0,6305,6306,5,94,0,0,6306,6307,3,1342,671,0,6307,
6390,1,0,0,0,6308,6309,5,138,0,0,6309,6310,5,311,0,0,6310,6311,3,1368,684,
0,6311,6312,5,302,0,0,6312,6313,5,94,0,0,6313,6314,3,1368,684,0,6314,6390,
1,0,0,0,6315,6316,5,138,0,0,6316,6317,5,99,0,0,6317,6318,3,1368,684,0,6318,
6319,5,302,0,0,6319,6320,5,94,0,0,6320,6321,3,1368,684,0,6321,6390,1,0,0,
0,6322,6323,5,138,0,0,6323,6324,5,344,0,0,6324,6325,3,1342,671,0,6325,6326,
5,302,0,0,6326,6327,5,94,0,0,6327,6328,3,1342,671,0,6328,6390,1,0,0,0,6329,
6330,5,138,0,0,6330,6331,5,335,0,0,6331,6332,3,524,262,0,6332,6333,5,302,
0,0,6333,6334,5,94,0,0,6334,6335,3,1342,671,0,6335,6390,1,0,0,0,6336,6337,
5,138,0,0,6337,6338,5,348,0,0,6338,6339,5,318,0,0,6339,6340,5,276,0,0,6340,
6341,3,524,262,0,6341,6342,5,302,0,0,6342,6343,5,94,0,0,6343,6344,3,1342,
671,0,6344,6390,1,0,0,0,6345,6346,5,138,0,0,6346,6347,5,348,0,0,6347,6348,
5,318,0,0,6348,6349,5,185,0,0,6349,6350,3,524,262,0,6350,6351,5,302,0,0,
6351,6352,5,94,0,0,6352,6353,3,1342,671,0,6353,6390,1,0,0,0,6354,6355,5,
138,0,0,6355,6356,5,348,0,0,6356,6357,5,318,0,0,6357,6358,5,346,0,0,6358,
6359,3,524,262,0,6359,6360,5,302,0,0,6360,6361,5,94,0,0,6361,6362,3,1342,
671,0,6362,6390,1,0,0,0,6363,6364,5,138,0,0,6364,6365,5,348,0,0,6365,6366,
5,318,0,0,6366,6367,5,163,0,0,6367,6368,3,524,262,0,6368,6369,5,302,0,0,
6369,6370,5,94,0,0,6370,6371,3,1342,671,0,6371,6390,1,0,0,0,6372,6373,5,
138,0,0,6373,6374,5,353,0,0,6374,6375,3,524,262,0,6375,6376,5,302,0,0,6376,
6377,5,94,0,0,6377,6378,3,1342,671,0,6378,6390,1,0,0,0,6379,6380,5,138,0,
0,6380,6381,5,353,0,0,6381,6382,3,524,262,0,6382,6383,5,302,0,0,6383,6384,
5,143,0,0,6384,6385,3,1342,671,0,6385,6386,5,94,0,0,6386,6387,3,1342,671,
0,6387,6388,3,108,54,0,6388,6390,1,0,0,0,6389,5921,1,0,0,0,6389,5928,1,0,
0,0,6389,5935,1,0,0,0,6389,5942,1,0,0,0,6389,5949,1,0,0,0,6389,5956,1,0,
0,0,6389,5965,1,0,0,0,6389,5974,1,0,0,0,6389,5981,1,0,0,0,6389,5988,1,0,
0,0,6389,5996,1,0,0,0,6389,6006,1,0,0,0,6389,6016,1,0,0,0,6389,6025,1,0,
0,0,6389,6036,1,0,0,0,6389,6043,1,0,0,0,6389,6050,1,0,0,0,6389,6057,1,0,
0,0,6389,6064,1,0,0,0,6389,6071,1,0,0,0,6389,6078,1,0,0,0,6389,6085,1,0,
0,0,6389,6094,1,0,0,0,6389,6101,1,0,0,0,6389,6110,1,0,0,0,6389,6117,1,0,
0,0,6389,6126,1,0,0,0,6389,6134,1,0,0,0,6389,6144,1,0,0,0,6389,6151,1,0,
0,0,6389,6160,1,0,0,0,6389,6168,1,0,0,0,6389,6178,1,0,0,0,6389,6187,1,0,
0,0,6389,6198,1,0,0,0,6389,6207,1,0,0,0,6389,6218,1,0,0,0,6389,6228,1,0,
0,0,6389,6240,1,0,0,0,6389,6249,1,0,0,0,6389,6260,1,0,0,0,6389,6270,1,0,
0,0,6389,6282,1,0,0,0,6389,6291,1,0,0,0,6389,6300,1,0,0,0,6389,6308,1,0,
0,0,6389,6315,1,0,0,0,6389,6322,1,0,0,0,6389,6329,1,0,0,0,6389,6336,1,0,
0,0,6389,6345,1,0,0,0,6389,6354,1,0,0,0,6389,6363,1,0,0,0,6389,6372,1,0,
0,0,6389,6379,1,0,0,0,6390,723,1,0,0,0,6391,6394,5,44,0,0,6392,6394,1,0,
0,0,6393,6391,1,0,0,0,6393,6392,1,0,0,0,6394,725,1,0,0,0,6395,6396,5,326,
0,0,6396,6399,5,174,0,0,6397,6399,1,0,0,0,6398,6395,1,0,0,0,6398,6397,1,
0,0,0,6399,727,1,0,0,0,6400,6401,5,138,0,0,6401,6402,5,211,0,0,6402,6403,
3,626,313,0,6403,6404,3,730,365,0,6404,6405,5,462,0,0,6405,6406,5,80,0,0,
6406,6407,5,204,0,0,6407,6408,3,1342,671,0,6408,6458,1,0,0,0,6409,6410,5,
138,0,0,6410,6411,5,289,0,0,6411,6412,3,626,313,0,6412,6413,3,730,365,0,
6413,6414,5,462,0,0,6414,6415,5,80,0,0,6415,6416,5,204,0,0,6416,6417,3,1342,
671,0,6417,6458,1,0,0,0,6418,6419,5,138,0,0,6419,6420,5,442,0,0,6420,6421,
3,626,313,0,6421,6422,3,730,365,0,6422,6423,5,462,0,0,6423,6424,5,80,0,0,
6424,6425,5,204,0,0,6425,6426,3,1342,671,0,6426,6458,1,0,0,0,6427,6428,5,
138,0,0,6428,6429,5,350,0,0,6429,6430,3,1342,671,0,6430,6431,5,80,0,0,6431,
6432,3,1338,669,0,6432,6433,3,730,365,0,6433,6434,5,462,0,0,6434,6435,5,
80,0,0,6435,6436,5,204,0,0,6436,6437,3,1342,671,0,6437,6458,1,0,0,0,6438,
6439,5,138,0,0,6439,6440,5,251,0,0,6440,6441,5,369,0,0,6441,6442,3,1338,
669,0,6442,6443,3,730,365,0,6443,6444,5,462,0,0,6444,6445,5,80,0,0,6445,
6446,5,204,0,0,6446,6447,3,1342,671,0,6447,6458,1,0,0,0,6448,6449,5,138,
0,0,6449,6450,5,226,0,0,6450,6451,3,1338,669,0,6451,6452,3,730,365,0,6452,
6453,5,462,0,0,6453,6454,5,80,0,0,6454,6455,5,204,0,0,6455,6456,3,1342,671,
0,6456,6458,1,0,0,0,6457,6400,1,0,0,0,6457,6409,1,0,0,0,6457,6418,1,0,0,
0,6457,6427,1,0,0,0,6457,6438,1,0,0,0,6457,6448,1,0,0,0,6458,729,1,0,0,0,
6459,6462,5,262,0,0,6460,6462,1,0,0,0,6461,6459,1,0,0,0,6461,6460,1,0,0,
0,6462,731,1,0,0,0,6463,6464,5,138,0,0,6464,6465,5,136,0,0,6465,6466,3,650,
325,0,6466,6467,5,326,0,0,6467,6468,5,316,0,0,6468,6469,3,1342,671,0,6469,
6681,1,0,0,0,6470,6471,5,138,0,0,6471,6472,5,108,0,0,6472,6473,3,524,262,
0,6473,6474,5,326,0,0,6474,6475,5,316,0,0,6475,6476,3,1342,671,0,6476,6681,
1,0,0,0,6477,6478,5,138,0,0,6478,6479,5,168,0,0,6479,6480,3,524,262,0,6480,
6481,5,326,0,0,6481,6482,5,316,0,0,6482,6483,3,1342,671,0,6483,6681,1,0,
0,0,6484,6485,5,138,0,0,6485,6486,5,189,0,0,6486,6487,3,524,262,0,6487,6488,
5,326,0,0,6488,6489,5,316,0,0,6489,6490,3,1342,671,0,6490,6681,1,0,0,0,6491,
6492,5,138,0,0,6492,6493,5,204,0,0,6493,6494,3,1342,671,0,6494,6495,5,326,
0,0,6495,6496,5,316,0,0,6496,6497,3,1342,671,0,6497,6681,1,0,0,0,6498,6499,
5,138,0,0,6499,6500,5,211,0,0,6500,6501,3,626,313,0,6501,6502,5,326,0,0,
6502,6503,5,316,0,0,6503,6504,3,1342,671,0,6504,6681,1,0,0,0,6505,6506,5,
138,0,0,6506,6507,5,271,0,0,6507,6508,3,688,344,0,6508,6509,5,326,0,0,6509,
6510,5,316,0,0,6510,6511,3,1342,671,0,6511,6681,1,0,0,0,6512,6513,5,138,
0,0,6513,6514,5,271,0,0,6514,6515,5,156,0,0,6515,6516,3,524,262,0,6516,6517,
5,100,0,0,6517,6518,3,1342,671,0,6518,6519,5,326,0,0,6519,6520,5,316,0,0,
6520,6521,3,1342,671,0,6521,6681,1,0,0,0,6522,6523,5,138,0,0,6523,6524,5,
271,0,0,6524,6525,5,206,0,0,6525,6526,3,524,262,0,6526,6527,5,100,0,0,6527,
6528,3,1342,671,0,6528,6529,5,326,0,0,6529,6530,5,316,0,0,6530,6531,3,1342,
671,0,6531,6681,1,0,0,0,6532,6533,5,138,0,0,6533,6534,5,289,0,0,6534,6535,
3,626,313,0,6535,6536,5,326,0,0,6536,6537,5,316,0,0,6537,6538,3,1342,671,
0,6538,6681,1,0,0,0,6539,6540,5,138,0,0,6540,6541,5,442,0,0,6541,6542,3,
626,313,0,6542,6543,5,326,0,0,6543,6544,5,316,0,0,6544,6545,3,1342,671,0,
6545,6681,1,0,0,0,6546,6547,5,138,0,0,6547,6548,5,92,0,0,6548,6549,3,1076,
538,0,6549,6550,5,326,0,0,6550,6551,5,316,0,0,6551,6552,3,1342,671,0,6552,
6681,1,0,0,0,6553,6554,5,138,0,0,6554,6555,5,92,0,0,6555,6556,5,220,0,0,
6556,6557,5,389,0,0,6557,6558,3,1076,538,0,6558,6559,5,326,0,0,6559,6560,
5,316,0,0,6560,6561,3,1342,671,0,6561,6681,1,0,0,0,6562,6563,5,138,0,0,6563,
6564,5,335,0,0,6564,6565,3,524,262,0,6565,6566,5,326,0,0,6566,6567,5,316,
0,0,6567,6568,3,1342,671,0,6568,6681,1,0,0,0,6569,6570,5,138,0,0,6570,6571,
5,348,0,0,6571,6572,5,318,0,0,6572,6573,5,276,0,0,6573,6574,3,524,262,0,
6574,6575,5,326,0,0,6575,6576,5,316,0,0,6576,6577,3,1342,671,0,6577,6681,
1,0,0,0,6578,6579,5,138,0,0,6579,6580,5,348,0,0,6580,6581,5,318,0,0,6581,
6582,5,185,0,0,6582,6583,3,524,262,0,6583,6584,5,326,0,0,6584,6585,5,316,
0,0,6585,6586,3,1342,671,0,6586,6681,1,0,0,0,6587,6588,5,138,0,0,6588,6589,
5,348,0,0,6589,6590,5,318,0,0,6590,6591,5,346,0,0,6591,6592,3,524,262,0,
6592,6593,5,326,0,0,6593,6594,5,316,0,0,6594,6595,3,1342,671,0,6595,6681,
1,0,0,0,6596,6597,5,138,0,0,6597,6598,5,348,0,0,6598,6599,5,318,0,0,6599,
6600,5,163,0,0,6600,6601,3,524,262,0,6601,6602,5,326,0,0,6602,6603,5,316,
0,0,6603,6604,3,1342,671,0,6604,6681,1,0,0,0,6605,6606,5,138,0,0,6606,6607,
5,321,0,0,6607,6608,3,1338,669,0,6608,6609,5,326,0,0,6609,6610,5,316,0,0,
6610,6611,3,1342,671,0,6611,6681,1,0,0,0,6612,6613,5,138,0,0,6613,6614,5,
321,0,0,6614,6615,5,220,0,0,6615,6616,5,389,0,0,6616,6617,3,1338,669,0,6617,
6618,5,326,0,0,6618,6619,5,316,0,0,6619,6620,3,1342,671,0,6620,6681,1,0,
0,0,6621,6622,5,138,0,0,6622,6623,5,369,0,0,6623,6624,3,1338,669,0,6624,
6625,5,326,0,0,6625,6626,5,316,0,0,6626,6627,3,1342,671,0,6627,6681,1,0,
0,0,6628,6629,5,138,0,0,6629,6630,5,369,0,0,6630,6631,5,220,0,0,6631,6632,
5,389,0,0,6632,6633,3,1338,669,0,6633,6634,5,326,0,0,6634,6635,5,316,0,0,
6635,6636,3,1342,671,0,6636,6681,1,0,0,0,6637,6638,5,138,0,0,6638,6639,5,
251,0,0,6639,6640,5,369,0,0,6640,6641,3,1338,669,0,6641,6642,5,326,0,0,6642,
6643,5,316,0,0,6643,6644,3,1342,671,0,6644,6681,1,0,0,0,6645,6646,5,138,
0,0,6646,6647,5,251,0,0,6647,6648,5,369,0,0,6648,6649,5,220,0,0,6649,6650,
5,389,0,0,6650,6651,3,1338,669,0,6651,6652,5,326,0,0,6652,6653,5,316,0,0,
6653,6654,3,1342,671,0,6654,6681,1,0,0,0,6655,6656,5,138,0,0,6656,6657,5,
63,0,0,6657,6658,5,92,0,0,6658,6659,3,1076,538,0,6659,6660,5,326,0,0,6660,
6661,5,316,0,0,6661,6662,3,1342,671,0,6662,6681,1,0,0,0,6663,6664,5,138,
0,0,6664,6665,5,63,0,0,6665,6666,5,92,0,0,6666,6667,5,220,0,0,6667,6668,
5,389,0,0,6668,6669,3,1076,538,0,6669,6670,5,326,0,0,6670,6671,5,316,0,0,
6671,6672,3,1342,671,0,6672,6681,1,0,0,0,6673,6674,5,138,0,0,6674,6675,5,
353,0,0,6675,6676,3,524,262,0,6676,6677,5,326,0,0,6677,6678,5,316,0,0,6678,
6679,3,1342,671,0,6679,6681,1,0,0,0,6680,6463,1,0,0,0,6680,6470,1,0,0,0,
6680,6477,1,0,0,0,6680,6484,1,0,0,0,6680,6491,1,0,0,0,6680,6498,1,0,0,0,
6680,6505,1,0,0,0,6680,6512,1,0,0,0,6680,6522,1,0,0,0,6680,6532,1,0,0,0,
6680,6539,1,0,0,0,6680,6546,1,0,0,0,6680,6553,1,0,0,0,6680,6562,1,0,0,0,
6680,6569,1,0,0,0,6680,6578,1,0,0,0,6680,6587,1,0,0,0,6680,6596,1,0,0,0,
6680,6605,1,0,0,0,6680,6612,1,0,0,0,6680,6621,1,0,0,0,6680,6628,1,0,0,0,
6680,6637,1,0,0,0,6680,6645,1,0,0,0,6680,6655,1,0,0,0,6680,6663,1,0,0,0,
6680,6673,1,0,0,0,6681,733,1,0,0,0,6682,6683,5,138,0,0,6683,6684,5,271,0,
0,6684,6685,3,688,344,0,6685,6686,5,326,0,0,6686,6687,5,2,0,0,6687,6688,
3,736,368,0,6688,6689,5,3,0,0,6689,735,1,0,0,0,6690,6695,3,738,369,0,6691,
6692,5,6,0,0,6692,6694,3,738,369,0,6693,6691,1,0,0,0,6694,6697,1,0,0,0,6695,
6693,1,0,0,0,6695,6696,1,0,0,0,6696,737,1,0,0,0,6697,6695,1,0,0,0,6698,6699,
3,1382,691,0,6699,6700,5,10,0,0,6700,6701,5,400,0,0,6701,6707,1,0,0,0,6702,
6703,3,1382,691,0,6703,6704,5,10,0,0,6704,6705,3,740,370,0,6705,6707,1,0,
0,0,6706,6698,1,0,0,0,6706,6702,1,0,0,0,6707,739,1,0,0,0,6708,6714,3,640,
320,0,6709,6714,3,1394,697,0,6710,6714,3,1278,639,0,6711,6714,3,292,146,
0,6712,6714,3,1360,680,0,6713,6708,1,0,0,0,6713,6709,1,0,0,0,6713,6710,1,
0,0,0,6713,6711,1,0,0,0,6713,6712,1,0,0,0,6714,741,1,0,0,0,6715,6716,5,138,
0,0,6716,6717,5,353,0,0,6717,6718,3,524,262,0,6718,6719,5,326,0,0,6719,6720,
5,2,0,0,6720,6721,3,736,368,0,6721,6722,5,3,0,0,6722,743,1,0,0,0,6723,6724,
5,138,0,0,6724,6725,5,136,0,0,6725,6726,3,650,325,0,6726,6727,5,275,0,0,
6727,6728,5,94,0,0,6728,6729,3,1370,685,0,6729,6907,1,0,0,0,6730,6731,5,
138,0,0,6731,6732,5,108,0,0,6732,6733,3,524,262,0,6733,6734,5,275,0,0,6734,
6735,5,94,0,0,6735,6736,3,1370,685,0,6736,6907,1,0,0,0,6737,6738,5,138,0,
0,6738,6739,5,168,0,0,6739,6740,3,524,262,0,6740,6741,5,275,0,0,6741,6742,
5,94,0,0,6742,6743,3,1370,685,0,6743,6907,1,0,0,0,6744,6745,5,138,0,0,6745,
6746,5,175,0,0,6746,6747,3,1342,671,0,6747,6748,5,275,0,0,6748,6749,5,94,
0,0,6749,6750,3,1370,685,0,6750,6907,1,0,0,0,6751,6752,5,138,0,0,6752,6753,
5,189,0,0,6753,6754,3,524,262,0,6754,6755,5,275,0,0,6755,6756,5,94,0,0,6756,
6757,3,1370,685,0,6757,6907,1,0,0,0,6758,6759,5,138,0,0,6759,6760,5,211,
0,0,6760,6761,3,626,313,0,6761,6762,5,275,0,0,6762,6763,5,94,0,0,6763,6764,
3,1370,685,0,6764,6907,1,0,0,0,6765,6766,5,138,0,0,6766,6767,3,308,154,0,
6767,6768,5,238,0,0,6768,6769,3,1342,671,0,6769,6770,5,275,0,0,6770,6771,
5,94,0,0,6771,6772,3,1370,685,0,6772,6907,1,0,0,0,6773,6774,5,138,0,0,6774,
6775,5,239,0,0,6775,6776,5,267,0,0,6776,6777,3,292,146,0,6777,6778,5,275,
0,0,6778,6779,5,94,0,0,6779,6780,3,1370,685,0,6780,6907,1,0,0,0,6781,6782,
5,138,0,0,6782,6783,5,271,0,0,6783,6784,3,688,344,0,6784,6785,5,275,0,0,
6785,6786,5,94,0,0,6786,6787,3,1370,685,0,6787,6907,1,0,0,0,6788,6789,5,
138,0,0,6789,6790,5,271,0,0,6790,6791,5,156,0,0,6791,6792,3,524,262,0,6792,
6793,5,100,0,0,6793,6794,3,1342,671,0,6794,6795,5,275,0,0,6795,6796,5,94,
0,0,6796,6797,3,1370,685,0,6797,6907,1,0,0,0,6798,6799,5,138,0,0,6799,6800,
5,271,0,0,6800,6801,5,206,0,0,6801,6802,3,524,262,0,6802,6803,5,100,0,0,
6803,6804,3,1342,671,0,6804,6805,5,275,0,0,6805,6806,5,94,0,0,6806,6807,
3,1370,685,0,6807,6907,1,0,0,0,6808,6809,5,138,0,0,6809,6810,5,289,0,0,6810,
6811,3,626,313,0,6811,6812,5,275,0,0,6812,6813,5,94,0,0,6813,6814,3,1370,
685,0,6814,6907,1,0,0,0,6815,6816,5,138,0,0,6816,6817,5,442,0,0,6817,6818,
3,626,313,0,6818,6819,5,275,0,0,6819,6820,5,94,0,0,6820,6821,3,1370,685,
0,6821,6907,1,0,0,0,6822,6823,5,138,0,0,6823,6824,5,316,0,0,6824,6825,3,
1342,671,0,6825,6826,5,275,0,0,6826,6827,5,94,0,0,6827,6828,3,1370,685,0,
6828,6907,1,0,0,0,6829,6830,5,138,0,0,6830,6831,5,353,0,0,6831,6832,3,524,
262,0,6832,6833,5,275,0,0,6833,6834,5,94,0,0,6834,6835,3,1370,685,0,6835,
6907,1,0,0,0,6836,6837,5,138,0,0,6837,6838,5,344,0,0,6838,6839,3,1342,671,
0,6839,6840,5,275,0,0,6840,6841,5,94,0,0,6841,6842,3,1370,685,0,6842,6907,
1,0,0,0,6843,6844,5,138,0,0,6844,6845,5,335,0,0,6845,6846,3,524,262,0,6846,
6847,5,275,0,0,6847,6848,5,94,0,0,6848,6849,3,1370,685,0,6849,6907,1,0,0,
0,6850,6851,5,138,0,0,6851,6852,5,348,0,0,6852,6853,5,318,0,0,6853,6854,
5,185,0,0,6854,6855,3,524,262,0,6855,6856,5,275,0,0,6856,6857,5,94,0,0,6857,
6858,3,1370,685,0,6858,6907,1,0,0,0,6859,6860,5,138,0,0,6860,6861,5,348,
0,0,6861,6862,5,318,0,0,6862,6863,5,163,0,0,6863,6864,3,524,262,0,6864,6865,
5,275,0,0,6865,6866,5,94,0,0,6866,6867,3,1370,685,0,6867,6907,1,0,0,0,6868,
6869,5,138,0,0,6869,6870,5,63,0,0,6870,6871,5,174,0,0,6871,6872,5,374,0,
0,6872,6873,3,1342,671,0,6873,6874,5,275,0,0,6874,6875,5,94,0,0,6875,6876,
3,1370,685,0,6876,6907,1,0,0,0,6877,6878,5,138,0,0,6878,6879,5,324,0,0,6879,
6880,3,1342,671,0,6880,6881,5,275,0,0,6881,6882,5,94,0,0,6882,6883,3,1370,
685,0,6883,6907,1,0,0,0,6884,6885,5,138,0,0,6885,6886,5,198,0,0,6886,6887,
5,350,0,0,6887,6888,3,1342,671,0,6888,6889,5,275,0,0,6889,6890,5,94,0,0,
6890,6891,3,1370,685,0,6891,6907,1,0,0,0,6892,6893,5,138,0,0,6893,6894,5,
452,0,0,6894,6895,3,1342,671,0,6895,6896,5,275,0,0,6896,6897,5,94,0,0,6897,
6898,3,1370,685,0,6898,6907,1,0,0,0,6899,6900,5,138,0,0,6900,6901,5,451,
0,0,6901,6902,3,1342,671,0,6902,6903,5,275,0,0,6903,6904,5,94,0,0,6904,6905,
3,1370,685,0,6905,6907,1,0,0,0,6906,6723,1,0,0,0,6906,6730,1,0,0,0,6906,
6737,1,0,0,0,6906,6744,1,0,0,0,6906,6751,1,0,0,0,6906,6758,1,0,0,0,6906,
6765,1,0,0,0,6906,6773,1,0,0,0,6906,6781,1,0,0,0,6906,6788,1,0,0,0,6906,
6798,1,0,0,0,6906,6808,1,0,0,0,6906,6815,1,0,0,0,6906,6822,1,0,0,0,6906,
6829,1,0,0,0,6906,6836,1,0,0,0,6906,6843,1,0,0,0,6906,6850,1,0,0,0,6906,
6859,1,0,0,0,6906,6868,1,0,0,0,6906,6877,1,0,0,0,6906,6884,1,0,0,0,6906,
6892,1,0,0,0,6906,6899,1,0,0,0,6907,745,1,0,0,0,6908,6909,5,46,0,0,6909,
6910,5,452,0,0,6910,6911,3,1342,671,0,6911,6912,3,748,374,0,6912,6913,3,
664,332,0,6913,747,1,0,0,0,6914,6917,3,750,375,0,6915,6917,1,0,0,0,6916,
6914,1,0,0,0,6916,6915,1,0,0,0,6917,749,1,0,0,0,6918,6919,5,62,0,0,6919,
6920,5,92,0,0,6920,6925,3,1078,539,0,6921,6922,5,62,0,0,6922,6923,5,30,0,
0,6923,6925,5,343,0,0,6924,6918,1,0,0,0,6924,6921,1,0,0,0,6925,751,1,0,0,
0,6926,6927,5,138,0,0,6927,6928,5,452,0,0,6928,6929,3,1342,671,0,6929,6930,
5,326,0,0,6930,6931,3,460,230,0,6931,6954,1,0,0,0,6932,6933,5,138,0,0,6933,
6934,5,452,0,0,6934,6935,3,1342,671,0,6935,6936,5,133,0,0,6936,6937,5,92,
0,0,6937,6938,3,1078,539,0,6938,6954,1,0,0,0,6939,6940,5,138,0,0,6940,6941,
5,452,0,0,6941,6942,3,1342,671,0,6942,6943,5,326,0,0,6943,6944,5,92,0,0,
6944,6945,3,1078,539,0,6945,6954,1,0,0,0,6946,6947,5,138,0,0,6947,6948,5,
452,0,0,6948,6949,3,1342,671,0,6949,6950,5,191,0,0,6950,6951,5,92,0,0,6951,
6952,3,1078,539,0,6952,6954,1,0,0,0,6953,6926,1,0,0,0,6953,6932,1,0,0,0,
6953,6939,1,0,0,0,6953,6946,1,0,0,0,6954,753,1,0,0,0,6955,6956,5,46,0,0,
6956,6957,5,451,0,0,6957,6958,3,1342,671,0,6958,6959,5,164,0,0,6959,6960,
3,1360,680,0,6960,6961,5,452,0,0,6961,6962,3,756,378,0,6962,6963,3,664,332,
0,6963,755,1,0,0,0,6964,6969,3,758,379,0,6965,6966,5,6,0,0,6966,6968,3,758,
379,0,6967,6965,1,0,0,0,6968,6971,1,0,0,0,6969,6967,1,0,0,0,6969,6970,1,
0,0,0,6970,757,1,0,0,0,6971,6969,1,0,0,0,6972,6973,3,1382,691,0,6973,759,
1,0,0,0,6974,6975,5,138,0,0,6975,6976,5,451,0,0,6976,6977,3,1342,671,0,6977,
6978,5,326,0,0,6978,6979,3,460,230,0,6979,7012,1,0,0,0,6980,6981,5,138,0,
0,6981,6982,5,451,0,0,6982,6983,3,1342,671,0,6983,6984,5,164,0,0,6984,6985,
3,1360,680,0,6985,7012,1,0,0,0,6986,6987,5,138,0,0,6987,6988,5,451,0,0,6988,
6989,3,1342,671,0,6989,6990,5,298,0,0,6990,6991,5,452,0,0,6991,6992,3,664,
332,0,6992,7012,1,0,0,0,6993,6994,5,138,0,0,6994,6995,5,451,0,0,6995,6996,
3,1342,671,0,6996,6997,5,326,0,0,6997,6998,5,452,0,0,6998,6999,3,756,378,
0,6999,7000,3,664,332,0,7000,7012,1,0,0,0,7001,7002,5,138,0,0,7002,7003,
5,451,0,0,7003,7004,3,1342,671,0,7004,7005,5,193,0,0,7005,7012,1,0,0,0,7006,
7007,5,138,0,0,7007,7008,5,451,0,0,7008,7009,3,1342,671,0,7009,7010,5,186,
0,0,7010,7012,1,0,0,0,7011,6974,1,0,0,0,7011,6980,1,0,0,0,7011,6986,1,0,
0,0,7011,6993,1,0,0,0,7011,7001,1,0,0,0,7011,7006,1,0,0,0,7012,761,1,0,0,
0,7013,7014,5,191,0,0,7014,7015,5,451,0,0,7015,7016,3,1342,671,0,7016,7017,
3,108,54,0,7017,7026,1,0,0,0,7018,7019,5,191,0,0,7019,7020,5,451,0,0,7020,
7021,5,220,0,0,7021,7022,5,389,0,0,7022,7023,3,1342,671,0,7023,7024,3,108,
54,0,7024,7026,1,0,0,0,7025,7013,1,0,0,0,7025,7018,1,0,0,0,7026,763,1,0,
0,0,7027,7028,5,46,0,0,7028,7029,3,618,309,0,7029,7030,5,314,0,0,7030,7031,
3,1342,671,0,7031,7032,5,36,0,0,7032,7033,5,80,0,0,7033,7034,3,774,387,0,
7034,7035,5,94,0,0,7035,7036,3,1338,669,0,7036,7037,3,1096,548,0,7037,7038,
5,57,0,0,7038,7039,3,776,388,0,7039,7040,3,766,383,0,7040,765,1,0,0,0,7041,
7048,5,263,0,0,7042,7048,3,770,385,0,7043,7044,5,2,0,0,7044,7045,3,768,384,
0,7045,7046,5,3,0,0,7046,7048,1,0,0,0,7047,7041,1,0,0,0,7047,7042,1,0,0,
0,7047,7043,1,0,0,0,7048,767,1,0,0,0,7049,7054,3,772,386,0,7050,7051,5,7,
0,0,7051,7053,3,772,386,0,7052,7050,1,0,0,0,7053,7056,1,0,0,0,7054,7052,
1,0,0,0,7054,7055,1,0,0,0,7055,769,1,0,0,0,7056,7054,1,0,0,0,7057,7063,3,
960,480,0,7058,7063,3,902,451,0,7059,7063,3,942,471,0,7060,7063,3,928,464,
0,7061,7063,3,778,389,0,7062,7057,1,0,0,0,7062,7058,1,0,0,0,7062,7059,1,
0,0,0,7062,7060,1,0,0,0,7062,7061,1,0,0,0,7063,771,1,0,0,0,7064,7067,3,770,
385,0,7065,7067,1,0,0,0,7066,7064,1,0,0,0,7066,7065,1,0,0,0,7067,773,1,0,
0,0,7068,7069,7,29,0,0,7069,775,1,0,0,0,7070,7074,5,233,0,0,7071,7074,5,
137,0,0,7072,7074,1,0,0,0,7073,7070,1,0,0,0,7073,7071,1,0,0,0,7073,7072,
1,0,0,0,7074,777,1,0,0,0,7075,7076,5,264,0,0,7076,7077,3,1374,687,0,7077,
7078,3,780,390,0,7078,779,1,0,0,0,7079,7080,5,6,0,0,7080,7083,3,1360,680,
0,7081,7083,1,0,0,0,7082,7079,1,0,0,0,7082,7081,1,0,0,0,7083,781,1,0,0,0,
7084,7085,5,243,0,0,7085,7086,3,1374,687,0,7086,783,1,0,0,0,7087,7088,5,
359,0,0,7088,7092,3,1374,687,0,7089,7090,5,359,0,0,7090,7092,5,9,0,0,7091,
7087,1,0,0,0,7091,7089,1,0,0,0,7092,785,1,0,0,0,7093,7094,5,129,0,0,7094,
7095,3,788,394,0,7095,7096,3,796,398,0,7096,7144,1,0,0,0,7097,7098,5,146,
0,0,7098,7099,3,788,394,0,7099,7100,3,794,397,0,7100,7144,1,0,0,0,7101,7102,
5,333,0,0,7102,7103,5,349,0,0,7103,7144,3,794,397,0,7104,7105,5,161,0,0,
7105,7106,3,788,394,0,7106,7107,3,796,398,0,7107,7144,1,0,0,0,7108,7109,
5,454,0,0,7109,7110,3,788,394,0,7110,7111,3,796,398,0,7111,7144,1,0,0,0,
7112,7113,5,312,0,0,7113,7114,3,788,394,0,7114,7115,3,796,398,0,7115,7144,
1,0,0,0,7116,7117,5,315,0,0,7117,7144,3,1374,687,0,7118,7119,5,301,0,0,7119,
7120,5,315,0,0,7120,7144,3,1374,687,0,7121,7122,5,301,0,0,7122,7144,3,1374,
687,0,7123,7124,5,312,0,0,7124,7125,3,788,394,0,7125,7126,5,94,0,0,7126,
7127,5,315,0,0,7127,7128,3,1374,687,0,7128,7144,1,0,0,0,7129,7130,5,312,
0,0,7130,7131,3,788,394,0,7131,7132,5,94,0,0,7132,7133,3,1374,687,0,7133,
7144,1,0,0,0,7134,7135,5,283,0,0,7135,7136,5,349,0,0,7136,7144,3,1360,680,
0,7137,7138,5,161,0,0,7138,7139,5,284,0,0,7139,7144,3,1360,680,0,7140,7141,
5,312,0,0,7141,7142,5,284,0,0,7142,7144,3,1360,680,0,7143,7093,1,0,0,0,7143,
7097,1,0,0,0,7143,7101,1,0,0,0,7143,7104,1,0,0,0,7143,7108,1,0,0,0,7143,
7112,1,0,0,0,7143,7116,1,0,0,0,7143,7118,1,0,0,0,7143,7121,1,0,0,0,7143,
7123,1,0,0,0,7143,7129,1,0,0,0,7143,7134,1,0,0,0,7143,7137,1,0,0,0,7143,
7140,1,0,0,0,7144,787,1,0,0,0,7145,7149,5,373,0,0,7146,7149,5,349,0,0,7147,
7149,1,0,0,0,7148,7145,1,0,0,0,7148,7146,1,0,0,0,7148,7147,1,0,0,0,7149,
789,1,0,0,0,7150,7151,5,235,0,0,7151,7152,5,242,0,0,7152,7161,3,64,32,0,
7153,7154,5,293,0,0,7154,7161,5,81,0,0,7155,7156,5,293,0,0,7156,7161,5,375,
0,0,7157,7161,5,54,0,0,7158,7159,5,77,0,0,7159,7161,5,54,0,0,7160,7150,1,
0,0,0,7160,7153,1,0,0,0,7160,7155,1,0,0,0,7160,7157,1,0,0,0,7160,7158,1,
0,0,0,7161,791,1,0,0,0,7162,7169,3,790,395,0,7163,7165,5,6,0,0,7164,7163,
1,0,0,0,7164,7165,1,0,0,0,7165,7166,1,0,0,0,7166,7168,3,790,395,0,7167,7164,
1,0,0,0,7168,7171,1,0,0,0,7169,7167,1,0,0,0,7169,7170,1,0,0,0,7170,793,1,
0,0,0,7171,7169,1,0,0,0,7172,7175,3,792,396,0,7173,7175,1,0,0,0,7174,7172,
1,0,0,0,7174,7173,1,0,0,0,7175,795,1,0,0,0,7176,7178,5,33,0,0,7177,7179,
5,262,0,0,7178,7177,1,0,0,0,7178,7179,1,0,0,0,7179,7180,1,0,0,0,7180,7183,
5,153,0,0,7181,7183,1,0,0,0,7182,7176,1,0,0,0,7182,7181,1,0,0,0,7183,797,
1,0,0,0,7184,7187,5,46,0,0,7185,7186,5,82,0,0,7186,7188,5,304,0,0,7187,7185,
1,0,0,0,7187,7188,1,0,0,0,7188,7189,1,0,0,0,7189,7203,3,174,87,0,7190,7191,
5,369,0,0,7191,7192,3,1338,669,0,7192,7193,3,214,107,0,7193,7194,3,118,59,
0,7194,7204,1,0,0,0,7195,7196,5,296,0,0,7196,7197,5,369,0,0,7197,7198,3,
1338,669,0,7198,7199,5,2,0,0,7199,7200,3,216,108,0,7200,7201,5,3,0,0,7201,
7202,3,118,59,0,7202,7204,1,0,0,0,7203,7190,1,0,0,0,7203,7195,1,0,0,0,7204,
7205,1,0,0,0,7205,7206,5,36,0,0,7206,7207,3,960,480,0,7207,7208,3,800,400,
0,7208,799,1,0,0,0,7209,7211,5,105,0,0,7210,7212,7,30,0,0,7211,7210,1,0,
0,0,7211,7212,1,0,0,0,7212,7213,1,0,0,0,7213,7214,5,42,0,0,7214,7217,5,272,
0,0,7215,7217,1,0,0,0,7216,7209,1,0,0,0,7216,7215,1,0,0,0,7217,801,1,0,0,
0,7218,7219,5,244,0,0,7219,7220,3,1346,673,0,7220,803,1,0,0,0,7221,7222,
5,46,0,0,7222,7223,5,175,0,0,7223,7224,3,1342,671,0,7224,7225,3,16,8,0,7225,
7226,3,806,403,0,7226,805,1,0,0,0,7227,7230,3,808,404,0,7228,7230,1,0,0,
0,7229,7227,1,0,0,0,7229,7228,1,0,0,0,7230,807,1,0,0,0,7231,7233,3,810,405,
0,7232,7231,1,0,0,0,7233,7234,1,0,0,0,7234,7232,1,0,0,0,7234,7235,1,0,0,
0,7235,809,1,0,0,0,7236,7237,3,812,406,0,7237,7241,3,814,407,0,7238,7242,
3,1366,683,0,7239,7242,3,66,33,0,7240,7242,5,53,0,0,7241,7238,1,0,0,0,7241,
7239,1,0,0,0,7241,7240,1,0,0,0,7242,811,1,0,0,0,7243,7252,3,1384,692,0,7244,
7245,5,164,0,0,7245,7252,5,74,0,0,7246,7252,5,194,0,0,7247,7252,5,246,0,
0,7248,7252,5,275,0,0,7249,7252,5,344,0,0,7250,7252,5,346,0,0,7251,7243,
1,0,0,0,7251,7244,1,0,0,0,7251,7246,1,0,0,0,7251,7247,1,0,0,0,7251,7248,
1,0,0,0,7251,7249,1,0,0,0,7251,7250,1,0,0,0,7252,813,1,0,0,0,7253,7256,5,
10,0,0,7254,7256,1,0,0,0,7255,7253,1,0,0,0,7255,7254,1,0,0,0,7256,815,1,
0,0,0,7257,7258,5,138,0,0,7258,7259,5,175,0,0,7259,7266,3,1342,671,0,7260,
7261,5,105,0,0,7261,7267,3,806,403,0,7262,7267,3,806,403,0,7263,7264,5,326,
0,0,7264,7265,5,344,0,0,7265,7267,3,1342,671,0,7266,7260,1,0,0,0,7266,7262,
1,0,0,0,7266,7263,1,0,0,0,7267,817,1,0,0,0,7268,7269,5,138,0,0,7269,7270,
5,175,0,0,7270,7271,3,1342,671,0,7271,7272,3,80,40,0,7272,819,1,0,0,0,7273,
7274,5,191,0,0,7274,7277,5,175,0,0,7275,7276,5,220,0,0,7276,7278,5,389,0,
0,7277,7275,1,0,0,0,7277,7278,1,0,0,0,7278,7279,1,0,0,0,7279,7285,3,1342,
671,0,7280,7281,3,16,8,0,7281,7282,5,2,0,0,7282,7283,3,822,411,0,7283,7284,
5,3,0,0,7284,7286,1,0,0,0,7285,7280,1,0,0,0,7285,7286,1,0,0,0,7286,821,1,
0,0,0,7287,7292,3,824,412,0,7288,7289,5,6,0,0,7289,7291,3,824,412,0,7290,
7288,1,0,0,0,7291,7294,1,0,0,0,7292,7290,1,0,0,0,7292,7293,1,0,0,0,7293,
823,1,0,0,0,7294,7292,1,0,0,0,7295,7296,5,209,0,0,7296,825,1,0,0,0,7297,
7298,5,138,0,0,7298,7299,5,108,0,0,7299,7300,3,524,262,0,7300,7301,5,298,
0,0,7301,7302,5,368,0,0,7302,827,1,0,0,0,7303,7304,5,138,0,0,7304,7305,5,
342,0,0,7305,7306,7,31,0,0,7306,7307,3,54,27,0,7307,829,1,0,0,0,7308,7309,
5,46,0,0,7309,7310,5,189,0,0,7310,7311,3,524,262,0,7311,7312,3,834,417,0,
7312,7313,3,1120,560,0,7313,7314,3,192,96,0,7314,831,1,0,0,0,7315,7316,5,
138,0,0,7316,7317,5,189,0,0,7317,7339,3,524,262,0,7318,7340,3,106,53,0,7319,
7320,5,191,0,0,7320,7321,5,77,0,0,7321,7340,5,78,0,0,7322,7323,5,326,0,0,
7323,7324,5,77,0,0,7324,7340,5,78,0,0,7325,7326,5,133,0,0,7326,7340,3,208,
104,0,7327,7328,5,191,0,0,7328,7331,5,45,0,0,7329,7330,5,220,0,0,7330,7332,
5,389,0,0,7331,7329,1,0,0,0,7331,7332,1,0,0,0,7332,7333,1,0,0,0,7333,7334,
3,1342,671,0,7334,7335,3,108,54,0,7335,7340,1,0,0,0,7336,7337,5,365,0,0,
7337,7338,5,45,0,0,7338,7340,3,1342,671,0,7339,7318,1,0,0,0,7339,7319,1,
0,0,0,7339,7322,1,0,0,0,7339,7325,1,0,0,0,7339,7327,1,0,0,0,7339,7336,1,
0,0,0,7340,833,1,0,0,0,7341,7344,5,36,0,0,7342,7344,1,0,0,0,7343,7341,1,
0,0,0,7343,7342,1,0,0,0,7344,835,1,0,0,0,7345,7346,5,138,0,0,7346,7347,5,
348,0,0,7347,7348,5,318,0,0,7348,7349,5,185,0,0,7349,7350,3,524,262,0,7350,
7351,3,460,230,0,7351,837,1,0,0,0,7352,7353,5,138,0,0,7353,7354,5,348,0,
0,7354,7355,5,318,0,0,7355,7356,5,163,0,0,7356,7357,3,524,262,0,7357,7358,
5,133,0,0,7358,7359,5,248,0,0,7359,7360,5,62,0,0,7360,7361,3,1340,670,0,
7361,7362,3,840,420,0,7362,7363,3,522,261,0,7363,7425,1,0,0,0,7364,7365,
5,138,0,0,7365,7366,5,348,0,0,7366,7367,5,318,0,0,7367,7368,5,163,0,0,7368,
7369,3,524,262,0,7369,7370,5,138,0,0,7370,7371,5,248,0,0,7371,7372,5,62,
0,0,7372,7373,3,1340,670,0,7373,7374,3,840,420,0,7374,7375,3,522,261,0,7375,
7425,1,0,0,0,7376,7377,5,138,0,0,7377,7378,5,348,0,0,7378,7379,5,318,0,0,
7379,7380,5,163,0,0,7380,7381,3,524,262,0,7381,7382,5,138,0,0,7382,7383,
5,248,0,0,7383,7384,5,304,0,0,7384,7385,3,524,262,0,7385,7386,3,840,420,
0,7386,7387,3,524,262,0,7387,7425,1,0,0,0,7388,7389,5,138,0,0,7389,7390,
5,348,0,0,7390,7391,5,318,0,0,7391,7392,5,163,0,0,7392,7393,3,524,262,0,
7393,7394,5,138,0,0,7394,7395,5,248,0,0,7395,7396,5,62,0,0,7396,7397,3,1340,
670,0,7397,7398,5,304,0,0,7398,7399,3,524,262,0,7399,7400,3,840,420,0,7400,
7401,3,524,262,0,7401,7425,1,0,0,0,7402,7403,5,138,0,0,7403,7404,5,348,0,
0,7404,7405,5,318,0,0,7405,7406,5,163,0,0,7406,7407,3,524,262,0,7407,7408,
5,191,0,0,7408,7409,5,248,0,0,7409,7410,5,62,0,0,7410,7411,3,1340,670,0,
7411,7425,1,0,0,0,7412,7413,5,138,0,0,7413,7414,5,348,0,0,7414,7415,5,318,
0,0,7415,7416,5,163,0,0,7416,7417,3,524,262,0,7417,7418,5,191,0,0,7418,7419,
5,248,0,0,7419,7420,5,220,0,0,7420,7421,5,389,0,0,7421,7422,5,62,0,0,7422,
7423,3,1340,670,0,7423,7425,1,0,0,0,7424,7352,1,0,0,0,7424,7364,1,0,0,0,
7424,7376,1,0,0,0,7424,7388,1,0,0,0,7424,7402,1,0,0,0,7424,7412,1,0,0,0,
7425,839,1,0,0,0,7426,7427,5,105,0,0,7427,841,1,0,0,0,7428,7429,5,46,0,0,
7429,7430,3,488,244,0,7430,7431,5,168,0,0,7431,7432,3,524,262,0,7432,7433,
5,62,0,0,7433,7434,3,1360,680,0,7434,7435,5,94,0,0,7435,7436,3,1360,680,
0,7436,7437,5,64,0,0,7437,7438,3,524,262,0,7438,843,1,0,0,0,7439,7440,5,
158,0,0,7440,7441,3,864,432,0,7441,7442,3,1338,669,0,7442,7443,3,846,423,
0,7443,7453,1,0,0,0,7444,7445,5,158,0,0,7445,7453,3,864,432,0,7446,7447,
5,158,0,0,7447,7448,3,864,432,0,7448,7449,3,1342,671,0,7449,7450,5,80,0,
0,7450,7451,3,1338,669,0,7451,7453,1,0,0,0,7452,7439,1,0,0,0,7452,7444,1,
0,0,0,7452,7446,1,0,0,0,7453,845,1,0,0,0,7454,7455,5,100,0,0,7455,7458,3,
1342,671,0,7456,7458,1,0,0,0,7457,7454,1,0,0,0,7457,7456,1,0,0,0,7458,847,
1,0,0,0,7459,7460,5,363,0,0,7460,7461,3,866,433,0,7461,7462,3,868,434,0,
7462,7463,3,864,432,0,7463,7464,3,862,431,0,7464,7465,3,876,438,0,7465,7473,
1,0,0,0,7466,7467,5,363,0,0,7467,7468,5,2,0,0,7468,7469,3,852,426,0,7469,
7470,5,3,0,0,7470,7471,3,876,438,0,7471,7473,1,0,0,0,7472,7459,1,0,0,0,7472,
7466,1,0,0,0,7473,849,1,0,0,0,7474,7475,3,854,427,0,7475,7476,3,864,432,
0,7476,7477,3,876,438,0,7477,7485,1,0,0,0,7478,7479,3,854,427,0,7479,7480,
5,2,0,0,7480,7481,3,852,426,0,7481,7482,5,3,0,0,7482,7483,3,876,438,0,7483,
7485,1,0,0,0,7484,7474,1,0,0,0,7484,7478,1,0,0,0,7485,851,1,0,0,0,7486,7491,
3,856,428,0,7487,7488,5,6,0,0,7488,7490,3,856,428,0,7489,7487,1,0,0,0,7490,
7493,1,0,0,0,7491,7489,1,0,0,0,7491,7492,1,0,0,0,7492,853,1,0,0,0,7493,7491,
1,0,0,0,7494,7495,7,32,0,0,7495,855,1,0,0,0,7496,7497,3,858,429,0,7497,7498,
3,860,430,0,7498,857,1,0,0,0,7499,7502,3,1380,690,0,7500,7502,3,854,427,
0,7501,7499,1,0,0,0,7501,7500,1,0,0,0,7502,859,1,0,0,0,7503,7507,3,66,33,
0,7504,7507,3,292,146,0,7505,7507,1,0,0,0,7506,7503,1,0,0,0,7506,7504,1,
0,0,0,7506,7505,1,0,0,0,7507,861,1,0,0,0,7508,7511,3,854,427,0,7509,7511,
1,0,0,0,7510,7508,1,0,0,0,7510,7509,1,0,0,0,7511,863,1,0,0,0,7512,7515,5,
128,0,0,7513,7515,1,0,0,0,7514,7512,1,0,0,0,7514,7513,1,0,0,0,7515,865,1,
0,0,0,7516,7519,5,113,0,0,7517,7519,1,0,0,0,7518,7516,1,0,0,0,7518,7517,
1,0,0,0,7519,867,1,0,0,0,7520,7523,5,112,0,0,7521,7523,1,0,0,0,7522,7520,
1,0,0,0,7522,7521,1,0,0,0,7523,869,1,0,0,0,7524,7525,5,2,0,0,7525,7526,3,
1340,670,0,7526,7527,5,3,0,0,7527,7530,1,0,0,0,7528,7530,1,0,0,0,7529,7524,
1,0,0,0,7529,7528,1,0,0,0,7530,871,1,0,0,0,7531,7532,3,1338,669,0,7532,7533,
3,870,435,0,7533,873,1,0,0,0,7534,7539,3,872,436,0,7535,7536,5,6,0,0,7536,
7538,3,872,436,0,7537,7535,1,0,0,0,7538,7541,1,0,0,0,7539,7537,1,0,0,0,7539,
7540,1,0,0,0,7540,875,1,0,0,0,7541,7539,1,0,0,0,7542,7545,3,874,437,0,7543,
7545,1,0,0,0,7544,7542,1,0,0,0,7544,7543,1,0,0,0,7545,877,1,0,0,0,7546,7547,
5,203,0,0,7547,7563,3,880,440,0,7548,7549,5,203,0,0,7549,7550,3,854,427,
0,7550,7551,3,864,432,0,7551,7552,3,880,440,0,7552,7563,1,0,0,0,7553,7554,
5,203,0,0,7554,7555,5,128,0,0,7555,7563,3,880,440,0,7556,7557,5,203,0,0,
7557,7558,5,2,0,0,7558,7559,3,882,441,0,7559,7560,5,3,0,0,7560,7561,3,880,
440,0,7561,7563,1,0,0,0,7562,7546,1,0,0,0,7562,7548,1,0,0,0,7562,7553,1,
0,0,0,7562,7556,1,0,0,0,7563,879,1,0,0,0,7564,7574,3,960,480,0,7565,7574,
3,902,451,0,7566,7574,3,942,471,0,7567,7574,3,928,464,0,7568,7574,3,952,
476,0,7569,7574,3,264,132,0,7570,7574,3,270,135,0,7571,7574,3,276,138,0,
7572,7574,3,896,448,0,7573,7564,1,0,0,0,7573,7565,1,0,0,0,7573,7566,1,0,
0,0,7573,7567,1,0,0,0,7573,7568,1,0,0,0,7573,7569,1,0,0,0,7573,7570,1,0,
0,0,7573,7571,1,0,0,0,7573,7572,1,0,0,0,7574,881,1,0,0,0,7575,7580,3,884,
442,0,7576,7577,5,6,0,0,7577,7579,3,884,442,0,7578,7576,1,0,0,0,7579,7582,
1,0,0,0,7580,7578,1,0,0,0,7580,7581,1,0,0,0,7581,883,1,0,0,0,7582,7580,1,
0,0,0,7583,7584,3,886,443,0,7584,7585,3,888,444,0,7585,885,1,0,0,0,7586,
7589,3,1380,690,0,7587,7589,3,854,427,0,7588,7586,1,0,0,0,7588,7587,1,0,
0,0,7589,887,1,0,0,0,7590,7594,3,66,33,0,7591,7594,3,292,146,0,7592,7594,
1,0,0,0,7593,7590,1,0,0,0,7593,7591,1,0,0,0,7593,7592,1,0,0,0,7594,889,1,
0,0,0,7595,7596,5,283,0,0,7596,7597,3,1342,671,0,7597,7598,3,892,446,0,7598,
7599,5,36,0,0,7599,7600,3,894,447,0,7600,891,1,0,0,0,7601,7602,5,2,0,0,7602,
7603,3,1288,644,0,7603,7604,5,3,0,0,7604,7607,1,0,0,0,7605,7607,1,0,0,0,
7606,7601,1,0,0,0,7606,7605,1,0,0,0,7607,893,1,0,0,0,7608,7613,3,960,480,
0,7609,7613,3,902,451,0,7610,7613,3,942,471,0,7611,7613,3,928,464,0,7612,
7608,1,0,0,0,7612,7609,1,0,0,0,7612,7610,1,0,0,0,7612,7611,1,0,0,0,7613,
895,1,0,0,0,7614,7615,5,202,0,0,7615,7616,3,1342,671,0,7616,7617,3,898,449,
0,7617,7642,1,0,0,0,7618,7619,5,46,0,0,7619,7620,3,174,87,0,7620,7621,5,
92,0,0,7621,7622,3,266,133,0,7622,7623,5,36,0,0,7623,7624,5,202,0,0,7624,
7625,3,1342,671,0,7625,7626,3,898,449,0,7626,7627,3,268,134,0,7627,7642,
1,0,0,0,7628,7629,5,46,0,0,7629,7630,3,174,87,0,7630,7631,5,92,0,0,7631,
7632,5,220,0,0,7632,7633,5,77,0,0,7633,7634,5,389,0,0,7634,7635,3,266,133,
0,7635,7636,5,36,0,0,7636,7637,5,202,0,0,7637,7638,3,1342,671,0,7638,7639,
3,898,449,0,7639,7640,3,268,134,0,7640,7642,1,0,0,0,7641,7614,1,0,0,0,7641,
7618,1,0,0,0,7641,7628,1,0,0,0,7642,897,1,0,0,0,7643,7644,5,2,0,0,7644,7645,
3,1282,641,0,7645,7646,5,3,0,0,7646,7649,1,0,0,0,7647,7649,1,0,0,0,7648,
7643,1,0,0,0,7648,7647,1,0,0,0,7649,899,1,0,0,0,7650,7651,5,177,0,0,7651,
7661,3,1342,671,0,7652,7653,5,177,0,0,7653,7654,5,283,0,0,7654,7661,3,1342,
671,0,7655,7656,5,177,0,0,7656,7661,5,30,0,0,7657,7658,5,177,0,0,7658,7659,
5,283,0,0,7659,7661,5,30,0,0,7660,7650,1,0,0,0,7660,7652,1,0,0,0,7660,7655,
1,0,0,0,7660,7657,1,0,0,0,7661,901,1,0,0,0,7662,7663,3,982,491,0,7663,7664,
5,232,0,0,7664,7665,5,71,0,0,7665,7666,3,904,452,0,7666,7667,3,906,453,0,
7667,7668,3,914,457,0,7668,7669,3,918,459,0,7669,903,1,0,0,0,7670,7673,3,
1338,669,0,7671,7672,5,36,0,0,7672,7674,3,1374,687,0,7673,7671,1,0,0,0,7673,
7674,1,0,0,0,7674,905,1,0,0,0,7675,7695,3,960,480,0,7676,7677,5,463,0,0,
7677,7678,3,908,454,0,7678,7679,5,450,0,0,7679,7680,3,960,480,0,7680,7695,
1,0,0,0,7681,7682,5,2,0,0,7682,7683,3,910,455,0,7683,7688,5,3,0,0,7684,7685,
5,463,0,0,7685,7686,3,908,454,0,7686,7687,5,450,0,0,7687,7689,1,0,0,0,7688,
7684,1,0,0,0,7688,7689,1,0,0,0,7689,7690,1,0,0,0,7690,7691,3,960,480,0,7691,
7695,1,0,0,0,7692,7693,5,53,0,0,7693,7695,5,415,0,0,7694,7675,1,0,0,0,7694,
7676,1,0,0,0,7694,7681,1,0,0,0,7694,7692,1,0,0,0,7695,907,1,0,0,0,7696,7697,
7,33,0,0,7697,909,1,0,0,0,7698,7703,3,912,456,0,7699,7700,5,6,0,0,7700,7702,
3,912,456,0,7701,7699,1,0,0,0,7702,7705,1,0,0,0,7703,7701,1,0,0,0,7703,7704,
1,0,0,0,7704,911,1,0,0,0,7705,7703,1,0,0,0,7706,7707,3,1374,687,0,7707,7708,
3,1328,664,0,7708,913,1,0,0,0,7709,7710,5,80,0,0,7710,7711,5,464,0,0,7711,
7712,3,916,458,0,7712,7719,5,57,0,0,7713,7714,5,362,0,0,7714,7715,5,326,
0,0,7715,7716,3,944,472,0,7716,7717,3,1096,548,0,7717,7720,1,0,0,0,7718,
7720,5,263,0,0,7719,7713,1,0,0,0,7719,7718,1,0,0,0,7720,7723,1,0,0,0,7721,
7723,1,0,0,0,7722,7709,1,0,0,0,7722,7721,1,0,0,0,7723,915,1,0,0,0,7724,7725,
5,2,0,0,7725,7726,3,598,299,0,7726,7727,5,3,0,0,7727,7728,3,1096,548,0,7728,
7734,1,0,0,0,7729,7730,5,80,0,0,7730,7731,5,45,0,0,7731,7734,3,1342,671,
0,7732,7734,1,0,0,0,7733,7724,1,0,0,0,7733,7729,1,0,0,0,7733,7732,1,0,0,
0,7734,917,1,0,0,0,7735,7736,5,87,0,0,7736,7739,3,1332,666,0,7737,7739,1,
0,0,0,7738,7735,1,0,0,0,7738,7737,1,0,0,0,7739,919,1,0,0,0,7740,7742,5,253,
0,0,7741,7743,5,71,0,0,7742,7741,1,0,0,0,7742,7743,1,0,0,0,7743,7744,1,0,
0,0,7744,7746,3,1338,669,0,7745,7747,3,1064,532,0,7746,7745,1,0,0,0,7746,
7747,1,0,0,0,7747,7748,1,0,0,0,7748,7751,5,100,0,0,7749,7752,3,962,481,0,
7750,7752,3,1338,669,0,7751,7749,1,0,0,0,7751,7750,1,0,0,0,7752,7754,1,0,
0,0,7753,7755,3,1064,532,0,7754,7753,1,0,0,0,7754,7755,1,0,0,0,7755,7756,
1,0,0,0,7756,7757,5,80,0,0,7757,7766,3,1164,582,0,7758,7760,3,922,461,0,
7759,7761,3,924,462,0,7760,7759,1,0,0,0,7760,7761,1,0,0,0,7761,7767,1,0,
0,0,7762,7764,3,924,462,0,7763,7765,3,922,461,0,7764,7763,1,0,0,0,7764,7765,
1,0,0,0,7765,7767,1,0,0,0,7766,7758,1,0,0,0,7766,7762,1,0,0,0,7767,7769,
1,0,0,0,7768,7770,3,926,463,0,7769,7768,1,0,0,0,7769,7770,1,0,0,0,7770,921,
1,0,0,0,7771,7772,5,102,0,0,7772,7773,5,77,0,0,7773,7776,5,250,0,0,7774,
7775,5,33,0,0,7775,7777,3,1164,582,0,7776,7774,1,0,0,0,7776,7777,1,0,0,0,
7777,7779,1,0,0,0,7778,7780,5,93,0,0,7779,7778,1,0,0,0,7779,7780,1,0,0,0,
7780,7781,1,0,0,0,7781,7786,5,232,0,0,7782,7783,5,2,0,0,7783,7784,3,910,
455,0,7784,7785,5,3,0,0,7785,7787,1,0,0,0,7786,7782,1,0,0,0,7786,7787,1,
0,0,0,7787,7788,1,0,0,0,7788,7789,3,1054,527,0,7789,923,1,0,0,0,7790,7791,
5,102,0,0,7791,7794,5,250,0,0,7792,7793,5,33,0,0,7793,7795,3,1164,582,0,
7794,7792,1,0,0,0,7794,7795,1,0,0,0,7795,7797,1,0,0,0,7796,7798,5,93,0,0,
7797,7796,1,0,0,0,7797,7798,1,0,0,0,7798,7799,1,0,0,0,7799,7800,5,362,0,
0,7800,7801,5,326,0,0,7801,7802,3,944,472,0,7802,925,1,0,0,0,7803,7804,5,
102,0,0,7804,7806,5,250,0,0,7805,7807,5,93,0,0,7806,7805,1,0,0,0,7806,7807,
1,0,0,0,7807,7808,1,0,0,0,7808,7809,5,182,0,0,7809,927,1,0,0,0,7810,7811,
3,982,491,0,7811,7812,5,182,0,0,7812,7813,5,64,0,0,7813,7814,3,1080,540,
0,7814,7815,3,930,465,0,7815,7816,3,1098,549,0,7816,7817,3,918,459,0,7817,
929,1,0,0,0,7818,7819,5,100,0,0,7819,7822,3,1058,529,0,7820,7822,1,0,0,0,
7821,7818,1,0,0,0,7821,7820,1,0,0,0,7822,931,1,0,0,0,7823,7824,5,247,0,0,
7824,7825,3,990,495,0,7825,7826,3,1078,539,0,7826,7827,3,934,467,0,7827,
7828,3,938,469,0,7828,933,1,0,0,0,7829,7830,5,68,0,0,7830,7831,3,936,468,
0,7831,7832,5,256,0,0,7832,7835,1,0,0,0,7833,7835,1,0,0,0,7834,7829,1,0,
0,0,7834,7833,1,0,0,0,7835,935,1,0,0,0,7836,7837,5,131,0,0,7837,7849,7,34,
0,0,7838,7839,5,407,0,0,7839,7849,7,34,0,0,7840,7845,5,327,0,0,7841,7842,
5,362,0,0,7842,7846,5,201,0,0,7843,7844,5,407,0,0,7844,7846,5,201,0,0,7845,
7841,1,0,0,0,7845,7843,1,0,0,0,7845,7846,1,0,0,0,7846,7849,1,0,0,0,7847,
7849,5,201,0,0,7848,7836,1,0,0,0,7848,7838,1,0,0,0,7848,7840,1,0,0,0,7848,
7847,1,0,0,0,7849,937,1,0,0,0,7850,7853,5,265,0,0,7851,7853,1,0,0,0,7852,
7850,1,0,0,0,7852,7851,1,0,0,0,7853,939,1,0,0,0,7854,7859,5,265,0,0,7855,
7856,5,465,0,0,7856,7859,5,466,0,0,7857,7859,1,0,0,0,7858,7854,1,0,0,0,7858,
7855,1,0,0,0,7858,7857,1,0,0,0,7859,941,1,0,0,0,7860,7861,3,982,491,0,7861,
7862,5,362,0,0,7862,7863,3,1080,540,0,7863,7864,5,326,0,0,7864,7865,3,944,
472,0,7865,7866,3,1056,528,0,7866,7867,3,1098,549,0,7867,7868,3,918,459,
0,7868,943,1,0,0,0,7869,7874,3,946,473,0,7870,7871,5,6,0,0,7871,7873,3,946,
473,0,7872,7870,1,0,0,0,7873,7876,1,0,0,0,7874,7872,1,0,0,0,7874,7875,1,
0,0,0,7875,945,1,0,0,0,7876,7874,1,0,0,0,7877,7878,3,948,474,0,7878,7879,
5,10,0,0,7879,7880,3,1164,582,0,7880,7888,1,0,0,0,7881,7882,5,2,0,0,7882,
7883,3,950,475,0,7883,7884,5,3,0,0,7884,7885,5,10,0,0,7885,7886,3,1164,582,
0,7886,7888,1,0,0,0,7887,7877,1,0,0,0,7887,7881,1,0,0,0,7888,947,1,0,0,0,
7889,7890,3,1374,687,0,7890,7891,3,1328,664,0,7891,949,1,0,0,0,7892,7897,
3,948,474,0,7893,7894,5,6,0,0,7894,7896,3,948,474,0,7895,7893,1,0,0,0,7896,
7899,1,0,0,0,7897,7895,1,0,0,0,7897,7898,1,0,0,0,7898,951,1,0,0,0,7899,7897,
1,0,0,0,7900,7901,5,178,0,0,7901,7902,3,954,477,0,7902,7903,3,956,478,0,
7903,7904,5,172,0,0,7904,7905,3,958,479,0,7905,7906,5,62,0,0,7906,7907,3,
960,480,0,7907,953,1,0,0,0,7908,7909,3,1342,671,0,7909,955,1,0,0,0,7910,
7911,5,262,0,0,7911,7916,5,317,0,0,7912,7916,5,317,0,0,7913,7916,5,107,0,
0,7914,7916,5,231,0,0,7915,7910,1,0,0,0,7915,7912,1,0,0,0,7915,7913,1,0,
0,0,7915,7914,1,0,0,0,7916,7919,1,0,0,0,7917,7915,1,0,0,0,7917,7918,1,0,
0,0,7918,957,1,0,0,0,7919,7917,1,0,0,0,7920,7926,1,0,0,0,7921,7922,5,105,
0,0,7922,7926,5,217,0,0,7923,7924,5,372,0,0,7924,7926,5,217,0,0,7925,7920,
1,0,0,0,7925,7921,1,0,0,0,7925,7923,1,0,0,0,7926,959,1,0,0,0,7927,7930,3,
964,482,0,7928,7930,3,962,481,0,7929,7927,1,0,0,0,7929,7928,1,0,0,0,7930,
961,1,0,0,0,7931,7932,5,2,0,0,7932,7933,3,964,482,0,7933,7934,5,3,0,0,7934,
7940,1,0,0,0,7935,7936,5,2,0,0,7936,7937,3,962,481,0,7937,7938,5,3,0,0,7938,
7940,1,0,0,0,7939,7931,1,0,0,0,7939,7935,1,0,0,0,7940,963,1,0,0,0,7941,7942,
3,966,483,0,7942,7949,3,998,499,0,7943,7944,3,1042,521,0,7944,7945,3,1008,
504,0,7945,7950,1,0,0,0,7946,7947,3,1006,503,0,7947,7948,3,1044,522,0,7948,
7950,1,0,0,0,7949,7943,1,0,0,0,7949,7946,1,0,0,0,7949,7950,1,0,0,0,7950,
7963,1,0,0,0,7951,7952,3,974,487,0,7952,7953,3,966,483,0,7953,7960,3,998,
499,0,7954,7955,3,1042,521,0,7955,7956,3,1008,504,0,7956,7961,1,0,0,0,7957,
7958,3,1006,503,0,7958,7959,3,1044,522,0,7959,7961,1,0,0,0,7960,7954,1,0,
0,0,7960,7957,1,0,0,0,7960,7961,1,0,0,0,7961,7963,1,0,0,0,7962,7941,1,0,
0,0,7962,7951,1,0,0,0,7963,965,1,0,0,0,7964,7967,3,968,484,0,7965,7967,3,
962,481,0,7966,7964,1,0,0,0,7966,7965,1,0,0,0,7967,967,1,0,0,0,7968,7976,
5,88,0,0,7969,7970,3,996,498,0,7970,7971,3,984,492,0,7971,7972,3,1330,665,
0,7972,7977,1,0,0,0,7973,7974,3,994,497,0,7974,7975,3,1332,666,0,7975,7977,
1,0,0,0,7976,7969,1,0,0,0,7976,7973,1,0,0,0,7977,7978,1,0,0,0,7978,7979,
3,984,492,0,7979,7980,3,1056,528,0,7980,7981,3,1096,548,0,7981,7982,3,1026,
513,0,7982,7983,3,1040,520,0,7983,7984,3,1242,621,0,7984,7995,1,0,0,0,7985,
7995,3,1054,527,0,7986,7987,5,92,0,0,7987,7995,3,1076,538,0,7988,7989,3,
962,481,0,7989,7992,3,972,486,0,7990,7993,3,968,484,0,7991,7993,3,962,481,
0,7992,7990,1,0,0,0,7992,7991,1,0,0,0,7993,7995,1,0,0,0,7994,7968,1,0,0,
0,7994,7985,1,0,0,0,7994,7986,1,0,0,0,7994,7988,1,0,0,0,7995,8003,1,0,0,
0,7996,7999,3,972,486,0,7997,8000,3,968,484,0,7998,8000,3,962,481,0,7999,
7997,1,0,0,0,7999,7998,1,0,0,0,8000,8002,1,0,0,0,8001,7996,1,0,0,0,8002,
8005,1,0,0,0,8003,8001,1,0,0,0,8003,8004,1,0,0,0,8004,969,1,0,0,0,8005,8003,
1,0,0,0,8006,8010,5,97,0,0,8007,8010,5,70,0,0,8008,8010,5,59,0,0,8009,8006,
1,0,0,0,8009,8007,1,0,0,0,8009,8008,1,0,0,0,8010,971,1,0,0,0,8011,8012,3,
970,485,0,8012,8013,3,992,496,0,8013,973,1,0,0,0,8014,8016,5,105,0,0,8015,
8017,5,296,0,0,8016,8015,1,0,0,0,8016,8017,1,0,0,0,8017,8018,1,0,0,0,8018,
8019,3,976,488,0,8019,975,1,0,0,0,8020,8025,3,978,489,0,8021,8022,5,6,0,
0,8022,8024,3,978,489,0,8023,8021,1,0,0,0,8024,8027,1,0,0,0,8025,8023,1,
0,0,0,8025,8026,1,0,0,0,8026,977,1,0,0,0,8027,8025,1,0,0,0,8028,8029,3,1342,
671,0,8029,8030,3,870,435,0,8030,8031,5,36,0,0,8031,8032,3,980,490,0,8032,
8033,5,2,0,0,8033,8034,3,894,447,0,8034,8035,5,3,0,0,8035,979,1,0,0,0,8036,
8041,5,251,0,0,8037,8038,5,77,0,0,8038,8041,5,251,0,0,8039,8041,1,0,0,0,
8040,8036,1,0,0,0,8040,8037,1,0,0,0,8040,8039,1,0,0,0,8041,981,1,0,0,0,8042,
8045,3,974,487,0,8043,8045,1,0,0,0,8044,8042,1,0,0,0,8044,8043,1,0,0,0,8045,
983,1,0,0,0,8046,8051,5,71,0,0,8047,8048,3,986,493,0,8048,8049,3,988,494,
0,8049,8052,1,0,0,0,8050,8052,3,1568,784,0,8051,8047,1,0,0,0,8051,8050,1,
0,0,0,8052,8055,1,0,0,0,8053,8055,1,0,0,0,8054,8046,1,0,0,0,8054,8053,1,
0,0,0,8055,985,1,0,0,0,8056,8059,1,0,0,0,8057,8059,5,339,0,0,8058,8056,1,
0,0,0,8058,8057,1,0,0,0,8059,987,1,0,0,0,8060,8062,7,35,0,0,8061,8060,1,
0,0,0,8061,8062,1,0,0,0,8062,8063,1,0,0,0,8063,8064,7,11,0,0,8064,8065,3,
990,495,0,8065,8066,3,1338,669,0,8066,8075,1,0,0,0,8067,8068,5,360,0,0,8068,
8069,3,990,495,0,8069,8070,3,1338,669,0,8070,8075,1,0,0,0,8071,8072,5,92,
0,0,8072,8075,3,1338,669,0,8073,8075,3,1338,669,0,8074,8061,1,0,0,0,8074,
8067,1,0,0,0,8074,8071,1,0,0,0,8074,8073,1,0,0,0,8075,989,1,0,0,0,8076,8079,
5,92,0,0,8077,8079,1,0,0,0,8078,8076,1,0,0,0,8078,8077,1,0,0,0,8079,991,
1,0,0,0,8080,8084,5,30,0,0,8081,8084,5,56,0,0,8082,8084,1,0,0,0,8083,8080,
1,0,0,0,8083,8081,1,0,0,0,8083,8082,1,0,0,0,8084,993,1,0,0,0,8085,8091,5,
56,0,0,8086,8087,5,80,0,0,8087,8088,5,2,0,0,8088,8089,3,1282,641,0,8089,
8090,5,3,0,0,8090,8092,1,0,0,0,8091,8086,1,0,0,0,8091,8092,1,0,0,0,8092,
995,1,0,0,0,8093,8096,5,30,0,0,8094,8096,1,0,0,0,8095,8093,1,0,0,0,8095,
8094,1,0,0,0,8096,997,1,0,0,0,8097,8100,3,1000,500,0,8098,8100,1,0,0,0,8099,
8097,1,0,0,0,8099,8098,1,0,0,0,8100,999,1,0,0,0,8101,8102,5,83,0,0,8102,
8103,5,147,0,0,8103,8104,3,1002,501,0,8104,1001,1,0,0,0,8105,8110,3,1004,
502,0,8106,8107,5,6,0,0,8107,8109,3,1004,502,0,8108,8106,1,0,0,0,8109,8112,
1,0,0,0,8110,8108,1,0,0,0,8110,8111,1,0,0,0,8111,1003,1,0,0,0,8112,8110,
1,0,0,0,8113,8117,3,1164,582,0,8114,8115,5,100,0,0,8115,8118,3,1278,639,
0,8116,8118,3,612,306,0,8117,8114,1,0,0,0,8117,8116,1,0,0,0,8118,8119,1,
0,0,0,8119,8120,3,614,307,0,8120,1005,1,0,0,0,8121,8123,3,1010,505,0,8122,
8124,3,1012,506,0,8123,8122,1,0,0,0,8123,8124,1,0,0,0,8124,8130,1,0,0,0,
8125,8127,3,1012,506,0,8126,8128,3,1010,505,0,8127,8126,1,0,0,0,8127,8128,
1,0,0,0,8128,8130,1,0,0,0,8129,8121,1,0,0,0,8129,8125,1,0,0,0,8130,1007,
1,0,0,0,8131,8134,3,1006,503,0,8132,8134,1,0,0,0,8133,8131,1,0,0,0,8133,
8132,1,0,0,0,8134,1009,1,0,0,0,8135,8136,5,74,0,0,8136,8139,3,1014,507,0,
8137,8138,5,6,0,0,8138,8140,3,1016,508,0,8139,8137,1,0,0,0,8139,8140,1,0,
0,0,8140,8159,1,0,0,0,8141,8142,5,61,0,0,8142,8156,3,1024,512,0,8143,8144,
3,1018,509,0,8144,8148,3,1022,511,0,8145,8149,5,81,0,0,8146,8147,5,105,0,
0,8147,8149,5,467,0,0,8148,8145,1,0,0,0,8148,8146,1,0,0,0,8149,8157,1,0,
0,0,8150,8154,3,1022,511,0,8151,8155,5,81,0,0,8152,8153,5,105,0,0,8153,8155,
5,467,0,0,8154,8151,1,0,0,0,8154,8152,1,0,0,0,8155,8157,1,0,0,0,8156,8143,
1,0,0,0,8156,8150,1,0,0,0,8157,8159,1,0,0,0,8158,8135,1,0,0,0,8158,8141,
1,0,0,0,8159,1011,1,0,0,0,8160,8165,5,79,0,0,8161,8166,3,1016,508,0,8162,
8163,3,1018,509,0,8163,8164,3,1022,511,0,8164,8166,1,0,0,0,8165,8161,1,0,
0,0,8165,8162,1,0,0,0,8166,1013,1,0,0,0,8167,8170,3,1164,582,0,8168,8170,
5,30,0,0,8169,8167,1,0,0,0,8169,8168,1,0,0,0,8170,1015,1,0,0,0,8171,8172,
3,1164,582,0,8172,1017,1,0,0,0,8173,8179,3,1208,604,0,8174,8175,5,12,0,0,
8175,8179,3,1020,510,0,8176,8177,5,13,0,0,8177,8179,3,1020,510,0,8178,8173,
1,0,0,0,8178,8174,1,0,0,0,8178,8176,1,0,0,0,8179,1019,1,0,0,0,8180,8183,
3,1358,679,0,8181,8183,3,1356,678,0,8182,8180,1,0,0,0,8182,8181,1,0,0,0,
8183,1021,1,0,0,0,8184,8185,7,36,0,0,8185,1023,1,0,0,0,8186,8187,7,37,0,
0,8187,1025,1,0,0,0,8188,8189,5,66,0,0,8189,8190,5,147,0,0,8190,8193,3,1028,
514,0,8191,8193,1,0,0,0,8192,8188,1,0,0,0,8192,8191,1,0,0,0,8193,1027,1,
0,0,0,8194,8199,3,1030,515,0,8195,8196,5,6,0,0,8196,8198,3,1030,515,0,8197,
8195,1,0,0,0,8198,8201,1,0,0,0,8199,8197,1,0,0,0,8199,8200,1,0,0,0,8200,
1029,1,0,0,0,8201,8199,1,0,0,0,8202,8208,3,1164,582,0,8203,8208,3,1032,516,
0,8204,8208,3,1036,518,0,8205,8208,3,1034,517,0,8206,8208,3,1038,519,0,8207,
8202,1,0,0,0,8207,8203,1,0,0,0,8207,8204,1,0,0,0,8207,8205,1,0,0,0,8207,
8206,1,0,0,0,8208,1031,1,0,0,0,8209,8210,5,2,0,0,8210,8211,5,3,0,0,8211,
1033,1,0,0,0,8212,8213,5,468,0,0,8213,8214,5,2,0,0,8214,8215,3,1282,641,
0,8215,8216,5,3,0,0,8216,1035,1,0,0,0,8217,8218,5,469,0,0,8218,8219,5,2,
0,0,8219,8220,3,1282,641,0,8220,8221,5,3,0,0,8221,1037,1,0,0,0,8222,8223,
5,470,0,0,8223,8224,5,471,0,0,8224,8225,5,2,0,0,8225,8226,3,1028,514,0,8226,
8227,5,3,0,0,8227,1039,1,0,0,0,8228,8229,5,67,0,0,8229,8232,3,1164,582,0,
8230,8232,1,0,0,0,8231,8228,1,0,0,0,8231,8230,1,0,0,0,8232,1041,1,0,0,0,
8233,8238,3,1046,523,0,8234,8235,5,62,0,0,8235,8236,5,293,0,0,8236,8238,
5,81,0,0,8237,8233,1,0,0,0,8237,8234,1,0,0,0,8238,1043,1,0,0,0,8239,8242,
3,1042,521,0,8240,8242,1,0,0,0,8241,8239,1,0,0,0,8241,8240,1,0,0,0,8242,
1045,1,0,0,0,8243,8245,3,1048,524,0,8244,8243,1,0,0,0,8245,8246,1,0,0,0,
8246,8244,1,0,0,0,8246,8247,1,0,0,0,8247,1047,1,0,0,0,8248,8249,3,1050,525,
0,8249,8250,3,1052,526,0,8250,8251,3,940,470,0,8251,1049,1,0,0,0,8252,8262,
5,62,0,0,8253,8254,5,262,0,0,8254,8256,5,236,0,0,8255,8253,1,0,0,0,8255,
8256,1,0,0,0,8256,8257,1,0,0,0,8257,8263,5,362,0,0,8258,8260,5,236,0,0,8259,
8258,1,0,0,0,8259,8260,1,0,0,0,8260,8261,1,0,0,0,8261,8263,5,327,0,0,8262,
8255,1,0,0,0,8262,8259,1,0,0,0,8263,1051,1,0,0,0,8264,8265,5,268,0,0,8265,
8268,3,1336,668,0,8266,8268,1,0,0,0,8267,8264,1,0,0,0,8267,8266,1,0,0,0,
8268,1053,1,0,0,0,8269,8270,5,415,0,0,8270,8271,5,2,0,0,8271,8272,3,1282,
641,0,8272,8280,5,3,0,0,8273,8274,5,6,0,0,8274,8275,5,2,0,0,8275,8276,3,
1282,641,0,8276,8277,5,3,0,0,8277,8279,1,0,0,0,8278,8273,1,0,0,0,8279,8282,
1,0,0,0,8280,8278,1,0,0,0,8280,8281,1,0,0,0,8281,1055,1,0,0,0,8282,8280,
1,0,0,0,8283,8284,5,64,0,0,8284,8287,3,1058,529,0,8285,8287,1,0,0,0,8286,
8283,1,0,0,0,8286,8285,1,0,0,0,8287,1057,1,0,0,0,8288,8298,3,1060,530,0,
8289,8294,3,1062,531,0,8290,8291,5,6,0,0,8291,8293,3,1062,531,0,8292,8290,
1,0,0,0,8293,8296,1,0,0,0,8294,8292,1,0,0,0,8294,8295,1,0,0,0,8295,8298,
1,0,0,0,8296,8294,1,0,0,0,8297,8288,1,0,0,0,8297,8289,1,0,0,0,8298,1059,
1,0,0,0,8299,8302,3,1062,531,0,8300,8301,5,6,0,0,8301,8303,3,1062,531,0,
8302,8300,1,0,0,0,8303,8304,1,0,0,0,8304,8302,1,0,0,0,8304,8305,1,0,0,0,
8305,1061,1,0,0,0,8306,8307,3,1076,538,0,8307,8309,3,1066,533,0,8308,8310,
3,1082,541,0,8309,8308,1,0,0,0,8309,8310,1,0,0,0,8310,8356,1,0,0,0,8311,
8312,3,1086,543,0,8312,8313,3,1070,535,0,8313,8356,1,0,0,0,8314,8315,3,1106,
553,0,8315,8316,3,1066,533,0,8316,8356,1,0,0,0,8317,8318,3,962,481,0,8318,
8319,3,1066,533,0,8319,8356,1,0,0,0,8320,8330,5,72,0,0,8321,8322,3,1106,
553,0,8322,8323,3,1066,533,0,8323,8331,1,0,0,0,8324,8325,3,1086,543,0,8325,
8326,3,1070,535,0,8326,8331,1,0,0,0,8327,8328,3,962,481,0,8328,8329,3,1066,
533,0,8329,8331,1,0,0,0,8330,8321,1,0,0,0,8330,8324,1,0,0,0,8330,8327,1,
0,0,0,8331,8356,1,0,0,0,8332,8333,5,2,0,0,8333,8350,3,1062,531,0,8334,8335,
5,110,0,0,8335,8336,5,118,0,0,8336,8351,3,1062,531,0,8337,8339,5,121,0,0,
8338,8340,3,1072,536,0,8339,8338,1,0,0,0,8339,8340,1,0,0,0,8340,8341,1,0,
0,0,8341,8342,5,118,0,0,8342,8351,3,1062,531,0,8343,8345,3,1072,536,0,8344,
8343,1,0,0,0,8344,8345,1,0,0,0,8345,8346,1,0,0,0,8346,8347,5,118,0,0,8347,
8348,3,1062,531,0,8348,8349,3,1074,537,0,8349,8351,1,0,0,0,8350,8334,1,0,
0,0,8350,8337,1,0,0,0,8350,8344,1,0,0,0,8350,8351,1,0,0,0,8351,8352,1,0,
0,0,8352,8353,5,3,0,0,8353,8354,3,1066,533,0,8354,8356,1,0,0,0,8355,8306,
1,0,0,0,8355,8311,1,0,0,0,8355,8314,1,0,0,0,8355,8317,1,0,0,0,8355,8320,
1,0,0,0,8355,8332,1,0,0,0,8356,8375,1,0,0,0,8357,8358,5,110,0,0,8358,8359,
5,118,0,0,8359,8374,3,1062,531,0,8360,8362,5,121,0,0,8361,8363,3,1072,536,
0,8362,8361,1,0,0,0,8362,8363,1,0,0,0,8363,8364,1,0,0,0,8364,8365,5,118,
0,0,8365,8374,3,1062,531,0,8366,8368,3,1072,536,0,8367,8366,1,0,0,0,8367,
8368,1,0,0,0,8368,8369,1,0,0,0,8369,8370,5,118,0,0,8370,8371,3,1062,531,
0,8371,8372,3,1074,537,0,8372,8374,1,0,0,0,8373,8357,1,0,0,0,8373,8360,1,
0,0,0,8373,8367,1,0,0,0,8374,8377,1,0,0,0,8375,8373,1,0,0,0,8375,8376,1,
0,0,0,8376,1063,1,0,0,0,8377,8375,1,0,0,0,8378,8380,5,36,0,0,8379,8378,1,
0,0,0,8379,8380,1,0,0,0,8380,8381,1,0,0,0,8381,8386,3,1374,687,0,8382,8383,
5,2,0,0,8383,8384,3,1340,670,0,8384,8385,5,3,0,0,8385,8387,1,0,0,0,8386,
8382,1,0,0,0,8386,8387,1,0,0,0,8387,1065,1,0,0,0,8388,8391,3,1068,534,0,
8389,8391,1,0,0,0,8390,8388,1,0,0,0,8390,8389,1,0,0,0,8391,1067,1,0,0,0,
8392,8394,5,36,0,0,8393,8392,1,0,0,0,8393,8394,1,0,0,0,8394,8395,1,0,0,0,
8395,8400,3,1376,688,0,8396,8397,5,2,0,0,8397,8398,3,1340,670,0,8398,8399,
5,3,0,0,8399,8401,1,0,0,0,8400,8396,1,0,0,0,8400,8401,1,0,0,0,8401,1069,
1,0,0,0,8402,8416,3,1064,532,0,8403,8405,5,36,0,0,8404,8406,3,1374,687,0,
8405,8404,1,0,0,0,8405,8406,1,0,0,0,8406,8409,1,0,0,0,8407,8409,3,1374,687,
0,8408,8403,1,0,0,0,8408,8407,1,0,0,0,8409,8410,1,0,0,0,8410,8411,5,2,0,
0,8411,8412,3,1102,551,0,8412,8413,5,3,0,0,8413,8416,1,0,0,0,8414,8416,1,
0,0,0,8415,8402,1,0,0,0,8415,8408,1,0,0,0,8415,8414,1,0,0,0,8416,1071,1,
0,0,0,8417,8419,7,38,0,0,8418,8420,5,123,0,0,8419,8418,1,0,0,0,8419,8420,
1,0,0,0,8420,1073,1,0,0,0,8421,8422,5,100,0,0,8422,8423,5,2,0,0,8423,8424,
3,1340,670,0,8424,8425,5,3,0,0,8425,8429,1,0,0,0,8426,8427,5,80,0,0,8427,
8429,3,1164,582,0,8428,8421,1,0,0,0,8428,8426,1,0,0,0,8429,1075,1,0,0,0,
8430,8432,3,1338,669,0,8431,8433,5,9,0,0,8432,8431,1,0,0,0,8432,8433,1,0,
0,0,8433,8443,1,0,0,0,8434,8440,5,81,0,0,8435,8441,3,1338,669,0,8436,8437,
5,2,0,0,8437,8438,3,1338,669,0,8438,8439,5,3,0,0,8439,8441,1,0,0,0,8440,
8435,1,0,0,0,8440,8436,1,0,0,0,8441,8443,1,0,0,0,8442,8430,1,0,0,0,8442,
8434,1,0,0,0,8443,1077,1,0,0,0,8444,8449,3,1076,538,0,8445,8446,5,6,0,0,
8446,8448,3,1076,538,0,8447,8445,1,0,0,0,8448,8451,1,0,0,0,8449,8447,1,0,
0,0,8449,8450,1,0,0,0,8450,1079,1,0,0,0,8451,8449,1,0,0,0,8452,8457,3,1076,
538,0,8453,8455,5,36,0,0,8454,8453,1,0,0,0,8454,8455,1,0,0,0,8455,8456,1,
0,0,0,8456,8458,3,1374,687,0,8457,8454,1,0,0,0,8457,8458,1,0,0,0,8458,1081,
1,0,0,0,8459,8460,5,472,0,0,8460,8461,3,1348,674,0,8461,8462,5,2,0,0,8462,
8463,3,1282,641,0,8463,8464,5,3,0,0,8464,8465,3,1084,542,0,8465,1083,1,0,
0,0,8466,8467,5,303,0,0,8467,8468,5,2,0,0,8468,8469,3,1164,582,0,8469,8470,
5,3,0,0,8470,8473,1,0,0,0,8471,8473,1,0,0,0,8472,8466,1,0,0,0,8472,8471,
1,0,0,0,8473,1085,1,0,0,0,8474,8475,3,1216,608,0,8475,8476,3,1094,547,0,
8476,8485,1,0,0,0,8477,8478,5,313,0,0,8478,8479,5,64,0,0,8479,8480,5,2,0,
0,8480,8481,3,1090,545,0,8481,8482,5,3,0,0,8482,8483,3,1094,547,0,8483,8485,
1,0,0,0,8484,8474,1,0,0,0,8484,8477,1,0,0,0,8485,1087,1,0,0,0,8486,8487,
3,1216,608,0,8487,8488,3,1092,546,0,8488,1089,1,0,0,0,8489,8494,3,1088,544,
0,8490,8491,5,6,0,0,8491,8493,3,1088,544,0,8492,8490,1,0,0,0,8493,8496,1,
0,0,0,8494,8492,1,0,0,0,8494,8495,1,0,0,0,8495,1091,1,0,0,0,8496,8494,1,
0,0,0,8497,8498,5,36,0,0,8498,8499,5,2,0,0,8499,8500,3,1102,551,0,8500,8501,
5,3,0,0,8501,8504,1,0,0,0,8502,8504,1,0,0,0,8503,8497,1,0,0,0,8503,8502,
1,0,0,0,8504,1093,1,0,0,0,8505,8506,5,105,0,0,8506,8509,5,473,0,0,8507,8509,
1,0,0,0,8508,8505,1,0,0,0,8508,8507,1,0,0,0,8509,1095,1,0,0,0,8510,8511,
5,103,0,0,8511,8514,3,1164,582,0,8512,8514,1,0,0,0,8513,8510,1,0,0,0,8513,
8512,1,0,0,0,8514,1097,1,0,0,0,8515,8520,5,103,0,0,8516,8517,5,434,0,0,8517,
8518,5,268,0,0,8518,8521,3,954,477,0,8519,8521,3,1164,582,0,8520,8516,1,
0,0,0,8520,8519,1,0,0,0,8521,8524,1,0,0,0,8522,8524,1,0,0,0,8523,8515,1,
0,0,0,8523,8522,1,0,0,0,8524,1099,1,0,0,0,8525,8528,3,1102,551,0,8526,8528,
1,0,0,0,8527,8525,1,0,0,0,8527,8526,1,0,0,0,8528,1101,1,0,0,0,8529,8534,
3,1104,552,0,8530,8531,5,6,0,0,8531,8533,3,1104,552,0,8532,8530,1,0,0,0,
8533,8536,1,0,0,0,8534,8532,1,0,0,0,8534,8535,1,0,0,0,8535,1103,1,0,0,0,
8536,8534,1,0,0,0,8537,8538,3,1374,687,0,8538,8539,3,1120,560,0,8539,8540,
3,110,55,0,8540,1105,1,0,0,0,8541,8542,5,474,0,0,8542,8558,5,2,0,0,8543,
8544,3,1208,604,0,8544,8545,3,1234,617,0,8545,8546,5,475,0,0,8546,8547,3,
1108,554,0,8547,8559,1,0,0,0,8548,8549,5,476,0,0,8549,8550,5,2,0,0,8550,
8551,3,1116,558,0,8551,8552,5,3,0,0,8552,8553,5,6,0,0,8553,8554,3,1208,604,
0,8554,8555,3,1234,617,0,8555,8556,5,475,0,0,8556,8557,3,1108,554,0,8557,
8559,1,0,0,0,8558,8543,1,0,0,0,8558,8548,1,0,0,0,8559,8560,1,0,0,0,8560,
8561,5,3,0,0,8561,1107,1,0,0,0,8562,8567,3,1110,555,0,8563,8564,5,6,0,0,
8564,8566,3,1110,555,0,8565,8563,1,0,0,0,8566,8569,1,0,0,0,8567,8565,1,0,
0,0,8567,8568,1,0,0,0,8568,1109,1,0,0,0,8569,8567,1,0,0,0,8570,8577,3,1374,
687,0,8571,8573,3,1120,560,0,8572,8574,3,1112,556,0,8573,8572,1,0,0,0,8573,
8574,1,0,0,0,8574,8578,1,0,0,0,8575,8576,5,62,0,0,8576,8578,5,473,0,0,8577,
8571,1,0,0,0,8577,8575,1,0,0,0,8578,1111,1,0,0,0,8579,8581,3,1114,557,0,
8580,8579,1,0,0,0,8581,8582,1,0,0,0,8582,8580,1,0,0,0,8582,8583,1,0,0,0,
8583,1113,1,0,0,0,8584,8585,5,53,0,0,8585,8593,3,1164,582,0,8586,8587,3,
1384,692,0,8587,8588,3,1164,582,0,8588,8593,1,0,0,0,8589,8590,5,77,0,0,8590,
8593,5,78,0,0,8591,8593,5,78,0,0,8592,8584,1,0,0,0,8592,8586,1,0,0,0,8592,
8589,1,0,0,0,8592,8591,1,0,0,0,8593,1115,1,0,0,0,8594,8599,3,1118,559,0,
8595,8596,5,6,0,0,8596,8598,3,1118,559,0,8597,8595,1,0,0,0,8598,8601,1,0,
0,0,8599,8597,1,0,0,0,8599,8600,1,0,0,0,8600,1117,1,0,0,0,8601,8599,1,0,
0,0,8602,8603,3,1206,603,0,8603,8604,5,36,0,0,8604,8605,3,1382,691,0,8605,
8609,1,0,0,0,8606,8607,5,53,0,0,8607,8609,3,1206,603,0,8608,8602,1,0,0,0,
8608,8606,1,0,0,0,8609,1119,1,0,0,0,8610,8612,5,408,0,0,8611,8610,1,0,0,
0,8611,8612,1,0,0,0,8612,8613,1,0,0,0,8613,8622,3,1124,562,0,8614,8623,3,
1122,561,0,8615,8620,5,35,0,0,8616,8617,5,4,0,0,8617,8618,3,1358,679,0,8618,
8619,5,5,0,0,8619,8621,1,0,0,0,8620,8616,1,0,0,0,8620,8621,1,0,0,0,8621,
8623,1,0,0,0,8622,8614,1,0,0,0,8622,8615,1,0,0,0,8623,8629,1,0,0,0,8624,
8625,3,1338,669,0,8625,8626,5,27,0,0,8626,8627,7,39,0,0,8627,8629,1,0,0,
0,8628,8611,1,0,0,0,8628,8624,1,0,0,0,8629,1121,1,0,0,0,8630,8632,5,4,0,
0,8631,8633,3,1358,679,0,8632,8631,1,0,0,0,8632,8633,1,0,0,0,8633,8634,1,
0,0,0,8634,8636,5,5,0,0,8635,8630,1,0,0,0,8636,8639,1,0,0,0,8637,8635,1,
0,0,0,8637,8638,1,0,0,0,8638,1123,1,0,0,0,8639,8637,1,0,0,0,8640,8654,3,
1128,564,0,8641,8654,3,1132,566,0,8642,8654,3,1136,568,0,8643,8654,3,1144,
572,0,8644,8654,3,1152,576,0,8645,8651,3,1154,577,0,8646,8652,3,1158,579,
0,8647,8648,5,2,0,0,8648,8649,3,1358,679,0,8649,8650,5,3,0,0,8650,8652,1,
0,0,0,8651,8646,1,0,0,0,8651,8647,1,0,0,0,8652,8654,1,0,0,0,8653,8640,1,
0,0,0,8653,8641,1,0,0,0,8653,8642,1,0,0,0,8653,8643,1,0,0,0,8653,8644,1,
0,0,0,8653,8645,1,0,0,0,8654,1125,1,0,0,0,8655,8660,3,1132,566,0,8656,8660,
3,1138,569,0,8657,8660,3,1146,573,0,8658,8660,3,1152,576,0,8659,8655,1,0,
0,0,8659,8656,1,0,0,0,8659,8657,1,0,0,0,8659,8658,1,0,0,0,8660,1127,1,0,
0,0,8661,8666,3,1396,698,0,8662,8666,3,1378,689,0,8663,8666,5,119,0,0,8664,
8666,5,126,0,0,8665,8661,1,0,0,0,8665,8662,1,0,0,0,8665,8663,1,0,0,0,8665,
8664,1,0,0,0,8666,8668,1,0,0,0,8667,8669,3,526,263,0,8668,8667,1,0,0,0,8668,
8669,1,0,0,0,8669,8670,1,0,0,0,8670,8671,3,1130,565,0,8671,1129,1,0,0,0,
8672,8673,5,2,0,0,8673,8674,3,1282,641,0,8674,8675,5,3,0,0,8675,8678,1,0,
0,0,8676,8678,1,0,0,0,8677,8672,1,0,0,0,8677,8676,1,0,0,0,8678,1131,1,0,
0,0,8679,8696,5,394,0,0,8680,8696,5,395,0,0,8681,8696,5,409,0,0,8682,8696,
5,381,0,0,8683,8696,5,406,0,0,8684,8685,5,391,0,0,8685,8696,3,1134,567,0,
8686,8687,5,190,0,0,8687,8696,5,405,0,0,8688,8689,5,388,0,0,8689,8696,3,
1130,565,0,8690,8691,5,387,0,0,8691,8696,3,1130,565,0,8692,8693,5,402,0,
0,8693,8696,3,1130,565,0,8694,8696,5,383,0,0,8695,8679,1,0,0,0,8695,8680,
1,0,0,0,8695,8681,1,0,0,0,8695,8682,1,0,0,0,8695,8683,1,0,0,0,8695,8684,
1,0,0,0,8695,8686,1,0,0,0,8695,8688,1,0,0,0,8695,8690,1,0,0,0,8695,8692,
1,0,0,0,8695,8694,1,0,0,0,8696,1133,1,0,0,0,8697,8698,5,2,0,0,8698,8699,
3,1358,679,0,8699,8700,5,3,0,0,8700,8703,1,0,0,0,8701,8703,1,0,0,0,8702,
8697,1,0,0,0,8702,8701,1,0,0,0,8703,1135,1,0,0,0,8704,8707,3,1140,570,0,
8705,8707,3,1142,571,0,8706,8704,1,0,0,0,8706,8705,1,0,0,0,8707,1137,1,0,
0,0,8708,8711,3,1140,570,0,8709,8711,3,1142,571,0,8710,8708,1,0,0,0,8710,
8709,1,0,0,0,8711,1139,1,0,0,0,8712,8713,5,382,0,0,8713,8714,3,1150,575,
0,8714,8715,5,2,0,0,8715,8716,3,1282,641,0,8716,8717,5,3,0,0,8717,1141,1,
0,0,0,8718,8719,5,382,0,0,8719,8720,3,1150,575,0,8720,1143,1,0,0,0,8721,
8726,3,1148,574,0,8722,8723,5,2,0,0,8723,8724,3,1358,679,0,8724,8725,5,3,
0,0,8725,8727,1,0,0,0,8726,8722,1,0,0,0,8726,8727,1,0,0,0,8727,1145,1,0,
0,0,8728,8733,3,1148,574,0,8729,8730,5,2,0,0,8730,8731,3,1358,679,0,8731,
8732,5,3,0,0,8732,8734,1,0,0,0,8733,8729,1,0,0,0,8733,8734,1,0,0,0,8734,
1147,1,0,0,0,8735,8736,7,40,0,0,8736,8742,3,1150,575,0,8737,8742,5,416,0,
0,8738,8739,5,398,0,0,8739,8740,7,41,0,0,8740,8742,3,1150,575,0,8741,8735,
1,0,0,0,8741,8737,1,0,0,0,8741,8738,1,0,0,0,8742,1149,1,0,0,0,8743,8746,
5,367,0,0,8744,8746,1,0,0,0,8745,8743,1,0,0,0,8745,8744,1,0,0,0,8746,1151,
1,0,0,0,8747,8752,7,42,0,0,8748,8749,5,2,0,0,8749,8750,3,1358,679,0,8750,
8751,5,3,0,0,8751,8753,1,0,0,0,8752,8748,1,0,0,0,8752,8753,1,0,0,0,8753,
8754,1,0,0,0,8754,8755,3,1156,578,0,8755,1153,1,0,0,0,8756,8757,5,396,0,
0,8757,1155,1,0,0,0,8758,8759,5,105,0,0,8759,8760,5,411,0,0,8760,8766,5,
379,0,0,8761,8762,5,372,0,0,8762,8763,5,411,0,0,8763,8766,5,379,0,0,8764,
8766,1,0,0,0,8765,8758,1,0,0,0,8765,8761,1,0,0,0,8765,8764,1,0,0,0,8766,
1157,1,0,0,0,8767,8794,5,377,0,0,8768,8794,5,257,0,0,8769,8794,5,176,0,0,
8770,8794,5,218,0,0,8771,8794,5,254,0,0,8772,8794,3,1160,580,0,8773,8774,
5,377,0,0,8774,8775,5,94,0,0,8775,8794,5,257,0,0,8776,8777,5,176,0,0,8777,
8781,5,94,0,0,8778,8782,5,218,0,0,8779,8782,5,254,0,0,8780,8782,3,1160,580,
0,8781,8778,1,0,0,0,8781,8779,1,0,0,0,8781,8780,1,0,0,0,8782,8794,1,0,0,
0,8783,8784,5,218,0,0,8784,8787,5,94,0,0,8785,8788,5,254,0,0,8786,8788,3,
1160,580,0,8787,8785,1,0,0,0,8787,8786,1,0,0,0,8788,8794,1,0,0,0,8789,8790,
5,254,0,0,8790,8791,5,94,0,0,8791,8794,3,1160,580,0,8792,8794,1,0,0,0,8793,
8767,1,0,0,0,8793,8768,1,0,0,0,8793,8769,1,0,0,0,8793,8770,1,0,0,0,8793,
8771,1,0,0,0,8793,8772,1,0,0,0,8793,8773,1,0,0,0,8793,8776,1,0,0,0,8793,
8783,1,0,0,0,8793,8789,1,0,0,0,8793,8792,1,0,0,0,8794,1159,1,0,0,0,8795,
8800,5,319,0,0,8796,8797,5,2,0,0,8797,8798,3,1358,679,0,8798,8799,5,3,0,
0,8799,8801,1,0,0,0,8800,8796,1,0,0,0,8800,8801,1,0,0,0,8801,1161,1,0,0,
0,8802,8803,5,197,0,0,8803,8806,3,1164,582,0,8804,8806,1,0,0,0,8805,8802,
1,0,0,0,8805,8804,1,0,0,0,8806,1163,1,0,0,0,8807,8808,3,1166,583,0,8808,
1165,1,0,0,0,8809,8811,3,1168,584,0,8810,8812,3,1276,638,0,8811,8810,1,0,
0,0,8811,8812,1,0,0,0,8812,1167,1,0,0,0,8813,8818,3,1170,585,0,8814,8815,
7,43,0,0,8815,8817,3,1170,585,0,8816,8814,1,0,0,0,8817,8820,1,0,0,0,8818,
8816,1,0,0,0,8818,8819,1,0,0,0,8819,1169,1,0,0,0,8820,8818,1,0,0,0,8821,
8826,3,1172,586,0,8822,8823,5,82,0,0,8823,8825,3,1172,586,0,8824,8822,1,
0,0,0,8825,8828,1,0,0,0,8826,8824,1,0,0,0,8826,8827,1,0,0,0,8827,1171,1,
0,0,0,8828,8826,1,0,0,0,8829,8834,3,1174,587,0,8830,8831,5,33,0,0,8831,8833,
3,1174,587,0,8832,8830,1,0,0,0,8833,8836,1,0,0,0,8834,8832,1,0,0,0,8834,
8835,1,0,0,0,8835,1173,1,0,0,0,8836,8834,1,0,0,0,8837,8849,3,1176,588,0,
8838,8840,5,77,0,0,8839,8838,1,0,0,0,8839,8840,1,0,0,0,8840,8841,1,0,0,0,
8841,8843,5,380,0,0,8842,8844,5,91,0,0,8843,8842,1,0,0,0,8843,8844,1,0,0,
0,8844,8845,1,0,0,0,8845,8846,3,1176,588,0,8846,8847,5,33,0,0,8847,8848,
3,1176,588,0,8848,8850,1,0,0,0,8849,8839,1,0,0,0,8849,8850,1,0,0,0,8850,
1175,1,0,0,0,8851,8857,3,1178,589,0,8852,8854,5,77,0,0,8853,8852,1,0,0,0,
8853,8854,1,0,0,0,8854,8855,1,0,0,0,8855,8856,5,68,0,0,8856,8858,3,1308,
654,0,8857,8853,1,0,0,0,8857,8858,1,0,0,0,8858,1177,1,0,0,0,8859,8861,5,
77,0,0,8860,8859,1,0,0,0,8860,8861,1,0,0,0,8861,8862,1,0,0,0,8862,8863,3,
1180,590,0,8863,1179,1,0,0,0,8864,8866,3,1182,591,0,8865,8867,7,44,0,0,8866,
8865,1,0,0,0,8866,8867,1,0,0,0,8867,1181,1,0,0,0,8868,8892,3,1184,592,0,
8869,8871,5,116,0,0,8870,8872,5,77,0,0,8871,8870,1,0,0,0,8871,8872,1,0,0,
0,8872,8890,1,0,0,0,8873,8891,5,78,0,0,8874,8891,5,96,0,0,8875,8891,5,60,
0,0,8876,8891,5,358,0,0,8877,8878,5,56,0,0,8878,8879,5,64,0,0,8879,8891,
3,1164,582,0,8880,8881,5,268,0,0,8881,8882,5,2,0,0,8882,8883,3,1288,644,
0,8883,8884,5,3,0,0,8884,8891,1,0,0,0,8885,8891,5,188,0,0,8886,8888,3,1298,
649,0,8887,8886,1,0,0,0,8887,8888,1,0,0,0,8888,8889,1,0,0,0,8889,8891,5,
478,0,0,8890,8873,1,0,0,0,8890,8874,1,0,0,0,8890,8875,1,0,0,0,8890,8876,
1,0,0,0,8890,8877,1,0,0,0,8890,8880,1,0,0,0,8890,8885,1,0,0,0,8890,8887,
1,0,0,0,8891,8893,1,0,0,0,8892,8869,1,0,0,0,8892,8893,1,0,0,0,8893,1183,
1,0,0,0,8894,8906,3,1186,593,0,8895,8896,7,45,0,0,8896,8907,3,1186,593,0,
8897,8898,3,1280,640,0,8898,8904,3,1270,635,0,8899,8905,3,962,481,0,8900,
8901,5,2,0,0,8901,8902,3,1164,582,0,8902,8903,5,3,0,0,8903,8905,1,0,0,0,
8904,8899,1,0,0,0,8904,8900,1,0,0,0,8905,8907,1,0,0,0,8906,8895,1,0,0,0,
8906,8897,1,0,0,0,8906,8907,1,0,0,0,8907,1185,1,0,0,0,8908,8921,3,1188,594,
0,8909,8911,5,77,0,0,8910,8909,1,0,0,0,8910,8911,1,0,0,0,8911,8916,1,0,0,
0,8912,8917,5,120,0,0,8913,8917,5,114,0,0,8914,8915,5,127,0,0,8915,8917,
5,94,0,0,8916,8912,1,0,0,0,8916,8913,1,0,0,0,8916,8914,1,0,0,0,8917,8918,
1,0,0,0,8918,8919,3,1188,594,0,8919,8920,3,1162,581,0,8920,8922,1,0,0,0,
8921,8910,1,0,0,0,8921,8922,1,0,0,0,8922,1187,1,0,0,0,8923,8929,3,1190,595,
0,8924,8925,3,1276,638,0,8925,8926,3,1190,595,0,8926,8928,1,0,0,0,8927,8924,
1,0,0,0,8928,8931,1,0,0,0,8929,8927,1,0,0,0,8929,8930,1,0,0,0,8930,1189,
1,0,0,0,8931,8929,1,0,0,0,8932,8934,3,1276,638,0,8933,8932,1,0,0,0,8933,
8934,1,0,0,0,8934,8935,1,0,0,0,8935,8936,3,1192,596,0,8936,1191,1,0,0,0,
8937,8942,3,1194,597,0,8938,8939,7,46,0,0,8939,8941,3,1194,597,0,8940,8938,
1,0,0,0,8941,8944,1,0,0,0,8942,8940,1,0,0,0,8942,8943,1,0,0,0,8943,1193,
1,0,0,0,8944,8942,1,0,0,0,8945,8950,3,1196,598,0,8946,8947,7,47,0,0,8947,
8949,3,1196,598,0,8948,8946,1,0,0,0,8949,8952,1,0,0,0,8950,8948,1,0,0,0,
8950,8951,1,0,0,0,8951,1195,1,0,0,0,8952,8950,1,0,0,0,8953,8956,3,1198,599,
0,8954,8955,5,15,0,0,8955,8957,3,1164,582,0,8956,8954,1,0,0,0,8956,8957,
1,0,0,0,8957,1197,1,0,0,0,8958,8960,7,46,0,0,8959,8958,1,0,0,0,8959,8960,
1,0,0,0,8960,8961,1,0,0,0,8961,8962,3,1200,600,0,8962,1199,1,0,0,0,8963,
8968,3,1202,601,0,8964,8965,5,142,0,0,8965,8966,5,411,0,0,8966,8967,5,379,
0,0,8967,8969,3,1164,582,0,8968,8964,1,0,0,0,8968,8969,1,0,0,0,8969,1201,
1,0,0,0,8970,8973,3,1204,602,0,8971,8972,5,43,0,0,8972,8974,3,524,262,0,
8973,8971,1,0,0,0,8973,8974,1,0,0,0,8974,1203,1,0,0,0,8975,8980,3,1208,604,
0,8976,8977,5,26,0,0,8977,8979,3,1120,560,0,8978,8976,1,0,0,0,8979,8982,
1,0,0,0,8980,8978,1,0,0,0,8980,8981,1,0,0,0,8981,1205,1,0,0,0,8982,8980,
1,0,0,0,8983,8984,6,603,-1,0,8984,8991,3,1208,604,0,8985,8986,7,46,0,0,8986,
8991,3,1206,603,9,8987,8988,3,1276,638,0,8988,8989,3,1206,603,3,8989,8991,
1,0,0,0,8990,8983,1,0,0,0,8990,8985,1,0,0,0,8990,8987,1,0,0,0,8991,9031,
1,0,0,0,8992,8993,10,8,0,0,8993,8994,5,15,0,0,8994,9030,3,1206,603,9,8995,
8996,10,7,0,0,8996,8997,7,47,0,0,8997,9030,3,1206,603,8,8998,8999,10,6,0,
0,8999,9000,7,46,0,0,9000,9030,3,1206,603,7,9001,9002,10,5,0,0,9002,9003,
3,1276,638,0,9003,9004,3,1206,603,6,9004,9030,1,0,0,0,9005,9006,10,4,0,0,
9006,9007,7,45,0,0,9007,9030,3,1206,603,5,9008,9009,10,10,0,0,9009,9010,
5,26,0,0,9010,9030,3,1120,560,0,9011,9012,10,2,0,0,9012,9030,3,1276,638,
0,9013,9014,10,1,0,0,9014,9016,5,116,0,0,9015,9017,5,77,0,0,9016,9015,1,
0,0,0,9016,9017,1,0,0,0,9017,9027,1,0,0,0,9018,9019,5,56,0,0,9019,9020,5,
64,0,0,9020,9028,3,1206,603,0,9021,9022,5,268,0,0,9022,9023,5,2,0,0,9023,
9024,3,1288,644,0,9024,9025,5,3,0,0,9025,9028,1,0,0,0,9026,9028,5,188,0,
0,9027,9018,1,0,0,0,9027,9021,1,0,0,0,9027,9026,1,0,0,0,9028,9030,1,0,0,
0,9029,8992,1,0,0,0,9029,8995,1,0,0,0,9029,8998,1,0,0,0,9029,9001,1,0,0,
0,9029,9005,1,0,0,0,9029,9008,1,0,0,0,9029,9011,1,0,0,0,9029,9013,1,0,0,
0,9030,9033,1,0,0,0,9031,9029,1,0,0,0,9031,9032,1,0,0,0,9032,1207,1,0,0,
0,9033,9031,1,0,0,0,9034,9035,5,389,0,0,9035,9071,3,962,481,0,9036,9039,
5,35,0,0,9037,9040,3,962,481,0,9038,9040,3,1290,645,0,9039,9037,1,0,0,0,
9039,9038,1,0,0,0,9040,9071,1,0,0,0,9041,9042,5,28,0,0,9042,9071,3,1328,
664,0,9043,9044,5,470,0,0,9044,9045,5,2,0,0,9045,9046,3,1282,641,0,9046,
9047,5,3,0,0,9047,9071,1,0,0,0,9048,9049,5,98,0,0,9049,9071,3,962,481,0,
9050,9071,3,1320,660,0,9051,9071,3,1350,675,0,9052,9071,3,1210,605,0,9053,
9054,5,2,0,0,9054,9055,3,1164,582,0,9055,9056,5,3,0,0,9056,9057,3,1328,664,
0,9057,9071,1,0,0,0,9058,9071,3,1310,655,0,9059,9071,3,1214,607,0,9060,9062,
3,962,481,0,9061,9063,3,1326,663,0,9062,9061,1,0,0,0,9062,9063,1,0,0,0,9063,
9071,1,0,0,0,9064,9071,3,1266,633,0,9065,9071,3,1268,634,0,9066,9067,3,1264,
632,0,9067,9068,5,125,0,0,9068,9069,3,1264,632,0,9069,9071,1,0,0,0,9070,
9034,1,0,0,0,9070,9036,1,0,0,0,9070,9041,1,0,0,0,9070,9043,1,0,0,0,9070,
9048,1,0,0,0,9070,9050,1,0,0,0,9070,9051,1,0,0,0,9070,9052,1,0,0,0,9070,
9053,1,0,0,0,9070,9058,1,0,0,0,9070,9059,1,0,0,0,9070,9060,1,0,0,0,9070,
9064,1,0,0,0,9070,9065,1,0,0,0,9070,9066,1,0,0,0,9071,1209,1,0,0,0,9072,
9073,5,661,0,0,9073,1211,1,0,0,0,9074,9075,3,1348,674,0,9075,9094,5,2,0,
0,9076,9080,3,1284,642,0,9077,9078,5,6,0,0,9078,9079,5,101,0,0,9079,9081,
3,1286,643,0,9080,9077,1,0,0,0,9080,9081,1,0,0,0,9081,9082,1,0,0,0,9082,
9083,3,998,499,0,9083,9095,1,0,0,0,9084,9085,5,101,0,0,9085,9086,3,1286,
643,0,9086,9087,3,998,499,0,9087,9095,1,0,0,0,9088,9089,7,48,0,0,9089,9090,
3,1284,642,0,9090,9091,3,998,499,0,9091,9095,1,0,0,0,9092,9095,5,9,0,0,9093,
9095,1,0,0,0,9094,9076,1,0,0,0,9094,9084,1,0,0,0,9094,9088,1,0,0,0,9094,
9092,1,0,0,0,9094,9093,1,0,0,0,9095,9096,1,0,0,0,9096,9097,5,3,0,0,9097,
1213,1,0,0,0,9098,9099,3,1212,606,0,9099,9100,3,1238,619,0,9100,9101,3,1240,
620,0,9101,9102,3,1248,624,0,9102,9105,1,0,0,0,9103,9105,3,1218,609,0,9104,
9098,1,0,0,0,9104,9103,1,0,0,0,9105,1215,1,0,0,0,9106,9109,3,1212,606,0,
9107,9109,3,1218,609,0,9108,9106,1,0,0,0,9108,9107,1,0,0,0,9109,1217,1,0,
0,0,9110,9111,5,108,0,0,9111,9112,5,62,0,0,9112,9113,5,2,0,0,9113,9114,3,
1164,582,0,9114,9115,5,3,0,0,9115,9288,1,0,0,0,9116,9288,5,48,0,0,9117,9122,
5,50,0,0,9118,9119,5,2,0,0,9119,9120,3,1358,679,0,9120,9121,5,3,0,0,9121,
9123,1,0,0,0,9122,9118,1,0,0,0,9122,9123,1,0,0,0,9123,9288,1,0,0,0,9124,
9129,5,51,0,0,9125,9126,5,2,0,0,9126,9127,3,1358,679,0,9127,9128,5,3,0,0,
9128,9130,1,0,0,0,9129,9125,1,0,0,0,9129,9130,1,0,0,0,9130,9288,1,0,0,0,
9131,9136,5,75,0,0,9132,9133,5,2,0,0,9133,9134,3,1358,679,0,9134,9135,5,
3,0,0,9135,9137,1,0,0,0,9136,9132,1,0,0,0,9136,9137,1,0,0,0,9137,9288,1,
0,0,0,9138,9143,5,76,0,0,9139,9140,5,2,0,0,9140,9141,3,1358,679,0,9141,9142,
5,3,0,0,9142,9144,1,0,0,0,9143,9139,1,0,0,0,9143,9144,1,0,0,0,9144,9288,
1,0,0,0,9145,9288,5,49,0,0,9146,9288,5,52,0,0,9147,9288,5,89,0,0,9148,9288,
5,99,0,0,9149,9288,5,47,0,0,9150,9288,5,111,0,0,9151,9152,5,41,0,0,9152,
9153,5,2,0,0,9153,9154,3,1164,582,0,9154,9155,5,36,0,0,9155,9156,3,1120,
560,0,9156,9157,5,3,0,0,9157,9288,1,0,0,0,9158,9159,5,390,0,0,9159,9160,
5,2,0,0,9160,9161,3,1294,647,0,9161,9162,5,3,0,0,9162,9288,1,0,0,0,9163,
9164,5,489,0,0,9164,9165,5,2,0,0,9165,9168,3,1164,582,0,9166,9167,5,6,0,
0,9167,9169,3,1298,649,0,9168,9166,1,0,0,0,9168,9169,1,0,0,0,9169,9170,1,
0,0,0,9170,9171,5,3,0,0,9171,9288,1,0,0,0,9172,9173,5,403,0,0,9173,9174,
5,2,0,0,9174,9175,3,1300,650,0,9175,9176,5,3,0,0,9176,9288,1,0,0,0,9177,
9178,5,404,0,0,9178,9179,5,2,0,0,9179,9180,3,1302,651,0,9180,9181,5,3,0,
0,9181,9288,1,0,0,0,9182,9183,5,410,0,0,9183,9184,5,2,0,0,9184,9185,3,1304,
652,0,9185,9186,5,3,0,0,9186,9288,1,0,0,0,9187,9188,5,413,0,0,9188,9189,
5,2,0,0,9189,9190,3,1164,582,0,9190,9191,5,36,0,0,9191,9192,3,1120,560,0,
9192,9193,5,3,0,0,9193,9288,1,0,0,0,9194,9195,5,414,0,0,9195,9197,5,2,0,
0,9196,9198,7,49,0,0,9197,9196,1,0,0,0,9197,9198,1,0,0,0,9198,9199,1,0,0,
0,9199,9200,3,1306,653,0,9200,9201,5,3,0,0,9201,9288,1,0,0,0,9202,9203,5,
401,0,0,9203,9204,5,2,0,0,9204,9205,3,1164,582,0,9205,9206,5,6,0,0,9206,
9207,3,1164,582,0,9207,9208,5,3,0,0,9208,9288,1,0,0,0,9209,9210,5,386,0,
0,9210,9211,5,2,0,0,9211,9212,3,1282,641,0,9212,9213,5,3,0,0,9213,9288,1,
0,0,0,9214,9215,5,392,0,0,9215,9216,5,2,0,0,9216,9217,3,1282,641,0,9217,
9218,5,3,0,0,9218,9288,1,0,0,0,9219,9220,5,397,0,0,9220,9221,5,2,0,0,9221,
9222,3,1282,641,0,9222,9223,5,3,0,0,9223,9288,1,0,0,0,9224,9225,5,425,0,
0,9225,9226,5,2,0,0,9226,9227,3,1282,641,0,9227,9228,5,3,0,0,9228,9288,1,
0,0,0,9229,9230,5,426,0,0,9230,9231,5,2,0,0,9231,9232,5,259,0,0,9232,9238,
3,1382,691,0,9233,9236,5,6,0,0,9234,9237,3,1224,612,0,9235,9237,3,1282,641,
0,9236,9234,1,0,0,0,9236,9235,1,0,0,0,9237,9239,1,0,0,0,9238,9233,1,0,0,
0,9238,9239,1,0,0,0,9239,9240,1,0,0,0,9240,9241,5,3,0,0,9241,9288,1,0,0,
0,9242,9243,5,427,0,0,9243,9244,5,2,0,0,9244,9245,3,1208,604,0,9245,9246,
3,1234,617,0,9246,9247,5,3,0,0,9247,9288,1,0,0,0,9248,9249,5,428,0,0,9249,
9250,5,2,0,0,9250,9251,3,1226,613,0,9251,9252,5,3,0,0,9252,9288,1,0,0,0,
9253,9254,5,429,0,0,9254,9255,5,2,0,0,9255,9256,3,1230,615,0,9256,9257,3,
1164,582,0,9257,9258,3,1232,616,0,9258,9259,5,3,0,0,9259,9288,1,0,0,0,9260,
9261,5,430,0,0,9261,9262,5,2,0,0,9262,9263,5,259,0,0,9263,9266,3,1382,691,
0,9264,9265,5,6,0,0,9265,9267,3,1164,582,0,9266,9264,1,0,0,0,9266,9267,1,
0,0,0,9267,9268,1,0,0,0,9268,9269,5,3,0,0,9269,9288,1,0,0,0,9270,9271,5,
431,0,0,9271,9272,5,2,0,0,9272,9273,5,376,0,0,9273,9274,3,1164,582,0,9274,
9275,5,6,0,0,9275,9276,3,1220,610,0,9276,9277,3,1222,611,0,9277,9278,5,3,
0,0,9278,9288,1,0,0,0,9279,9280,5,432,0,0,9280,9281,5,2,0,0,9281,9282,3,
1230,615,0,9282,9283,3,1164,582,0,9283,9284,5,36,0,0,9284,9285,3,1124,562,
0,9285,9286,5,3,0,0,9286,9288,1,0,0,0,9287,9110,1,0,0,0,9287,9116,1,0,0,
0,9287,9117,1,0,0,0,9287,9124,1,0,0,0,9287,9131,1,0,0,0,9287,9138,1,0,0,
0,9287,9145,1,0,0,0,9287,9146,1,0,0,0,9287,9147,1,0,0,0,9287,9148,1,0,0,
0,9287,9149,1,0,0,0,9287,9150,1,0,0,0,9287,9151,1,0,0,0,9287,9158,1,0,0,
0,9287,9163,1,0,0,0,9287,9172,1,0,0,0,9287,9177,1,0,0,0,9287,9182,1,0,0,
0,9287,9187,1,0,0,0,9287,9194,1,0,0,0,9287,9202,1,0,0,0,9287,9209,1,0,0,
0,9287,9214,1,0,0,0,9287,9219,1,0,0,0,9287,9224,1,0,0,0,9287,9229,1,0,0,
0,9287,9242,1,0,0,0,9287,9248,1,0,0,0,9287,9253,1,0,0,0,9287,9260,1,0,0,
0,9287,9270,1,0,0,0,9287,9279,1,0,0,0,9288,1219,1,0,0,0,9289,9290,5,368,
0,0,9290,9295,3,1164,582,0,9291,9292,5,368,0,0,9292,9293,5,262,0,0,9293,
9295,5,450,0,0,9294,9289,1,0,0,0,9294,9291,1,0,0,0,9295,1221,1,0,0,0,9296,
9297,5,6,0,0,9297,9298,5,332,0,0,9298,9308,5,378,0,0,9299,9300,5,6,0,0,9300,
9301,5,332,0,0,9301,9308,5,262,0,0,9302,9303,5,6,0,0,9303,9304,5,332,0,0,
9304,9305,5,262,0,0,9305,9308,5,450,0,0,9306,9308,1,0,0,0,9307,9296,1,0,
0,0,9307,9299,1,0,0,0,9307,9302,1,0,0,0,9307,9306,1,0,0,0,9308,1223,1,0,
0,0,9309,9310,5,417,0,0,9310,9311,5,2,0,0,9311,9312,3,1226,613,0,9312,9313,
5,3,0,0,9313,1225,1,0,0,0,9314,9319,3,1228,614,0,9315,9316,5,6,0,0,9316,
9318,3,1228,614,0,9317,9315,1,0,0,0,9318,9321,1,0,0,0,9319,9317,1,0,0,0,
9319,9320,1,0,0,0,9320,1227,1,0,0,0,9321,9319,1,0,0,0,9322,9325,3,1164,582,
0,9323,9324,5,36,0,0,9324,9326,3,1382,691,0,9325,9323,1,0,0,0,9325,9326,
1,0,0,0,9326,1229,1,0,0,0,9327,9328,7,50,0,0,9328,1231,1,0,0,0,9329,9330,
5,285,0,0,9330,9335,5,371,0,0,9331,9332,5,340,0,0,9332,9335,5,371,0,0,9333,
9335,1,0,0,0,9334,9329,1,0,0,0,9334,9331,1,0,0,0,9334,9333,1,0,0,0,9335,
1233,1,0,0,0,9336,9337,5,279,0,0,9337,9352,3,1208,604,0,9338,9339,5,279,
0,0,9339,9340,3,1208,604,0,9340,9341,3,1236,618,0,9341,9352,1,0,0,0,9342,
9343,5,279,0,0,9343,9344,3,1236,618,0,9344,9345,3,1208,604,0,9345,9352,1,
0,0,0,9346,9347,5,279,0,0,9347,9348,3,1236,618,0,9348,9349,3,1208,604,0,
9349,9350,3,1236,618,0,9350,9352,1,0,0,0,9351,9336,1,0,0,0,9351,9338,1,0,
0,0,9351,9342,1,0,0,0,9351,9346,1,0,0,0,9352,1235,1,0,0,0,9353,9354,5,147,
0,0,9354,9355,7,51,0,0,9355,1237,1,0,0,0,9356,9357,5,479,0,0,9357,9358,5,
66,0,0,9358,9359,5,2,0,0,9359,9360,3,1000,500,0,9360,9361,5,3,0,0,9361,9364,
1,0,0,0,9362,9364,1,0,0,0,9363,9356,1,0,0,0,9363,9362,1,0,0,0,9364,1239,
1,0,0,0,9365,9366,5,480,0,0,9366,9367,5,2,0,0,9367,9368,5,103,0,0,9368,9369,
3,1164,582,0,9369,9370,5,3,0,0,9370,9373,1,0,0,0,9371,9373,1,0,0,0,9372,
9365,1,0,0,0,9372,9371,1,0,0,0,9373,1241,1,0,0,0,9374,9375,5,104,0,0,9375,
9378,3,1244,622,0,9376,9378,1,0,0,0,9377,9374,1,0,0,0,9377,9376,1,0,0,0,
9378,1243,1,0,0,0,9379,9384,3,1246,623,0,9380,9381,5,6,0,0,9381,9383,3,1246,
623,0,9382,9380,1,0,0,0,9383,9386,1,0,0,0,9384,9382,1,0,0,0,9384,9385,1,
0,0,0,9385,1245,1,0,0,0,9386,9384,1,0,0,0,9387,9388,3,1374,687,0,9388,9389,
5,36,0,0,9389,9390,3,1250,625,0,9390,1247,1,0,0,0,9391,9394,5,124,0,0,9392,
9395,3,1250,625,0,9393,9395,3,1374,687,0,9394,9392,1,0,0,0,9394,9393,1,0,
0,0,9395,9398,1,0,0,0,9396,9398,1,0,0,0,9397,9391,1,0,0,0,9397,9396,1,0,
0,0,9398,1249,1,0,0,0,9399,9400,5,2,0,0,9400,9401,3,1252,626,0,9401,9402,
3,1254,627,0,9402,9403,3,998,499,0,9403,9404,3,1256,628,0,9404,9405,5,3,
0,0,9405,1251,1,0,0,0,9406,9409,3,1374,687,0,9407,9409,1,0,0,0,9408,9406,
1,0,0,0,9408,9407,1,0,0,0,9409,1253,1,0,0,0,9410,9411,5,278,0,0,9411,9412,
5,147,0,0,9412,9415,3,1282,641,0,9413,9415,1,0,0,0,9414,9410,1,0,0,0,9414,
9413,1,0,0,0,9415,1255,1,0,0,0,9416,9417,5,292,0,0,9417,9418,3,1258,629,
0,9418,9419,3,1262,631,0,9419,9430,1,0,0,0,9420,9421,5,313,0,0,9421,9422,
3,1258,629,0,9422,9423,3,1262,631,0,9423,9430,1,0,0,0,9424,9425,5,481,0,
0,9425,9426,3,1258,629,0,9426,9427,3,1262,631,0,9427,9430,1,0,0,0,9428,9430,
1,0,0,0,9429,9416,1,0,0,0,9429,9420,1,0,0,0,9429,9424,1,0,0,0,9429,9428,
1,0,0,0,9430,1257,1,0,0,0,9431,9438,3,1260,630,0,9432,9433,5,380,0,0,9433,
9434,3,1260,630,0,9434,9435,5,33,0,0,9435,9436,3,1260,630,0,9436,9438,1,
0,0,0,9437,9431,1,0,0,0,9437,9432,1,0,0,0,9438,1259,1,0,0,0,9439,9440,5,
355,0,0,9440,9447,7,52,0,0,9441,9442,5,434,0,0,9442,9447,5,407,0,0,9443,
9444,3,1164,582,0,9444,9445,7,52,0,0,9445,9447,1,0,0,0,9446,9439,1,0,0,0,
9446,9441,1,0,0,0,9446,9443,1,0,0,0,9447,1261,1,0,0,0,9448,9455,5,199,0,
0,9449,9450,5,434,0,0,9450,9456,5,407,0,0,9451,9456,5,66,0,0,9452,9456,5,
467,0,0,9453,9454,5,262,0,0,9454,9456,5,482,0,0,9455,9449,1,0,0,0,9455,9451,
1,0,0,0,9455,9452,1,0,0,0,9455,9453,1,0,0,0,9456,9459,1,0,0,0,9457,9459,
1,0,0,0,9458,9448,1,0,0,0,9458,9457,1,0,0,0,9459,1263,1,0,0,0,9460,9461,
5,407,0,0,9461,9463,5,2,0,0,9462,9464,3,1282,641,0,9463,9462,1,0,0,0,9463,
9464,1,0,0,0,9464,9465,1,0,0,0,9465,9473,5,3,0,0,9466,9467,5,2,0,0,9467,
9468,3,1282,641,0,9468,9469,5,6,0,0,9469,9470,3,1164,582,0,9470,9471,5,3,
0,0,9471,9473,1,0,0,0,9472,9460,1,0,0,0,9472,9466,1,0,0,0,9473,1265,1,0,
0,0,9474,9475,5,407,0,0,9475,9477,5,2,0,0,9476,9478,3,1282,641,0,9477,9476,
1,0,0,0,9477,9478,1,0,0,0,9478,9479,1,0,0,0,9479,9480,5,3,0,0,9480,1267,
1,0,0,0,9481,9482,5,2,0,0,9482,9483,3,1282,641,0,9483,9484,5,6,0,0,9484,
9485,3,1164,582,0,9485,9486,5,3,0,0,9486,1269,1,0,0,0,9487,9488,7,53,0,0,
9488,1271,1,0,0,0,9489,9492,5,29,0,0,9490,9492,3,1274,637,0,9491,9489,1,
0,0,0,9491,9490,1,0,0,0,9492,1273,1,0,0,0,9493,9494,7,54,0,0,9494,1275,1,
0,0,0,9495,9502,5,29,0,0,9496,9497,5,271,0,0,9497,9498,5,2,0,0,9498,9499,
3,684,342,0,9499,9500,5,3,0,0,9500,9502,1,0,0,0,9501,9495,1,0,0,0,9501,9496,
1,0,0,0,9502,1277,1,0,0,0,9503,9510,3,1272,636,0,9504,9505,5,271,0,0,9505,
9506,5,2,0,0,9506,9507,3,684,342,0,9507,9508,5,3,0,0,9508,9510,1,0,0,0,9509,
9503,1,0,0,0,9509,9504,1,0,0,0,9510,1279,1,0,0,0,9511,9524,3,1272,636,0,
9512,9513,5,271,0,0,9513,9514,5,2,0,0,9514,9515,3,684,342,0,9515,9516,5,
3,0,0,9516,9524,1,0,0,0,9517,9524,5,120,0,0,9518,9519,5,77,0,0,9519,9524,
5,120,0,0,9520,9524,5,114,0,0,9521,9522,5,77,0,0,9522,9524,5,114,0,0,9523,
9511,1,0,0,0,9523,9512,1,0,0,0,9523,9517,1,0,0,0,9523,9518,1,0,0,0,9523,
9520,1,0,0,0,9523,9521,1,0,0,0,9524,1281,1,0,0,0,9525,9530,3,1164,582,0,
9526,9527,5,6,0,0,9527,9529,3,1164,582,0,9528,9526,1,0,0,0,9529,9532,1,0,
0,0,9530,9528,1,0,0,0,9530,9531,1,0,0,0,9531,1283,1,0,0,0,9532,9530,1,0,
0,0,9533,9538,3,1286,643,0,9534,9535,5,6,0,0,9535,9537,3,1286,643,0,9536,
9534,1,0,0,0,9537,9540,1,0,0,0,9538,9536,1,0,0,0,9538,9539,1,0,0,0,9539,
1285,1,0,0,0,9540,9538,1,0,0,0,9541,9547,3,1164,582,0,9542,9543,3,636,318,
0,9543,9544,7,55,0,0,9544,9545,3,1164,582,0,9545,9547,1,0,0,0,9546,9541,
1,0,0,0,9546,9542,1,0,0,0,9547,1287,1,0,0,0,9548,9553,3,1120,560,0,9549,
9550,5,6,0,0,9550,9552,3,1120,560,0,9551,9549,1,0,0,0,9552,9555,1,0,0,0,
9553,9551,1,0,0,0,9553,9554,1,0,0,0,9554,1289,1,0,0,0,9555,9553,1,0,0,0,
9556,9559,5,4,0,0,9557,9560,3,1282,641,0,9558,9560,3,1292,646,0,9559,9557,
1,0,0,0,9559,9558,1,0,0,0,9559,9560,1,0,0,0,9560,9561,1,0,0,0,9561,9562,
5,5,0,0,9562,1291,1,0,0,0,9563,9568,3,1290,645,0,9564,9565,5,6,0,0,9565,
9567,3,1290,645,0,9566,9564,1,0,0,0,9567,9570,1,0,0,0,9568,9566,1,0,0,0,
9568,9569,1,0,0,0,9569,1293,1,0,0,0,9570,9568,1,0,0,0,9571,9572,3,1296,648,
0,9572,9573,5,64,0,0,9573,9574,3,1164,582,0,9574,9577,1,0,0,0,9575,9577,
1,0,0,0,9576,9571,1,0,0,0,9576,9575,1,0,0,0,9577,1295,1,0,0,0,9578,9587,
3,1384,692,0,9579,9587,5,377,0,0,9580,9587,5,257,0,0,9581,9587,5,176,0,0,
9582,9587,5,218,0,0,9583,9587,5,254,0,0,9584,9587,5,319,0,0,9585,9587,3,
1360,680,0,9586,9578,1,0,0,0,9586,9579,1,0,0,0,9586,9580,1,0,0,0,9586,9581,
1,0,0,0,9586,9582,1,0,0,0,9586,9583,1,0,0,0,9586,9584,1,0,0,0,9586,9585,
1,0,0,0,9587,1297,1,0,0,0,9588,9589,7,56,0,0,9589,1299,1,0,0,0,9590,9591,
3,1164,582,0,9591,9592,5,84,0,0,9592,9593,3,1164,582,0,9593,9594,5,64,0,
0,9594,9597,3,1164,582,0,9595,9596,5,62,0,0,9596,9598,3,1164,582,0,9597,
9595,1,0,0,0,9597,9598,1,0,0,0,9598,1301,1,0,0,0,9599,9600,3,1206,603,0,
9600,9601,5,68,0,0,9601,9602,3,1206,603,0,9602,9605,1,0,0,0,9603,9605,1,
0,0,0,9604,9599,1,0,0,0,9604,9603,1,0,0,0,9605,1303,1,0,0,0,9606,9607,3,
1164,582,0,9607,9608,5,64,0,0,9608,9609,3,1164,582,0,9609,9610,5,62,0,0,
9610,9611,3,1164,582,0,9611,9635,1,0,0,0,9612,9613,3,1164,582,0,9613,9614,
5,62,0,0,9614,9615,3,1164,582,0,9615,9616,5,64,0,0,9616,9617,3,1164,582,
0,9617,9635,1,0,0,0,9618,9619,3,1164,582,0,9619,9620,5,64,0,0,9620,9621,
3,1164,582,0,9621,9635,1,0,0,0,9622,9623,3,1164,582,0,9623,9624,5,62,0,0,
9624,9625,3,1164,582,0,9625,9635,1,0,0,0,9626,9627,3,1164,582,0,9627,9628,
5,127,0,0,9628,9629,3,1164,582,0,9629,9630,5,197,0,0,9630,9631,3,1164,582,
0,9631,9635,1,0,0,0,9632,9635,3,1282,641,0,9633,9635,1,0,0,0,9634,9606,1,
0,0,0,9634,9612,1,0,0,0,9634,9618,1,0,0,0,9634,9622,1,0,0,0,9634,9626,1,
0,0,0,9634,9632,1,0,0,0,9634,9633,1,0,0,0,9635,1305,1,0,0,0,9636,9637,3,
1164,582,0,9637,9638,5,64,0,0,9638,9639,3,1282,641,0,9639,9644,1,0,0,0,9640,
9641,5,64,0,0,9641,9644,3,1282,641,0,9642,9644,3,1282,641,0,9643,9636,1,
0,0,0,9643,9640,1,0,0,0,9643,9642,1,0,0,0,9644,1307,1,0,0,0,9645,9651,3,
962,481,0,9646,9647,5,2,0,0,9647,9648,3,1282,641,0,9648,9649,5,3,0,0,9649,
9651,1,0,0,0,9650,9645,1,0,0,0,9650,9646,1,0,0,0,9651,1309,1,0,0,0,9652,
9653,5,40,0,0,9653,9654,3,1318,659,0,9654,9655,3,1312,656,0,9655,9656,3,
1316,658,0,9656,9657,5,454,0,0,9657,1311,1,0,0,0,9658,9660,3,1314,657,0,
9659,9658,1,0,0,0,9660,9661,1,0,0,0,9661,9659,1,0,0,0,9661,9662,1,0,0,0,
9662,1313,1,0,0,0,9663,9664,5,102,0,0,9664,9665,3,1164,582,0,9665,9666,5,
93,0,0,9666,9667,3,1164,582,0,9667,1315,1,0,0,0,9668,9669,5,58,0,0,9669,
9672,3,1164,582,0,9670,9672,1,0,0,0,9671,9668,1,0,0,0,9671,9670,1,0,0,0,
9672,1317,1,0,0,0,9673,9676,3,1164,582,0,9674,9676,1,0,0,0,9675,9673,1,0,
0,0,9675,9674,1,0,0,0,9676,1319,1,0,0,0,9677,9679,3,1374,687,0,9678,9680,
3,1326,663,0,9679,9678,1,0,0,0,9679,9680,1,0,0,0,9680,1321,1,0,0,0,9681,
9684,5,11,0,0,9682,9685,3,1344,672,0,9683,9685,5,9,0,0,9684,9682,1,0,0,0,
9684,9683,1,0,0,0,9685,9697,1,0,0,0,9686,9692,5,4,0,0,9687,9693,3,1164,582,
0,9688,9689,3,1324,662,0,9689,9690,5,8,0,0,9690,9691,3,1324,662,0,9691,9693,
1,0,0,0,9692,9687,1,0,0,0,9692,9688,1,0,0,0,9693,9694,1,0,0,0,9694,9695,
5,5,0,0,9695,9697,1,0,0,0,9696,9681,1,0,0,0,9696,9686,1,0,0,0,9697,1323,
1,0,0,0,9698,9701,3,1164,582,0,9699,9701,1,0,0,0,9700,9698,1,0,0,0,9700,
9699,1,0,0,0,9701,1325,1,0,0,0,9702,9704,3,1322,661,0,9703,9702,1,0,0,0,
9704,9705,1,0,0,0,9705,9703,1,0,0,0,9705,9706,1,0,0,0,9706,1327,1,0,0,0,
9707,9709,3,1322,661,0,9708,9707,1,0,0,0,9709,9712,1,0,0,0,9710,9708,1,0,
0,0,9710,9711,1,0,0,0,9711,1329,1,0,0,0,9712,9710,1,0,0,0,9713,9716,3,1332,
666,0,9714,9716,1,0,0,0,9715,9713,1,0,0,0,9715,9714,1,0,0,0,9716,1331,1,
0,0,0,9717,9722,3,1334,667,0,9718,9719,5,6,0,0,9719,9721,3,1334,667,0,9720,
9718,1,0,0,0,9721,9724,1,0,0,0,9722,9720,1,0,0,0,9722,9723,1,0,0,0,9723,
1333,1,0,0,0,9724,9722,1,0,0,0,9725,9730,3,1164,582,0,9726,9727,5,36,0,0,
9727,9731,3,1382,691,0,9728,9731,3,1384,692,0,9729,9731,1,0,0,0,9730,9726,
1,0,0,0,9730,9728,1,0,0,0,9730,9729,1,0,0,0,9731,9734,1,0,0,0,9732,9734,
5,9,0,0,9733,9725,1,0,0,0,9733,9732,1,0,0,0,9734,1335,1,0,0,0,9735,9740,
3,1338,669,0,9736,9737,5,6,0,0,9737,9739,3,1338,669,0,9738,9736,1,0,0,0,
9739,9742,1,0,0,0,9740,9738,1,0,0,0,9740,9741,1,0,0,0,9741,1337,1,0,0,0,
9742,9740,1,0,0,0,9743,9745,3,1374,687,0,9744,9746,3,1326,663,0,9745,9744,
1,0,0,0,9745,9746,1,0,0,0,9746,1339,1,0,0,0,9747,9752,3,1342,671,0,9748,
9749,5,6,0,0,9749,9751,3,1342,671,0,9750,9748,1,0,0,0,9751,9754,1,0,0,0,
9752,9750,1,0,0,0,9752,9753,1,0,0,0,9753,1341,1,0,0,0,9754,9752,1,0,0,0,
9755,9756,3,1374,687,0,9756,1343,1,0,0,0,9757,9758,3,1382,691,0,9758,1345,
1,0,0,0,9759,9760,3,1360,680,0,9760,1347,1,0,0,0,9761,9769,3,1396,698,0,
9762,9769,3,1378,689,0,9763,9764,3,1374,687,0,9764,9765,3,1326,663,0,9765,
9769,1,0,0,0,9766,9769,5,119,0,0,9767,9769,5,126,0,0,9768,9761,1,0,0,0,9768,
9762,1,0,0,0,9768,9763,1,0,0,0,9768,9766,1,0,0,0,9768,9767,1,0,0,0,9769,
1349,1,0,0,0,9770,9803,3,1358,679,0,9771,9803,3,1356,678,0,9772,9803,3,1360,
680,0,9773,9803,3,1354,677,0,9774,9803,3,1352,676,0,9775,9783,3,1348,674,
0,9776,9784,3,1360,680,0,9777,9778,5,2,0,0,9778,9779,3,1284,642,0,9779,9780,
3,998,499,0,9780,9781,5,3,0,0,9781,9782,3,1360,680,0,9782,9784,1,0,0,0,9783,
9776,1,0,0,0,9783,9777,1,0,0,0,9784,9803,1,0,0,0,9785,9786,3,1126,563,0,
9786,9787,3,1360,680,0,9787,9803,1,0,0,0,9788,9797,3,1154,577,0,9789,9790,
3,1360,680,0,9790,9791,3,1158,579,0,9791,9798,1,0,0,0,9792,9793,5,2,0,0,
9793,9794,3,1358,679,0,9794,9795,5,3,0,0,9795,9796,3,1360,680,0,9796,9798,
1,0,0,0,9797,9789,1,0,0,0,9797,9792,1,0,0,0,9798,9803,1,0,0,0,9799,9803,
5,96,0,0,9800,9803,5,60,0,0,9801,9803,5,78,0,0,9802,9770,1,0,0,0,9802,9771,
1,0,0,0,9802,9772,1,0,0,0,9802,9773,1,0,0,0,9802,9774,1,0,0,0,9802,9775,
1,0,0,0,9802,9785,1,0,0,0,9802,9788,1,0,0,0,9802,9799,1,0,0,0,9802,9800,
1,0,0,0,9802,9801,1,0,0,0,9803,1351,1,0,0,0,9804,9805,5,654,0,0,9805,1353,
1,0,0,0,9806,9807,5,650,0,0,9807,1355,1,0,0,0,9808,9809,5,660,0,0,9809,1357,
1,0,0,0,9810,9811,5,658,0,0,9811,1359,1,0,0,0,9812,9813,3,1362,681,0,9813,
9814,3,1364,682,0,9814,1361,1,0,0,0,9815,9827,5,645,0,0,9816,9827,5,647,
0,0,9817,9821,5,649,0,0,9818,9820,5,677,0,0,9819,9818,1,0,0,0,9820,9823,
1,0,0,0,9821,9819,1,0,0,0,9821,9822,1,0,0,0,9822,9824,1,0,0,0,9823,9821,
1,0,0,0,9824,9827,5,678,0,0,9825,9827,5,671,0,0,9826,9815,1,0,0,0,9826,9816,
1,0,0,0,9826,9817,1,0,0,0,9826,9825,1,0,0,0,9827,1363,1,0,0,0,9828,9829,
5,487,0,0,9829,9832,3,1362,681,0,9830,9832,1,0,0,0,9831,9828,1,0,0,0,9831,
9830,1,0,0,0,9832,1365,1,0,0,0,9833,9839,3,1358,679,0,9834,9835,5,12,0,0,
9835,9839,3,1358,679,0,9836,9837,5,13,0,0,9837,9839,3,1358,679,0,9838,9833,
1,0,0,0,9838,9834,1,0,0,0,9838,9836,1,0,0,0,9839,1367,1,0,0,0,9840,9841,
3,1370,685,0,9841,1369,1,0,0,0,9842,9846,3,1380,690,0,9843,9846,5,52,0,0,
9844,9846,5,89,0,0,9845,9842,1,0,0,0,9845,9843,1,0,0,0,9845,9844,1,0,0,0,
9846,1371,1,0,0,0,9847,9852,3,1370,685,0,9848,9849,5,6,0,0,9849,9851,3,1370,
685,0,9850,9848,1,0,0,0,9851,9854,1,0,0,0,9852,9850,1,0,0,0,9852,9853,1,
0,0,0,9853,1373,1,0,0,0,9854,9852,1,0,0,0,9855,9862,3,1384,692,0,9856,9862,
3,1388,694,0,9857,9862,3,1390,695,0,9858,9862,3,1610,805,0,9859,9862,5,119,
0,0,9860,9862,5,126,0,0,9861,9855,1,0,0,0,9861,9856,1,0,0,0,9861,9857,1,
0,0,0,9861,9858,1,0,0,0,9861,9859,1,0,0,0,9861,9860,1,0,0,0,9862,1375,1,
0,0,0,9863,9868,3,1384,692,0,9864,9868,3,1388,694,0,9865,9868,3,1390,695,
0,9866,9868,3,1610,805,0,9867,9863,1,0,0,0,9867,9864,1,0,0,0,9867,9865,1,
0,0,0,9867,9866,1,0,0,0,9868,1377,1,0,0,0,9869,9874,3,1384,692,0,9870,9874,
3,1388,694,0,9871,9874,3,1610,805,0,9872,9874,3,1392,696,0,9873,9869,1,0,
0,0,9873,9870,1,0,0,0,9873,9871,1,0,0,0,9873,9872,1,0,0,0,9874,1379,1,0,
0,0,9875,9880,3,1384,692,0,9876,9880,3,1388,694,0,9877,9880,3,1390,695,0,
9878,9880,3,1392,696,0,9879,9875,1,0,0,0,9879,9876,1,0,0,0,9879,9877,1,0,
0,0,9879,9878,1,0,0,0,9880,1381,1,0,0,0,9881,9888,3,1384,692,0,9882,9888,
3,1610,805,0,9883,9888,3,1388,694,0,9884,9888,3,1390,695,0,9885,9888,3,1392,
696,0,9886,9888,3,1394,697,0,9887,9881,1,0,0,0,9887,9882,1,0,0,0,9887,9883,
1,0,0,0,9887,9884,1,0,0,0,9887,9885,1,0,0,0,9887,9886,1,0,0,0,9888,1383,
1,0,0,0,9889,9890,5,636,0,0,9890,9897,3,1364,682,0,9891,9897,5,637,0,0,9892,
9897,5,641,0,0,9893,9897,3,1210,605,0,9894,9897,3,1386,693,0,9895,9897,3,
1610,805,0,9896,9889,1,0,0,0,9896,9891,1,0,0,0,9896,9892,1,0,0,0,9896,9893,
1,0,0,0,9896,9894,1,0,0,0,9896,9895,1,0,0,0,9897,1385,1,0,0,0,9898,9899,
5,662,0,0,9899,1387,1,0,0,0,9900,9901,7,57,0,0,9901,1389,1,0,0,0,9902,9955,
5,380,0,0,9903,9955,5,381,0,0,9904,9955,3,1136,568,0,9905,9955,5,383,0,0,
9906,9955,5,384,0,0,9907,9955,3,1144,572,0,9908,9955,5,386,0,0,9909,9955,
5,387,0,0,9910,9955,5,388,0,0,9911,9955,5,389,0,0,9912,9955,5,390,0,0,9913,
9955,5,391,0,0,9914,9955,5,392,0,0,9915,9955,5,470,0,0,9916,9955,5,393,0,
0,9917,9955,5,394,0,0,9918,9955,5,395,0,0,9919,9955,5,396,0,0,9920,9955,
5,397,0,0,9921,9955,5,398,0,0,9922,9955,5,399,0,0,9923,9955,5,400,0,0,9924,
9955,5,489,0,0,9925,9955,5,401,0,0,9926,9955,3,1132,566,0,9927,9955,5,453,
0,0,9928,9955,5,403,0,0,9929,9955,5,404,0,0,9930,9955,5,405,0,0,9931,9955,
5,406,0,0,9932,9955,5,407,0,0,9933,9955,5,408,0,0,9934,9955,5,409,0,0,9935,
9955,5,410,0,0,9936,9955,5,411,0,0,9937,9955,5,412,0,0,9938,9955,5,413,0,
0,9939,9955,5,414,0,0,9940,9955,5,415,0,0,9941,9955,5,416,0,0,9942,9955,
5,417,0,0,9943,9955,5,425,0,0,9944,9955,5,426,0,0,9945,9955,5,427,0,0,9946,
9955,5,428,0,0,9947,9955,5,476,0,0,9948,9955,5,429,0,0,9949,9955,5,430,0,
0,9950,9955,5,431,0,0,9951,9955,5,432,0,0,9952,9955,5,474,0,0,9953,9955,
3,1396,698,0,9954,9902,1,0,0,0,9954,9903,1,0,0,0,9954,9904,1,0,0,0,9954,
9905,1,0,0,0,9954,9906,1,0,0,0,9954,9907,1,0,0,0,9954,9908,1,0,0,0,9954,
9909,1,0,0,0,9954,9910,1,0,0,0,9954,9911,1,0,0,0,9954,9912,1,0,0,0,9954,
9913,1,0,0,0,9954,9914,1,0,0,0,9954,9915,1,0,0,0,9954,9916,1,0,0,0,9954,
9917,1,0,0,0,9954,9918,1,0,0,0,9954,9919,1,0,0,0,9954,9920,1,0,0,0,9954,
9921,1,0,0,0,9954,9922,1,0,0,0,9954,9923,1,0,0,0,9954,9924,1,0,0,0,9954,
9925,1,0,0,0,9954,9926,1,0,0,0,9954,9927,1,0,0,0,9954,9928,1,0,0,0,9954,
9929,1,0,0,0,9954,9930,1,0,0,0,9954,9931,1,0,0,0,9954,9932,1,0,0,0,9954,
9933,1,0,0,0,9954,9934,1,0,0,0,9954,9935,1,0,0,0,9954,9936,1,0,0,0,9954,
9937,1,0,0,0,9954,9938,1,0,0,0,9954,9939,1,0,0,0,9954,9940,1,0,0,0,9954,
9941,1,0,0,0,9954,9942,1,0,0,0,9954,9943,1,0,0,0,9954,9944,1,0,0,0,9954,
9945,1,0,0,0,9954,9946,1,0,0,0,9954,9947,1,0,0,0,9954,9948,1,0,0,0,9954,
9949,1,0,0,0,9954,9950,1,0,0,0,9954,9951,1,0,0,0,9954,9952,1,0,0,0,9954,
9953,1,0,0,0,9955,1391,1,0,0,0,9956,9957,7,58,0,0,9957,1393,1,0,0,0,9958,
9959,7,59,0,0,9959,1395,1,0,0,0,9960,9961,7,60,0,0,9961,1397,1,0,0,0,9962,
9963,3,1400,700,0,9963,9964,3,1410,705,0,9964,9965,3,1408,704,0,9965,1399,
1,0,0,0,9966,9968,3,1402,701,0,9967,9966,1,0,0,0,9968,9971,1,0,0,0,9969,
9967,1,0,0,0,9969,9970,1,0,0,0,9970,1401,1,0,0,0,9971,9969,1,0,0,0,9972,
9973,3,1404,702,0,9973,9974,5,272,0,0,9974,9975,5,490,0,0,9975,9993,1,0,
0,0,9976,9977,3,1404,702,0,9977,9978,5,491,0,0,9978,9979,3,1406,703,0,9979,
9993,1,0,0,0,9980,9981,3,1404,702,0,9981,9982,5,492,0,0,9982,9983,5,493,
0,0,9983,9993,1,0,0,0,9984,9985,3,1404,702,0,9985,9986,5,492,0,0,9986,9987,
5,494,0,0,9987,9993,1,0,0,0,9988,9989,3,1404,702,0,9989,9990,5,492,0,0,9990,
9991,5,495,0,0,9991,9993,1,0,0,0,9992,9972,1,0,0,0,9992,9976,1,0,0,0,9992,
9980,1,0,0,0,9992,9984,1,0,0,0,9992,9988,1,0,0,0,9993,1403,1,0,0,0,9994,
9995,5,29,0,0,9995,1405,1,0,0,0,9996,10001,3,1360,680,0,9997,10001,3,1394,
697,0,9998,10001,3,1610,805,0,9999,10001,3,1388,694,0,10000,9996,1,0,0,0,
10000,9997,1,0,0,0,10000,9998,1,0,0,0,10000,9999,1,0,0,0,10001,1407,1,0,
0,0,10002,10005,1,0,0,0,10003,10005,5,7,0,0,10004,10002,1,0,0,0,10004,10003,
1,0,0,0,10005,1409,1,0,0,0,10006,10007,3,1412,706,0,10007,10008,5,146,0,
0,10008,10009,3,1454,727,0,10009,10010,3,1590,795,0,10010,10011,5,454,0,
0,10011,10012,3,1604,802,0,10012,1411,1,0,0,0,10013,10018,3,1600,800,0,10014,
10016,3,1414,707,0,10015,10017,3,1416,708,0,10016,10015,1,0,0,0,10016,10017,
1,0,0,0,10017,10019,1,0,0,0,10018,10014,1,0,0,0,10018,10019,1,0,0,0,10019,
1413,1,0,0,0,10020,10021,5,178,0,0,10021,1415,1,0,0,0,10022,10024,3,1420,
710,0,10023,10022,1,0,0,0,10024,10025,1,0,0,0,10025,10023,1,0,0,0,10025,
10026,1,0,0,0,10026,1417,1,0,0,0,10027,10028,5,18,0,0,10028,10029,3,1608,
804,0,10029,10030,5,19,0,0,10030,1419,1,0,0,0,10031,10035,3,1422,711,0,10032,
10035,5,178,0,0,10033,10035,3,1418,709,0,10034,10031,1,0,0,0,10034,10032,
1,0,0,0,10034,10033,1,0,0,0,10035,1421,1,0,0,0,10036,10052,3,1438,719,0,
10037,10038,5,496,0,0,10038,10039,5,62,0,0,10039,10053,3,1436,718,0,10040,
10041,3,1440,720,0,10041,10042,3,1442,721,0,10042,10043,3,1444,722,0,10043,
10044,3,1446,723,0,10044,10045,3,1448,724,0,10045,10053,1,0,0,0,10046,10047,
3,1424,712,0,10047,10048,5,172,0,0,10048,10049,3,1428,714,0,10049,10050,
3,1434,717,0,10050,10051,3,1426,713,0,10051,10053,1,0,0,0,10052,10037,1,
0,0,0,10052,10040,1,0,0,0,10052,10046,1,0,0,0,10053,10054,1,0,0,0,10054,
10055,5,7,0,0,10055,1423,1,0,0,0,10056,10061,1,0,0,0,10057,10058,5,262,0,
0,10058,10061,5,317,0,0,10059,10061,5,317,0,0,10060,10056,1,0,0,0,10060,
10057,1,0,0,0,10060,10059,1,0,0,0,10061,1425,1,0,0,0,10062,10063,3,960,480,
0,10063,1427,1,0,0,0,10064,10070,1,0,0,0,10065,10066,5,2,0,0,10066,10067,
3,1430,715,0,10067,10068,5,3,0,0,10068,10070,1,0,0,0,10069,10064,1,0,0,0,
10069,10065,1,0,0,0,10070,1429,1,0,0,0,10071,10076,3,1432,716,0,10072,10073,
5,6,0,0,10073,10075,3,1432,716,0,10074,10072,1,0,0,0,10075,10078,1,0,0,0,
10076,10074,1,0,0,0,10076,10077,1,0,0,0,10077,1431,1,0,0,0,10078,10076,1,
0,0,0,10079,10080,3,1438,719,0,10080,10081,3,1442,721,0,10081,1433,1,0,0,
0,10082,10083,7,61,0,0,10083,1435,1,0,0,0,10084,10087,5,28,0,0,10085,10087,
3,1374,687,0,10086,10084,1,0,0,0,10086,10085,1,0,0,0,10087,1437,1,0,0,0,
10088,10089,3,1608,804,0,10089,1439,1,0,0,0,10090,10093,1,0,0,0,10091,10093,
5,497,0,0,10092,10090,1,0,0,0,10092,10091,1,0,0,0,10093,1441,1,0,0,0,10094,
10095,3,1120,560,0,10095,1443,1,0,0,0,10096,10100,1,0,0,0,10097,10098,5,
43,0,0,10098,10100,3,524,262,0,10099,10096,1,0,0,0,10099,10097,1,0,0,0,10100,
1445,1,0,0,0,10101,10105,1,0,0,0,10102,10103,5,77,0,0,10103,10105,5,78,0,
0,10104,10101,1,0,0,0,10104,10102,1,0,0,0,10105,1447,1,0,0,0,10106,10111,
1,0,0,0,10107,10108,3,1450,725,0,10108,10109,3,1612,806,0,10109,10111,1,
0,0,0,10110,10106,1,0,0,0,10110,10107,1,0,0,0,10111,1449,1,0,0,0,10112,10115,
3,1452,726,0,10113,10115,5,53,0,0,10114,10112,1,0,0,0,10114,10113,1,0,0,
0,10115,1451,1,0,0,0,10116,10117,7,62,0,0,10117,1453,1,0,0,0,10118,10120,
3,1456,728,0,10119,10118,1,0,0,0,10120,10123,1,0,0,0,10121,10119,1,0,0,0,
10121,10122,1,0,0,0,10122,1455,1,0,0,0,10123,10121,1,0,0,0,10124,10125,3,
1410,705,0,10125,10126,5,7,0,0,10126,10152,1,0,0,0,10127,10152,3,1522,761,
0,10128,10152,3,1526,763,0,10129,10152,3,1464,732,0,10130,10152,3,1480,740,
0,10131,10152,3,1486,743,0,10132,10152,3,1496,748,0,10133,10152,3,1498,749,
0,10134,10152,3,1500,750,0,10135,10152,3,1514,757,0,10136,10152,3,1518,759,
0,10137,10152,3,1538,769,0,10138,10152,3,1544,772,0,10139,10152,3,1546,773,
0,10140,10152,3,1458,729,0,10141,10152,3,1460,730,0,10142,10152,3,1466,733,
0,10143,10152,3,1554,777,0,10144,10152,3,1566,783,0,10145,10152,3,1574,787,
0,10146,10152,3,1576,788,0,10147,10152,3,1578,789,0,10148,10152,3,1580,790,
0,10149,10152,3,1582,791,0,10150,10152,3,1586,793,0,10151,10124,1,0,0,0,
10151,10127,1,0,0,0,10151,10128,1,0,0,0,10151,10129,1,0,0,0,10151,10130,
1,0,0,0,10151,10131,1,0,0,0,10151,10132,1,0,0,0,10151,10133,1,0,0,0,10151,
10134,1,0,0,0,10151,10135,1,0,0,0,10151,10136,1,0,0,0,10151,10137,1,0,0,
0,10151,10138,1,0,0,0,10151,10139,1,0,0,0,10151,10140,1,0,0,0,10151,10141,
1,0,0,0,10151,10142,1,0,0,0,10151,10143,1,0,0,0,10151,10144,1,0,0,0,10151,
10145,1,0,0,0,10151,10146,1,0,0,0,10151,10147,1,0,0,0,10151,10148,1,0,0,
0,10151,10149,1,0,0,0,10151,10150,1,0,0,0,10152,1457,1,0,0,0,10153,10154,
5,498,0,0,10154,10155,3,1616,808,0,10155,10156,5,7,0,0,10156,1459,1,0,0,
0,10157,10158,5,433,0,0,10158,10159,3,1608,804,0,10159,10160,5,2,0,0,10160,
10161,3,1462,731,0,10161,10162,5,3,0,0,10162,10163,5,7,0,0,10163,10172,1,
0,0,0,10164,10165,5,57,0,0,10165,10166,3,1608,804,0,10166,10167,5,2,0,0,
10167,10168,3,1462,731,0,10168,10169,5,3,0,0,10169,10170,5,7,0,0,10170,10172,
1,0,0,0,10171,10157,1,0,0,0,10171,10164,1,0,0,0,10172,1461,1,0,0,0,10173,
10176,1,0,0,0,10174,10176,3,1282,641,0,10175,10173,1,0,0,0,10175,10174,1,
0,0,0,10176,1463,1,0,0,0,10177,10178,3,1478,739,0,10178,10179,3,1452,726,
0,10179,10180,3,1612,806,0,10180,10181,5,7,0,0,10181,1465,1,0,0,0,10182,
10183,5,499,0,0,10183,10184,3,1468,734,0,10184,10185,5,500,0,0,10185,10186,
3,1470,735,0,10186,10187,5,7,0,0,10187,1467,1,0,0,0,10188,10192,1,0,0,0,
10189,10192,5,434,0,0,10190,10192,5,501,0,0,10191,10188,1,0,0,0,10191,10189,
1,0,0,0,10191,10190,1,0,0,0,10192,1469,1,0,0,0,10193,10198,3,1472,736,0,
10194,10195,5,6,0,0,10195,10197,3,1472,736,0,10196,10194,1,0,0,0,10197,10200,
1,0,0,0,10198,10196,1,0,0,0,10198,10199,1,0,0,0,10199,1471,1,0,0,0,10200,
10198,1,0,0,0,10201,10202,3,1476,738,0,10202,10203,3,1452,726,0,10203,10204,
3,1474,737,0,10204,1473,1,0,0,0,10205,10206,3,1374,687,0,10206,1475,1,0,
0,0,10207,10208,3,1478,739,0,10208,1477,1,0,0,0,10209,10212,3,524,262,0,
10210,10212,5,28,0,0,10211,10209,1,0,0,0,10211,10210,1,0,0,0,10212,10219,
1,0,0,0,10213,10214,5,4,0,0,10214,10215,3,1618,809,0,10215,10216,5,5,0,0,
10216,10218,1,0,0,0,10217,10213,1,0,0,0,10218,10221,1,0,0,0,10219,10217,
1,0,0,0,10219,10220,1,0,0,0,10220,1479,1,0,0,0,10221,10219,1,0,0,0,10222,
10223,5,220,0,0,10223,10224,3,1614,807,0,10224,10225,5,93,0,0,10225,10226,
3,1454,727,0,10226,10227,3,1482,741,0,10227,10228,3,1484,742,0,10228,10229,
5,454,0,0,10229,10230,5,220,0,0,10230,10231,5,7,0,0,10231,1481,1,0,0,0,10232,
10233,5,502,0,0,10233,10234,3,1164,582,0,10234,10235,5,93,0,0,10235,10236,
3,1454,727,0,10236,10238,1,0,0,0,10237,10232,1,0,0,0,10238,10241,1,0,0,0,
10239,10237,1,0,0,0,10239,10240,1,0,0,0,10240,1483,1,0,0,0,10241,10239,1,
0,0,0,10242,10246,1,0,0,0,10243,10244,5,58,0,0,10244,10246,3,1454,727,0,
10245,10242,1,0,0,0,10245,10243,1,0,0,0,10246,1485,1,0,0,0,10247,10248,5,
40,0,0,10248,10249,3,1488,744,0,10249,10250,3,1490,745,0,10250,10251,3,1494,
747,0,10251,10252,5,454,0,0,10252,10253,5,40,0,0,10253,10254,5,7,0,0,10254,
1487,1,0,0,0,10255,10258,1,0,0,0,10256,10258,3,1612,806,0,10257,10255,1,
0,0,0,10257,10256,1,0,0,0,10258,1489,1,0,0,0,10259,10261,3,1492,746,0,10260,
10259,1,0,0,0,10261,10262,1,0,0,0,10262,10260,1,0,0,0,10262,10263,1,0,0,
0,10263,1491,1,0,0,0,10264,10265,5,102,0,0,10265,10266,3,1282,641,0,10266,
10267,5,93,0,0,10267,10268,3,1454,727,0,10268,1493,1,0,0,0,10269,10273,1,
0,0,0,10270,10271,5,58,0,0,10271,10273,3,1454,727,0,10272,10269,1,0,0,0,
10272,10270,1,0,0,0,10273,1495,1,0,0,0,10274,10275,3,1602,801,0,10275,10276,
3,1542,771,0,10276,1497,1,0,0,0,10277,10278,3,1602,801,0,10278,10279,5,503,
0,0,10279,10280,3,1620,810,0,10280,10281,3,1542,771,0,10281,1499,1,0,0,0,
10282,10283,3,1602,801,0,10283,10284,5,62,0,0,10284,10285,3,1502,751,0,10285,
10286,3,1542,771,0,10286,1501,1,0,0,0,10287,10288,3,1512,756,0,10288,10304,
5,68,0,0,10289,10290,3,954,477,0,10290,10291,3,1506,753,0,10291,10305,1,
0,0,0,10292,10305,3,960,480,0,10293,10305,3,878,439,0,10294,10295,5,202,
0,0,10295,10296,3,1164,582,0,10296,10297,3,1504,752,0,10297,10305,1,0,0,
0,10298,10299,3,1508,754,0,10299,10300,3,1164,582,0,10300,10301,5,24,0,0,
10301,10302,3,1164,582,0,10302,10303,3,1510,755,0,10303,10305,1,0,0,0,10304,
10289,1,0,0,0,10304,10292,1,0,0,0,10304,10293,1,0,0,0,10304,10294,1,0,0,
0,10304,10298,1,0,0,0,10305,1503,1,0,0,0,10306,10310,1,0,0,0,10307,10308,
5,100,0,0,10308,10310,3,1282,641,0,10309,10306,1,0,0,0,10309,10307,1,0,0,
0,10310,1505,1,0,0,0,10311,10324,1,0,0,0,10312,10313,5,2,0,0,10313,10318,
3,1164,582,0,10314,10315,5,6,0,0,10315,10317,3,1164,582,0,10316,10314,1,
0,0,0,10317,10320,1,0,0,0,10318,10316,1,0,0,0,10318,10319,1,0,0,0,10319,
10321,1,0,0,0,10320,10318,1,0,0,0,10321,10322,5,3,0,0,10322,10324,1,0,0,
0,10323,10311,1,0,0,0,10323,10312,1,0,0,0,10324,1507,1,0,0,0,10325,10328,
1,0,0,0,10326,10328,5,504,0,0,10327,10325,1,0,0,0,10327,10326,1,0,0,0,10328,
1509,1,0,0,0,10329,10333,1,0,0,0,10330,10331,5,147,0,0,10331,10333,3,1164,
582,0,10332,10329,1,0,0,0,10332,10330,1,0,0,0,10333,1511,1,0,0,0,10334,10335,
3,522,261,0,10335,1513,1,0,0,0,10336,10337,3,1602,801,0,10337,10338,5,505,
0,0,10338,10339,3,1512,756,0,10339,10340,3,1516,758,0,10340,10341,5,68,0,
0,10341,10342,5,35,0,0,10342,10343,3,1164,582,0,10343,10344,3,1542,771,0,
10344,1515,1,0,0,0,10345,10349,1,0,0,0,10346,10347,5,506,0,0,10347,10349,
3,1358,679,0,10348,10345,1,0,0,0,10348,10346,1,0,0,0,10349,1517,1,0,0,0,
10350,10351,3,1520,760,0,10351,10352,3,1604,802,0,10352,10353,3,1606,803,
0,10353,10354,5,7,0,0,10354,1519,1,0,0,0,10355,10356,7,63,0,0,10356,1521,
1,0,0,0,10357,10369,5,508,0,0,10358,10359,5,261,0,0,10359,10370,3,1612,806,
0,10360,10366,5,509,0,0,10361,10362,5,202,0,0,10362,10363,3,1164,582,0,10363,
10364,3,1504,752,0,10364,10367,1,0,0,0,10365,10367,3,960,480,0,10366,10361,
1,0,0,0,10366,10365,1,0,0,0,10367,10370,1,0,0,0,10368,10370,3,1524,762,0,
10369,10358,1,0,0,0,10369,10360,1,0,0,0,10369,10368,1,0,0,0,10370,10371,
1,0,0,0,10371,10372,5,7,0,0,10372,1523,1,0,0,0,10373,10376,1,0,0,0,10374,
10376,3,1612,806,0,10375,10373,1,0,0,0,10375,10374,1,0,0,0,10376,1525,1,
0,0,0,10377,10378,5,510,0,0,10378,10379,3,1528,764,0,10379,10380,3,1360,
680,0,10380,10381,3,1530,765,0,10381,10382,3,1532,766,0,10382,10383,5,7,
0,0,10383,10404,1,0,0,0,10384,10385,5,510,0,0,10385,10386,3,1528,764,0,10386,
10387,3,1384,692,0,10387,10388,3,1532,766,0,10388,10389,5,7,0,0,10389,10404,
1,0,0,0,10390,10391,5,510,0,0,10391,10392,3,1528,764,0,10392,10393,5,511,
0,0,10393,10394,3,1360,680,0,10394,10395,3,1532,766,0,10395,10396,5,7,0,
0,10396,10404,1,0,0,0,10397,10398,5,510,0,0,10398,10399,3,1528,764,0,10399,
10400,3,1532,766,0,10400,10401,5,7,0,0,10401,10404,1,0,0,0,10402,10404,5,
510,0,0,10403,10377,1,0,0,0,10403,10384,1,0,0,0,10403,10390,1,0,0,0,10403,
10397,1,0,0,0,10403,10402,1,0,0,0,10404,1527,1,0,0,0,10405,10414,1,0,0,0,
10406,10414,1,0,0,0,10407,10414,5,512,0,0,10408,10414,5,513,0,0,10409,10414,
5,514,0,0,10410,10414,5,515,0,0,10411,10414,5,516,0,0,10412,10414,5,517,
0,0,10413,10405,1,0,0,0,10413,10406,1,0,0,0,10413,10407,1,0,0,0,10413,10408,
1,0,0,0,10413,10409,1,0,0,0,10413,10410,1,0,0,0,10413,10411,1,0,0,0,10413,
10412,1,0,0,0,10414,1529,1,0,0,0,10415,10423,1,0,0,0,10416,10417,5,6,0,0,
10417,10419,3,1164,582,0,10418,10416,1,0,0,0,10419,10420,1,0,0,0,10420,10418,
1,0,0,0,10420,10421,1,0,0,0,10421,10423,1,0,0,0,10422,10415,1,0,0,0,10422,
10418,1,0,0,0,10423,1531,1,0,0,0,10424,10428,1,0,0,0,10425,10426,5,100,0,
0,10426,10428,3,1536,768,0,10427,10424,1,0,0,0,10427,10425,1,0,0,0,10428,
1533,1,0,0,0,10429,10430,3,1384,692,0,10430,10431,5,10,0,0,10431,10432,3,
1164,582,0,10432,1535,1,0,0,0,10433,10438,3,1534,767,0,10434,10435,5,6,0,
0,10435,10437,3,1534,767,0,10436,10434,1,0,0,0,10437,10440,1,0,0,0,10438,
10436,1,0,0,0,10438,10439,1,0,0,0,10439,1537,1,0,0,0,10440,10438,1,0,0,0,
10441,10442,5,518,0,0,10442,10443,3,1612,806,0,10443,10444,3,1540,770,0,
10444,10445,5,7,0,0,10445,1539,1,0,0,0,10446,10450,1,0,0,0,10447,10448,5,
6,0,0,10448,10450,3,1612,806,0,10449,10446,1,0,0,0,10449,10447,1,0,0,0,10450,
1541,1,0,0,0,10451,10452,5,519,0,0,10452,10453,3,1454,727,0,10453,10454,
5,454,0,0,10454,10455,5,519,0,0,10455,10456,3,1604,802,0,10456,10457,5,7,
0,0,10457,1543,1,0,0,0,10458,10459,3,1622,811,0,10459,10460,5,7,0,0,10460,
1545,1,0,0,0,10461,10462,5,202,0,0,10462,10470,3,1164,582,0,10463,10464,
3,1552,776,0,10464,10465,3,1548,774,0,10465,10471,1,0,0,0,10466,10467,3,
1548,774,0,10467,10468,3,1552,776,0,10468,10471,1,0,0,0,10469,10471,1,0,
0,0,10470,10463,1,0,0,0,10470,10466,1,0,0,0,10470,10469,1,0,0,0,10471,10472,
1,0,0,0,10472,10473,5,7,0,0,10473,1547,1,0,0,0,10474,10478,1,0,0,0,10475,
10476,5,100,0,0,10476,10478,3,1550,775,0,10477,10474,1,0,0,0,10477,10475,
1,0,0,0,10478,1549,1,0,0,0,10479,10484,3,1164,582,0,10480,10481,5,6,0,0,
10481,10483,3,1164,582,0,10482,10480,1,0,0,0,10483,10486,1,0,0,0,10484,10482,
1,0,0,0,10484,10485,1,0,0,0,10485,1551,1,0,0,0,10486,10484,1,0,0,0,10487,
10494,1,0,0,0,10488,10490,5,71,0,0,10489,10491,5,339,0,0,10490,10489,1,0,
0,0,10490,10491,1,0,0,0,10491,10492,1,0,0,0,10492,10494,3,1568,784,0,10493,
10487,1,0,0,0,10493,10488,1,0,0,0,10494,1553,1,0,0,0,10495,10513,5,520,0,
0,10496,10497,3,1588,794,0,10497,10498,3,1562,781,0,10498,10504,5,62,0,0,
10499,10505,3,960,480,0,10500,10501,5,202,0,0,10501,10502,3,1612,806,0,10502,
10503,3,1560,780,0,10503,10505,1,0,0,0,10504,10499,1,0,0,0,10504,10500,1,
0,0,0,10505,10514,1,0,0,0,10506,10511,3,1374,687,0,10507,10508,5,2,0,0,10508,
10509,3,1558,779,0,10509,10510,5,3,0,0,10510,10512,1,0,0,0,10511,10507,1,
0,0,0,10511,10512,1,0,0,0,10512,10514,1,0,0,0,10513,10496,1,0,0,0,10513,
10506,1,0,0,0,10514,10515,1,0,0,0,10515,10516,5,7,0,0,10516,1555,1,0,0,0,
10517,10518,3,1374,687,0,10518,10519,5,20,0,0,10519,10520,3,1164,582,0,10520,
10523,1,0,0,0,10521,10523,3,1164,582,0,10522,10517,1,0,0,0,10522,10521,1,
0,0,0,10523,1557,1,0,0,0,10524,10529,3,1556,778,0,10525,10526,5,6,0,0,10526,
10528,3,1556,778,0,10527,10525,1,0,0,0,10528,10531,1,0,0,0,10529,10527,1,
0,0,0,10529,10530,1,0,0,0,10530,1559,1,0,0,0,10531,10529,1,0,0,0,10532,10536,
1,0,0,0,10533,10534,5,100,0,0,10534,10536,3,1282,641,0,10535,10532,1,0,0,
0,10535,10533,1,0,0,0,10536,1561,1,0,0,0,10537,10542,1,0,0,0,10538,10539,
3,1564,782,0,10539,10540,5,317,0,0,10540,10542,1,0,0,0,10541,10537,1,0,0,
0,10541,10538,1,0,0,0,10542,1563,1,0,0,0,10543,10546,1,0,0,0,10544,10546,
5,262,0,0,10545,10543,1,0,0,0,10545,10544,1,0,0,0,10546,1565,1,0,0,0,10547,
10548,5,61,0,0,10548,10549,3,1572,786,0,10549,10550,3,1570,785,0,10550,10551,
3,1588,794,0,10551,10552,5,71,0,0,10552,10553,3,1568,784,0,10553,10554,5,
7,0,0,10554,1567,1,0,0,0,10555,10556,3,1282,641,0,10556,1569,1,0,0,0,10557,
10561,1,0,0,0,10558,10561,5,64,0,0,10559,10561,5,68,0,0,10560,10557,1,0,
0,0,10560,10558,1,0,0,0,10560,10559,1,0,0,0,10561,1571,1,0,0,0,10562,10580,
1,0,0,0,10563,10580,1,0,0,0,10564,10580,5,261,0,0,10565,10580,5,286,0,0,
10566,10580,5,207,0,0,10567,10580,5,240,0,0,10568,10569,5,130,0,0,10569,
10580,3,1164,582,0,10570,10571,5,300,0,0,10571,10580,3,1164,582,0,10572,
10580,3,1164,582,0,10573,10580,5,30,0,0,10574,10577,7,64,0,0,10575,10578,
3,1164,582,0,10576,10578,5,30,0,0,10577,10575,1,0,0,0,10577,10576,1,0,0,
0,10577,10578,1,0,0,0,10578,10580,1,0,0,0,10579,10562,1,0,0,0,10579,10563,
1,0,0,0,10579,10564,1,0,0,0,10579,10565,1,0,0,0,10579,10566,1,0,0,0,10579,
10567,1,0,0,0,10579,10568,1,0,0,0,10579,10570,1,0,0,0,10579,10572,1,0,0,
0,10579,10573,1,0,0,0,10579,10574,1,0,0,0,10580,1573,1,0,0,0,10581,10582,
5,258,0,0,10582,10583,3,1572,786,0,10583,10584,3,1588,794,0,10584,10585,
5,7,0,0,10585,1575,1,0,0,0,10586,10587,5,157,0,0,10587,10588,3,1588,794,
0,10588,10589,5,7,0,0,10589,1577,1,0,0,0,10590,10591,5,78,0,0,10591,10592,
5,7,0,0,10592,1579,1,0,0,0,10593,10594,5,161,0,0,10594,10595,3,1584,792,
0,10595,10596,5,7,0,0,10596,1581,1,0,0,0,10597,10598,5,312,0,0,10598,10599,
3,1584,792,0,10599,10600,5,7,0,0,10600,1583,1,0,0,0,10601,10603,5,33,0,0,
10602,10604,5,262,0,0,10603,10602,1,0,0,0,10603,10604,1,0,0,0,10604,10605,
1,0,0,0,10605,10608,5,153,0,0,10606,10608,1,0,0,0,10607,10601,1,0,0,0,10607,
10606,1,0,0,0,10608,1585,1,0,0,0,10609,10610,5,326,0,0,10610,10611,3,524,
262,0,10611,10612,5,94,0,0,10612,10613,5,53,0,0,10613,10614,5,7,0,0,10614,
10622,1,0,0,0,10615,10618,5,306,0,0,10616,10619,3,524,262,0,10617,10619,
5,30,0,0,10618,10616,1,0,0,0,10618,10617,1,0,0,0,10619,10620,1,0,0,0,10620,
10622,5,7,0,0,10621,10609,1,0,0,0,10621,10615,1,0,0,0,10622,1587,1,0,0,0,
10623,10626,3,1374,687,0,10624,10626,5,28,0,0,10625,10623,1,0,0,0,10625,
10624,1,0,0,0,10626,1589,1,0,0,0,10627,10631,1,0,0,0,10628,10629,5,517,0,
0,10629,10631,3,1592,796,0,10630,10627,1,0,0,0,10630,10628,1,0,0,0,10631,
1591,1,0,0,0,10632,10634,3,1594,797,0,10633,10632,1,0,0,0,10634,10635,1,
0,0,0,10635,10633,1,0,0,0,10635,10636,1,0,0,0,10636,1593,1,0,0,0,10637,10638,
5,102,0,0,10638,10639,3,1596,798,0,10639,10640,5,93,0,0,10640,10641,3,1454,
727,0,10641,1595,1,0,0,0,10642,10647,3,1598,799,0,10643,10644,5,82,0,0,10644,
10646,3,1598,799,0,10645,10643,1,0,0,0,10646,10649,1,0,0,0,10647,10645,1,
0,0,0,10647,10648,1,0,0,0,10648,1597,1,0,0,0,10649,10647,1,0,0,0,10650,10654,
3,1608,804,0,10651,10652,5,511,0,0,10652,10654,3,1360,680,0,10653,10650,
1,0,0,0,10653,10651,1,0,0,0,10654,1599,1,0,0,0,10655,10658,1,0,0,0,10656,
10658,3,1418,709,0,10657,10655,1,0,0,0,10657,10656,1,0,0,0,10658,1601,1,
0,0,0,10659,10662,1,0,0,0,10660,10662,3,1418,709,0,10661,10659,1,0,0,0,10661,
10660,1,0,0,0,10662,1603,1,0,0,0,10663,10666,1,0,0,0,10664,10666,3,1608,
804,0,10665,10663,1,0,0,0,10665,10664,1,0,0,0,10666,1605,1,0,0,0,10667,10668,
5,102,0,0,10668,10671,3,1616,808,0,10669,10671,1,0,0,0,10670,10667,1,0,0,
0,10670,10669,1,0,0,0,10671,1607,1,0,0,0,10672,10675,3,1374,687,0,10673,
10675,3,1610,805,0,10674,10672,1,0,0,0,10674,10673,1,0,0,0,10675,1609,1,
0,0,0,10676,10677,7,65,0,0,10677,1611,1,0,0,0,10678,10679,3,1330,665,0,10679,
10680,3,984,492,0,10680,10681,3,1056,528,0,10681,10682,3,1096,548,0,10682,
10683,3,1026,513,0,10683,10684,3,1040,520,0,10684,10685,3,1242,621,0,10685,
1613,1,0,0,0,10686,10687,3,1612,806,0,10687,1615,1,0,0,0,10688,10689,3,1612,
806,0,10689,1617,1,0,0,0,10690,10691,3,1164,582,0,10691,1619,1,0,0,0,10692,
10693,3,1164,582,0,10693,1621,1,0,0,0,10694,10695,3,8,4,0,10695,10696,3,
1624,812,0,10696,1623,1,0,0,0,10697,10698,5,71,0,0,10698,10699,3,986,493,
0,10699,10700,3,1568,784,0,10700,10703,1,0,0,0,10701,10703,1,0,0,0,10702,
10697,1,0,0,0,10702,10701,1,0,0,0,10703,1625,1,0,0,0,747,1635,1639,1767,
1771,1784,1789,1795,1801,1816,1828,1846,1851,1861,1885,1892,1898,1903,1912,
1916,1928,1959,1966,1974,1979,1986,1992,2009,2014,2018,2031,2035,2040,2045,
2057,2066,2079,2084,2095,2106,2111,2122,2133,2142,2152,2167,2179,2184,2191,
2202,2460,2467,2472,2477,2482,2490,2499,2506,2516,2518,2523,2529,2535,2537,
2565,2575,2588,2600,2614,2619,2643,2649,2654,2661,2666,2704,2708,2715,2719,
2726,2740,2747,2758,2791,2801,2805,2812,2819,2827,2833,2837,2847,2854,2865,
2897,2905,2910,2917,2927,2937,2957,2972,2997,3002,3009,3016,3027,3032,3039,
3050,3058,3069,3085,3093,3097,3111,3128,3133,3140,3149,3152,3157,3164,3175,
3188,3201,3219,3222,3231,3246,3261,3270,3277,3284,3289,3319,3321,3325,3333,
3340,3354,3358,3362,3367,3373,3377,3381,3394,3400,3409,3418,3428,3439,3549,
3567,3572,3576,3593,3601,3608,3621,3631,3665,3670,3675,3679,3687,3689,3747,
3764,3772,3795,3799,3819,3856,3865,3870,3875,3880,3885,3938,3944,3951,3961,
3966,3971,3989,3993,4003,4009,4015,4022,4027,4032,4046,4074,4081,4095,4110,
4227,4238,4244,4252,4263,4272,4279,4319,4325,4346,4374,4378,4383,4392,4396,
4423,4430,4445,4465,4485,4578,4603,4610,4626,4635,4640,4646,4653,4667,4816,
4820,4913,4918,4922,4928,4996,5002,5031,5048,5055,5067,5127,5134,5140,5146,
5172,5178,5184,5195,5207,5236,5275,5279,5283,5287,5292,5299,5313,5326,5334,
5341,5347,5351,5356,5363,5377,5379,5386,5390,5399,5407,5416,5418,5422,5431,
5436,5442,5447,5451,5456,5462,5468,5474,5480,5485,5500,5509,5520,5526,5565,
5575,5582,5593,5599,5609,5621,5625,5663,5677,5691,5715,5722,5732,5744,5749,
5785,5792,5807,5854,5891,5902,5919,6389,6393,6398,6457,6461,6680,6695,6706,
6713,6906,6916,6924,6953,6969,7011,7025,7047,7054,7062,7066,7073,7082,7091,
7143,7148,7160,7164,7169,7174,7178,7182,7187,7203,7211,7216,7229,7234,7241,
7251,7255,7266,7277,7285,7292,7331,7339,7343,7424,7452,7457,7472,7484,7491,
7501,7506,7510,7514,7518,7522,7529,7539,7544,7562,7573,7580,7588,7593,7606,
7612,7641,7648,7660,7673,7688,7694,7703,7719,7722,7733,7738,7742,7746,7751,
7754,7760,7764,7766,7769,7776,7779,7786,7794,7797,7806,7821,7834,7845,7848,
7852,7858,7874,7887,7897,7915,7917,7925,7929,7939,7949,7960,7962,7966,7976,
7992,7994,7999,8003,8009,8016,8025,8040,8044,8051,8054,8058,8061,8074,8078,
8083,8091,8095,8099,8110,8117,8123,8127,8129,8133,8139,8148,8154,8156,8158,
8165,8169,8178,8182,8192,8199,8207,8231,8237,8241,8246,8255,8259,8262,8267,
8280,8286,8294,8297,8304,8309,8330,8339,8344,8350,8355,8362,8367,8373,8375,
8379,8386,8390,8393,8400,8405,8408,8415,8419,8428,8432,8440,8442,8449,8454,
8457,8472,8484,8494,8503,8508,8513,8520,8523,8527,8534,8558,8567,8573,8577,
8582,8592,8599,8608,8611,8620,8622,8628,8632,8637,8651,8653,8659,8665,8668,
8677,8695,8702,8706,8710,8726,8733,8741,8745,8752,8765,8781,8787,8793,8800,
8805,8811,8818,8826,8834,8839,8843,8849,8853,8857,8860,8866,8871,8887,8890,
8892,8904,8906,8910,8916,8921,8929,8933,8942,8950,8956,8959,8968,8973,8980,
8990,9016,9027,9029,9031,9039,9062,9070,9080,9094,9104,9108,9122,9129,9136,
9143,9168,9197,9236,9238,9266,9287,9294,9307,9319,9325,9334,9351,9363,9372,
9377,9384,9394,9397,9408,9414,9429,9437,9446,9455,9458,9463,9472,9477,9491,
9501,9509,9523,9530,9538,9546,9553,9559,9568,9576,9586,9597,9604,9634,9643,
9650,9661,9671,9675,9679,9684,9692,9696,9700,9705,9710,9715,9722,9730,9733,
9740,9745,9752,9768,9783,9797,9802,9821,9826,9831,9838,9845,9852,9861,9867,
9873,9879,9887,9896,9954,9969,9992,10000,10004,10016,10018,10025,10034,10052,
10060,10069,10076,10086,10092,10099,10104,10110,10114,10121,10151,10171,
10175,10191,10198,10211,10219,10239,10245,10257,10262,10272,10304,10309,
10318,10323,10327,10332,10348,10366,10369,10375,10403,10413,10420,10422,
10427,10438,10449,10470,10477,10484,10490,10493,10504,10511,10513,10522,
10529,10535,10541,10545,10560,10577,10579,10603,10607,10618,10621,10625,
10630,10635,10647,10653,10657,10661,10665,10670,10674,10702];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class PostgreSQLParser extends PostgreSQLParserBase {

    static grammarFileName = "PostgreSQLParser.g4";
    static literalNames = [ null, "'$'", "'('", "')'", "'['", "']'", "','", 
                            "';'", "':'", "'*'", "'='", "'.'", "'+'", "'-'", 
                            "'/'", "'^'", "'<'", "'>'", "'<<'", "'>>'", 
                            "':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", 
                            "'::'", "'%'", null, null, "'ALL'", "'ANALYSE'", 
                            "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", 
                            "'ASC'", "'ASYMMETRIC'", "'BOTH'", "'CASE'", 
                            "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'", 
                            "'CONSTRAINT'", "'CREATE'", "'CURRENT_CATALOG'", 
                            "'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", 
                            "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DEFAULT'", 
                            "'DEFERRABLE'", "'DESC'", "'DISTINCT'", "'DO'", 
                            "'ELSE'", "'EXCEPT'", "'FALSE'", "'FETCH'", 
                            "'FOR'", "'FOREIGN'", "'FROM'", "'GRANT'", "'GROUP'", 
                            "'HAVING'", "'IN'", "'INITIALLY'", "'INTERSECT'", 
                            "'INTO'", "'LATERAL'", "'LEADING'", "'LIMIT'", 
                            "'LOCALTIME'", "'LOCALTIMESTAMP'", "'NOT'", 
                            "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", 
                            "'ORDER'", "'PLACING'", "'PRIMARY'", "'REFERENCES'", 
                            "'RETURNING'", "'SELECT'", "'SESSION_USER'", 
                            "'SOME'", "'SYMMETRIC'", "'TABLE'", "'THEN'", 
                            "'TO'", "'TRAILING'", "'TRUE'", "'UNION'", "'UNIQUE'", 
                            "'USER'", "'USING'", "'VARIADIC'", "'WHEN'", 
                            "'WHERE'", "'WINDOW'", "'WITH'", "'AUTHORIZATION'", 
                            "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", 
                            "'CROSS'", "'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", 
                            "'ILIKE'", "'INNER'", "'IS'", "'ISNULL'", "'JOIN'", 
                            "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", 
                            "'OUTER'", "'OVER'", "'OVERLAPS'", "'RIGHT'", 
                            "'SIMILAR'", "'VERBOSE'", "'ABORT'", "'ABSOLUTE'", 
                            "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", 
                            "'AFTER'", "'AGGREGATE'", "'ALSO'", "'ALTER'", 
                            "'ALWAYS'", "'ASSERTION'", "'ASSIGNMENT'", "'AT'", 
                            "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", 
                            "'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", 
                            "'CASCADED'", "'CATALOG'", "'CHAIN'", "'CHARACTERISTICS'", 
                            "'CHECKPOINT'", "'CLASS'", "'CLOSE'", "'CLUSTER'", 
                            "'COMMENT'", "'COMMENTS'", "'COMMIT'", "'COMMITTED'", 
                            "'CONFIGURATION'", "'CONNECTION'", "'CONSTRAINTS'", 
                            "'CONTENT'", "'CONTINUE'", "'CONVERSION'", "'COPY'", 
                            "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", "'DATA'", 
                            "'DATABASE'", "'DAY'", "'DEALLOCATE'", "'DECLARE'", 
                            "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", "'DELETE'", 
                            "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", 
                            "'DISABLE'", "'DISCARD'", "'DOCUMENT'", "'DOMAIN'", 
                            "'DOUBLE'", "'DROP'", "'EACH'", "'ENABLE'", 
                            "'ENCODING'", "'ENCRYPTED'", "'ENUM'", "'ESCAPE'", 
                            "'EVENT'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
                            "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", "'EXTERNAL'", 
                            "'FAMILY'", "'FIRST'", "'FOLLOWING'", "'FORCE'", 
                            "'FORWARD'", "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", 
                            "'GRANTED'", "'HANDLER'", "'HEADER'", "'HOLD'", 
                            "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", 
                            "'IMMUTABLE'", "'IMPLICIT'", "'INCLUDING'", 
                            "'INCREMENT'", "'INDEX'", "'INDEXES'", "'INHERIT'", 
                            "'INHERITS'", "'INLINE'", "'INSENSITIVE'", "'INSERT'", 
                            "'INSTEAD'", "'INVOKER'", "'ISOLATION'", "'KEY'", 
                            "'LABEL'", "'LANGUAGE'", "'LARGE'", "'LAST'", 
                            "'LEAKPROOF'", "'LEVEL'", "'LISTEN'", "'LOAD'", 
                            "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", 
                            "'MATCH'", "'MATCHED'", "'MATERIALIZED'", "'MAXVALUE'", 
                            "'MERGE'", "'MINUTE'", "'MINVALUE'", "'MODE'", 
                            "'MONTH'", "'MOVE'", "'NAME'", "'NAMES'", "'NEXT'", 
                            "'NO'", "'NOTHING'", "'NOTIFY'", "'NOWAIT'", 
                            "'NULLS'", "'OBJECT'", "'OF'", "'OFF'", "'OIDS'", 
                            "'OPERATOR'", "'OPTION'", "'OPTIONS'", "'OWNED'", 
                            "'OWNER'", "'PARSER'", "'PARTIAL'", "'PARTITION'", 
                            "'PASSING'", "'PASSWORD'", "'PLANS'", "'PRECEDING'", 
                            "'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", 
                            "'PRIVILEGES'", "'PROCEDURAL'", "'PROCEDURE'", 
                            "'PROGRAM'", "'QUOTE'", "'RANGE'", "'READ'", 
                            "'REASSIGN'", "'RECHECK'", "'RECURSIVE'", "'REF'", 
                            "'REFRESH'", "'REINDEX'", "'RELATIVE'", "'RELEASE'", 
                            "'RENAME'", "'REPEATABLE'", "'REPLACE'", "'REPLICA'", 
                            "'RESET'", "'RESTART'", "'RESTRICT'", "'RETURNS'", 
                            "'REVOKE'", "'ROLE'", "'ROLLBACK'", "'ROWS'", 
                            "'RULE'", "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", 
                            "'SEARCH'", "'SECOND'", "'SECURITY'", "'SEQUENCE'", 
                            "'SEQUENCES'", "'SERIALIZABLE'", "'SERVER'", 
                            "'SESSION'", "'SET'", "'SHARE'", "'SHOW'", "'SIMPLE'", 
                            "'SNAPSHOT'", "'STABLE'", "'STANDALONE'", "'START'", 
                            "'STATEMENT'", "'STATISTICS'", "'STDIN'", "'STDOUT'", 
                            "'STORAGE'", "'STRICT'", "'STRIP'", "'SYSID'", 
                            "'SYSTEM'", "'TABLES'", "'TABLESPACE'", "'TEMP'", 
                            "'TEMPLATE'", "'TEMPORARY'", "'TEXT'", "'TRANSACTION'", 
                            "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", "'TYPE'", 
                            "'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", 
                            "'UNKNOWN'", "'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", 
                            "'UPDATE'", "'VACUUM'", "'VALID'", "'VALIDATE'", 
                            "'VALIDATOR'", "'VARYING'", "'VERSION'", "'VIEW'", 
                            "'VOLATILE'", "'WHITESPACE'", "'WITHOUT'", "'WORK'", 
                            "'WRAPPER'", "'WRITE'", "'XML'", "'YEAR'", "'YES'", 
                            "'ZONE'", "'BETWEEN'", "'BIGINT'", "'BIT'", 
                            "'BOOLEAN'", "'CHAR'", "'CHARACTER'", "'COALESCE'", 
                            "'DEC'", "'DECIMAL'", "'EXISTS'", "'EXTRACT'", 
                            "'FLOAT'", "'GREATEST'", "'INOUT'", "'INT'", 
                            "'INTEGER'", "'INTERVAL'", "'LEAST'", "'NATIONAL'", 
                            "'NCHAR'", "'NONE'", "'NULLIF'", "'NUMERIC'", 
                            "'OVERLAY'", "'POSITION'", "'PRECISION'", "'REAL'", 
                            "'ROW'", "'SETOF'", "'SMALLINT'", "'SUBSTRING'", 
                            "'TIME'", "'TIMESTAMP'", "'TREAT'", "'TRIM'", 
                            "'VALUES'", "'VARCHAR'", "'XMLATTRIBUTES'", 
                            "'XMLCOMMENT'", "'XMLAGG'", "'XML_IS_WELL_FORMED'", 
                            "'XML_IS_WELL_FORMED_DOCUMENT'", "'XML_IS_WELL_FORMED_CONTENT'", 
                            "'XPATH'", "'XPATH_EXISTS'", "'XMLCONCAT'", 
                            "'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", 
                            "'XMLPARSE'", "'XMLPI'", "'XMLROOT'", "'XMLSERIALIZE'", 
                            "'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", 
                            "'EXPRESSION'", "'GENERATED'", "'LOGGED'", "'STORED'", 
                            "'INCLUDE'", "'ROUTINE'", "'TRANSFORM'", "'IMPORT'", 
                            "'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", 
                            "'OLD'", "'VALUE'", "'SUBSCRIPTION'", "'PUBLICATION'", 
                            "'OUT'", "'END'", "'ROUTINES'", "'SCHEMAS'", 
                            "'PROCEDURES'", "'INPUT'", "'SUPPORT'", "'PARALLEL'", 
                            "'SQL'", "'DEPENDS'", "'OVERRIDING'", "'CONFLICT'", 
                            "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", 
                            "'CUBE'", "'GROUPING'", "'SETS'", "'TABLESAMPLE'", 
                            "'ORDINALITY'", "'XMLTABLE'", "'COLUMNS'", "'XMLNAMESPACES'", 
                            "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", "'FILTER'", 
                            "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", 
                            "'NFKD'", "'UESCAPE'", "'VIEWS'", "'NORMALIZE'", 
                            "'DUMP'", "'PRINT_STRICT_PARAMS'", "'VARIABLE_CONFLICT'", 
                            "'ERROR'", "'USE_VARIABLE'", "'USE_COLUMN'", 
                            "'ALIAS'", "'CONSTANT'", "'PERFORM'", "'GET'", 
                            "'DIAGNOSTICS'", "'STACKED'", "'ELSIF'", "'WHILE'", 
                            "'REVERSE'", "'FOREACH'", "'SLICE'", "'EXIT'", 
                            "'RETURN'", "'QUERY'", "'RAISE'", "'SQLSTATE'", 
                            "'DEBUG'", "'LOG'", "'INFO'", "'NOTICE'", "'WARNING'", 
                            "'EXCEPTION'", "'ASSERT'", "'LOOP'", "'OPEN'", 
                            "'ABS'", "'CBRT'", "'CEIL'", "'CEILING'", "'DEGREES'", 
                            "'DIV'", "'EXP'", "'FACTORIAL'", "'FLOOR'", 
                            "'GCD'", "'LCM'", "'LN'", "'LOG10'", "'MIN_SCALE'", 
                            "'MOD'", "'PI'", "'POWER'", "'RADIANS'", "'ROUND'", 
                            "'SCALE'", "'SIGN'", "'SQRT'", "'TRIM_SCALE'", 
                            "'TRUNC'", "'WIDTH_BUCKET'", "'RANDOM'", "'SETSEED'", 
                            "'ACOS'", "'ACOSD'", "'ASIN'", "'ASIND'", "'ATAN'", 
                            "'ATAND'", "'ATAN2'", "'ATAN2D'", "'COS'", "'COSD'", 
                            "'COT'", "'COTD'", "'SIN'", "'SIND'", "'TAN'", 
                            "'TAND'", "'SINH'", "'COSH'", "'TANH'", "'ASINH'", 
                            "'ACOSH'", "'ATANH'", "'BIT_LENGTH'", "'CHAR_LENGTH'", 
                            "'CHARACTER_LENGTH'", "'LOWER'", "'OCTET_LENGTH'", 
                            "'UPPER'", "'ASCII'", "'BTRIM'", "'CHR'", "'CONCAT'", 
                            "'CONCAT_WS'", "'FORMAT'", "'INITCAP'", "'LENGTH'", 
                            "'LPAD'", "'LTRIM'", "'MD5'", "'PARSE_IDENT'", 
                            "'PG_CLIENT_ENCODING'", "'QUOTE_IDENT'", "'QUOTE_LITERAL'", 
                            "'QUOTE_NULLABLE'", "'REGEXP_COUNT'", "'REGEXP_INSTR'", 
                            "'REGEXP_LIKE'", "'REGEXP_MATCH'", "'REGEXP_MATCHES'", 
                            "'REGEXP_REPLACE'", "'REGEXP_SPLIT_TO_ARRAY'", 
                            "'REGEXP_SPLIT_TO_TABLE'", "'REGEXP_SUBSTR'", 
                            "'REPEAT'", "'RPAD'", "'RTRIM'", "'SPLIT_PART'", 
                            "'STARTS_WITH'", "'STRING_TO_ARRAY'", "'STRING_TO_TABLE'", 
                            "'STRPOS'", "'SUBSTR'", "'TO_ASCII'", "'TO_HEX'", 
                            "'TRANSLATE'", "'UNISTR'", "'AGE'", "'CLOCK_TIMESTAMP'", 
                            "'DATE_BIN'", "'DATE_PART'", "'DATE_TRUNC'", 
                            "'ISFINITE'", "'JUSTIFY_DAYS'", "'JUSTIFY_HOURS'", 
                            "'JUSTIFY_INTERVAL'", "'MAKE_DATE'", "'MAKE_INTERVAL'", 
                            "'MAKE_TIME'", "'MAKE_TIMESTAMP'", "'MAKE_TIMESTAMPTZ'", 
                            "'NOW'", "'STATEMENT_TIMESTAMP'", "'TIMEOFDAY'", 
                            "'TRANSACTION_TIMESTAMP'", "'TO_TIMESTAMP'", 
                            "'TO_CHAR'", "'TO_DATE'", "'TO_NUMBER'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'\\\\'", null, null, null, null, null, null, 
                            null, null, null, "'''" ];
    static symbolicNames = [ null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", 
                             "OPEN_BRACKET", "CLOSE_BRACKET", "COMMA", "SEMI", 
                             "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", 
                             "SLASH", "CARET", "LT", "GT", "LESS_LESS", 
                             "GREATER_GREATER", "COLON_EQUALS", "LESS_EQUALS", 
                             "EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", 
                             "NOT_EQUALS", "TYPECAST", "PERCENT", "PARAM", 
                             "Operator", "ALL", "ANALYSE", "ANALYZE", "AND", 
                             "ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", 
                             "BOTH", "CASE", "CAST", "CHECK", "COLLATE", 
                             "COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", 
                             "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", 
                             "CURRENT_TIMESTAMP", "CURRENT_USER", "DEFAULT", 
                             "DEFERRABLE", "DESC", "DISTINCT", "DO", "ELSE", 
                             "EXCEPT", "FALSE_P", "FETCH", "FOR", "FOREIGN", 
                             "FROM", "GRANT", "GROUP_P", "HAVING", "IN_P", 
                             "INITIALLY", "INTERSECT", "INTO", "LATERAL_P", 
                             "LEADING", "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", 
                             "NOT", "NULL_P", "OFFSET", "ON", "ONLY", "OR", 
                             "ORDER", "PLACING", "PRIMARY", "REFERENCES", 
                             "RETURNING", "SELECT", "SESSION_USER", "SOME", 
                             "SYMMETRIC", "TABLE", "THEN", "TO", "TRAILING", 
                             "TRUE_P", "UNION", "UNIQUE", "USER", "USING", 
                             "VARIADIC", "WHEN", "WHERE", "WINDOW", "WITH", 
                             "AUTHORIZATION", "BINARY", "COLLATION", "CONCURRENTLY", 
                             "CROSS", "CURRENT_SCHEMA", "FREEZE", "FULL", 
                             "ILIKE", "INNER_P", "IS", "ISNULL", "JOIN", 
                             "LEFT", "LIKE", "NATURAL", "NOTNULL", "OUTER_P", 
                             "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", 
                             "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", 
                             "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALSO", 
                             "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", 
                             "AT", "ATTRIBUTE", "BACKWARD", "BEFORE", "BEGIN_P", 
                             "BY", "CACHE", "CALLED", "CASCADE", "CASCADED", 
                             "CATALOG", "CHAIN", "CHARACTERISTICS", "CHECKPOINT", 
                             "CLASS", "CLOSE", "CLUSTER", "COMMENT", "COMMENTS", 
                             "COMMIT", "COMMITTED", "CONFIGURATION", "CONNECTION", 
                             "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", 
                             "COPY", "COST", "CSV", "CURSOR", "CYCLE", "DATA_P", 
                             "DATABASE", "DAY_P", "DEALLOCATE", "DECLARE", 
                             "DEFAULTS", "DEFERRED", "DEFINER", "DELETE_P", 
                             "DELIMITER", "DELIMITERS", "DICTIONARY", "DISABLE_P", 
                             "DISCARD", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", 
                             "DROP", "EACH", "ENABLE_P", "ENCODING", "ENCRYPTED", 
                             "ENUM_P", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", 
                             "EXCLUSIVE", "EXECUTE", "EXPLAIN", "EXTENSION", 
                             "EXTERNAL", "FAMILY", "FIRST_P", "FOLLOWING", 
                             "FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", 
                             "GLOBAL", "GRANTED", "HANDLER", "HEADER_P", 
                             "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "IMMEDIATE", 
                             "IMMUTABLE", "IMPLICIT_P", "INCLUDING", "INCREMENT", 
                             "INDEX", "INDEXES", "INHERIT", "INHERITS", 
                             "INLINE_P", "INSENSITIVE", "INSERT", "INSTEAD", 
                             "INVOKER", "ISOLATION", "KEY", "LABEL", "LANGUAGE", 
                             "LARGE_P", "LAST_P", "LEAKPROOF", "LEVEL", 
                             "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", 
                             "MAPPING", "MATCH", "MATCHED", "MATERIALIZED", 
                             "MAXVALUE", "MERGE", "MINUTE_P", "MINVALUE", 
                             "MODE", "MONTH_P", "MOVE", "NAME_P", "NAMES", 
                             "NEXT", "NO", "NOTHING", "NOTIFY", "NOWAIT", 
                             "NULLS_P", "OBJECT_P", "OF", "OFF", "OIDS", 
                             "OPERATOR", "OPTION", "OPTIONS", "OWNED", "OWNER", 
                             "PARSER", "PARTIAL", "PARTITION", "PASSING", 
                             "PASSWORD", "PLANS", "PRECEDING", "PREPARE", 
                             "PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", 
                             "PROCEDURAL", "PROCEDURE", "PROGRAM", "QUOTE", 
                             "RANGE", "READ", "REASSIGN", "RECHECK", "RECURSIVE", 
                             "REF", "REFRESH", "REINDEX", "RELATIVE_P", 
                             "RELEASE", "RENAME", "REPEATABLE", "REPLACE", 
                             "REPLICA", "RESET", "RESTART", "RESTRICT", 
                             "RETURNS", "REVOKE", "ROLE", "ROLLBACK", "ROWS", 
                             "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", 
                             "SECOND_P", "SECURITY", "SEQUENCE", "SEQUENCES", 
                             "SERIALIZABLE", "SERVER", "SESSION", "SET", 
                             "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", 
                             "STANDALONE_P", "START", "STATEMENT", "STATISTICS", 
                             "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", 
                             "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", 
                             "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", 
                             "TRANSACTION", "TRIGGER", "TRUNCATE", "TRUSTED", 
                             "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
                             "UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", 
                             "UNTIL", "UPDATE", "VACUUM", "VALID", "VALIDATE", 
                             "VALIDATOR", "VARYING", "VERSION_P", "VIEW", 
                             "VOLATILE", "WHITESPACE_P", "WITHOUT", "WORK", 
                             "WRAPPER", "WRITE", "XML_P", "YEAR_P", "YES_P", 
                             "ZONE", "BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", 
                             "CHAR_P", "CHARACTER", "COALESCE", "DEC", "DECIMAL_P", 
                             "EXISTS", "EXTRACT", "FLOAT_P", "GREATEST", 
                             "INOUT", "INT_P", "INTEGER", "INTERVAL", "LEAST", 
                             "NATIONAL", "NCHAR", "NONE", "NULLIF", "NUMERIC", 
                             "OVERLAY", "POSITION", "PRECISION", "REAL", 
                             "ROW", "SETOF", "SMALLINT", "SUBSTRING", "TIME", 
                             "TIMESTAMP", "TREAT", "TRIM", "VALUES", "VARCHAR", 
                             "XMLATTRIBUTES", "XMLCOMMENT", "XMLAGG", "XML_IS_WELL_FORMED", 
                             "XML_IS_WELL_FORMED_DOCUMENT", "XML_IS_WELL_FORMED_CONTENT", 
                             "XPATH", "XPATH_EXISTS", "XMLCONCAT", "XMLELEMENT", 
                             "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", 
                             "XMLROOT", "XMLSERIALIZE", "CALL", "CURRENT_P", 
                             "ATTACH", "DETACH", "EXPRESSION", "GENERATED", 
                             "LOGGED", "STORED", "INCLUDE", "ROUTINE", "TRANSFORM", 
                             "IMPORT_P", "POLICY", "METHOD", "REFERENCING", 
                             "NEW", "OLD", "VALUE_P", "SUBSCRIPTION", "PUBLICATION", 
                             "OUT_P", "END_P", "ROUTINES", "SCHEMAS", "PROCEDURES", 
                             "INPUT_P", "SUPPORT", "PARALLEL", "SQL_P", 
                             "DEPENDS", "OVERRIDING", "CONFLICT", "SKIP_P", 
                             "LOCKED", "TIES", "ROLLUP", "CUBE", "GROUPING", 
                             "SETS", "TABLESAMPLE", "ORDINALITY", "XMLTABLE", 
                             "COLUMNS", "XMLNAMESPACES", "ROWTYPE", "NORMALIZED", 
                             "WITHIN", "FILTER", "GROUPS", "OTHERS", "NFC", 
                             "NFD", "NFKC", "NFKD", "UESCAPE", "VIEWS", 
                             "NORMALIZE", "DUMP", "PRINT_STRICT_PARAMS", 
                             "VARIABLE_CONFLICT", "ERROR", "USE_VARIABLE", 
                             "USE_COLUMN", "ALIAS", "CONSTANT", "PERFORM", 
                             "GET", "DIAGNOSTICS", "STACKED", "ELSIF", "WHILE", 
                             "REVERSE", "FOREACH", "SLICE", "EXIT", "RETURN", 
                             "QUERY", "RAISE", "SQLSTATE", "DEBUG", "LOG", 
                             "INFO", "NOTICE", "WARNING", "EXCEPTION", "ASSERT", 
                             "LOOP", "OPEN", "ABS", "CBRT", "CEIL", "CEILING", 
                             "DEGREES", "DIV", "EXP", "FACTORIAL", "FLOOR", 
                             "GCD", "LCM", "LN", "LOG10", "MIN_SCALE", "MOD", 
                             "PI", "POWER", "RADIANS", "ROUND", "SCALE", 
                             "SIGN", "SQRT", "TRIM_SCALE", "TRUNC", "WIDTH_BUCKET", 
                             "RANDOM", "SETSEED", "ACOS", "ACOSD", "ASIN", 
                             "ASIND", "ATAN", "ATAND", "ATAN2", "ATAN2D", 
                             "COS", "COSD", "COT", "COTD", "SIN", "SIND", 
                             "TAN", "TAND", "SINH", "COSH", "TANH", "ASINH", 
                             "ACOSH", "ATANH", "BIT_LENGTH", "CHAR_LENGTH", 
                             "CHARACTER_LENGTH", "LOWER", "OCTET_LENGTH", 
                             "UPPER", "ASCII", "BTRIM", "CHR", "CONCAT", 
                             "CONCAT_WS", "FORMAT", "INITCAP", "LENGTH", 
                             "LPAD", "LTRIM", "MD5", "PARSE_IDENT", "PG_CLIENT_ENCODING", 
                             "QUOTE_IDENT", "QUOTE_LITERAL", "QUOTE_NULLABLE", 
                             "REGEXP_COUNT", "REGEXP_INSTR", "REGEXP_LIKE", 
                             "REGEXP_MATCH", "REGEXP_MATCHES", "REGEXP_REPLACE", 
                             "REGEXP_SPLIT_TO_ARRAY", "REGEXP_SPLIT_TO_TABLE", 
                             "REGEXP_SUBSTR", "REPEAT", "RPAD", "RTRIM", 
                             "SPLIT_PART", "STARTS_WITH", "STRING_TO_ARRAY", 
                             "STRING_TO_TABLE", "STRPOS", "SUBSTR", "TO_ASCII", 
                             "TO_HEX", "TRANSLATE", "UNISTR", "AGE", "CLOCK_TIMESTAMP", 
                             "DATE_BIN", "DATE_PART", "DATE_TRUNC", "ISFINITE", 
                             "JUSTIFY_DAYS", "JUSTIFY_HOURS", "JUSTIFY_INTERVAL", 
                             "MAKE_DATE", "MAKE_INTERVAL", "MAKE_TIME", 
                             "MAKE_TIMESTAMP", "MAKE_TIMESTAMPTZ", "NOW", 
                             "STATEMENT_TIMESTAMP", "TIMEOFDAY", "TRANSACTION_TIMESTAMP", 
                             "TO_TIMESTAMP", "TO_CHAR", "TO_DATE", "TO_NUMBER", 
                             "Identifier", "QuotedIdentifier", "UnterminatedQuotedIdentifier", 
                             "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
                             "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
                             "InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
                             "StringConstant", "UnterminatedStringConstant", 
                             "UnicodeEscapeStringConstant", "UnterminatedUnicodeEscapeStringConstant", 
                             "BeginDollarStringConstant", "BinaryStringConstant", 
                             "UnterminatedBinaryStringConstant", "InvalidBinaryStringConstant", 
                             "InvalidUnterminatedBinaryStringConstant", 
                             "HexadecimalStringConstant", "UnterminatedHexadecimalStringConstant", 
                             "InvalidHexadecimalStringConstant", "InvalidUnterminatedHexadecimalStringConstant", 
                             "Integral", "NumericFail", "Numeric", "PLSQLVARIABLENAME", 
                             "PLSQLIDENTIFIER", "Whitespace", "Newline", 
                             "LineComment", "BlockComment", "UnterminatedBlockComment", 
                             "MetaCommand", "EndMetaCommand", "ErrorCharacter", 
                             "EscapeStringConstant", "UnterminatedEscapeStringConstant", 
                             "InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
                             "AfterEscapeStringConstantMode_NotContinued", 
                             "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
                             "DollarText", "EndDollarStringConstant", "AfterEscapeStringConstantWithNewlineMode_Continued" ];
    static ruleNames = [ "root", "plsqlroot", "stmtblock", "stmtmulti", 
                         "stmt", "plsqlconsolecommand", "callstmt", "createrolestmt", 
                         "opt_with", "optrolelist", "alteroptrolelist", 
                         "alteroptroleelem", "createoptroleelem", "createuserstmt", 
                         "alterrolestmt", "opt_in_database", "alterrolesetstmt", 
                         "droprolestmt", "creategroupstmt", "altergroupstmt", 
                         "add_drop", "createschemastmt", "optschemaname", 
                         "optschemaeltlist", "schema_stmt", "variablesetstmt", 
                         "set_rest", "generic_set", "set_rest_more", "var_name", 
                         "var_list", "var_value", "iso_level", "opt_boolean_or_string", 
                         "zone_value", "opt_encoding", "nonreservedword_or_sconst", 
                         "variableresetstmt", "reset_rest", "generic_reset", 
                         "setresetclause", "functionsetresetclause", "variableshowstmt", 
                         "constraintssetstmt", "constraints_set_list", "constraints_set_mode", 
                         "checkpointstmt", "discardstmt", "altertablestmt", 
                         "alter_table_cmds", "partition_cmd", "index_partition_cmd", 
                         "alter_table_cmd", "alter_column_default", "opt_drop_behavior", 
                         "opt_collate_clause", "alter_using", "replica_identity", 
                         "reloptions", "opt_reloptions", "reloption_list", 
                         "reloption_elem", "alter_identity_column_option_list", 
                         "alter_identity_column_option", "partitionboundspec", 
                         "hash_partbound_elem", "hash_partbound", "altercompositetypestmt", 
                         "alter_type_cmds", "alter_type_cmd", "closeportalstmt", 
                         "copystmt", "copy_from", "opt_program", "copy_file_name", 
                         "copy_options", "copy_opt_list", "copy_opt_item", 
                         "opt_binary", "copy_delimiter", "opt_using", "copy_generic_opt_list", 
                         "copy_generic_opt_elem", "copy_generic_opt_arg", 
                         "copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", 
                         "createstmt", "opttemp", "opttableelementlist", 
                         "opttypedtableelementlist", "tableelementlist", 
                         "typedtableelementlist", "tableelement", "typedtableelement", 
                         "columnDef", "columnOptions", "colquallist", "colconstraint", 
                         "colconstraintelem", "generated_when", "constraintattr", 
                         "tablelikeclause", "tablelikeoptionlist", "tablelikeoption", 
                         "tableconstraint", "constraintelem", "opt_no_inherit", 
                         "opt_column_list", "columnlist", "columnElem", 
                         "opt_c_include", "key_match", "exclusionconstraintlist", 
                         "exclusionconstraintelem", "exclusionwhereclause", 
                         "key_actions", "key_update", "key_delete", "key_action", 
                         "optinherit", "optpartitionspec", "partitionspec", 
                         "part_params", "part_elem", "table_access_method_clause", 
                         "optwith", "oncommitoption", "opttablespace", "optconstablespace", 
                         "existingindex", "createstatsstmt", "alterstatsstmt", 
                         "createasstmt", "create_as_target", "opt_with_data", 
                         "creatematviewstmt", "create_mv_target", "optnolog", 
                         "refreshmatviewstmt", "createseqstmt", "alterseqstmt", 
                         "optseqoptlist", "optparenthesizedseqoptlist", 
                         "seqoptlist", "seqoptelem", "opt_by", "numericonly", 
                         "numericonly_list", "createplangstmt", "opt_trusted", 
                         "handler_name", "opt_inline_handler", "validator_clause", 
                         "opt_validator", "opt_procedural", "createtablespacestmt", 
                         "opttablespaceowner", "droptablespacestmt", "createextensionstmt", 
                         "create_extension_opt_list", "create_extension_opt_item", 
                         "alterextensionstmt", "alter_extension_opt_list", 
                         "alter_extension_opt_item", "alterextensioncontentsstmt", 
                         "createfdwstmt", "fdw_option", "fdw_options", "opt_fdw_options", 
                         "alterfdwstmt", "create_generic_options", "generic_option_list", 
                         "alter_generic_options", "alter_generic_option_list", 
                         "alter_generic_option_elem", "generic_option_elem", 
                         "generic_option_name", "generic_option_arg", "createforeignserverstmt", 
                         "opt_type", "foreign_server_version", "opt_foreign_server_version", 
                         "alterforeignserverstmt", "createforeigntablestmt", 
                         "importforeignschemastmt", "import_qualification_type", 
                         "import_qualification", "createusermappingstmt", 
                         "auth_ident", "dropusermappingstmt", "alterusermappingstmt", 
                         "createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", 
                         "rowsecurityoptionalwithcheck", "rowsecuritydefaulttorole", 
                         "rowsecurityoptionaltorole", "rowsecuritydefaultpermissive", 
                         "rowsecuritydefaultforcmd", "row_security_cmd", 
                         "createamstmt", "am_type", "createtrigstmt", "triggeractiontime", 
                         "triggerevents", "triggeroneevent", "triggerreferencing", 
                         "triggertransitions", "triggertransition", "transitionoldornew", 
                         "transitionrowortable", "transitionrelname", "triggerforspec", 
                         "triggerforopteach", "triggerfortype", "triggerwhen", 
                         "function_or_procedure", "triggerfuncargs", "triggerfuncarg", 
                         "optconstrfromtable", "constraintattributespec", 
                         "constraintattributeElem", "createeventtrigstmt", 
                         "event_trigger_when_list", "event_trigger_when_item", 
                         "event_trigger_value_list", "altereventtrigstmt", 
                         "enable_trigger", "createassertionstmt", "definestmt", 
                         "definition", "def_list", "def_elem", "def_arg", 
                         "old_aggr_definition", "old_aggr_list", "old_aggr_elem", 
                         "opt_enum_val_list", "enum_val_list", "alterenumstmt", 
                         "opt_if_not_exists", "createopclassstmt", "opclass_item_list", 
                         "opclass_item", "opt_default", "opt_opfamily", 
                         "opclass_purpose", "opt_recheck", "createopfamilystmt", 
                         "alteropfamilystmt", "opclass_drop_list", "opclass_drop", 
                         "dropopclassstmt", "dropopfamilystmt", "dropownedstmt", 
                         "reassignownedstmt", "dropstmt", "object_type_any_name", 
                         "object_type_name", "drop_type_name", "object_type_name_on_any_name", 
                         "any_name_list", "any_name", "attrs", "type_name_list", 
                         "truncatestmt", "opt_restart_seqs", "commentstmt", 
                         "comment_text", "seclabelstmt", "opt_provider", 
                         "security_label", "fetchstmt", "fetch_args", "from_in", 
                         "opt_from_in", "grantstmt", "revokestmt", "privileges", 
                         "privilege_list", "privilege", "privilege_target", 
                         "grantee_list", "grantee", "opt_grant_grant_option", 
                         "grantrolestmt", "revokerolestmt", "opt_grant_admin_option", 
                         "opt_granted_by", "alterdefaultprivilegesstmt", 
                         "defacloptionlist", "defacloption", "defaclaction", 
                         "defacl_privilege_target", "indexstmt", "opt_unique", 
                         "opt_concurrently", "opt_index_name", "access_method_clause", 
                         "index_params", "index_elem_options", "index_elem", 
                         "opt_include", "index_including_params", "opt_collate", 
                         "opt_class", "opt_asc_desc", "opt_nulls_order", 
                         "createfunctionstmt", "opt_or_replace", "func_args", 
                         "func_args_list", "function_with_argtypes_list", 
                         "function_with_argtypes", "func_args_with_defaults", 
                         "func_args_with_defaults_list", "func_arg", "arg_class", 
                         "param_name", "func_return", "func_type", "func_arg_with_default", 
                         "aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
                         "aggregate_with_argtypes_list", "createfunc_opt_list", 
                         "common_func_opt_item", "createfunc_opt_item", 
                         "func_as", "transform_type_list", "opt_definition", 
                         "table_func_column", "table_func_column_list", 
                         "alterfunctionstmt", "alterfunc_opt_list", "opt_restrict", 
                         "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
                         "oper_argtypes", "any_operator", "operator_with_argtypes_list", 
                         "operator_with_argtypes", "dostmt", "dostmt_opt_list", 
                         "dostmt_opt_item", "createcaststmt", "cast_context", 
                         "dropcaststmt", "opt_if_exists", "createtransformstmt", 
                         "transform_element_list", "droptransformstmt", 
                         "reindexstmt", "reindex_target_type", "reindex_target_multitable", 
                         "reindex_option_list", "reindex_option_elem", "altertblspcstmt", 
                         "renamestmt", "opt_column", "opt_set_data", "alterobjectdependsstmt", 
                         "opt_no", "alterobjectschemastmt", "alteroperatorstmt", 
                         "operator_def_list", "operator_def_elem", "operator_def_arg", 
                         "altertypestmt", "alterownerstmt", "createpublicationstmt", 
                         "opt_publication_for_tables", "publication_for_tables", 
                         "alterpublicationstmt", "createsubscriptionstmt", 
                         "publication_name_list", "publication_name_item", 
                         "altersubscriptionstmt", "dropsubscriptionstmt", 
                         "rulestmt", "ruleactionlist", "ruleactionmulti", 
                         "ruleactionstmt", "ruleactionstmtOrEmpty", "event", 
                         "opt_instead", "notifystmt", "notify_payload", 
                         "listenstmt", "unlistenstmt", "transactionstmt", 
                         "opt_transaction", "transaction_mode_item", "transaction_mode_list", 
                         "transaction_mode_list_or_empty", "opt_transaction_chain", 
                         "viewstmt", "opt_check_option", "loadstmt", "createdbstmt", 
                         "createdb_opt_list", "createdb_opt_items", "createdb_opt_item", 
                         "createdb_opt_name", "opt_equal", "alterdatabasestmt", 
                         "alterdatabasesetstmt", "dropdbstmt", "drop_option_list", 
                         "drop_option", "altercollationstmt", "altersystemstmt", 
                         "createdomainstmt", "alterdomainstmt", "opt_as", 
                         "altertsdictionarystmt", "altertsconfigurationstmt", 
                         "any_with", "createconversionstmt", "clusterstmt", 
                         "cluster_index_specification", "vacuumstmt", "analyzestmt", 
                         "vac_analyze_option_list", "analyze_keyword", "vac_analyze_option_elem", 
                         "vac_analyze_option_name", "vac_analyze_option_arg", 
                         "opt_analyze", "opt_verbose", "opt_full", "opt_freeze", 
                         "opt_name_list", "vacuum_relation", "vacuum_relation_list", 
                         "opt_vacuum_relation_list", "explainstmt", "explainablestmt", 
                         "explain_option_list", "explain_option_elem", "explain_option_name", 
                         "explain_option_arg", "preparestmt", "prep_type_clause", 
                         "preparablestmt", "executestmt", "execute_param_clause", 
                         "deallocatestmt", "insertstmt", "insert_target", 
                         "insert_rest", "override_kind", "insert_column_list", 
                         "insert_column_item", "opt_on_conflict", "opt_conf_expr", 
                         "returning_clause", "mergestmt", "merge_insert_clause", 
                         "merge_update_clause", "merge_delete_clause", "deletestmt", 
                         "using_clause", "lockstmt", "opt_lock", "lock_type", 
                         "opt_nowait", "opt_nowait_or_skip", "updatestmt", 
                         "set_clause_list", "set_clause", "set_target", 
                         "set_target_list", "declarecursorstmt", "cursor_name", 
                         "cursor_options", "opt_hold", "selectstmt", "select_with_parens", 
                         "select_no_parens", "select_clause", "simple_select", 
                         "set_operator", "set_operator_with_all_or_distinct", 
                         "with_clause", "cte_list", "common_table_expr", 
                         "opt_materialized", "opt_with_clause", "into_clause", 
                         "opt_strict", "opttempTableName", "opt_table", 
                         "all_or_distinct", "distinct_clause", "opt_all_clause", 
                         "opt_sort_clause", "sort_clause", "sortby_list", 
                         "sortby", "select_limit", "opt_select_limit", "limit_clause", 
                         "offset_clause", "select_limit_value", "select_offset_value", 
                         "select_fetch_first_value", "i_or_f_const", "row_or_rows", 
                         "first_or_next", "group_clause", "group_by_list", 
                         "group_by_item", "empty_grouping_set", "rollup_clause", 
                         "cube_clause", "grouping_sets_clause", "having_clause", 
                         "for_locking_clause", "opt_for_locking_clause", 
                         "for_locking_items", "for_locking_item", "for_locking_strength", 
                         "locked_rels_list", "values_clause", "from_clause", 
                         "from_list", "non_ansi_join", "table_ref", "alias_clause", 
                         "opt_alias_clause", "table_alias_clause", "func_alias_clause", 
                         "join_type", "join_qual", "relation_expr", "relation_expr_list", 
                         "relation_expr_opt_alias", "tablesample_clause", 
                         "opt_repeatable_clause", "func_table", "rowsfrom_item", 
                         "rowsfrom_list", "opt_col_def_list", "opt_ordinality", 
                         "where_clause", "where_or_current_clause", "opttablefuncelementlist", 
                         "tablefuncelementlist", "tablefuncelement", "xmltable", 
                         "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
                         "xmltable_column_option_el", "xml_namespace_list", 
                         "xml_namespace_el", "typename", "opt_array_bounds", 
                         "simpletypename", "consttypename", "generictype", 
                         "opt_type_modifiers", "numeric", "opt_float", "bit", 
                         "constbit", "bitwithlength", "bitwithoutlength", 
                         "character", "constcharacter", "character_c", "opt_varying", 
                         "constdatetime", "constinterval", "opt_timezone", 
                         "opt_interval", "interval_second", "opt_escape", 
                         "a_expr", "a_expr_qual", "a_expr_lessless", "a_expr_or", 
                         "a_expr_and", "a_expr_between", "a_expr_in", "a_expr_unary_not", 
                         "a_expr_isnull", "a_expr_is_not", "a_expr_compare", 
                         "a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", 
                         "a_expr_add", "a_expr_mul", "a_expr_caret", "a_expr_unary_sign", 
                         "a_expr_at_time_zone", "a_expr_collate", "a_expr_typecast", 
                         "b_expr", "c_expr", "plsqlvariablename", "func_application", 
                         "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
                         "xml_root_version", "opt_xml_root_standalone", 
                         "xml_attributes", "xml_attribute_list", "xml_attribute_el", 
                         "document_or_content", "xml_whitespace_option", 
                         "xmlexists_argument", "xml_passing_mech", "within_group_clause", 
                         "filter_clause", "window_clause", "window_definition_list", 
                         "window_definition", "over_clause", "window_specification", 
                         "opt_existing_window_name", "opt_partition_clause", 
                         "opt_frame_clause", "frame_extent", "frame_bound", 
                         "opt_window_exclusion_clause", "row", "explicit_row", 
                         "implicit_row", "sub_type", "all_op", "mathop", 
                         "qual_op", "qual_all_op", "subquery_Op", "expr_list", 
                         "func_arg_list", "func_arg_expr", "type_list", 
                         "array_expr", "array_expr_list", "extract_list", 
                         "extract_arg", "unicode_normal_form", "overlay_list", 
                         "position_list", "substr_list", "trim_list", "in_expr", 
                         "case_expr", "when_clause_list", "when_clause", 
                         "case_default", "case_arg", "columnref", "indirection_el", 
                         "opt_slice_bound", "indirection", "opt_indirection", 
                         "opt_target_list", "target_list", "target_el", 
                         "qualified_name_list", "qualified_name", "name_list", 
                         "name", "attr_name", "file_name", "func_name", 
                         "aexprconst", "xconst", "bconst", "fconst", "iconst", 
                         "sconst", "anysconst", "opt_uescape", "signediconst", 
                         "roleid", "rolespec", "role_list", "colid", "table_alias", 
                         "type_function_name", "nonreservedword", "collabel", 
                         "identifier", "plsqlidentifier", "unreserved_keyword", 
                         "col_name_keyword", "type_func_name_keyword", "reserved_keyword", 
                         "builtin_function_name", "pl_function", "comp_options", 
                         "comp_option", "sharp", "option_value", "opt_semi", 
                         "pl_block", "decl_sect", "decl_start", "decl_stmts", 
                         "label_decl", "decl_stmt", "decl_statement", "opt_scrollable", 
                         "decl_cursor_query", "decl_cursor_args", "decl_cursor_arglist", 
                         "decl_cursor_arg", "decl_is_for", "decl_aliasitem", 
                         "decl_varname", "decl_const", "decl_datatype", 
                         "decl_collate", "decl_notnull", "decl_defval", 
                         "decl_defkey", "assign_operator", "proc_sect", 
                         "proc_stmt", "stmt_perform", "stmt_call", "opt_expr_list", 
                         "stmt_assign", "stmt_getdiag", "getdiag_area_opt", 
                         "getdiag_list", "getdiag_list_item", "getdiag_item", 
                         "getdiag_target", "assign_var", "stmt_if", "stmt_elsifs", 
                         "stmt_else", "stmt_case", "opt_expr_until_when", 
                         "case_when_list", "case_when", "opt_case_else", 
                         "stmt_loop", "stmt_while", "stmt_for", "for_control", 
                         "opt_for_using_expression", "opt_cursor_parameters", 
                         "opt_reverse", "opt_by_expression", "for_variable", 
                         "stmt_foreach_a", "foreach_slice", "stmt_exit", 
                         "exit_type", "stmt_return", "opt_return_result", 
                         "stmt_raise", "opt_stmt_raise_level", "opt_raise_list", 
                         "opt_raise_using", "opt_raise_using_elem", "opt_raise_using_elem_list", 
                         "stmt_assert", "opt_stmt_assert_message", "loop_body", 
                         "stmt_execsql", "stmt_dynexecute", "opt_execute_using", 
                         "opt_execute_using_list", "opt_execute_into", "stmt_open", 
                         "opt_open_bound_list_item", "opt_open_bound_list", 
                         "opt_open_using", "opt_scroll_option", "opt_scroll_option_no", 
                         "stmt_fetch", "into_target", "opt_cursor_from", 
                         "opt_fetch_direction", "stmt_move", "stmt_close", 
                         "stmt_null", "stmt_commit", "stmt_rollback", "plsql_opt_transaction_chain", 
                         "stmt_set", "cursor_variable", "exception_sect", 
                         "proc_exceptions", "proc_exception", "proc_conditions", 
                         "proc_condition", "opt_block_label", "opt_loop_label", 
                         "opt_label", "opt_exitcond", "any_identifier", 
                         "plsql_unreserved_keyword", "sql_expression", "expr_until_then", 
                         "expr_until_semi", "expr_until_rightbracket", "expr_until_loop", 
                         "make_execsql_stmt", "opt_returning_clause_into" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = PostgreSQLParser.ruleNames;
        this.literalNames = PostgreSQLParser.literalNames;
        this.symbolicNames = PostgreSQLParser.symbolicNames;


    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 603:
    	    		return this.b_expr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    b_expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 8);
    		case 1:
    			return this.precpred(this._ctx, 7);
    		case 2:
    			return this.precpred(this._ctx, 6);
    		case 3:
    			return this.precpred(this._ctx, 5);
    		case 4:
    			return this.precpred(this._ctx, 4);
    		case 5:
    			return this.precpred(this._ctx, 10);
    		case 6:
    			return this.precpred(this._ctx, 2);
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	root() {
	    let localctx = new RootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, PostgreSQLParser.RULE_root);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1626;
	        this.stmtblock();
	        this.state = 1627;
	        this.match(PostgreSQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plsqlroot() {
	    let localctx = new PlsqlrootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, PostgreSQLParser.RULE_plsqlroot);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1629;
	        this.pl_function();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmtblock() {
	    let localctx = new StmtblockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, PostgreSQLParser.RULE_stmtblock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1631;
	        this.stmtmulti();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmtmulti() {
	    let localctx = new StmtmultiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, PostgreSQLParser.RULE_stmtmulti);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===31 || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 570441729) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 142606337) !== 0) || _la===105 || _la===129 || ((((_la - 138)) & ~0x1f) === 0 && ((1 << (_la - 138)) & 2159673601) !== 0) || ((((_la - 177)) & ~0x1f) === 0 && ((1 << (_la - 177)) & 100680739) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 69244929) !== 0) || ((((_la - 264)) & ~0x1f) === 0 && ((1 << (_la - 264)) & 1074266113) !== 0) || ((((_la - 298)) & ~0x1f) === 0 && ((1 << (_la - 298)) & 1346523403) !== 0) || ((((_la - 333)) & ~0x1f) === 0 && ((1 << (_la - 333)) & 1677983745) !== 0) || ((((_la - 415)) & ~0x1f) === 0 && ((1 << (_la - 415)) & 537133057) !== 0) || _la===454 || _la===668) {
	            this.state = 1633;
	            this.stmt();
	            this.state = 1635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7) {
	                this.state = 1634;
	                this.match(PostgreSQLParser.SEMI);
	            }

	            this.state = 1641;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt() {
	    let localctx = new StmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, PostgreSQLParser.RULE_stmt);
	    try {
	        this.state = 1767;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1642;
	            this.altereventtrigstmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1643;
	            this.altercollationstmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1644;
	            this.alterdatabasestmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1645;
	            this.alterdatabasesetstmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1646;
	            this.alterdefaultprivilegesstmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1647;
	            this.alterdomainstmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1648;
	            this.alterenumstmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1649;
	            this.alterextensionstmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1650;
	            this.alterextensioncontentsstmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1651;
	            this.alterfdwstmt();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1652;
	            this.alterforeignserverstmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1653;
	            this.alterfunctionstmt();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1654;
	            this.altergroupstmt();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1655;
	            this.alterobjectdependsstmt();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1656;
	            this.alterobjectschemastmt();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1657;
	            this.alterownerstmt();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1658;
	            this.alteroperatorstmt();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1659;
	            this.altertypestmt();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1660;
	            this.alterpolicystmt();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1661;
	            this.alterseqstmt();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1662;
	            this.altersystemstmt();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1663;
	            this.altertablestmt();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1664;
	            this.altertblspcstmt();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1665;
	            this.altercompositetypestmt();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1666;
	            this.alterpublicationstmt();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1667;
	            this.alterrolesetstmt();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1668;
	            this.alterrolestmt();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1669;
	            this.altersubscriptionstmt();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1670;
	            this.alterstatsstmt();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1671;
	            this.altertsconfigurationstmt();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1672;
	            this.altertsdictionarystmt();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1673;
	            this.alterusermappingstmt();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1674;
	            this.analyzestmt();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1675;
	            this.callstmt();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1676;
	            this.checkpointstmt();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1677;
	            this.closeportalstmt();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1678;
	            this.clusterstmt();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1679;
	            this.commentstmt();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1680;
	            this.constraintssetstmt();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1681;
	            this.copystmt();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1682;
	            this.createamstmt();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1683;
	            this.createasstmt();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1684;
	            this.createassertionstmt();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1685;
	            this.createcaststmt();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1686;
	            this.createconversionstmt();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1687;
	            this.createdomainstmt();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 1688;
	            this.createextensionstmt();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 1689;
	            this.createfdwstmt();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 1690;
	            this.createforeignserverstmt();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 1691;
	            this.createforeigntablestmt();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 1692;
	            this.createfunctionstmt();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 1693;
	            this.creategroupstmt();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 1694;
	            this.creatematviewstmt();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 1695;
	            this.createopclassstmt();
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 1696;
	            this.createopfamilystmt();
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 1697;
	            this.createpublicationstmt();
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 1698;
	            this.alteropfamilystmt();
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 1699;
	            this.createpolicystmt();
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 1700;
	            this.createplangstmt();
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 1701;
	            this.createschemastmt();
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 1702;
	            this.createseqstmt();
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 1703;
	            this.createstmt();
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 1704;
	            this.createsubscriptionstmt();
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 1705;
	            this.createstatsstmt();
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 1706;
	            this.createtablespacestmt();
	            break;

	        case 66:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 1707;
	            this.createtransformstmt();
	            break;

	        case 67:
	            this.enterOuterAlt(localctx, 67);
	            this.state = 1708;
	            this.createtrigstmt();
	            break;

	        case 68:
	            this.enterOuterAlt(localctx, 68);
	            this.state = 1709;
	            this.createeventtrigstmt();
	            break;

	        case 69:
	            this.enterOuterAlt(localctx, 69);
	            this.state = 1710;
	            this.createrolestmt();
	            break;

	        case 70:
	            this.enterOuterAlt(localctx, 70);
	            this.state = 1711;
	            this.createuserstmt();
	            break;

	        case 71:
	            this.enterOuterAlt(localctx, 71);
	            this.state = 1712;
	            this.createusermappingstmt();
	            break;

	        case 72:
	            this.enterOuterAlt(localctx, 72);
	            this.state = 1713;
	            this.createdbstmt();
	            break;

	        case 73:
	            this.enterOuterAlt(localctx, 73);
	            this.state = 1714;
	            this.deallocatestmt();
	            break;

	        case 74:
	            this.enterOuterAlt(localctx, 74);
	            this.state = 1715;
	            this.declarecursorstmt();
	            break;

	        case 75:
	            this.enterOuterAlt(localctx, 75);
	            this.state = 1716;
	            this.definestmt();
	            break;

	        case 76:
	            this.enterOuterAlt(localctx, 76);
	            this.state = 1717;
	            this.deletestmt();
	            break;

	        case 77:
	            this.enterOuterAlt(localctx, 77);
	            this.state = 1718;
	            this.discardstmt();
	            break;

	        case 78:
	            this.enterOuterAlt(localctx, 78);
	            this.state = 1719;
	            this.dostmt();
	            break;

	        case 79:
	            this.enterOuterAlt(localctx, 79);
	            this.state = 1720;
	            this.dropcaststmt();
	            break;

	        case 80:
	            this.enterOuterAlt(localctx, 80);
	            this.state = 1721;
	            this.dropopclassstmt();
	            break;

	        case 81:
	            this.enterOuterAlt(localctx, 81);
	            this.state = 1722;
	            this.dropopfamilystmt();
	            break;

	        case 82:
	            this.enterOuterAlt(localctx, 82);
	            this.state = 1723;
	            this.dropownedstmt();
	            break;

	        case 83:
	            this.enterOuterAlt(localctx, 83);
	            this.state = 1724;
	            this.dropstmt();
	            break;

	        case 84:
	            this.enterOuterAlt(localctx, 84);
	            this.state = 1725;
	            this.dropsubscriptionstmt();
	            break;

	        case 85:
	            this.enterOuterAlt(localctx, 85);
	            this.state = 1726;
	            this.droptablespacestmt();
	            break;

	        case 86:
	            this.enterOuterAlt(localctx, 86);
	            this.state = 1727;
	            this.droptransformstmt();
	            break;

	        case 87:
	            this.enterOuterAlt(localctx, 87);
	            this.state = 1728;
	            this.droprolestmt();
	            break;

	        case 88:
	            this.enterOuterAlt(localctx, 88);
	            this.state = 1729;
	            this.dropusermappingstmt();
	            break;

	        case 89:
	            this.enterOuterAlt(localctx, 89);
	            this.state = 1730;
	            this.dropdbstmt();
	            break;

	        case 90:
	            this.enterOuterAlt(localctx, 90);
	            this.state = 1731;
	            this.executestmt();
	            break;

	        case 91:
	            this.enterOuterAlt(localctx, 91);
	            this.state = 1732;
	            this.explainstmt();
	            break;

	        case 92:
	            this.enterOuterAlt(localctx, 92);
	            this.state = 1733;
	            this.fetchstmt();
	            break;

	        case 93:
	            this.enterOuterAlt(localctx, 93);
	            this.state = 1734;
	            this.grantstmt();
	            break;

	        case 94:
	            this.enterOuterAlt(localctx, 94);
	            this.state = 1735;
	            this.grantrolestmt();
	            break;

	        case 95:
	            this.enterOuterAlt(localctx, 95);
	            this.state = 1736;
	            this.importforeignschemastmt();
	            break;

	        case 96:
	            this.enterOuterAlt(localctx, 96);
	            this.state = 1737;
	            this.indexstmt();
	            break;

	        case 97:
	            this.enterOuterAlt(localctx, 97);
	            this.state = 1738;
	            this.insertstmt();
	            break;

	        case 98:
	            this.enterOuterAlt(localctx, 98);
	            this.state = 1739;
	            this.mergestmt();
	            break;

	        case 99:
	            this.enterOuterAlt(localctx, 99);
	            this.state = 1740;
	            this.listenstmt();
	            break;

	        case 100:
	            this.enterOuterAlt(localctx, 100);
	            this.state = 1741;
	            this.refreshmatviewstmt();
	            break;

	        case 101:
	            this.enterOuterAlt(localctx, 101);
	            this.state = 1742;
	            this.loadstmt();
	            break;

	        case 102:
	            this.enterOuterAlt(localctx, 102);
	            this.state = 1743;
	            this.lockstmt();
	            break;

	        case 103:
	            this.enterOuterAlt(localctx, 103);
	            this.state = 1744;
	            this.notifystmt();
	            break;

	        case 104:
	            this.enterOuterAlt(localctx, 104);
	            this.state = 1745;
	            this.preparestmt();
	            break;

	        case 105:
	            this.enterOuterAlt(localctx, 105);
	            this.state = 1746;
	            this.reassignownedstmt();
	            break;

	        case 106:
	            this.enterOuterAlt(localctx, 106);
	            this.state = 1747;
	            this.reindexstmt();
	            break;

	        case 107:
	            this.enterOuterAlt(localctx, 107);
	            this.state = 1748;
	            this.removeaggrstmt();
	            break;

	        case 108:
	            this.enterOuterAlt(localctx, 108);
	            this.state = 1749;
	            this.removefuncstmt();
	            break;

	        case 109:
	            this.enterOuterAlt(localctx, 109);
	            this.state = 1750;
	            this.removeoperstmt();
	            break;

	        case 110:
	            this.enterOuterAlt(localctx, 110);
	            this.state = 1751;
	            this.renamestmt();
	            break;

	        case 111:
	            this.enterOuterAlt(localctx, 111);
	            this.state = 1752;
	            this.revokestmt();
	            break;

	        case 112:
	            this.enterOuterAlt(localctx, 112);
	            this.state = 1753;
	            this.revokerolestmt();
	            break;

	        case 113:
	            this.enterOuterAlt(localctx, 113);
	            this.state = 1754;
	            this.rulestmt();
	            break;

	        case 114:
	            this.enterOuterAlt(localctx, 114);
	            this.state = 1755;
	            this.seclabelstmt();
	            break;

	        case 115:
	            this.enterOuterAlt(localctx, 115);
	            this.state = 1756;
	            this.selectstmt();
	            break;

	        case 116:
	            this.enterOuterAlt(localctx, 116);
	            this.state = 1757;
	            this.transactionstmt();
	            break;

	        case 117:
	            this.enterOuterAlt(localctx, 117);
	            this.state = 1758;
	            this.truncatestmt();
	            break;

	        case 118:
	            this.enterOuterAlt(localctx, 118);
	            this.state = 1759;
	            this.unlistenstmt();
	            break;

	        case 119:
	            this.enterOuterAlt(localctx, 119);
	            this.state = 1760;
	            this.updatestmt();
	            break;

	        case 120:
	            this.enterOuterAlt(localctx, 120);
	            this.state = 1761;
	            this.vacuumstmt();
	            break;

	        case 121:
	            this.enterOuterAlt(localctx, 121);
	            this.state = 1762;
	            this.variableresetstmt();
	            break;

	        case 122:
	            this.enterOuterAlt(localctx, 122);
	            this.state = 1763;
	            this.variablesetstmt();
	            break;

	        case 123:
	            this.enterOuterAlt(localctx, 123);
	            this.state = 1764;
	            this.variableshowstmt();
	            break;

	        case 124:
	            this.enterOuterAlt(localctx, 124);
	            this.state = 1765;
	            this.viewstmt();
	            break;

	        case 125:
	            this.enterOuterAlt(localctx, 125);
	            this.state = 1766;
	            this.plsqlconsolecommand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plsqlconsolecommand() {
	    let localctx = new PlsqlconsolecommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, PostgreSQLParser.RULE_plsqlconsolecommand);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1769;
	        this.match(PostgreSQLParser.MetaCommand);
	        this.state = 1771;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===669) {
	            this.state = 1770;
	            this.match(PostgreSQLParser.EndMetaCommand);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callstmt() {
	    let localctx = new CallstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, PostgreSQLParser.RULE_callstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1773;
	        this.match(PostgreSQLParser.CALL);
	        this.state = 1774;
	        this.func_application();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createrolestmt() {
	    let localctx = new CreaterolestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, PostgreSQLParser.RULE_createrolestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1776;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 1777;
	        this.match(PostgreSQLParser.ROLE);
	        this.state = 1778;
	        this.roleid();
	        this.state = 1779;
	        this.opt_with();
	        this.state = 1780;
	        this.optrolelist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_with() {
	    let localctx = new Opt_withContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, PostgreSQLParser.RULE_opt_with);
	    try {
	        this.state = 1784;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1782;
	            this.match(PostgreSQLParser.WITH);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optrolelist() {
	    let localctx = new OptrolelistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, PostgreSQLParser.RULE_optrolelist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1789;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1786;
	                this.createoptroleelem(); 
	            }
	            this.state = 1791;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alteroptrolelist() {
	    let localctx = new AlteroptrolelistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, PostgreSQLParser.RULE_alteroptrolelist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1795;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1792;
	                this.alteroptroleelem(); 
	            }
	            this.state = 1797;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alteroptroleelem() {
	    let localctx = new AlteroptroleelemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, PostgreSQLParser.RULE_alteroptroleelem);
	    var _la = 0;
	    try {
	        this.state = 1816;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 280:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1798;
	            this.match(PostgreSQLParser.PASSWORD);
	            this.state = 1801;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 645:
	            case 647:
	            case 649:
	            case 671:
	                this.state = 1799;
	                this.sconst();
	                break;
	            case 78:
	                this.state = 1800;
	                this.match(PostgreSQLParser.NULL_P);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 195:
	        case 357:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1803;
	            _la = this._input.LA(1);
	            if(!(_la===195 || _la===357)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1804;
	            this.match(PostgreSQLParser.PASSWORD);
	            this.state = 1805;
	            this.sconst();
	            break;
	        case 228:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1806;
	            this.match(PostgreSQLParser.INHERIT);
	            break;
	        case 164:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1807;
	            this.match(PostgreSQLParser.CONNECTION);
	            this.state = 1808;
	            this.match(PostgreSQLParser.LIMIT);
	            this.state = 1809;
	            this.signediconst();
	            break;
	        case 364:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1810;
	            this.match(PostgreSQLParser.VALID);
	            this.state = 1811;
	            this.match(PostgreSQLParser.UNTIL);
	            this.state = 1812;
	            this.sconst();
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1813;
	            this.match(PostgreSQLParser.USER);
	            this.state = 1814;
	            this.role_list();
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 123:
	        case 130:
	        case 144:
	        case 153:
	        case 157:
	        case 161:
	        case 167:
	        case 172:
	        case 207:
	        case 210:
	        case 232:
	        case 240:
	        case 258:
	        case 261:
	        case 262:
	        case 272:
	        case 286:
	        case 300:
	        case 306:
	        case 312:
	        case 316:
	        case 317:
	        case 326:
	        case 353:
	        case 433:
	        case 434:
	        case 477:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1815;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createoptroleelem() {
	    let localctx = new CreateoptroleelemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, PostgreSQLParser.RULE_createoptroleelem);
	    var _la = 0;
	    try {
	        this.state = 1828;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 99:
	        case 116:
	        case 123:
	        case 130:
	        case 144:
	        case 153:
	        case 157:
	        case 161:
	        case 164:
	        case 167:
	        case 172:
	        case 195:
	        case 207:
	        case 210:
	        case 228:
	        case 232:
	        case 240:
	        case 258:
	        case 261:
	        case 262:
	        case 272:
	        case 280:
	        case 286:
	        case 300:
	        case 306:
	        case 312:
	        case 316:
	        case 317:
	        case 326:
	        case 353:
	        case 357:
	        case 364:
	        case 433:
	        case 434:
	        case 477:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1818;
	            this.alteroptroleelem();
	            break;
	        case 341:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1819;
	            this.match(PostgreSQLParser.SYSID);
	            this.state = 1820;
	            this.iconst();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1821;
	            this.match(PostgreSQLParser.ADMIN);
	            this.state = 1822;
	            this.role_list();
	            break;
	        case 311:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1823;
	            this.match(PostgreSQLParser.ROLE);
	            this.state = 1824;
	            this.role_list();
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1825;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 1826;
	            _la = this._input.LA(1);
	            if(!(_la===66 || _la===311)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1827;
	            this.role_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createuserstmt() {
	    let localctx = new CreateuserstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, PostgreSQLParser.RULE_createuserstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1830;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 1831;
	        this.match(PostgreSQLParser.USER);
	        this.state = 1832;
	        this.roleid();
	        this.state = 1833;
	        this.opt_with();
	        this.state = 1834;
	        this.optrolelist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterrolestmt() {
	    let localctx = new AlterrolestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, PostgreSQLParser.RULE_alterrolestmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1836;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 1837;
	        _la = this._input.LA(1);
	        if(!(_la===99 || _la===311)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1838;
	        this.rolespec();
	        this.state = 1839;
	        this.opt_with();
	        this.state = 1840;
	        this.alteroptrolelist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_in_database() {
	    let localctx = new Opt_in_databaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, PostgreSQLParser.RULE_opt_in_database);
	    try {
	        this.state = 1846;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 306:
	        case 326:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1843;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 1844;
	            this.match(PostgreSQLParser.DATABASE);
	            this.state = 1845;
	            this.name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterrolesetstmt() {
	    let localctx = new AlterrolesetstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, PostgreSQLParser.RULE_alterrolesetstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1848;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 1849;
	        _la = this._input.LA(1);
	        if(!(_la===99 || _la===311)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===30) {
	            this.state = 1850;
	            this.match(PostgreSQLParser.ALL);
	        }

	        this.state = 1853;
	        this.rolespec();
	        this.state = 1854;
	        this.opt_in_database();
	        this.state = 1855;
	        this.setresetclause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	droprolestmt() {
	    let localctx = new DroprolestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, PostgreSQLParser.RULE_droprolestmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1857;
	        this.match(PostgreSQLParser.DROP);
	        this.state = 1858;
	        _la = this._input.LA(1);
	        if(!(_la===66 || _la===99 || _la===311)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1861;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        if(la_===1) {
	            this.state = 1859;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 1860;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 1863;
	        this.role_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creategroupstmt() {
	    let localctx = new CreategroupstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, PostgreSQLParser.RULE_creategroupstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1865;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 1866;
	        this.match(PostgreSQLParser.GROUP_P);
	        this.state = 1867;
	        this.roleid();
	        this.state = 1868;
	        this.opt_with();
	        this.state = 1869;
	        this.optrolelist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altergroupstmt() {
	    let localctx = new AltergroupstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, PostgreSQLParser.RULE_altergroupstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1871;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 1872;
	        this.match(PostgreSQLParser.GROUP_P);
	        this.state = 1873;
	        this.rolespec();
	        this.state = 1874;
	        this.add_drop();
	        this.state = 1875;
	        this.match(PostgreSQLParser.USER);
	        this.state = 1876;
	        this.role_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add_drop() {
	    let localctx = new Add_dropContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, PostgreSQLParser.RULE_add_drop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1878;
	        _la = this._input.LA(1);
	        if(!(_la===133 || _la===191)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createschemastmt() {
	    let localctx = new CreateschemastmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, PostgreSQLParser.RULE_createschemastmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1880;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 1881;
	        this.match(PostgreSQLParser.SCHEMA);
	        this.state = 1885;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        if(la_===1) {
	            this.state = 1882;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 1883;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 1884;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 1892;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1887;
	            this.optschemaname();
	            this.state = 1888;
	            this.match(PostgreSQLParser.AUTHORIZATION);
	            this.state = 1889;
	            this.rolespec();
	            break;

	        case 2:
	            this.state = 1891;
	            this.colid();
	            break;

	        }
	        this.state = 1894;
	        this.optschemaeltlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optschemaname() {
	    let localctx = new OptschemanameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, PostgreSQLParser.RULE_optschemaname);
	    try {
	        this.state = 1898;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1896;
	            this.colid();
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optschemaeltlist() {
	    let localctx = new OptschemaeltlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, PostgreSQLParser.RULE_optschemaeltlist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1903;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1900;
	                this.schema_stmt(); 
	            }
	            this.state = 1905;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schema_stmt() {
	    let localctx = new Schema_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, PostgreSQLParser.RULE_schema_stmt);
	    try {
	        this.state = 1912;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1906;
	            this.createstmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1907;
	            this.indexstmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1908;
	            this.createseqstmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1909;
	            this.createtrigstmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1910;
	            this.grantstmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1911;
	            this.viewstmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variablesetstmt() {
	    let localctx = new VariablesetstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, PostgreSQLParser.RULE_variablesetstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1914;
	        this.match(PostgreSQLParser.SET);
	        this.state = 1916;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        if(la_===1) {
	            this.state = 1915;
	            _la = this._input.LA(1);
	            if(!(_la===245 || _la===325)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1918;
	        this.set_rest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_rest() {
	    let localctx = new Set_restContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, PostgreSQLParser.RULE_set_rest);
	    try {
	        this.state = 1928;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1920;
	            this.match(PostgreSQLParser.TRANSACTION);
	            this.state = 1921;
	            this.transaction_mode_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1922;
	            this.match(PostgreSQLParser.SESSION);
	            this.state = 1923;
	            this.match(PostgreSQLParser.CHARACTERISTICS);
	            this.state = 1924;
	            this.match(PostgreSQLParser.AS);
	            this.state = 1925;
	            this.match(PostgreSQLParser.TRANSACTION);
	            this.state = 1926;
	            this.transaction_mode_list();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1927;
	            this.set_rest_more();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_set() {
	    let localctx = new Generic_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, PostgreSQLParser.RULE_generic_set);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1930;
	        this.var_name();
	        this.state = 1931;
	        _la = this._input.LA(1);
	        if(!(_la===10 || _la===94)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1932;
	        this.var_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_rest_more() {
	    let localctx = new Set_rest_moreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, PostgreSQLParser.RULE_set_rest_more);
	    try {
	        this.state = 1959;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1934;
	            this.generic_set();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1935;
	            this.var_name();
	            this.state = 1936;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 1937;
	            this.match(PostgreSQLParser.CURRENT_P);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1939;
	            this.match(PostgreSQLParser.TIME);
	            this.state = 1940;
	            this.match(PostgreSQLParser.ZONE);
	            this.state = 1941;
	            this.zone_value();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1942;
	            this.match(PostgreSQLParser.CATALOG);
	            this.state = 1943;
	            this.sconst();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1944;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 1945;
	            this.sconst();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1946;
	            this.match(PostgreSQLParser.NAMES);
	            this.state = 1947;
	            this.opt_encoding();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1948;
	            this.match(PostgreSQLParser.ROLE);
	            this.state = 1949;
	            this.nonreservedword_or_sconst();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1950;
	            this.match(PostgreSQLParser.SESSION);
	            this.state = 1951;
	            this.match(PostgreSQLParser.AUTHORIZATION);
	            this.state = 1952;
	            this.nonreservedword_or_sconst();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1953;
	            this.match(PostgreSQLParser.XML_P);
	            this.state = 1954;
	            this.match(PostgreSQLParser.OPTION);
	            this.state = 1955;
	            this.document_or_content();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1956;
	            this.match(PostgreSQLParser.TRANSACTION);
	            this.state = 1957;
	            this.match(PostgreSQLParser.SNAPSHOT);
	            this.state = 1958;
	            this.sconst();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_name() {
	    let localctx = new Var_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, PostgreSQLParser.RULE_var_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1961;
	        this.colid();
	        this.state = 1966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11) {
	            this.state = 1962;
	            this.match(PostgreSQLParser.DOT);
	            this.state = 1963;
	            this.colid();
	            this.state = 1968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_list() {
	    let localctx = new Var_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, PostgreSQLParser.RULE_var_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1969;
	        this.var_value();
	        this.state = 1974;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 1970;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 1971;
	            this.var_value();
	            this.state = 1976;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_value() {
	    let localctx = new Var_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, PostgreSQLParser.RULE_var_value);
	    try {
	        this.state = 1979;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 80:
	        case 92:
	        case 96:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1977;
	            this.opt_boolean_or_string();
	            break;
	        case 12:
	        case 13:
	        case 658:
	        case 660:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1978;
	            this.numericonly();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iso_level() {
	    let localctx = new Iso_levelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, PostgreSQLParser.RULE_iso_level);
	    var _la = 0;
	    try {
	        this.state = 1986;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 293:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1981;
	            this.match(PostgreSQLParser.READ);
	            this.state = 1982;
	            _la = this._input.LA(1);
	            if(!(_la===162 || _la===356)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 303:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1983;
	            this.match(PostgreSQLParser.REPEATABLE);
	            this.state = 1984;
	            this.match(PostgreSQLParser.READ);
	            break;
	        case 323:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1985;
	            this.match(PostgreSQLParser.SERIALIZABLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_boolean_or_string() {
	    let localctx = new Opt_boolean_or_stringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, PostgreSQLParser.RULE_opt_boolean_or_string);
	    try {
	        this.state = 1992;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 96:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1988;
	            this.match(PostgreSQLParser.TRUE_P);
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1989;
	            this.match(PostgreSQLParser.FALSE_P);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1990;
	            this.match(PostgreSQLParser.ON);
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1991;
	            this.nonreservedword_or_sconst();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	zone_value() {
	    let localctx = new Zone_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, PostgreSQLParser.RULE_zone_value);
	    try {
	        this.state = 2009;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1994;
	            this.sconst();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1995;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1996;
	            this.constinterval();
	            this.state = 1997;
	            this.sconst();
	            this.state = 1998;
	            this.opt_interval();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2000;
	            this.constinterval();
	            this.state = 2001;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2002;
	            this.iconst();
	            this.state = 2003;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 2004;
	            this.sconst();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2006;
	            this.numericonly();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2007;
	            this.match(PostgreSQLParser.DEFAULT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2008;
	            this.match(PostgreSQLParser.LOCAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_encoding() {
	    let localctx = new Opt_encodingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, PostgreSQLParser.RULE_opt_encoding);
	    try {
	        this.state = 2014;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2011;
	            this.sconst();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2012;
	            this.match(PostgreSQLParser.DEFAULT);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 36:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 77:
	        case 88:
	        case 92:
	        case 104:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 149:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 170:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 205:
	        case 222:
	        case 232:
	        case 238:
	        case 241:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 308:
	        case 309:
	        case 310:
	        case 312:
	        case 313:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 331:
	        case 333:
	        case 339:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 370:
	        case 415:
	        case 433:
	        case 443:
	        case 444:
	        case 454:
	        case 459:
	        case 460:
	        case 668:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonreservedword_or_sconst() {
	    let localctx = new Nonreservedword_or_sconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, PostgreSQLParser.RULE_nonreservedword_or_sconst);
	    try {
	        this.state = 2018;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2016;
	            this.nonreservedword();
	            break;
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2017;
	            this.sconst();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableresetstmt() {
	    let localctx = new VariableresetstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, PostgreSQLParser.RULE_variableresetstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2020;
	        this.match(PostgreSQLParser.RESET);
	        this.state = 2021;
	        this.reset_rest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reset_rest() {
	    let localctx = new Reset_restContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, PostgreSQLParser.RULE_reset_rest);
	    try {
	        this.state = 2031;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2023;
	            this.generic_reset();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2024;
	            this.match(PostgreSQLParser.TIME);
	            this.state = 2025;
	            this.match(PostgreSQLParser.ZONE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2026;
	            this.match(PostgreSQLParser.TRANSACTION);
	            this.state = 2027;
	            this.match(PostgreSQLParser.ISOLATION);
	            this.state = 2028;
	            this.match(PostgreSQLParser.LEVEL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2029;
	            this.match(PostgreSQLParser.SESSION);
	            this.state = 2030;
	            this.match(PostgreSQLParser.AUTHORIZATION);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_reset() {
	    let localctx = new Generic_resetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, PostgreSQLParser.RULE_generic_reset);
	    try {
	        this.state = 2035;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2033;
	            this.var_name();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2034;
	            this.match(PostgreSQLParser.ALL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setresetclause() {
	    let localctx = new SetresetclauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, PostgreSQLParser.RULE_setresetclause);
	    try {
	        this.state = 2040;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2037;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2038;
	            this.set_rest();
	            break;
	        case 306:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2039;
	            this.variableresetstmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionsetresetclause() {
	    let localctx = new FunctionsetresetclauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, PostgreSQLParser.RULE_functionsetresetclause);
	    try {
	        this.state = 2045;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2042;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2043;
	            this.set_rest_more();
	            break;
	        case 306:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2044;
	            this.variableresetstmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableshowstmt() {
	    let localctx = new VariableshowstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, PostgreSQLParser.RULE_variableshowstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2047;
	        this.match(PostgreSQLParser.SHOW);
	        this.state = 2057;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2048;
	            this.var_name();
	            break;

	        case 2:
	            this.state = 2049;
	            this.match(PostgreSQLParser.TIME);
	            this.state = 2050;
	            this.match(PostgreSQLParser.ZONE);
	            break;

	        case 3:
	            this.state = 2051;
	            this.match(PostgreSQLParser.TRANSACTION);
	            this.state = 2052;
	            this.match(PostgreSQLParser.ISOLATION);
	            this.state = 2053;
	            this.match(PostgreSQLParser.LEVEL);
	            break;

	        case 4:
	            this.state = 2054;
	            this.match(PostgreSQLParser.SESSION);
	            this.state = 2055;
	            this.match(PostgreSQLParser.AUTHORIZATION);
	            break;

	        case 5:
	            this.state = 2056;
	            this.match(PostgreSQLParser.ALL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintssetstmt() {
	    let localctx = new ConstraintssetstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, PostgreSQLParser.RULE_constraintssetstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2059;
	        this.match(PostgreSQLParser.SET);
	        this.state = 2060;
	        this.match(PostgreSQLParser.CONSTRAINTS);
	        this.state = 2061;
	        this.constraints_set_list();
	        this.state = 2062;
	        this.constraints_set_mode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraints_set_list() {
	    let localctx = new Constraints_set_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, PostgreSQLParser.RULE_constraints_set_list);
	    try {
	        this.state = 2066;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2064;
	            this.match(PostgreSQLParser.ALL);
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2065;
	            this.qualified_name_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraints_set_mode() {
	    let localctx = new Constraints_set_modeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, PostgreSQLParser.RULE_constraints_set_mode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2068;
	        _la = this._input.LA(1);
	        if(!(_la===180 || _la===221)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkpointstmt() {
	    let localctx = new CheckpointstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, PostgreSQLParser.RULE_checkpointstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2070;
	        this.match(PostgreSQLParser.CHECKPOINT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardstmt() {
	    let localctx = new DiscardstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, PostgreSQLParser.RULE_discardstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2072;
	        this.match(PostgreSQLParser.DISCARD);
	        this.state = 2073;
	        _la = this._input.LA(1);
	        if(!(_la===30 || _la===281 || ((((_la - 322)) & ~0x1f) === 0 && ((1 << (_la - 322)) & 41943041) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altertablestmt() {
	    let localctx = new AltertablestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, PostgreSQLParser.RULE_altertablestmt);
	    var _la = 0;
	    try {
	        this.state = 2184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2075;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2076;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 2079;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	            if(la_===1) {
	                this.state = 2077;
	                this.match(PostgreSQLParser.IF_P);
	                this.state = 2078;
	                this.match(PostgreSQLParser.EXISTS);

	            }
	            this.state = 2081;
	            this.relation_expr();
	            this.state = 2084;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 77:
	            case 133:
	            case 138:
	            case 158:
	            case 186:
	            case 191:
	            case 193:
	            case 209:
	            case 228:
	            case 262:
	            case 268:
	            case 273:
	            case 275:
	            case 305:
	            case 306:
	            case 326:
	            case 365:
	                this.state = 2082;
	                this.alter_table_cmds();
	                break;
	            case 435:
	            case 436:
	                this.state = 2083;
	                this.partition_cmd();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2086;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2087;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 2088;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 2089;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 2090;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 2091;
	            this.name();
	            this.state = 2095;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===274) {
	                this.state = 2092;
	                this.match(PostgreSQLParser.OWNED);
	                this.state = 2093;
	                this.match(PostgreSQLParser.BY);
	                this.state = 2094;
	                this.role_list();
	            }

	            this.state = 2097;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2098;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 2099;
	            this.name();
	            this.state = 2100;
	            this.opt_nowait();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2102;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2103;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 2106;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 2104;
	                this.match(PostgreSQLParser.IF_P);
	                this.state = 2105;
	                this.match(PostgreSQLParser.EXISTS);

	            }
	            this.state = 2108;
	            this.qualified_name();
	            this.state = 2111;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 77:
	            case 133:
	            case 138:
	            case 158:
	            case 186:
	            case 191:
	            case 193:
	            case 209:
	            case 228:
	            case 262:
	            case 268:
	            case 273:
	            case 275:
	            case 305:
	            case 306:
	            case 326:
	            case 365:
	                this.state = 2109;
	                this.alter_table_cmds();
	                break;
	            case 435:
	                this.state = 2110;
	                this.index_partition_cmd();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2113;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2114;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 2115;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 2116;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 2117;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 2118;
	            this.name();
	            this.state = 2122;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===274) {
	                this.state = 2119;
	                this.match(PostgreSQLParser.OWNED);
	                this.state = 2120;
	                this.match(PostgreSQLParser.BY);
	                this.state = 2121;
	                this.role_list();
	            }

	            this.state = 2124;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2125;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 2126;
	            this.name();
	            this.state = 2127;
	            this.opt_nowait();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2129;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2130;
	            this.match(PostgreSQLParser.SEQUENCE);
	            this.state = 2133;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	            if(la_===1) {
	                this.state = 2131;
	                this.match(PostgreSQLParser.IF_P);
	                this.state = 2132;
	                this.match(PostgreSQLParser.EXISTS);

	            }
	            this.state = 2135;
	            this.qualified_name();
	            this.state = 2136;
	            this.alter_table_cmds();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2138;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2139;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 2142;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	            if(la_===1) {
	                this.state = 2140;
	                this.match(PostgreSQLParser.IF_P);
	                this.state = 2141;
	                this.match(PostgreSQLParser.EXISTS);

	            }
	            this.state = 2144;
	            this.qualified_name();
	            this.state = 2145;
	            this.alter_table_cmds();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2147;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2148;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            this.state = 2149;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 2152;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	            if(la_===1) {
	                this.state = 2150;
	                this.match(PostgreSQLParser.IF_P);
	                this.state = 2151;
	                this.match(PostgreSQLParser.EXISTS);

	            }
	            this.state = 2154;
	            this.qualified_name();
	            this.state = 2155;
	            this.alter_table_cmds();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2157;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2158;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            this.state = 2159;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 2160;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 2161;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 2162;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 2163;
	            this.name();
	            this.state = 2167;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===274) {
	                this.state = 2164;
	                this.match(PostgreSQLParser.OWNED);
	                this.state = 2165;
	                this.match(PostgreSQLParser.BY);
	                this.state = 2166;
	                this.role_list();
	            }

	            this.state = 2169;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2170;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 2171;
	            this.name();
	            this.state = 2172;
	            this.opt_nowait();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2174;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2175;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 2176;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 2179;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	            if(la_===1) {
	                this.state = 2177;
	                this.match(PostgreSQLParser.IF_P);
	                this.state = 2178;
	                this.match(PostgreSQLParser.EXISTS);

	            }
	            this.state = 2181;
	            this.relation_expr();
	            this.state = 2182;
	            this.alter_table_cmds();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_cmds() {
	    let localctx = new Alter_table_cmdsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, PostgreSQLParser.RULE_alter_table_cmds);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2186;
	        this.alter_table_cmd();
	        this.state = 2191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 2187;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 2188;
	            this.alter_table_cmd();
	            this.state = 2193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partition_cmd() {
	    let localctx = new Partition_cmdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, PostgreSQLParser.RULE_partition_cmd);
	    try {
	        this.state = 2202;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 435:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2194;
	            this.match(PostgreSQLParser.ATTACH);
	            this.state = 2195;
	            this.match(PostgreSQLParser.PARTITION);
	            this.state = 2196;
	            this.qualified_name();
	            this.state = 2197;
	            this.partitionboundspec();
	            break;
	        case 436:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2199;
	            this.match(PostgreSQLParser.DETACH);
	            this.state = 2200;
	            this.match(PostgreSQLParser.PARTITION);
	            this.state = 2201;
	            this.qualified_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_partition_cmd() {
	    let localctx = new Index_partition_cmdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, PostgreSQLParser.RULE_index_partition_cmd);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2204;
	        this.match(PostgreSQLParser.ATTACH);
	        this.state = 2205;
	        this.match(PostgreSQLParser.PARTITION);
	        this.state = 2206;
	        this.qualified_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_cmd() {
	    let localctx = new Alter_table_cmdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, PostgreSQLParser.RULE_alter_table_cmd);
	    try {
	        this.state = 2460;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2208;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 2209;
	            this.columnDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2210;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 2211;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 2212;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 2213;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 2214;
	            this.columnDef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2215;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 2216;
	            this.match(PostgreSQLParser.COLUMN);
	            this.state = 2217;
	            this.columnDef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2218;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 2219;
	            this.match(PostgreSQLParser.COLUMN);
	            this.state = 2220;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 2221;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 2222;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 2223;
	            this.columnDef();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2224;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2225;
	            this.opt_column();
	            this.state = 2226;
	            this.colid();
	            this.state = 2227;
	            this.alter_column_default();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2229;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2230;
	            this.opt_column();
	            this.state = 2231;
	            this.colid();
	            this.state = 2232;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2233;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 2234;
	            this.match(PostgreSQLParser.NULL_P);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2236;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2237;
	            this.opt_column();
	            this.state = 2238;
	            this.colid();
	            this.state = 2239;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2240;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 2241;
	            this.match(PostgreSQLParser.NULL_P);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2243;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2244;
	            this.opt_column();
	            this.state = 2245;
	            this.colid();
	            this.state = 2246;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2247;
	            this.match(PostgreSQLParser.EXPRESSION);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2249;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2250;
	            this.opt_column();
	            this.state = 2251;
	            this.colid();
	            this.state = 2252;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2253;
	            this.match(PostgreSQLParser.EXPRESSION);
	            this.state = 2254;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 2255;
	            this.match(PostgreSQLParser.EXISTS);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2257;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2258;
	            this.opt_column();
	            this.state = 2259;
	            this.colid();
	            this.state = 2260;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2261;
	            this.match(PostgreSQLParser.STATISTICS);
	            this.state = 2262;
	            this.signediconst();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2264;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2265;
	            this.opt_column();
	            this.state = 2266;
	            this.iconst();
	            this.state = 2267;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2268;
	            this.match(PostgreSQLParser.STATISTICS);
	            this.state = 2269;
	            this.signediconst();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2271;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2272;
	            this.opt_column();
	            this.state = 2273;
	            this.colid();
	            this.state = 2274;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2275;
	            this.reloptions();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2277;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2278;
	            this.opt_column();
	            this.state = 2279;
	            this.colid();
	            this.state = 2280;
	            this.match(PostgreSQLParser.RESET);
	            this.state = 2281;
	            this.reloptions();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2283;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2284;
	            this.opt_column();
	            this.state = 2285;
	            this.colid();
	            this.state = 2286;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2287;
	            this.match(PostgreSQLParser.STORAGE);
	            this.state = 2288;
	            this.colid();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2290;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2291;
	            this.opt_column();
	            this.state = 2292;
	            this.colid();
	            this.state = 2293;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 2294;
	            this.match(PostgreSQLParser.GENERATED);
	            this.state = 2295;
	            this.generated_when();
	            this.state = 2296;
	            this.match(PostgreSQLParser.AS);
	            this.state = 2297;
	            this.match(PostgreSQLParser.IDENTITY_P);
	            this.state = 2298;
	            this.optparenthesizedseqoptlist();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2300;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2301;
	            this.opt_column();
	            this.state = 2302;
	            this.colid();
	            this.state = 2303;
	            this.alter_identity_column_option_list();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2305;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2306;
	            this.opt_column();
	            this.state = 2307;
	            this.colid();
	            this.state = 2308;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2309;
	            this.match(PostgreSQLParser.IDENTITY_P);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2311;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2312;
	            this.opt_column();
	            this.state = 2313;
	            this.colid();
	            this.state = 2314;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2315;
	            this.match(PostgreSQLParser.IDENTITY_P);
	            this.state = 2316;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 2317;
	            this.match(PostgreSQLParser.EXISTS);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2319;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2320;
	            this.opt_column();
	            this.state = 2321;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 2322;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 2323;
	            this.colid();
	            this.state = 2324;
	            this.opt_drop_behavior();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2326;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2327;
	            this.opt_column();
	            this.state = 2328;
	            this.colid();
	            this.state = 2329;
	            this.opt_drop_behavior();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2331;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2332;
	            this.opt_column();
	            this.state = 2333;
	            this.colid();
	            this.state = 2334;
	            this.opt_set_data();
	            this.state = 2335;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 2336;
	            this.typename();
	            this.state = 2337;
	            this.opt_collate_clause();
	            this.state = 2338;
	            this.alter_using();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2340;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2341;
	            this.opt_column();
	            this.state = 2342;
	            this.colid();
	            this.state = 2343;
	            this.alter_generic_options();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2345;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 2346;
	            this.tableconstraint();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2347;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2348;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 2349;
	            this.name();
	            this.state = 2350;
	            this.constraintattributespec();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2352;
	            this.match(PostgreSQLParser.VALIDATE);
	            this.state = 2353;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 2354;
	            this.name();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2355;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2356;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 2357;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 2358;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 2359;
	            this.name();
	            this.state = 2360;
	            this.opt_drop_behavior();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 2362;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2363;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 2364;
	            this.name();
	            this.state = 2365;
	            this.opt_drop_behavior();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 2367;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2368;
	            this.match(PostgreSQLParser.WITHOUT);
	            this.state = 2369;
	            this.match(PostgreSQLParser.OIDS);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 2370;
	            this.match(PostgreSQLParser.CLUSTER);
	            this.state = 2371;
	            this.match(PostgreSQLParser.ON);
	            this.state = 2372;
	            this.name();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 2373;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2374;
	            this.match(PostgreSQLParser.WITHOUT);
	            this.state = 2375;
	            this.match(PostgreSQLParser.CLUSTER);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 2376;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2377;
	            this.match(PostgreSQLParser.LOGGED);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 2378;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2379;
	            this.match(PostgreSQLParser.UNLOGGED);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 2380;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 2381;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 2382;
	            this.name();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 2383;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 2384;
	            this.match(PostgreSQLParser.ALWAYS);
	            this.state = 2385;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 2386;
	            this.name();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 2387;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 2388;
	            this.match(PostgreSQLParser.REPLICA);
	            this.state = 2389;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 2390;
	            this.name();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 2391;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 2392;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 2393;
	            this.match(PostgreSQLParser.ALL);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 2394;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 2395;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 2396;
	            this.match(PostgreSQLParser.USER);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 2397;
	            this.match(PostgreSQLParser.DISABLE_P);
	            this.state = 2398;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 2399;
	            this.name();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 2400;
	            this.match(PostgreSQLParser.DISABLE_P);
	            this.state = 2401;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 2402;
	            this.match(PostgreSQLParser.ALL);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 2403;
	            this.match(PostgreSQLParser.DISABLE_P);
	            this.state = 2404;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 2405;
	            this.match(PostgreSQLParser.USER);
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 2406;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 2407;
	            this.match(PostgreSQLParser.RULE);
	            this.state = 2408;
	            this.name();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 2409;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 2410;
	            this.match(PostgreSQLParser.ALWAYS);
	            this.state = 2411;
	            this.match(PostgreSQLParser.RULE);
	            this.state = 2412;
	            this.name();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 2413;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 2414;
	            this.match(PostgreSQLParser.REPLICA);
	            this.state = 2415;
	            this.match(PostgreSQLParser.RULE);
	            this.state = 2416;
	            this.name();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 2417;
	            this.match(PostgreSQLParser.DISABLE_P);
	            this.state = 2418;
	            this.match(PostgreSQLParser.RULE);
	            this.state = 2419;
	            this.name();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 2420;
	            this.match(PostgreSQLParser.INHERIT);
	            this.state = 2421;
	            this.qualified_name();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 2422;
	            this.match(PostgreSQLParser.NO);
	            this.state = 2423;
	            this.match(PostgreSQLParser.INHERIT);
	            this.state = 2424;
	            this.qualified_name();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 2425;
	            this.match(PostgreSQLParser.OF);
	            this.state = 2426;
	            this.any_name();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 2427;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 2428;
	            this.match(PostgreSQLParser.OF);
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 2429;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 2430;
	            this.match(PostgreSQLParser.TO);
	            this.state = 2431;
	            this.rolespec();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 2432;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2433;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 2434;
	            this.name();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 2435;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2436;
	            this.reloptions();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 2437;
	            this.match(PostgreSQLParser.RESET);
	            this.state = 2438;
	            this.reloptions();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 2439;
	            this.match(PostgreSQLParser.REPLICA);
	            this.state = 2440;
	            this.match(PostgreSQLParser.IDENTITY_P);
	            this.state = 2441;
	            this.replica_identity();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 2442;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 2443;
	            this.match(PostgreSQLParser.ROW);
	            this.state = 2444;
	            this.match(PostgreSQLParser.LEVEL);
	            this.state = 2445;
	            this.match(PostgreSQLParser.SECURITY);
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 2446;
	            this.match(PostgreSQLParser.DISABLE_P);
	            this.state = 2447;
	            this.match(PostgreSQLParser.ROW);
	            this.state = 2448;
	            this.match(PostgreSQLParser.LEVEL);
	            this.state = 2449;
	            this.match(PostgreSQLParser.SECURITY);
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 2450;
	            this.match(PostgreSQLParser.FORCE);
	            this.state = 2451;
	            this.match(PostgreSQLParser.ROW);
	            this.state = 2452;
	            this.match(PostgreSQLParser.LEVEL);
	            this.state = 2453;
	            this.match(PostgreSQLParser.SECURITY);
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 2454;
	            this.match(PostgreSQLParser.NO);
	            this.state = 2455;
	            this.match(PostgreSQLParser.FORCE);
	            this.state = 2456;
	            this.match(PostgreSQLParser.ROW);
	            this.state = 2457;
	            this.match(PostgreSQLParser.LEVEL);
	            this.state = 2458;
	            this.match(PostgreSQLParser.SECURITY);
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 2459;
	            this.alter_generic_options();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_column_default() {
	    let localctx = new Alter_column_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, PostgreSQLParser.RULE_alter_column_default);
	    try {
	        this.state = 2467;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2462;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2463;
	            this.match(PostgreSQLParser.DEFAULT);
	            this.state = 2464;
	            this.a_expr();
	            break;
	        case 191:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2465;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2466;
	            this.match(PostgreSQLParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_drop_behavior() {
	    let localctx = new Opt_drop_behaviorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, PostgreSQLParser.RULE_opt_drop_behavior);
	    try {
	        this.state = 2472;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 150:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2469;
	            this.match(PostgreSQLParser.CASCADE);
	            break;
	        case 308:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2470;
	            this.match(PostgreSQLParser.RESTRICT);
	            break;
	        case -1:
	        case 2:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_collate_clause() {
	    let localctx = new Opt_collate_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, PostgreSQLParser.RULE_opt_collate_clause);
	    try {
	        this.state = 2477;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2474;
	            this.match(PostgreSQLParser.COLLATE);
	            this.state = 2475;
	            this.any_name();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 100:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 150:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 308:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_using() {
	    let localctx = new Alter_usingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, PostgreSQLParser.RULE_alter_using);
	    try {
	        this.state = 2482;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2479;
	            this.match(PostgreSQLParser.USING);
	            this.state = 2480;
	            this.a_expr();
	            break;
	        case -1:
	        case 2:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replica_identity() {
	    let localctx = new Replica_identityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, PostgreSQLParser.RULE_replica_identity);
	    try {
	        this.state = 2490;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 263:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2484;
	            this.match(PostgreSQLParser.NOTHING);
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2485;
	            this.match(PostgreSQLParser.FULL);
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2486;
	            this.match(PostgreSQLParser.DEFAULT);
	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2487;
	            this.match(PostgreSQLParser.USING);
	            this.state = 2488;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 2489;
	            this.name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reloptions() {
	    let localctx = new ReloptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, PostgreSQLParser.RULE_reloptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2492;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 2493;
	        this.reloption_list();
	        this.state = 2494;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_reloptions() {
	    let localctx = new Opt_reloptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, PostgreSQLParser.RULE_opt_reloptions);
	    try {
	        this.state = 2499;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2496;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 2497;
	            this.reloptions();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reloption_list() {
	    let localctx = new Reloption_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, PostgreSQLParser.RULE_reloption_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2501;
	        this.reloption_elem();
	        this.state = 2506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 2502;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 2503;
	            this.reloption_elem();
	            this.state = 2508;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reloption_elem() {
	    let localctx = new Reloption_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, PostgreSQLParser.RULE_reloption_elem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2509;
	        this.collabel();
	        this.state = 2518;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 10:
	        	this.state = 2510;
	        	this.match(PostgreSQLParser.EQUAL);
	        	this.state = 2511;
	        	this.def_arg();
	        	break;
	        case 11:
	        	this.state = 2512;
	        	this.match(PostgreSQLParser.DOT);
	        	this.state = 2513;
	        	this.collabel();
	        	this.state = 2516;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===10) {
	        	    this.state = 2514;
	        	    this.match(PostgreSQLParser.EQUAL);
	        	    this.state = 2515;
	        	    this.def_arg();
	        	}

	        	break;
	        case 3:
	        case 6:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_identity_column_option_list() {
	    let localctx = new Alter_identity_column_option_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, PostgreSQLParser.RULE_alter_identity_column_option_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2521; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2520;
	        		this.alter_identity_column_option();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2523; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,59, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_identity_column_option() {
	    let localctx = new Alter_identity_column_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, PostgreSQLParser.RULE_alter_identity_column_option);
	    try {
	        this.state = 2537;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 307:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2525;
	            this.match(PostgreSQLParser.RESTART);
	            this.state = 2529;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	            if(la_===1) {
	                this.state = 2526;
	                this.opt_with();
	                this.state = 2527;
	                this.numericonly();

	            }
	            break;
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2531;
	            this.match(PostgreSQLParser.SET);
	            this.state = 2535;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 36:
	            case 148:
	            case 173:
	            case 225:
	            case 252:
	            case 255:
	            case 262:
	            case 274:
	            case 307:
	            case 321:
	            case 333:
	                this.state = 2532;
	                this.seqoptelem();
	                break;
	            case 438:
	                this.state = 2533;
	                this.match(PostgreSQLParser.GENERATED);
	                this.state = 2534;
	                this.generated_when();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionboundspec() {
	    let localctx = new PartitionboundspecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, PostgreSQLParser.RULE_partitionboundspec);
	    try {
	        this.state = 2565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2539;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 2540;
	            this.match(PostgreSQLParser.VALUES);
	            this.state = 2541;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 2542;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2543;
	            this.hash_partbound();
	            this.state = 2544;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2546;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 2547;
	            this.match(PostgreSQLParser.VALUES);
	            this.state = 2548;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 2549;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2550;
	            this.expr_list();
	            this.state = 2551;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2553;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 2554;
	            this.match(PostgreSQLParser.VALUES);
	            this.state = 2555;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 2556;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2557;
	            this.expr_list();
	            this.state = 2558;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 2559;
	            this.match(PostgreSQLParser.TO);
	            this.state = 2560;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2561;
	            this.expr_list();
	            this.state = 2562;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2564;
	            this.match(PostgreSQLParser.DEFAULT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hash_partbound_elem() {
	    let localctx = new Hash_partbound_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, PostgreSQLParser.RULE_hash_partbound_elem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2567;
	        this.nonreservedword();
	        this.state = 2568;
	        this.iconst();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hash_partbound() {
	    let localctx = new Hash_partboundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, PostgreSQLParser.RULE_hash_partbound);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2570;
	        this.hash_partbound_elem();
	        this.state = 2575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 2571;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 2572;
	            this.hash_partbound_elem();
	            this.state = 2577;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altercompositetypestmt() {
	    let localctx = new AltercompositetypestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, PostgreSQLParser.RULE_altercompositetypestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2578;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 2579;
	        this.match(PostgreSQLParser.TYPE_P);
	        this.state = 2580;
	        this.any_name();
	        this.state = 2581;
	        this.alter_type_cmds();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_type_cmds() {
	    let localctx = new Alter_type_cmdsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, PostgreSQLParser.RULE_alter_type_cmds);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2583;
	        this.alter_type_cmd();
	        this.state = 2588;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 2584;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 2585;
	            this.alter_type_cmd();
	            this.state = 2590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_type_cmd() {
	    let localctx = new Alter_type_cmdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, PostgreSQLParser.RULE_alter_type_cmd);
	    try {
	        this.state = 2614;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2591;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 2592;
	            this.match(PostgreSQLParser.ATTRIBUTE);
	            this.state = 2593;
	            this.tablefuncelement();
	            this.state = 2594;
	            this.opt_drop_behavior();
	            break;
	        case 191:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2596;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 2597;
	            this.match(PostgreSQLParser.ATTRIBUTE);
	            this.state = 2600;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	            if(la_===1) {
	                this.state = 2598;
	                this.match(PostgreSQLParser.IF_P);
	                this.state = 2599;
	                this.match(PostgreSQLParser.EXISTS);

	            }
	            this.state = 2602;
	            this.colid();
	            this.state = 2603;
	            this.opt_drop_behavior();
	            break;
	        case 138:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2605;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 2606;
	            this.match(PostgreSQLParser.ATTRIBUTE);
	            this.state = 2607;
	            this.colid();
	            this.state = 2608;
	            this.opt_set_data();
	            this.state = 2609;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 2610;
	            this.typename();
	            this.state = 2611;
	            this.opt_collate_clause();
	            this.state = 2612;
	            this.opt_drop_behavior();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeportalstmt() {
	    let localctx = new CloseportalstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, PostgreSQLParser.RULE_closeportalstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2616;
	        this.match(PostgreSQLParser.CLOSE);
	        this.state = 2619;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.state = 2617;
	            this.cursor_name();
	            break;
	        case 30:
	            this.state = 2618;
	            this.match(PostgreSQLParser.ALL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copystmt() {
	    let localctx = new CopystmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, PostgreSQLParser.RULE_copystmt);
	    try {
	        this.state = 2643;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2621;
	            this.match(PostgreSQLParser.COPY);
	            this.state = 2622;
	            this.opt_binary();
	            this.state = 2623;
	            this.qualified_name();
	            this.state = 2624;
	            this.opt_column_list();
	            this.state = 2625;
	            this.copy_from();
	            this.state = 2626;
	            this.opt_program();
	            this.state = 2627;
	            this.copy_file_name();
	            this.state = 2628;
	            this.copy_delimiter();
	            this.state = 2629;
	            this.opt_with();
	            this.state = 2630;
	            this.copy_options();
	            this.state = 2631;
	            this.where_clause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2633;
	            this.match(PostgreSQLParser.COPY);
	            this.state = 2634;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2635;
	            this.preparablestmt();
	            this.state = 2636;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 2637;
	            this.match(PostgreSQLParser.TO);
	            this.state = 2638;
	            this.opt_program();
	            this.state = 2639;
	            this.copy_file_name();
	            this.state = 2640;
	            this.opt_with();
	            this.state = 2641;
	            this.copy_options();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_from() {
	    let localctx = new Copy_fromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, PostgreSQLParser.RULE_copy_from);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2645;
	        _la = this._input.LA(1);
	        if(!(_la===64 || _la===94)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_program() {
	    let localctx = new Opt_programContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, PostgreSQLParser.RULE_opt_program);
	    try {
	        this.state = 2649;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 290:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2647;
	            this.match(PostgreSQLParser.PROGRAM);
	            break;
	        case 336:
	        case 337:
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_file_name() {
	    let localctx = new Copy_file_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, PostgreSQLParser.RULE_copy_file_name);
	    try {
	        this.state = 2654;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2651;
	            this.sconst();
	            break;
	        case 336:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2652;
	            this.match(PostgreSQLParser.STDIN);
	            break;
	        case 337:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2653;
	            this.match(PostgreSQLParser.STDOUT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_options() {
	    let localctx = new Copy_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, PostgreSQLParser.RULE_copy_options);
	    try {
	        this.state = 2661;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2656;
	            this.copy_opt_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2657;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2658;
	            this.copy_generic_opt_list();
	            this.state = 2659;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_opt_list() {
	    let localctx = new Copy_opt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, PostgreSQLParser.RULE_copy_opt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2666;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===78 || _la===107 || _la===112 || ((((_la - 171)) & ~0x1f) === 0 && ((1 << (_la - 171)) & 75501569) !== 0) || _la===209 || _la===216 || _la===291) {
	            this.state = 2663;
	            this.copy_opt_item();
	            this.state = 2668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_opt_item() {
	    let localctx = new Copy_opt_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, PostgreSQLParser.RULE_copy_opt_item);
	    try {
	        this.state = 2704;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2669;
	            this.match(PostgreSQLParser.BINARY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2670;
	            this.match(PostgreSQLParser.FREEZE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2671;
	            this.match(PostgreSQLParser.DELIMITER);
	            this.state = 2672;
	            this.opt_as();
	            this.state = 2673;
	            this.sconst();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2675;
	            this.match(PostgreSQLParser.NULL_P);
	            this.state = 2676;
	            this.opt_as();
	            this.state = 2677;
	            this.sconst();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2679;
	            this.match(PostgreSQLParser.CSV);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2680;
	            this.match(PostgreSQLParser.HEADER_P);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2681;
	            this.match(PostgreSQLParser.QUOTE);
	            this.state = 2682;
	            this.opt_as();
	            this.state = 2683;
	            this.sconst();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2685;
	            this.match(PostgreSQLParser.ESCAPE);
	            this.state = 2686;
	            this.opt_as();
	            this.state = 2687;
	            this.sconst();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2689;
	            this.match(PostgreSQLParser.FORCE);
	            this.state = 2690;
	            this.match(PostgreSQLParser.QUOTE);
	            this.state = 2691;
	            this.columnlist();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2692;
	            this.match(PostgreSQLParser.FORCE);
	            this.state = 2693;
	            this.match(PostgreSQLParser.QUOTE);
	            this.state = 2694;
	            this.match(PostgreSQLParser.STAR);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2695;
	            this.match(PostgreSQLParser.FORCE);
	            this.state = 2696;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 2697;
	            this.match(PostgreSQLParser.NULL_P);
	            this.state = 2698;
	            this.columnlist();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2699;
	            this.match(PostgreSQLParser.FORCE);
	            this.state = 2700;
	            this.match(PostgreSQLParser.NULL_P);
	            this.state = 2701;
	            this.columnlist();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2702;
	            this.match(PostgreSQLParser.ENCODING);
	            this.state = 2703;
	            this.sconst();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_binary() {
	    let localctx = new Opt_binaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, PostgreSQLParser.RULE_opt_binary);
	    try {
	        this.state = 2708;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2706;
	            this.match(PostgreSQLParser.BINARY);
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_delimiter() {
	    let localctx = new Copy_delimiterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, PostgreSQLParser.RULE_copy_delimiter);
	    try {
	        this.state = 2715;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	        case 184:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2710;
	            this.opt_using();
	            this.state = 2711;
	            this.match(PostgreSQLParser.DELIMITERS);
	            this.state = 2712;
	            this.sconst();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 78:
	        case 88:
	        case 92:
	        case 103:
	        case 105:
	        case 107:
	        case 112:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 171:
	        case 177:
	        case 178:
	        case 182:
	        case 183:
	        case 187:
	        case 191:
	        case 194:
	        case 197:
	        case 202:
	        case 203:
	        case 209:
	        case 216:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 291:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_using() {
	    let localctx = new Opt_usingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, PostgreSQLParser.RULE_opt_using);
	    try {
	        this.state = 2719;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2717;
	            this.match(PostgreSQLParser.USING);
	            break;
	        case 184:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_generic_opt_list() {
	    let localctx = new Copy_generic_opt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, PostgreSQLParser.RULE_copy_generic_opt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2721;
	        this.copy_generic_opt_elem();
	        this.state = 2726;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 2722;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 2723;
	            this.copy_generic_opt_elem();
	            this.state = 2728;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_generic_opt_elem() {
	    let localctx = new Copy_generic_opt_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, PostgreSQLParser.RULE_copy_generic_opt_elem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2729;
	        this.collabel();
	        this.state = 2730;
	        this.copy_generic_opt_arg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_generic_opt_arg() {
	    let localctx = new Copy_generic_opt_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, PostgreSQLParser.RULE_copy_generic_opt_arg);
	    try {
	        this.state = 2740;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 80:
	        case 92:
	        case 96:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2732;
	            this.opt_boolean_or_string();
	            break;
	        case 12:
	        case 13:
	        case 658:
	        case 660:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2733;
	            this.numericonly();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2734;
	            this.match(PostgreSQLParser.STAR);
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2735;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2736;
	            this.copy_generic_opt_arg_list();
	            this.state = 2737;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 3:
	        case 6:
	            this.enterOuterAlt(localctx, 5);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_generic_opt_arg_list() {
	    let localctx = new Copy_generic_opt_arg_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, PostgreSQLParser.RULE_copy_generic_opt_arg_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2742;
	        this.copy_generic_opt_arg_list_item();
	        this.state = 2747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 2743;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 2744;
	            this.copy_generic_opt_arg_list_item();
	            this.state = 2749;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_generic_opt_arg_list_item() {
	    let localctx = new Copy_generic_opt_arg_list_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, PostgreSQLParser.RULE_copy_generic_opt_arg_list_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2750;
	        this.opt_boolean_or_string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createstmt() {
	    let localctx = new CreatestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, PostgreSQLParser.RULE_createstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2752;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 2753;
	        this.opttemp();
	        this.state = 2754;
	        this.match(PostgreSQLParser.TABLE);
	        this.state = 2758;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        if(la_===1) {
	            this.state = 2755;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 2756;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 2757;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 2760;
	        this.qualified_name();
	        this.state = 2791;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.state = 2761;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2762;
	            this.opttableelementlist();
	            this.state = 2763;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 2764;
	            this.optinherit();
	            this.state = 2765;
	            this.optpartitionspec();
	            this.state = 2766;
	            this.table_access_method_clause();
	            this.state = 2767;
	            this.optwith();
	            this.state = 2768;
	            this.oncommitoption();
	            this.state = 2769;
	            this.opttablespace();
	            break;
	        case 268:
	            this.state = 2771;
	            this.match(PostgreSQLParser.OF);
	            this.state = 2772;
	            this.any_name();
	            this.state = 2773;
	            this.opttypedtableelementlist();
	            this.state = 2774;
	            this.optpartitionspec();
	            this.state = 2775;
	            this.table_access_method_clause();
	            this.state = 2776;
	            this.optwith();
	            this.state = 2777;
	            this.oncommitoption();
	            this.state = 2778;
	            this.opttablespace();
	            break;
	        case 278:
	            this.state = 2780;
	            this.match(PostgreSQLParser.PARTITION);
	            this.state = 2781;
	            this.match(PostgreSQLParser.OF);
	            this.state = 2782;
	            this.qualified_name();
	            this.state = 2783;
	            this.opttypedtableelementlist();
	            this.state = 2784;
	            this.partitionboundspec();
	            this.state = 2785;
	            this.optpartitionspec();
	            this.state = 2786;
	            this.table_access_method_clause();
	            this.state = 2787;
	            this.optwith();
	            this.state = 2788;
	            this.oncommitoption();
	            this.state = 2789;
	            this.opttablespace();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opttemp() {
	    let localctx = new OpttempContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, PostgreSQLParser.RULE_opttemp);
	    var _la = 0;
	    try {
	        this.state = 2801;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 347:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2793;
	            this.match(PostgreSQLParser.TEMPORARY);
	            break;
	        case 345:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2794;
	            this.match(PostgreSQLParser.TEMP);
	            break;
	        case 245:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2795;
	            this.match(PostgreSQLParser.LOCAL);
	            this.state = 2796;
	            _la = this._input.LA(1);
	            if(!(_la===345 || _la===347)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 213:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2797;
	            this.match(PostgreSQLParser.GLOBAL);
	            this.state = 2798;
	            _la = this._input.LA(1);
	            if(!(_la===345 || _la===347)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 360:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2799;
	            this.match(PostgreSQLParser.UNLOGGED);
	            break;
	        case 92:
	        case 296:
	        case 321:
	        case 369:
	            this.enterOuterAlt(localctx, 6);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opttableelementlist() {
	    let localctx = new OpttableelementlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, PostgreSQLParser.RULE_opttableelementlist);
	    try {
	        this.state = 2805;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 53:
	        case 57:
	        case 61:
	        case 63:
	        case 85:
	        case 92:
	        case 98:
	        case 116:
	        case 119:
	        case 120:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2803;
	            this.tableelementlist();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opttypedtableelementlist() {
	    let localctx = new OpttypedtableelementlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, PostgreSQLParser.RULE_opttypedtableelementlist);
	    try {
	        this.state = 2812;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2807;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2808;
	            this.typedtableelementlist();
	            this.state = 2809;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableelementlist() {
	    let localctx = new TableelementlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, PostgreSQLParser.RULE_tableelementlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2814;
	        this.tableelement();
	        this.state = 2819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 2815;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 2816;
	            this.tableelement();
	            this.state = 2821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedtableelementlist() {
	    let localctx = new TypedtableelementlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, PostgreSQLParser.RULE_typedtableelementlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2822;
	        this.typedtableelement();
	        this.state = 2827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 2823;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 2824;
	            this.typedtableelement();
	            this.state = 2829;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableelement() {
	    let localctx = new TableelementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, PostgreSQLParser.RULE_tableelement);
	    try {
	        this.state = 2833;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2830;
	            this.tableconstraint();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2831;
	            this.tablelikeclause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2832;
	            this.columnDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedtableelement() {
	    let localctx = new TypedtableelementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, PostgreSQLParser.RULE_typedtableelement);
	    try {
	        this.state = 2837;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2835;
	            this.columnOptions();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2836;
	            this.tableconstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDef() {
	    let localctx = new ColumnDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, PostgreSQLParser.RULE_columnDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2839;
	        this.colid();
	        this.state = 2840;
	        this.typename();
	        this.state = 2841;
	        this.create_generic_options();
	        this.state = 2842;
	        this.colquallist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnOptions() {
	    let localctx = new ColumnOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, PostgreSQLParser.RULE_columnOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2844;
	        this.colid();
	        this.state = 2847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===105) {
	            this.state = 2845;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 2846;
	            this.match(PostgreSQLParser.OPTIONS);
	        }

	        this.state = 2849;
	        this.colquallist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colquallist() {
	    let localctx = new ColquallistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, PostgreSQLParser.RULE_colquallist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2854;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 134223883) !== 0) || ((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 2097923) !== 0) || _la===438) {
	            this.state = 2851;
	            this.colconstraint();
	            this.state = 2856;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colconstraint() {
	    let localctx = new ColconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, PostgreSQLParser.RULE_colconstraint);
	    try {
	        this.state = 2865;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2857;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 2858;
	            this.name();
	            this.state = 2859;
	            this.colconstraintelem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2861;
	            this.colconstraintelem();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2862;
	            this.constraintattr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2863;
	            this.match(PostgreSQLParser.COLLATE);
	            this.state = 2864;
	            this.any_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colconstraintelem() {
	    let localctx = new ColconstraintelemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, PostgreSQLParser.RULE_colconstraintelem);
	    try {
	        this.state = 2905;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 77:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2867;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 2868;
	            this.match(PostgreSQLParser.NULL_P);
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2869;
	            this.match(PostgreSQLParser.NULL_P);
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2870;
	            this.match(PostgreSQLParser.UNIQUE);
	            this.state = 2871;
	            this.opt_definition();
	            this.state = 2872;
	            this.optconstablespace();
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2874;
	            this.match(PostgreSQLParser.PRIMARY);
	            this.state = 2875;
	            this.match(PostgreSQLParser.KEY);
	            this.state = 2876;
	            this.opt_definition();
	            this.state = 2877;
	            this.optconstablespace();
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2879;
	            this.match(PostgreSQLParser.CHECK);
	            this.state = 2880;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2881;
	            this.a_expr();
	            this.state = 2882;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 2883;
	            this.opt_no_inherit();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2885;
	            this.match(PostgreSQLParser.DEFAULT);
	            this.state = 2886;
	            this.b_expr(0);
	            break;
	        case 438:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2887;
	            this.match(PostgreSQLParser.GENERATED);
	            this.state = 2888;
	            this.generated_when();
	            this.state = 2889;
	            this.match(PostgreSQLParser.AS);
	            this.state = 2897;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 219:
	                this.state = 2890;
	                this.match(PostgreSQLParser.IDENTITY_P);
	                this.state = 2891;
	                this.optparenthesizedseqoptlist();
	                break;
	            case 2:
	                this.state = 2892;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 2893;
	                this.a_expr();
	                this.state = 2894;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	                this.state = 2895;
	                this.match(PostgreSQLParser.STORED);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2899;
	            this.match(PostgreSQLParser.REFERENCES);
	            this.state = 2900;
	            this.qualified_name();
	            this.state = 2901;
	            this.opt_column_list();
	            this.state = 2902;
	            this.key_match();
	            this.state = 2903;
	            this.key_actions();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generated_when() {
	    let localctx = new Generated_whenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, PostgreSQLParser.RULE_generated_when);
	    try {
	        this.state = 2910;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 139:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2907;
	            this.match(PostgreSQLParser.ALWAYS);
	            break;
	        case 147:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2908;
	            this.match(PostgreSQLParser.BY);
	            this.state = 2909;
	            this.match(PostgreSQLParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintattr() {
	    let localctx = new ConstraintattrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, PostgreSQLParser.RULE_constraintattr);
	    var _la = 0;
	    try {
	        this.state = 2917;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2912;
	            this.match(PostgreSQLParser.DEFERRABLE);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2913;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 2914;
	            this.match(PostgreSQLParser.DEFERRABLE);
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2915;
	            this.match(PostgreSQLParser.INITIALLY);
	            this.state = 2916;
	            _la = this._input.LA(1);
	            if(!(_la===180 || _la===221)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablelikeclause() {
	    let localctx = new TablelikeclauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, PostgreSQLParser.RULE_tablelikeclause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2919;
	        this.match(PostgreSQLParser.LIKE);
	        this.state = 2920;
	        this.qualified_name();
	        this.state = 2921;
	        this.tablelikeoptionlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablelikeoptionlist() {
	    let localctx = new TablelikeoptionlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, PostgreSQLParser.RULE_tablelikeoptionlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2927;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===200 || _la===224) {
	            this.state = 2923;
	            _la = this._input.LA(1);
	            if(!(_la===200 || _la===224)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2924;
	            this.tablelikeoption();
	            this.state = 2929;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablelikeoption() {
	    let localctx = new TablelikeoptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, PostgreSQLParser.RULE_tablelikeoption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2930;
	        _la = this._input.LA(1);
	        if(!(_la===30 || ((((_la - 160)) & ~0x1f) === 0 && ((1 << (_la - 160)) & 524321) !== 0) || _la===219 || _la===227 || _la===335 || _la===338 || _la===438)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableconstraint() {
	    let localctx = new TableconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, PostgreSQLParser.RULE_tableconstraint);
	    try {
	        this.state = 2937;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 45:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2932;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 2933;
	            this.name();
	            this.state = 2934;
	            this.constraintelem();
	            break;
	        case 42:
	        case 63:
	        case 85:
	        case 98:
	        case 199:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2936;
	            this.constraintelem();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintelem() {
	    let localctx = new ConstraintelemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, PostgreSQLParser.RULE_constraintelem);
	    try {
	        this.state = 2997;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2939;
	            this.match(PostgreSQLParser.CHECK);
	            this.state = 2940;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2941;
	            this.a_expr();
	            this.state = 2942;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 2943;
	            this.constraintattributespec();
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2945;
	            this.match(PostgreSQLParser.UNIQUE);
	            this.state = 2957;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 2946;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 2947;
	                this.columnlist();
	                this.state = 2948;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	                this.state = 2949;
	                this.opt_c_include();
	                this.state = 2950;
	                this.opt_definition();
	                this.state = 2951;
	                this.optconstablespace();
	                this.state = 2952;
	                this.constraintattributespec();
	                break;
	            case 100:
	                this.state = 2954;
	                this.existingindex();
	                this.state = 2955;
	                this.constraintattributespec();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2959;
	            this.match(PostgreSQLParser.PRIMARY);
	            this.state = 2960;
	            this.match(PostgreSQLParser.KEY);
	            this.state = 2972;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 2961;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 2962;
	                this.columnlist();
	                this.state = 2963;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	                this.state = 2964;
	                this.opt_c_include();
	                this.state = 2965;
	                this.opt_definition();
	                this.state = 2966;
	                this.optconstablespace();
	                this.state = 2967;
	                this.constraintattributespec();
	                break;
	            case 100:
	                this.state = 2969;
	                this.existingindex();
	                this.state = 2970;
	                this.constraintattributespec();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 199:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2974;
	            this.match(PostgreSQLParser.EXCLUDE);
	            this.state = 2975;
	            this.access_method_clause();
	            this.state = 2976;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2977;
	            this.exclusionconstraintlist();
	            this.state = 2978;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 2979;
	            this.opt_c_include();
	            this.state = 2980;
	            this.opt_definition();
	            this.state = 2981;
	            this.optconstablespace();
	            this.state = 2982;
	            this.exclusionwhereclause();
	            this.state = 2983;
	            this.constraintattributespec();
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2985;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 2986;
	            this.match(PostgreSQLParser.KEY);
	            this.state = 2987;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 2988;
	            this.columnlist();
	            this.state = 2989;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 2990;
	            this.match(PostgreSQLParser.REFERENCES);
	            this.state = 2991;
	            this.qualified_name();
	            this.state = 2992;
	            this.opt_column_list();
	            this.state = 2993;
	            this.key_match();
	            this.state = 2994;
	            this.key_actions();
	            this.state = 2995;
	            this.constraintattributespec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_no_inherit() {
	    let localctx = new Opt_no_inheritContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, PostgreSQLParser.RULE_opt_no_inherit);
	    try {
	        this.state = 3002;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 262:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2999;
	            this.match(PostgreSQLParser.NO);
	            this.state = 3000;
	            this.match(PostgreSQLParser.INHERIT);
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 53:
	        case 54:
	        case 57:
	        case 61:
	        case 65:
	        case 69:
	        case 71:
	        case 77:
	        case 78:
	        case 85:
	        case 86:
	        case 88:
	        case 92:
	        case 98:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 438:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_column_list() {
	    let localctx = new Opt_column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, PostgreSQLParser.RULE_opt_column_list);
	    try {
	        this.state = 3009;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3004;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3005;
	            this.columnlist();
	            this.state = 3006;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnlist() {
	    let localctx = new ColumnlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, PostgreSQLParser.RULE_columnlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3011;
	        this.columnElem();
	        this.state = 3016;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 3012;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 3013;
	            this.columnElem();
	            this.state = 3018;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnElem() {
	    let localctx = new ColumnElemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, PostgreSQLParser.RULE_columnElem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3019;
	        this.colid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_c_include() {
	    let localctx = new Opt_c_includeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, PostgreSQLParser.RULE_opt_c_include);
	    try {
	        this.state = 3027;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 441:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3021;
	            this.match(PostgreSQLParser.INCLUDE);
	            this.state = 3022;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3023;
	            this.columnlist();
	            this.state = 3024;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 54:
	        case 57:
	        case 61:
	        case 65:
	        case 69:
	        case 71:
	        case 77:
	        case 88:
	        case 92:
	        case 100:
	        case 103:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 262:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_match() {
	    let localctx = new Key_matchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, PostgreSQLParser.RULE_key_match);
	    var _la = 0;
	    try {
	        this.state = 3032;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 249:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3029;
	            this.match(PostgreSQLParser.MATCH);
	            this.state = 3030;
	            _la = this._input.LA(1);
	            if(!(_la===113 || _la===277 || _la===329)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 53:
	        case 54:
	        case 57:
	        case 61:
	        case 65:
	        case 69:
	        case 71:
	        case 77:
	        case 78:
	        case 80:
	        case 85:
	        case 86:
	        case 88:
	        case 92:
	        case 98:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 262:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 438:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusionconstraintlist() {
	    let localctx = new ExclusionconstraintlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, PostgreSQLParser.RULE_exclusionconstraintlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3034;
	        this.exclusionconstraintelem();
	        this.state = 3039;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 3035;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 3036;
	            this.exclusionconstraintelem();
	            this.state = 3041;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusionconstraintelem() {
	    let localctx = new ExclusionconstraintelemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, PostgreSQLParser.RULE_exclusionconstraintelem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3042;
	        this.index_elem();
	        this.state = 3043;
	        this.match(PostgreSQLParser.WITH);
	        this.state = 3050;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3044;
	            this.any_operator();
	            break;

	        case 2:
	            this.state = 3045;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 3046;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3047;
	            this.any_operator();
	            this.state = 3048;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusionwhereclause() {
	    let localctx = new ExclusionwhereclauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, PostgreSQLParser.RULE_exclusionwhereclause);
	    try {
	        this.state = 3058;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3052;
	            this.match(PostgreSQLParser.WHERE);
	            this.state = 3053;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3054;
	            this.a_expr();
	            this.state = 3055;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 54:
	        case 57:
	        case 61:
	        case 65:
	        case 69:
	        case 71:
	        case 77:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 262:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_actions() {
	    let localctx = new Key_actionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, PostgreSQLParser.RULE_key_actions);
	    try {
	        this.state = 3069;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3060;
	            this.key_update();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3061;
	            this.key_delete();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3062;
	            this.key_update();
	            this.state = 3063;
	            this.key_delete();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3065;
	            this.key_delete();
	            this.state = 3066;
	            this.key_update();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_update() {
	    let localctx = new Key_updateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, PostgreSQLParser.RULE_key_update);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3071;
	        this.match(PostgreSQLParser.ON);
	        this.state = 3072;
	        this.match(PostgreSQLParser.UPDATE);
	        this.state = 3073;
	        this.key_action();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_delete() {
	    let localctx = new Key_deleteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, PostgreSQLParser.RULE_key_delete);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3075;
	        this.match(PostgreSQLParser.ON);
	        this.state = 3076;
	        this.match(PostgreSQLParser.DELETE_P);
	        this.state = 3077;
	        this.key_action();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_action() {
	    let localctx = new Key_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, PostgreSQLParser.RULE_key_action);
	    var _la = 0;
	    try {
	        this.state = 3085;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 262:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3079;
	            this.match(PostgreSQLParser.NO);
	            this.state = 3080;
	            this.match(PostgreSQLParser.ACTION);
	            break;
	        case 308:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3081;
	            this.match(PostgreSQLParser.RESTRICT);
	            break;
	        case 150:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3082;
	            this.match(PostgreSQLParser.CASCADE);
	            break;
	        case 326:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3083;
	            this.match(PostgreSQLParser.SET);
	            this.state = 3084;
	            _la = this._input.LA(1);
	            if(!(_la===53 || _la===78)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optinherit() {
	    let localctx = new OptinheritContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, PostgreSQLParser.RULE_optinherit);
	    try {
	        this.state = 3093;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 229:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3087;
	            this.match(PostgreSQLParser.INHERITS);
	            this.state = 3088;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3089;
	            this.qualified_name_list();
	            this.state = 3090;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 80:
	        case 88:
	        case 92:
	        case 100:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 278:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 324:
	        case 326:
	        case 328:
	        case 333:
	        case 344:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 372:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optpartitionspec() {
	    let localctx = new OptpartitionspecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, PostgreSQLParser.RULE_optpartitionspec);
	    try {
	        this.state = 3097;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 278:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3095;
	            this.partitionspec();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 80:
	        case 88:
	        case 92:
	        case 100:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 344:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 372:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionspec() {
	    let localctx = new PartitionspecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, PostgreSQLParser.RULE_partitionspec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3099;
	        this.match(PostgreSQLParser.PARTITION);
	        this.state = 3100;
	        this.match(PostgreSQLParser.BY);
	        this.state = 3101;
	        this.colid();
	        this.state = 3102;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 3103;
	        this.part_params();
	        this.state = 3104;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	part_params() {
	    let localctx = new Part_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, PostgreSQLParser.RULE_part_params);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3106;
	        this.part_elem();
	        this.state = 3111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 3107;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 3108;
	            this.part_elem();
	            this.state = 3113;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	part_elem() {
	    let localctx = new Part_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, PostgreSQLParser.RULE_part_elem);
	    try {
	        this.state = 3128;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3114;
	            this.colid();
	            this.state = 3115;
	            this.opt_collate();
	            this.state = 3116;
	            this.opt_class();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3118;
	            this.func_expr_windowless();
	            this.state = 3119;
	            this.opt_collate();
	            this.state = 3120;
	            this.opt_class();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3122;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3123;
	            this.a_expr();
	            this.state = 3124;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 3125;
	            this.opt_collate();
	            this.state = 3126;
	            this.opt_class();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_access_method_clause() {
	    let localctx = new Table_access_method_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, PostgreSQLParser.RULE_table_access_method_clause);
	    try {
	        this.state = 3133;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3130;
	            this.match(PostgreSQLParser.USING);
	            this.state = 3131;
	            this.name();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 36:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 80:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 344:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 372:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optwith() {
	    let localctx = new OptwithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, PostgreSQLParser.RULE_optwith);
	    try {
	        this.state = 3140;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3135;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 3136;
	            this.reloptions();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3137;
	            this.match(PostgreSQLParser.WITHOUT);
	            this.state = 3138;
	            this.match(PostgreSQLParser.OIDS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oncommitoption() {
	    let localctx = new OncommitoptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, PostgreSQLParser.RULE_oncommitoption);
	    try {
	        this.state = 3152;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3142;
	            this.match(PostgreSQLParser.ON);
	            this.state = 3143;
	            this.match(PostgreSQLParser.COMMIT);
	            this.state = 3149;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 191:
	                this.state = 3144;
	                this.match(PostgreSQLParser.DROP);
	                break;
	            case 182:
	                this.state = 3145;
	                this.match(PostgreSQLParser.DELETE_P);
	                this.state = 3146;
	                this.match(PostgreSQLParser.ROWS);
	                break;
	            case 285:
	                this.state = 3147;
	                this.match(PostgreSQLParser.PRESERVE);
	                this.state = 3148;
	                this.match(PostgreSQLParser.ROWS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 36:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 344:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opttablespace() {
	    let localctx = new OpttablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, PostgreSQLParser.RULE_opttablespace);
	    try {
	        this.state = 3157;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 344:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3154;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 3155;
	            this.name();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 36:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 103:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optconstablespace() {
	    let localctx = new OptconstablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, PostgreSQLParser.RULE_optconstablespace);
	    try {
	        this.state = 3164;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3159;
	            this.match(PostgreSQLParser.USING);
	            this.state = 3160;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 3161;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 3162;
	            this.name();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 53:
	        case 54:
	        case 57:
	        case 61:
	        case 65:
	        case 69:
	        case 71:
	        case 77:
	        case 78:
	        case 85:
	        case 86:
	        case 88:
	        case 92:
	        case 98:
	        case 103:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 262:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 438:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existingindex() {
	    let localctx = new ExistingindexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, PostgreSQLParser.RULE_existingindex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3166;
	        this.match(PostgreSQLParser.USING);
	        this.state = 3167;
	        this.match(PostgreSQLParser.INDEX);
	        this.state = 3168;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createstatsstmt() {
	    let localctx = new CreatestatsstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, PostgreSQLParser.RULE_createstatsstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3170;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 3171;
	        this.match(PostgreSQLParser.STATISTICS);
	        this.state = 3175;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        if(la_===1) {
	            this.state = 3172;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3173;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 3174;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 3177;
	        this.any_name();
	        this.state = 3178;
	        this.opt_name_list();
	        this.state = 3179;
	        this.match(PostgreSQLParser.ON);
	        this.state = 3180;
	        this.expr_list();
	        this.state = 3181;
	        this.match(PostgreSQLParser.FROM);
	        this.state = 3182;
	        this.from_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterstatsstmt() {
	    let localctx = new AlterstatsstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, PostgreSQLParser.RULE_alterstatsstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3184;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 3185;
	        this.match(PostgreSQLParser.STATISTICS);
	        this.state = 3188;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        if(la_===1) {
	            this.state = 3186;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3187;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 3190;
	        this.any_name();
	        this.state = 3191;
	        this.match(PostgreSQLParser.SET);
	        this.state = 3192;
	        this.match(PostgreSQLParser.STATISTICS);
	        this.state = 3193;
	        this.signediconst();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createasstmt() {
	    let localctx = new CreateasstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, PostgreSQLParser.RULE_createasstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3195;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 3196;
	        this.opttemp();
	        this.state = 3197;
	        this.match(PostgreSQLParser.TABLE);
	        this.state = 3201;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        if(la_===1) {
	            this.state = 3198;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3199;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 3200;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 3203;
	        this.create_as_target();
	        this.state = 3204;
	        this.match(PostgreSQLParser.AS);
	        this.state = 3205;
	        this.selectstmt();
	        this.state = 3206;
	        this.opt_with_data();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_as_target() {
	    let localctx = new Create_as_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, PostgreSQLParser.RULE_create_as_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3208;
	        this.qualified_name();
	        this.state = 3209;
	        this.opt_column_list();
	        this.state = 3210;
	        this.table_access_method_clause();
	        this.state = 3211;
	        this.optwith();
	        this.state = 3212;
	        this.oncommitoption();
	        this.state = 3213;
	        this.opttablespace();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_with_data() {
	    let localctx = new Opt_with_dataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, PostgreSQLParser.RULE_opt_with_data);
	    try {
	        this.state = 3222;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3215;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 3219;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 174:
	                this.state = 3216;
	                this.match(PostgreSQLParser.DATA_P);
	                break;
	            case 262:
	                this.state = 3217;
	                this.match(PostgreSQLParser.NO);
	                this.state = 3218;
	                this.match(PostgreSQLParser.DATA_P);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creatematviewstmt() {
	    let localctx = new CreatematviewstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, PostgreSQLParser.RULE_creatematviewstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3224;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 3225;
	        this.optnolog();
	        this.state = 3226;
	        this.match(PostgreSQLParser.MATERIALIZED);
	        this.state = 3227;
	        this.match(PostgreSQLParser.VIEW);
	        this.state = 3231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        if(la_===1) {
	            this.state = 3228;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3229;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 3230;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 3233;
	        this.create_mv_target();
	        this.state = 3234;
	        this.match(PostgreSQLParser.AS);
	        this.state = 3235;
	        this.selectstmt();
	        this.state = 3236;
	        this.opt_with_data();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_mv_target() {
	    let localctx = new Create_mv_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, PostgreSQLParser.RULE_create_mv_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3238;
	        this.qualified_name();
	        this.state = 3239;
	        this.opt_column_list();
	        this.state = 3240;
	        this.table_access_method_clause();
	        this.state = 3241;
	        this.opt_reloptions();
	        this.state = 3242;
	        this.opttablespace();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optnolog() {
	    let localctx = new OptnologContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, PostgreSQLParser.RULE_optnolog);
	    try {
	        this.state = 3246;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 360:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3244;
	            this.match(PostgreSQLParser.UNLOGGED);
	            break;
	        case 251:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refreshmatviewstmt() {
	    let localctx = new RefreshmatviewstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, PostgreSQLParser.RULE_refreshmatviewstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3248;
	        this.match(PostgreSQLParser.REFRESH);
	        this.state = 3249;
	        this.match(PostgreSQLParser.MATERIALIZED);
	        this.state = 3250;
	        this.match(PostgreSQLParser.VIEW);
	        this.state = 3251;
	        this.opt_concurrently();
	        this.state = 3252;
	        this.qualified_name();
	        this.state = 3253;
	        this.opt_with_data();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createseqstmt() {
	    let localctx = new CreateseqstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, PostgreSQLParser.RULE_createseqstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3255;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 3256;
	        this.opttemp();
	        this.state = 3257;
	        this.match(PostgreSQLParser.SEQUENCE);
	        this.state = 3261;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	        if(la_===1) {
	            this.state = 3258;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3259;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 3260;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 3263;
	        this.qualified_name();
	        this.state = 3264;
	        this.optseqoptlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterseqstmt() {
	    let localctx = new AlterseqstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, PostgreSQLParser.RULE_alterseqstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3266;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 3267;
	        this.match(PostgreSQLParser.SEQUENCE);
	        this.state = 3270;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	        if(la_===1) {
	            this.state = 3268;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3269;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 3272;
	        this.qualified_name();
	        this.state = 3273;
	        this.seqoptlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optseqoptlist() {
	    let localctx = new OptseqoptlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, PostgreSQLParser.RULE_optseqoptlist);
	    try {
	        this.state = 3277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3275;
	            this.seqoptlist();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optparenthesizedseqoptlist() {
	    let localctx = new OptparenthesizedseqoptlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, PostgreSQLParser.RULE_optparenthesizedseqoptlist);
	    try {
	        this.state = 3284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3279;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3280;
	            this.seqoptlist();
	            this.state = 3281;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seqoptlist() {
	    let localctx = new SeqoptlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, PostgreSQLParser.RULE_seqoptlist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3287; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3286;
	        		this.seqoptelem();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3289; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,133, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seqoptelem() {
	    let localctx = new SeqoptelemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, PostgreSQLParser.RULE_seqoptelem);
	    var _la = 0;
	    try {
	        this.state = 3321;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 36:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3291;
	            this.match(PostgreSQLParser.AS);
	            this.state = 3292;
	            this.simpletypename();
	            break;
	        case 148:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3293;
	            this.match(PostgreSQLParser.CACHE);
	            this.state = 3294;
	            this.numericonly();
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3295;
	            this.match(PostgreSQLParser.CYCLE);
	            break;
	        case 225:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3296;
	            this.match(PostgreSQLParser.INCREMENT);
	            this.state = 3297;
	            this.opt_by();
	            this.state = 3298;
	            this.numericonly();
	            break;
	        case 252:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3300;
	            this.match(PostgreSQLParser.MAXVALUE);
	            this.state = 3301;
	            this.numericonly();
	            break;
	        case 255:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3302;
	            this.match(PostgreSQLParser.MINVALUE);
	            this.state = 3303;
	            this.numericonly();
	            break;
	        case 262:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3304;
	            this.match(PostgreSQLParser.NO);
	            this.state = 3305;
	            _la = this._input.LA(1);
	            if(!(_la===173 || _la===252 || _la===255)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 274:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3306;
	            this.match(PostgreSQLParser.OWNED);
	            this.state = 3307;
	            this.match(PostgreSQLParser.BY);
	            this.state = 3308;
	            this.any_name();
	            break;
	        case 321:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3309;
	            this.match(PostgreSQLParser.SEQUENCE);
	            this.state = 3310;
	            this.match(PostgreSQLParser.NAME_P);
	            this.state = 3311;
	            this.any_name();
	            break;
	        case 333:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3312;
	            this.match(PostgreSQLParser.START);
	            this.state = 3313;
	            this.opt_with();
	            this.state = 3314;
	            this.numericonly();
	            break;
	        case 307:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3316;
	            this.match(PostgreSQLParser.RESTART);
	            this.state = 3317;
	            this.opt_with();
	            this.state = 3319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12 || _la===13 || _la===658 || _la===660) {
	                this.state = 3318;
	                this.numericonly();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_by() {
	    let localctx = new Opt_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, PostgreSQLParser.RULE_opt_by);
	    try {
	        this.state = 3325;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 147:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3323;
	            this.match(PostgreSQLParser.BY);
	            break;
	        case 12:
	        case 13:
	        case 658:
	        case 660:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericonly() {
	    let localctx = new NumericonlyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, PostgreSQLParser.RULE_numericonly);
	    try {
	        this.state = 3333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3327;
	            this.fconst();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3328;
	            this.match(PostgreSQLParser.PLUS);
	            this.state = 3329;
	            this.fconst();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3330;
	            this.match(PostgreSQLParser.MINUS);
	            this.state = 3331;
	            this.fconst();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3332;
	            this.signediconst();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericonly_list() {
	    let localctx = new Numericonly_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, PostgreSQLParser.RULE_numericonly_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3335;
	        this.numericonly();
	        this.state = 3340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 3336;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 3337;
	            this.numericonly();
	            this.state = 3342;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createplangstmt() {
	    let localctx = new CreateplangstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, PostgreSQLParser.RULE_createplangstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3343;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 3344;
	        this.opt_or_replace();
	        this.state = 3345;
	        this.opt_trusted();
	        this.state = 3346;
	        this.opt_procedural();
	        this.state = 3347;
	        this.match(PostgreSQLParser.LANGUAGE);
	        this.state = 3348;
	        this.name();
	        this.state = 3354;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===215) {
	            this.state = 3349;
	            this.match(PostgreSQLParser.HANDLER);
	            this.state = 3350;
	            this.handler_name();
	            this.state = 3351;
	            this.opt_inline_handler();
	            this.state = 3352;
	            this.opt_validator();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_trusted() {
	    let localctx = new Opt_trustedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, PostgreSQLParser.RULE_opt_trusted);
	    try {
	        this.state = 3358;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 352:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3356;
	            this.match(PostgreSQLParser.TRUSTED);
	            break;
	        case 238:
	        case 288:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handler_name() {
	    let localctx = new Handler_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, PostgreSQLParser.RULE_handler_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3360;
	        this.name();
	        this.state = 3362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 3361;
	            this.attrs();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_inline_handler() {
	    let localctx = new Opt_inline_handlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, PostgreSQLParser.RULE_opt_inline_handler);
	    try {
	        this.state = 3367;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 230:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3364;
	            this.match(PostgreSQLParser.INLINE_P);
	            this.state = 3365;
	            this.handler_name();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 262:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 366:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	validator_clause() {
	    let localctx = new Validator_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, PostgreSQLParser.RULE_validator_clause);
	    try {
	        this.state = 3373;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 366:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3369;
	            this.match(PostgreSQLParser.VALIDATOR);
	            this.state = 3370;
	            this.handler_name();
	            break;
	        case 262:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3371;
	            this.match(PostgreSQLParser.NO);
	            this.state = 3372;
	            this.match(PostgreSQLParser.VALIDATOR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_validator() {
	    let localctx = new Opt_validatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, PostgreSQLParser.RULE_opt_validator);
	    try {
	        this.state = 3377;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 262:
	        case 366:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3375;
	            this.validator_clause();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_procedural() {
	    let localctx = new Opt_proceduralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, PostgreSQLParser.RULE_opt_procedural);
	    try {
	        this.state = 3381;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 288:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3379;
	            this.match(PostgreSQLParser.PROCEDURAL);
	            break;
	        case 238:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createtablespacestmt() {
	    let localctx = new CreatetablespacestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, PostgreSQLParser.RULE_createtablespacestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3383;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 3384;
	        this.match(PostgreSQLParser.TABLESPACE);
	        this.state = 3385;
	        this.name();
	        this.state = 3386;
	        this.opttablespaceowner();
	        this.state = 3387;
	        this.match(PostgreSQLParser.LOCATION);
	        this.state = 3388;
	        this.sconst();
	        this.state = 3389;
	        this.opt_reloptions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opttablespaceowner() {
	    let localctx = new OpttablespaceownerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, PostgreSQLParser.RULE_opttablespaceowner);
	    try {
	        this.state = 3394;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 275:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3391;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 3392;
	            this.rolespec();
	            break;
	        case 246:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	droptablespacestmt() {
	    let localctx = new DroptablespacestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, PostgreSQLParser.RULE_droptablespacestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3396;
	        this.match(PostgreSQLParser.DROP);
	        this.state = 3397;
	        this.match(PostgreSQLParser.TABLESPACE);
	        this.state = 3400;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        if(la_===1) {
	            this.state = 3398;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3399;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 3402;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createextensionstmt() {
	    let localctx = new CreateextensionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, PostgreSQLParser.RULE_createextensionstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3404;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 3405;
	        this.match(PostgreSQLParser.EXTENSION);
	        this.state = 3409;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        if(la_===1) {
	            this.state = 3406;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3407;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 3408;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 3411;
	        this.name();
	        this.state = 3412;
	        this.opt_with();
	        this.state = 3413;
	        this.create_extension_opt_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_extension_opt_list() {
	    let localctx = new Create_extension_opt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, PostgreSQLParser.RULE_create_extension_opt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64 || _la===150 || _la===316 || _la===368) {
	            this.state = 3415;
	            this.create_extension_opt_item();
	            this.state = 3420;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_extension_opt_item() {
	    let localctx = new Create_extension_opt_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, PostgreSQLParser.RULE_create_extension_opt_item);
	    try {
	        this.state = 3428;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 316:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3421;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 3422;
	            this.name();
	            break;
	        case 368:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3423;
	            this.match(PostgreSQLParser.VERSION_P);
	            this.state = 3424;
	            this.nonreservedword_or_sconst();
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3425;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 3426;
	            this.nonreservedword_or_sconst();
	            break;
	        case 150:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3427;
	            this.match(PostgreSQLParser.CASCADE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterextensionstmt() {
	    let localctx = new AlterextensionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, PostgreSQLParser.RULE_alterextensionstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3430;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 3431;
	        this.match(PostgreSQLParser.EXTENSION);
	        this.state = 3432;
	        this.name();
	        this.state = 3433;
	        this.match(PostgreSQLParser.UPDATE);
	        this.state = 3434;
	        this.alter_extension_opt_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_extension_opt_list() {
	    let localctx = new Alter_extension_opt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, PostgreSQLParser.RULE_alter_extension_opt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===94) {
	            this.state = 3436;
	            this.alter_extension_opt_item();
	            this.state = 3441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_extension_opt_item() {
	    let localctx = new Alter_extension_opt_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, PostgreSQLParser.RULE_alter_extension_opt_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3442;
	        this.match(PostgreSQLParser.TO);
	        this.state = 3443;
	        this.nonreservedword_or_sconst();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterextensioncontentsstmt() {
	    let localctx = new AlterextensioncontentsstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, PostgreSQLParser.RULE_alterextensioncontentsstmt);
	    try {
	        this.state = 3549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3445;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3446;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3447;
	            this.name();
	            this.state = 3448;
	            this.add_drop();
	            this.state = 3449;
	            this.object_type_name();
	            this.state = 3450;
	            this.name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3452;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3453;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3454;
	            this.name();
	            this.state = 3455;
	            this.add_drop();
	            this.state = 3456;
	            this.object_type_any_name();
	            this.state = 3457;
	            this.any_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3459;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3460;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3461;
	            this.name();
	            this.state = 3462;
	            this.add_drop();
	            this.state = 3463;
	            this.match(PostgreSQLParser.AGGREGATE);
	            this.state = 3464;
	            this.aggregate_with_argtypes();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3466;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3467;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3468;
	            this.name();
	            this.state = 3469;
	            this.add_drop();
	            this.state = 3470;
	            this.match(PostgreSQLParser.CAST);
	            this.state = 3471;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3472;
	            this.typename();
	            this.state = 3473;
	            this.match(PostgreSQLParser.AS);
	            this.state = 3474;
	            this.typename();
	            this.state = 3475;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3477;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3478;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3479;
	            this.name();
	            this.state = 3480;
	            this.add_drop();
	            this.state = 3481;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 3482;
	            this.typename();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3484;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3485;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3486;
	            this.name();
	            this.state = 3487;
	            this.add_drop();
	            this.state = 3488;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 3489;
	            this.function_with_argtypes();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3491;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3492;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3493;
	            this.name();
	            this.state = 3494;
	            this.add_drop();
	            this.state = 3495;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 3496;
	            this.operator_with_argtypes();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3498;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3499;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3500;
	            this.name();
	            this.state = 3501;
	            this.add_drop();
	            this.state = 3502;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 3503;
	            this.match(PostgreSQLParser.CLASS);
	            this.state = 3504;
	            this.any_name();
	            this.state = 3505;
	            this.match(PostgreSQLParser.USING);
	            this.state = 3506;
	            this.name();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3508;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3509;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3510;
	            this.name();
	            this.state = 3511;
	            this.add_drop();
	            this.state = 3512;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 3513;
	            this.match(PostgreSQLParser.FAMILY);
	            this.state = 3514;
	            this.any_name();
	            this.state = 3515;
	            this.match(PostgreSQLParser.USING);
	            this.state = 3516;
	            this.name();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3518;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3519;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3520;
	            this.name();
	            this.state = 3521;
	            this.add_drop();
	            this.state = 3522;
	            this.match(PostgreSQLParser.PROCEDURE);
	            this.state = 3523;
	            this.function_with_argtypes();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3525;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3526;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3527;
	            this.name();
	            this.state = 3528;
	            this.add_drop();
	            this.state = 3529;
	            this.match(PostgreSQLParser.ROUTINE);
	            this.state = 3530;
	            this.function_with_argtypes();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3532;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3533;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3534;
	            this.name();
	            this.state = 3535;
	            this.add_drop();
	            this.state = 3536;
	            this.match(PostgreSQLParser.TRANSFORM);
	            this.state = 3537;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 3538;
	            this.typename();
	            this.state = 3539;
	            this.match(PostgreSQLParser.LANGUAGE);
	            this.state = 3540;
	            this.name();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3542;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3543;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 3544;
	            this.name();
	            this.state = 3545;
	            this.add_drop();
	            this.state = 3546;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 3547;
	            this.typename();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createfdwstmt() {
	    let localctx = new CreatefdwstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, PostgreSQLParser.RULE_createfdwstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3551;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 3552;
	        this.match(PostgreSQLParser.FOREIGN);
	        this.state = 3553;
	        this.match(PostgreSQLParser.DATA_P);
	        this.state = 3554;
	        this.match(PostgreSQLParser.WRAPPER);
	        this.state = 3555;
	        this.name();
	        this.state = 3556;
	        this.opt_fdw_options();
	        this.state = 3557;
	        this.create_generic_options();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fdw_option() {
	    let localctx = new Fdw_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, PostgreSQLParser.RULE_fdw_option);
	    try {
	        this.state = 3567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3559;
	            this.match(PostgreSQLParser.HANDLER);
	            this.state = 3560;
	            this.handler_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3561;
	            this.match(PostgreSQLParser.NO);
	            this.state = 3562;
	            this.match(PostgreSQLParser.HANDLER);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3563;
	            this.match(PostgreSQLParser.VALIDATOR);
	            this.state = 3564;
	            this.handler_name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3565;
	            this.match(PostgreSQLParser.NO);
	            this.state = 3566;
	            this.match(PostgreSQLParser.VALIDATOR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fdw_options() {
	    let localctx = new Fdw_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, PostgreSQLParser.RULE_fdw_options);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3570; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3569;
	            this.fdw_option();
	            this.state = 3572; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===215 || _la===262 || _la===366);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_fdw_options() {
	    let localctx = new Opt_fdw_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, PostgreSQLParser.RULE_opt_fdw_options);
	    try {
	        this.state = 3576;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 215:
	        case 262:
	        case 366:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3574;
	            this.fdw_options();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 273:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterfdwstmt() {
	    let localctx = new AlterfdwstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, PostgreSQLParser.RULE_alterfdwstmt);
	    try {
	        this.state = 3593;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3578;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3579;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 3580;
	            this.match(PostgreSQLParser.DATA_P);
	            this.state = 3581;
	            this.match(PostgreSQLParser.WRAPPER);
	            this.state = 3582;
	            this.name();
	            this.state = 3583;
	            this.opt_fdw_options();
	            this.state = 3584;
	            this.alter_generic_options();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3586;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 3587;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 3588;
	            this.match(PostgreSQLParser.DATA_P);
	            this.state = 3589;
	            this.match(PostgreSQLParser.WRAPPER);
	            this.state = 3590;
	            this.name();
	            this.state = 3591;
	            this.fdw_options();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_generic_options() {
	    let localctx = new Create_generic_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, PostgreSQLParser.RULE_create_generic_options);
	    try {
	        this.state = 3601;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 273:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3595;
	            this.match(PostgreSQLParser.OPTIONS);
	            this.state = 3596;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3597;
	            this.generic_option_list();
	            this.state = 3598;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 53:
	        case 54:
	        case 57:
	        case 61:
	        case 65:
	        case 69:
	        case 71:
	        case 77:
	        case 78:
	        case 85:
	        case 86:
	        case 88:
	        case 92:
	        case 98:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 438:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_option_list() {
	    let localctx = new Generic_option_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, PostgreSQLParser.RULE_generic_option_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3603;
	        this.generic_option_elem();
	        this.state = 3608;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 3604;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 3605;
	            this.generic_option_elem();
	            this.state = 3610;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_generic_options() {
	    let localctx = new Alter_generic_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, PostgreSQLParser.RULE_alter_generic_options);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3611;
	        this.match(PostgreSQLParser.OPTIONS);
	        this.state = 3612;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 3613;
	        this.alter_generic_option_list();
	        this.state = 3614;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_generic_option_list() {
	    let localctx = new Alter_generic_option_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, PostgreSQLParser.RULE_alter_generic_option_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3616;
	        this.alter_generic_option_elem();
	        this.state = 3621;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 3617;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 3618;
	            this.alter_generic_option_elem();
	            this.state = 3623;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_generic_option_elem() {
	    let localctx = new Alter_generic_option_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, PostgreSQLParser.RULE_alter_generic_option_elem);
	    try {
	        this.state = 3631;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3624;
	            this.generic_option_elem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3625;
	            this.match(PostgreSQLParser.SET);
	            this.state = 3626;
	            this.generic_option_elem();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3627;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 3628;
	            this.generic_option_elem();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3629;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 3630;
	            this.generic_option_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_option_elem() {
	    let localctx = new Generic_option_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, PostgreSQLParser.RULE_generic_option_elem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3633;
	        this.generic_option_name();
	        this.state = 3634;
	        this.generic_option_arg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_option_name() {
	    let localctx = new Generic_option_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, PostgreSQLParser.RULE_generic_option_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3636;
	        this.collabel();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_option_arg() {
	    let localctx = new Generic_option_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, PostgreSQLParser.RULE_generic_option_arg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3638;
	        this.sconst();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createforeignserverstmt() {
	    let localctx = new CreateforeignserverstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, PostgreSQLParser.RULE_createforeignserverstmt);
	    try {
	        this.state = 3665;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3640;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 3641;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 3642;
	            this.name();
	            this.state = 3643;
	            this.opt_type();
	            this.state = 3644;
	            this.opt_foreign_server_version();
	            this.state = 3645;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 3646;
	            this.match(PostgreSQLParser.DATA_P);
	            this.state = 3647;
	            this.match(PostgreSQLParser.WRAPPER);
	            this.state = 3648;
	            this.name();
	            this.state = 3649;
	            this.create_generic_options();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3651;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 3652;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 3653;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3654;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 3655;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 3656;
	            this.name();
	            this.state = 3657;
	            this.opt_type();
	            this.state = 3658;
	            this.opt_foreign_server_version();
	            this.state = 3659;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 3660;
	            this.match(PostgreSQLParser.DATA_P);
	            this.state = 3661;
	            this.match(PostgreSQLParser.WRAPPER);
	            this.state = 3662;
	            this.name();
	            this.state = 3663;
	            this.create_generic_options();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_type() {
	    let localctx = new Opt_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, PostgreSQLParser.RULE_opt_type);
	    try {
	        this.state = 3670;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 353:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3667;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 3668;
	            this.sconst();
	            break;
	        case 63:
	        case 368:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreign_server_version() {
	    let localctx = new Foreign_server_versionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, PostgreSQLParser.RULE_foreign_server_version);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3672;
	        this.match(PostgreSQLParser.VERSION_P);
	        this.state = 3675;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.state = 3673;
	            this.sconst();
	            break;
	        case 78:
	            this.state = 3674;
	            this.match(PostgreSQLParser.NULL_P);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_foreign_server_version() {
	    let localctx = new Opt_foreign_server_versionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, PostgreSQLParser.RULE_opt_foreign_server_version);
	    try {
	        this.state = 3679;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 368:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3677;
	            this.foreign_server_version();
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterforeignserverstmt() {
	    let localctx = new AlterforeignserverstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, PostgreSQLParser.RULE_alterforeignserverstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3681;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 3682;
	        this.match(PostgreSQLParser.SERVER);
	        this.state = 3683;
	        this.name();
	        this.state = 3689;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 273:
	            this.state = 3684;
	            this.alter_generic_options();
	            break;
	        case 368:
	            this.state = 3685;
	            this.foreign_server_version();
	            this.state = 3687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===273) {
	                this.state = 3686;
	                this.alter_generic_options();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createforeigntablestmt() {
	    let localctx = new CreateforeigntablestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, PostgreSQLParser.RULE_createforeigntablestmt);
	    try {
	        this.state = 3747;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3691;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 3692;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 3693;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 3694;
	            this.qualified_name();
	            this.state = 3695;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3696;
	            this.opttableelementlist();
	            this.state = 3697;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 3698;
	            this.optinherit();
	            this.state = 3699;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 3700;
	            this.name();
	            this.state = 3701;
	            this.create_generic_options();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3703;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 3704;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 3705;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 3706;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3707;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 3708;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 3709;
	            this.qualified_name();
	            this.state = 3710;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3711;
	            this.opttableelementlist();
	            this.state = 3712;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 3713;
	            this.optinherit();
	            this.state = 3714;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 3715;
	            this.name();
	            this.state = 3716;
	            this.create_generic_options();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3718;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 3719;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 3720;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 3721;
	            this.qualified_name();
	            this.state = 3722;
	            this.match(PostgreSQLParser.PARTITION);
	            this.state = 3723;
	            this.match(PostgreSQLParser.OF);
	            this.state = 3724;
	            this.qualified_name();
	            this.state = 3725;
	            this.opttypedtableelementlist();
	            this.state = 3726;
	            this.partitionboundspec();
	            this.state = 3727;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 3728;
	            this.name();
	            this.state = 3729;
	            this.create_generic_options();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3731;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 3732;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 3733;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 3734;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3735;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 3736;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 3737;
	            this.qualified_name();
	            this.state = 3738;
	            this.match(PostgreSQLParser.PARTITION);
	            this.state = 3739;
	            this.match(PostgreSQLParser.OF);
	            this.state = 3740;
	            this.qualified_name();
	            this.state = 3741;
	            this.opttypedtableelementlist();
	            this.state = 3742;
	            this.partitionboundspec();
	            this.state = 3743;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 3744;
	            this.name();
	            this.state = 3745;
	            this.create_generic_options();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importforeignschemastmt() {
	    let localctx = new ImportforeignschemastmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, PostgreSQLParser.RULE_importforeignschemastmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3749;
	        this.match(PostgreSQLParser.IMPORT_P);
	        this.state = 3750;
	        this.match(PostgreSQLParser.FOREIGN);
	        this.state = 3751;
	        this.match(PostgreSQLParser.SCHEMA);
	        this.state = 3752;
	        this.name();
	        this.state = 3753;
	        this.import_qualification();
	        this.state = 3754;
	        this.match(PostgreSQLParser.FROM);
	        this.state = 3755;
	        this.match(PostgreSQLParser.SERVER);
	        this.state = 3756;
	        this.name();
	        this.state = 3757;
	        this.match(PostgreSQLParser.INTO);
	        this.state = 3758;
	        this.name();
	        this.state = 3759;
	        this.create_generic_options();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_qualification_type() {
	    let localctx = new Import_qualification_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, PostgreSQLParser.RULE_import_qualification_type);
	    try {
	        this.state = 3764;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3761;
	            this.match(PostgreSQLParser.LIMIT);
	            this.state = 3762;
	            this.match(PostgreSQLParser.TO);
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3763;
	            this.match(PostgreSQLParser.EXCEPT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_qualification() {
	    let localctx = new Import_qualificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, PostgreSQLParser.RULE_import_qualification);
	    try {
	        this.state = 3772;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3766;
	            this.import_qualification_type();
	            this.state = 3767;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3768;
	            this.relation_expr_list();
	            this.state = 3769;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createusermappingstmt() {
	    let localctx = new CreateusermappingstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, PostgreSQLParser.RULE_createusermappingstmt);
	    try {
	        this.state = 3795;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3774;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 3775;
	            this.match(PostgreSQLParser.USER);
	            this.state = 3776;
	            this.match(PostgreSQLParser.MAPPING);
	            this.state = 3777;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 3778;
	            this.auth_ident();
	            this.state = 3779;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 3780;
	            this.name();
	            this.state = 3781;
	            this.create_generic_options();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3783;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 3784;
	            this.match(PostgreSQLParser.USER);
	            this.state = 3785;
	            this.match(PostgreSQLParser.MAPPING);
	            this.state = 3786;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3787;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 3788;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 3789;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 3790;
	            this.auth_ident();
	            this.state = 3791;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 3792;
	            this.name();
	            this.state = 3793;
	            this.create_generic_options();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	auth_ident() {
	    let localctx = new Auth_identContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, PostgreSQLParser.RULE_auth_ident);
	    try {
	        this.state = 3799;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 52:
	        case 53:
	        case 57:
	        case 61:
	        case 89:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3797;
	            this.rolespec();
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3798;
	            this.match(PostgreSQLParser.USER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropusermappingstmt() {
	    let localctx = new DropusermappingstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, PostgreSQLParser.RULE_dropusermappingstmt);
	    try {
	        this.state = 3819;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3801;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 3802;
	            this.match(PostgreSQLParser.USER);
	            this.state = 3803;
	            this.match(PostgreSQLParser.MAPPING);
	            this.state = 3804;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 3805;
	            this.auth_ident();
	            this.state = 3806;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 3807;
	            this.name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3809;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 3810;
	            this.match(PostgreSQLParser.USER);
	            this.state = 3811;
	            this.match(PostgreSQLParser.MAPPING);
	            this.state = 3812;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 3813;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 3814;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 3815;
	            this.auth_ident();
	            this.state = 3816;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 3817;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterusermappingstmt() {
	    let localctx = new AlterusermappingstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, PostgreSQLParser.RULE_alterusermappingstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3821;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 3822;
	        this.match(PostgreSQLParser.USER);
	        this.state = 3823;
	        this.match(PostgreSQLParser.MAPPING);
	        this.state = 3824;
	        this.match(PostgreSQLParser.FOR);
	        this.state = 3825;
	        this.auth_ident();
	        this.state = 3826;
	        this.match(PostgreSQLParser.SERVER);
	        this.state = 3827;
	        this.name();
	        this.state = 3828;
	        this.alter_generic_options();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createpolicystmt() {
	    let localctx = new CreatepolicystmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, PostgreSQLParser.RULE_createpolicystmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3830;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 3831;
	        this.match(PostgreSQLParser.POLICY);
	        this.state = 3832;
	        this.name();
	        this.state = 3833;
	        this.match(PostgreSQLParser.ON);
	        this.state = 3834;
	        this.qualified_name();
	        this.state = 3835;
	        this.rowsecuritydefaultpermissive();
	        this.state = 3836;
	        this.rowsecuritydefaultforcmd();
	        this.state = 3837;
	        this.rowsecuritydefaulttorole();
	        this.state = 3838;
	        this.rowsecurityoptionalexpr();
	        this.state = 3839;
	        this.rowsecurityoptionalwithcheck();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterpolicystmt() {
	    let localctx = new AlterpolicystmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, PostgreSQLParser.RULE_alterpolicystmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3841;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 3842;
	        this.match(PostgreSQLParser.POLICY);
	        this.state = 3843;
	        this.name();
	        this.state = 3844;
	        this.match(PostgreSQLParser.ON);
	        this.state = 3845;
	        this.qualified_name();
	        this.state = 3846;
	        this.rowsecurityoptionaltorole();
	        this.state = 3847;
	        this.rowsecurityoptionalexpr();
	        this.state = 3848;
	        this.rowsecurityoptionalwithcheck();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowsecurityoptionalexpr() {
	    let localctx = new RowsecurityoptionalexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, PostgreSQLParser.RULE_rowsecurityoptionalexpr);
	    try {
	        this.state = 3856;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3850;
	            this.match(PostgreSQLParser.USING);
	            this.state = 3851;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3852;
	            this.a_expr();
	            this.state = 3853;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowsecurityoptionalwithcheck() {
	    let localctx = new RowsecurityoptionalwithcheckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, PostgreSQLParser.RULE_rowsecurityoptionalwithcheck);
	    try {
	        this.state = 3865;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3858;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 3859;
	            this.match(PostgreSQLParser.CHECK);
	            this.state = 3860;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3861;
	            this.a_expr();
	            this.state = 3862;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowsecuritydefaulttorole() {
	    let localctx = new RowsecuritydefaulttoroleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, PostgreSQLParser.RULE_rowsecuritydefaulttorole);
	    try {
	        this.state = 3870;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3867;
	            this.match(PostgreSQLParser.TO);
	            this.state = 3868;
	            this.role_list();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 100:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowsecurityoptionaltorole() {
	    let localctx = new RowsecurityoptionaltoroleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, PostgreSQLParser.RULE_rowsecurityoptionaltorole);
	    try {
	        this.state = 3875;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3872;
	            this.match(PostgreSQLParser.TO);
	            this.state = 3873;
	            this.role_list();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 100:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowsecuritydefaultpermissive() {
	    let localctx = new RowsecuritydefaultpermissiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, PostgreSQLParser.RULE_rowsecuritydefaultpermissive);
	    try {
	        this.state = 3880;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 36:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3877;
	            this.match(PostgreSQLParser.AS);
	            this.state = 3878;
	            this.identifier();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 62:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 94:
	        case 100:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowsecuritydefaultforcmd() {
	    let localctx = new RowsecuritydefaultforcmdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, PostgreSQLParser.RULE_rowsecuritydefaultforcmd);
	    try {
	        this.state = 3885;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3882;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 3883;
	            this.row_security_cmd();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 94:
	        case 100:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_security_cmd() {
	    let localctx = new Row_security_cmdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, PostgreSQLParser.RULE_row_security_cmd);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3887;
	        _la = this._input.LA(1);
	        if(!(_la===30 || _la===88 || _la===182 || _la===232 || _la===362)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createamstmt() {
	    let localctx = new CreateamstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, PostgreSQLParser.RULE_createamstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3889;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 3890;
	        this.match(PostgreSQLParser.ACCESS);
	        this.state = 3891;
	        this.match(PostgreSQLParser.METHOD);
	        this.state = 3892;
	        this.name();
	        this.state = 3893;
	        this.match(PostgreSQLParser.TYPE_P);
	        this.state = 3894;
	        this.am_type();
	        this.state = 3895;
	        this.match(PostgreSQLParser.HANDLER);
	        this.state = 3896;
	        this.handler_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	am_type() {
	    let localctx = new Am_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, PostgreSQLParser.RULE_am_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3898;
	        _la = this._input.LA(1);
	        if(!(_la===92 || _la===226)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createtrigstmt() {
	    let localctx = new CreatetrigstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, PostgreSQLParser.RULE_createtrigstmt);
	    try {
	        this.state = 3938;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3900;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 3901;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 3902;
	            this.name();
	            this.state = 3903;
	            this.triggeractiontime();
	            this.state = 3904;
	            this.triggerevents();
	            this.state = 3905;
	            this.match(PostgreSQLParser.ON);
	            this.state = 3906;
	            this.qualified_name();
	            this.state = 3907;
	            this.triggerreferencing();
	            this.state = 3908;
	            this.triggerforspec();
	            this.state = 3909;
	            this.triggerwhen();
	            this.state = 3910;
	            this.match(PostgreSQLParser.EXECUTE);
	            this.state = 3911;
	            this.function_or_procedure();
	            this.state = 3912;
	            this.func_name();
	            this.state = 3913;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3914;
	            this.triggerfuncargs();
	            this.state = 3915;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3917;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 3918;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 3919;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 3920;
	            this.name();
	            this.state = 3921;
	            this.match(PostgreSQLParser.AFTER);
	            this.state = 3922;
	            this.triggerevents();
	            this.state = 3923;
	            this.match(PostgreSQLParser.ON);
	            this.state = 3924;
	            this.qualified_name();
	            this.state = 3925;
	            this.optconstrfromtable();
	            this.state = 3926;
	            this.constraintattributespec();
	            this.state = 3927;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 3928;
	            this.match(PostgreSQLParser.EACH);
	            this.state = 3929;
	            this.match(PostgreSQLParser.ROW);
	            this.state = 3930;
	            this.triggerwhen();
	            this.state = 3931;
	            this.match(PostgreSQLParser.EXECUTE);
	            this.state = 3932;
	            this.function_or_procedure();
	            this.state = 3933;
	            this.func_name();
	            this.state = 3934;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3935;
	            this.triggerfuncargs();
	            this.state = 3936;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggeractiontime() {
	    let localctx = new TriggeractiontimeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, PostgreSQLParser.RULE_triggeractiontime);
	    try {
	        this.state = 3944;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 145:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3940;
	            this.match(PostgreSQLParser.BEFORE);
	            break;
	        case 135:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3941;
	            this.match(PostgreSQLParser.AFTER);
	            break;
	        case 233:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3942;
	            this.match(PostgreSQLParser.INSTEAD);
	            this.state = 3943;
	            this.match(PostgreSQLParser.OF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerevents() {
	    let localctx = new TriggereventsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, PostgreSQLParser.RULE_triggerevents);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3946;
	        this.triggeroneevent();
	        this.state = 3951;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===82) {
	            this.state = 3947;
	            this.match(PostgreSQLParser.OR);
	            this.state = 3948;
	            this.triggeroneevent();
	            this.state = 3953;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggeroneevent() {
	    let localctx = new TriggeroneeventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, PostgreSQLParser.RULE_triggeroneevent);
	    try {
	        this.state = 3961;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3954;
	            this.match(PostgreSQLParser.INSERT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3955;
	            this.match(PostgreSQLParser.DELETE_P);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3956;
	            this.match(PostgreSQLParser.UPDATE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3957;
	            this.match(PostgreSQLParser.UPDATE);
	            this.state = 3958;
	            this.match(PostgreSQLParser.OF);
	            this.state = 3959;
	            this.columnlist();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3960;
	            this.match(PostgreSQLParser.TRUNCATE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerreferencing() {
	    let localctx = new TriggerreferencingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, PostgreSQLParser.RULE_triggerreferencing);
	    try {
	        this.state = 3966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 447:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3963;
	            this.match(PostgreSQLParser.REFERENCING);
	            this.state = 3964;
	            this.triggertransitions();
	            break;
	        case 62:
	        case 102:
	        case 202:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggertransitions() {
	    let localctx = new TriggertransitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, PostgreSQLParser.RULE_triggertransitions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3969; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3968;
	            this.triggertransition();
	            this.state = 3971; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===448 || _la===449);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggertransition() {
	    let localctx = new TriggertransitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, PostgreSQLParser.RULE_triggertransition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3973;
	        this.transitionoldornew();
	        this.state = 3974;
	        this.transitionrowortable();
	        this.state = 3975;
	        this.opt_as();
	        this.state = 3976;
	        this.transitionrelname();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transitionoldornew() {
	    let localctx = new TransitionoldornewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, PostgreSQLParser.RULE_transitionoldornew);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3978;
	        _la = this._input.LA(1);
	        if(!(_la===448 || _la===449)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transitionrowortable() {
	    let localctx = new TransitionrowortableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, PostgreSQLParser.RULE_transitionrowortable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3980;
	        _la = this._input.LA(1);
	        if(!(_la===92 || _la===407)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transitionrelname() {
	    let localctx = new TransitionrelnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, PostgreSQLParser.RULE_transitionrelname);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3982;
	        this.colid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerforspec() {
	    let localctx = new TriggerforspecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, PostgreSQLParser.RULE_triggerforspec);
	    try {
	        this.state = 3989;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3984;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 3985;
	            this.triggerforopteach();
	            this.state = 3986;
	            this.triggerfortype();
	            break;
	        case 102:
	        case 202:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerforopteach() {
	    let localctx = new TriggerforopteachContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, PostgreSQLParser.RULE_triggerforopteach);
	    try {
	        this.state = 3993;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 192:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3991;
	            this.match(PostgreSQLParser.EACH);
	            break;
	        case 334:
	        case 407:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerfortype() {
	    let localctx = new TriggerfortypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, PostgreSQLParser.RULE_triggerfortype);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3995;
	        _la = this._input.LA(1);
	        if(!(_la===334 || _la===407)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerwhen() {
	    let localctx = new TriggerwhenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, PostgreSQLParser.RULE_triggerwhen);
	    try {
	        this.state = 4003;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 102:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3997;
	            this.match(PostgreSQLParser.WHEN);
	            this.state = 3998;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 3999;
	            this.a_expr();
	            this.state = 4000;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 202:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_or_procedure() {
	    let localctx = new Function_or_procedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, PostgreSQLParser.RULE_function_or_procedure);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4005;
	        _la = this._input.LA(1);
	        if(!(_la===211 || _la===289)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerfuncargs() {
	    let localctx = new TriggerfuncargsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, PostgreSQLParser.RULE_triggerfuncargs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4009;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 671:
	            this.state = 4007;
	            this.triggerfuncarg();
	            break;
	        case 3:
	        case 6:
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4015;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 4011;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 4012;
	            this.triggerfuncarg();
	            this.state = 4017;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerfuncarg() {
	    let localctx = new TriggerfuncargContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, PostgreSQLParser.RULE_triggerfuncarg);
	    try {
	        this.state = 4022;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 658:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4018;
	            this.iconst();
	            break;
	        case 660:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4019;
	            this.fconst();
	            break;
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4020;
	            this.sconst();
	            break;
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4021;
	            this.collabel();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optconstrfromtable() {
	    let localctx = new OptconstrfromtableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, PostgreSQLParser.RULE_optconstrfromtable);
	    try {
	        this.state = 4027;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4024;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 4025;
	            this.qualified_name();
	            break;
	        case 54:
	        case 62:
	        case 69:
	        case 77:
	        case 262:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintattributespec() {
	    let localctx = new ConstraintattributespecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, PostgreSQLParser.RULE_constraintattributespec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4032;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 8421377) !== 0) || _la===262) {
	            this.state = 4029;
	            this.constraintattributeElem();
	            this.state = 4034;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintattributeElem() {
	    let localctx = new ConstraintattributeElemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, PostgreSQLParser.RULE_constraintattributeElem);
	    try {
	        this.state = 4046;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4035;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 4036;
	            this.match(PostgreSQLParser.DEFERRABLE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4037;
	            this.match(PostgreSQLParser.DEFERRABLE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4038;
	            this.match(PostgreSQLParser.INITIALLY);
	            this.state = 4039;
	            this.match(PostgreSQLParser.IMMEDIATE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4040;
	            this.match(PostgreSQLParser.INITIALLY);
	            this.state = 4041;
	            this.match(PostgreSQLParser.DEFERRED);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4042;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 4043;
	            this.match(PostgreSQLParser.VALID);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4044;
	            this.match(PostgreSQLParser.NO);
	            this.state = 4045;
	            this.match(PostgreSQLParser.INHERIT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createeventtrigstmt() {
	    let localctx = new CreateeventtrigstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, PostgreSQLParser.RULE_createeventtrigstmt);
	    try {
	        this.state = 4074;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4048;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4049;
	            this.match(PostgreSQLParser.EVENT);
	            this.state = 4050;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 4051;
	            this.name();
	            this.state = 4052;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4053;
	            this.collabel();
	            this.state = 4054;
	            this.match(PostgreSQLParser.EXECUTE);
	            this.state = 4055;
	            this.function_or_procedure();
	            this.state = 4056;
	            this.func_name();
	            this.state = 4057;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 4058;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4060;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4061;
	            this.match(PostgreSQLParser.EVENT);
	            this.state = 4062;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 4063;
	            this.name();
	            this.state = 4064;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4065;
	            this.collabel();
	            this.state = 4066;
	            this.match(PostgreSQLParser.WHEN);
	            this.state = 4067;
	            this.event_trigger_when_list();
	            this.state = 4068;
	            this.match(PostgreSQLParser.EXECUTE);
	            this.state = 4069;
	            this.function_or_procedure();
	            this.state = 4070;
	            this.func_name();
	            this.state = 4071;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 4072;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_trigger_when_list() {
	    let localctx = new Event_trigger_when_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, PostgreSQLParser.RULE_event_trigger_when_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4076;
	        this.event_trigger_when_item();
	        this.state = 4081;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===33) {
	            this.state = 4077;
	            this.match(PostgreSQLParser.AND);
	            this.state = 4078;
	            this.event_trigger_when_item();
	            this.state = 4083;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_trigger_when_item() {
	    let localctx = new Event_trigger_when_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, PostgreSQLParser.RULE_event_trigger_when_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4084;
	        this.colid();
	        this.state = 4085;
	        this.match(PostgreSQLParser.IN_P);
	        this.state = 4086;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 4087;
	        this.event_trigger_value_list();
	        this.state = 4088;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_trigger_value_list() {
	    let localctx = new Event_trigger_value_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, PostgreSQLParser.RULE_event_trigger_value_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4090;
	        this.sconst();
	        this.state = 4095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 4091;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 4092;
	            this.sconst();
	            this.state = 4097;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altereventtrigstmt() {
	    let localctx = new AltereventtrigstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, PostgreSQLParser.RULE_altereventtrigstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4098;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 4099;
	        this.match(PostgreSQLParser.EVENT);
	        this.state = 4100;
	        this.match(PostgreSQLParser.TRIGGER);
	        this.state = 4101;
	        this.name();
	        this.state = 4102;
	        this.enable_trigger();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enable_trigger() {
	    let localctx = new Enable_triggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, PostgreSQLParser.RULE_enable_trigger);
	    try {
	        this.state = 4110;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4104;
	            this.match(PostgreSQLParser.ENABLE_P);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4105;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 4106;
	            this.match(PostgreSQLParser.REPLICA);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4107;
	            this.match(PostgreSQLParser.ENABLE_P);
	            this.state = 4108;
	            this.match(PostgreSQLParser.ALWAYS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4109;
	            this.match(PostgreSQLParser.DISABLE_P);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createassertionstmt() {
	    let localctx = new CreateassertionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, PostgreSQLParser.RULE_createassertionstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4112;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 4113;
	        this.match(PostgreSQLParser.ASSERTION);
	        this.state = 4114;
	        this.any_name();
	        this.state = 4115;
	        this.match(PostgreSQLParser.CHECK);
	        this.state = 4116;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 4117;
	        this.a_expr();
	        this.state = 4118;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	        this.state = 4119;
	        this.constraintattributespec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	definestmt() {
	    let localctx = new DefinestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, PostgreSQLParser.RULE_definestmt);
	    try {
	        this.state = 4227;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4121;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4122;
	            this.opt_or_replace();
	            this.state = 4123;
	            this.match(PostgreSQLParser.AGGREGATE);
	            this.state = 4124;
	            this.func_name();
	            this.state = 4125;
	            this.aggr_args();
	            this.state = 4126;
	            this.definition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4128;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4129;
	            this.opt_or_replace();
	            this.state = 4130;
	            this.match(PostgreSQLParser.AGGREGATE);
	            this.state = 4131;
	            this.func_name();
	            this.state = 4132;
	            this.old_aggr_definition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4134;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4135;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4136;
	            this.any_operator();
	            this.state = 4137;
	            this.definition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4139;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4140;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4141;
	            this.any_name();
	            this.state = 4142;
	            this.definition();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4144;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4145;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4146;
	            this.any_name();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4147;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4148;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4149;
	            this.any_name();
	            this.state = 4150;
	            this.match(PostgreSQLParser.AS);
	            this.state = 4151;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 4152;
	            this.opttablefuncelementlist();
	            this.state = 4153;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4155;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4156;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4157;
	            this.any_name();
	            this.state = 4158;
	            this.match(PostgreSQLParser.AS);
	            this.state = 4159;
	            this.match(PostgreSQLParser.ENUM_P);
	            this.state = 4160;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 4161;
	            this.opt_enum_val_list();
	            this.state = 4162;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4164;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4165;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4166;
	            this.any_name();
	            this.state = 4167;
	            this.match(PostgreSQLParser.AS);
	            this.state = 4168;
	            this.match(PostgreSQLParser.RANGE);
	            this.state = 4169;
	            this.definition();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4171;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4172;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 4173;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 4174;
	            this.match(PostgreSQLParser.PARSER);
	            this.state = 4175;
	            this.any_name();
	            this.state = 4176;
	            this.definition();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4178;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4179;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 4180;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 4181;
	            this.match(PostgreSQLParser.DICTIONARY);
	            this.state = 4182;
	            this.any_name();
	            this.state = 4183;
	            this.definition();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4185;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4186;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 4187;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 4188;
	            this.match(PostgreSQLParser.TEMPLATE);
	            this.state = 4189;
	            this.any_name();
	            this.state = 4190;
	            this.definition();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4192;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4193;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 4194;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 4195;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            this.state = 4196;
	            this.any_name();
	            this.state = 4197;
	            this.definition();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 4199;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4200;
	            this.match(PostgreSQLParser.COLLATION);
	            this.state = 4201;
	            this.any_name();
	            this.state = 4202;
	            this.definition();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 4204;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4205;
	            this.match(PostgreSQLParser.COLLATION);
	            this.state = 4206;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4207;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 4208;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 4209;
	            this.any_name();
	            this.state = 4210;
	            this.definition();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 4212;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4213;
	            this.match(PostgreSQLParser.COLLATION);
	            this.state = 4214;
	            this.any_name();
	            this.state = 4215;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 4216;
	            this.any_name();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 4218;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 4219;
	            this.match(PostgreSQLParser.COLLATION);
	            this.state = 4220;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4221;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 4222;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 4223;
	            this.any_name();
	            this.state = 4224;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 4225;
	            this.any_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	definition() {
	    let localctx = new DefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, PostgreSQLParser.RULE_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4229;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 4230;
	        this.def_list();
	        this.state = 4231;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	def_list() {
	    let localctx = new Def_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, PostgreSQLParser.RULE_def_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4233;
	        this.def_elem();
	        this.state = 4238;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 4234;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 4235;
	            this.def_elem();
	            this.state = 4240;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	def_elem() {
	    let localctx = new Def_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, PostgreSQLParser.RULE_def_elem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4241;
	        this.collabel();
	        this.state = 4244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10) {
	            this.state = 4242;
	            this.match(PostgreSQLParser.EQUAL);
	            this.state = 4243;
	            this.def_arg();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	def_arg() {
	    let localctx = new Def_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, PostgreSQLParser.RULE_def_arg);
	    try {
	        this.state = 4252;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4246;
	            this.func_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4247;
	            this.reserved_keyword();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4248;
	            this.qual_all_op();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4249;
	            this.numericonly();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4250;
	            this.sconst();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4251;
	            this.match(PostgreSQLParser.NONE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	old_aggr_definition() {
	    let localctx = new Old_aggr_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, PostgreSQLParser.RULE_old_aggr_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4254;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 4255;
	        this.old_aggr_list();
	        this.state = 4256;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	old_aggr_list() {
	    let localctx = new Old_aggr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, PostgreSQLParser.RULE_old_aggr_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4258;
	        this.old_aggr_elem();
	        this.state = 4263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 4259;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 4260;
	            this.old_aggr_elem();
	            this.state = 4265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	old_aggr_elem() {
	    let localctx = new Old_aggr_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, PostgreSQLParser.RULE_old_aggr_elem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4266;
	        this.identifier();
	        this.state = 4267;
	        this.match(PostgreSQLParser.EQUAL);
	        this.state = 4268;
	        this.def_arg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_enum_val_list() {
	    let localctx = new Opt_enum_val_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, PostgreSQLParser.RULE_opt_enum_val_list);
	    try {
	        this.state = 4272;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4270;
	            this.enum_val_list();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_val_list() {
	    let localctx = new Enum_val_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, PostgreSQLParser.RULE_enum_val_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4274;
	        this.sconst();
	        this.state = 4279;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 4275;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 4276;
	            this.sconst();
	            this.state = 4281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterenumstmt() {
	    let localctx = new AlterenumstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, PostgreSQLParser.RULE_alterenumstmt);
	    try {
	        this.state = 4319;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4282;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 4283;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4284;
	            this.any_name();
	            this.state = 4285;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 4286;
	            this.match(PostgreSQLParser.VALUE_P);
	            this.state = 4287;
	            this.opt_if_not_exists();
	            this.state = 4288;
	            this.sconst();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4290;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 4291;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4292;
	            this.any_name();
	            this.state = 4293;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 4294;
	            this.match(PostgreSQLParser.VALUE_P);
	            this.state = 4295;
	            this.opt_if_not_exists();
	            this.state = 4296;
	            this.sconst();
	            this.state = 4297;
	            this.match(PostgreSQLParser.BEFORE);
	            this.state = 4298;
	            this.sconst();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4300;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 4301;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4302;
	            this.any_name();
	            this.state = 4303;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 4304;
	            this.match(PostgreSQLParser.VALUE_P);
	            this.state = 4305;
	            this.opt_if_not_exists();
	            this.state = 4306;
	            this.sconst();
	            this.state = 4307;
	            this.match(PostgreSQLParser.AFTER);
	            this.state = 4308;
	            this.sconst();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4310;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 4311;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4312;
	            this.any_name();
	            this.state = 4313;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 4314;
	            this.match(PostgreSQLParser.VALUE_P);
	            this.state = 4315;
	            this.sconst();
	            this.state = 4316;
	            this.match(PostgreSQLParser.TO);
	            this.state = 4317;
	            this.sconst();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_if_not_exists() {
	    let localctx = new Opt_if_not_existsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, PostgreSQLParser.RULE_opt_if_not_exists);
	    try {
	        this.state = 4325;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 220:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4321;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4322;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 4323;
	            this.match(PostgreSQLParser.EXISTS);
	            break;
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createopclassstmt() {
	    let localctx = new CreateopclassstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, PostgreSQLParser.RULE_createopclassstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4327;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 4328;
	        this.match(PostgreSQLParser.OPERATOR);
	        this.state = 4329;
	        this.match(PostgreSQLParser.CLASS);
	        this.state = 4330;
	        this.any_name();
	        this.state = 4331;
	        this.opt_default();
	        this.state = 4332;
	        this.match(PostgreSQLParser.FOR);
	        this.state = 4333;
	        this.match(PostgreSQLParser.TYPE_P);
	        this.state = 4334;
	        this.typename();
	        this.state = 4335;
	        this.match(PostgreSQLParser.USING);
	        this.state = 4336;
	        this.name();
	        this.state = 4337;
	        this.opt_opfamily();
	        this.state = 4338;
	        this.match(PostgreSQLParser.AS);
	        this.state = 4339;
	        this.opclass_item_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opclass_item_list() {
	    let localctx = new Opclass_item_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, PostgreSQLParser.RULE_opclass_item_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4341;
	        this.opclass_item();
	        this.state = 4346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 4342;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 4343;
	            this.opclass_item();
	            this.state = 4348;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opclass_item() {
	    let localctx = new Opclass_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, PostgreSQLParser.RULE_opclass_item);
	    try {
	        this.state = 4374;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4349;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4350;
	            this.iconst();
	            this.state = 4351;
	            this.any_operator();
	            this.state = 4352;
	            this.opclass_purpose();
	            this.state = 4353;
	            this.opt_recheck();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4355;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4356;
	            this.iconst();
	            this.state = 4357;
	            this.operator_with_argtypes();
	            this.state = 4358;
	            this.opclass_purpose();
	            this.state = 4359;
	            this.opt_recheck();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4361;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 4362;
	            this.iconst();
	            this.state = 4363;
	            this.function_with_argtypes();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4365;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 4366;
	            this.iconst();
	            this.state = 4367;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 4368;
	            this.type_list();
	            this.state = 4369;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 4370;
	            this.function_with_argtypes();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4372;
	            this.match(PostgreSQLParser.STORAGE);
	            this.state = 4373;
	            this.typename();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_default() {
	    let localctx = new Opt_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, PostgreSQLParser.RULE_opt_default);
	    try {
	        this.state = 4378;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4376;
	            this.match(PostgreSQLParser.DEFAULT);
	            break;
	        case 62:
	        case 168:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_opfamily() {
	    let localctx = new Opt_opfamilyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, PostgreSQLParser.RULE_opt_opfamily);
	    try {
	        this.state = 4383;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 206:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4380;
	            this.match(PostgreSQLParser.FAMILY);
	            this.state = 4381;
	            this.any_name();
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opclass_purpose() {
	    let localctx = new Opclass_purposeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, PostgreSQLParser.RULE_opclass_purpose);
	    try {
	        this.state = 4392;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4385;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 4386;
	            this.match(PostgreSQLParser.SEARCH);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4387;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 4388;
	            this.match(PostgreSQLParser.ORDER);
	            this.state = 4389;
	            this.match(PostgreSQLParser.BY);
	            this.state = 4390;
	            this.any_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_recheck() {
	    let localctx = new Opt_recheckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, PostgreSQLParser.RULE_opt_recheck);
	    try {
	        this.state = 4396;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 295:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4394;
	            this.match(PostgreSQLParser.RECHECK);
	            break;
	        case -1:
	        case 2:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createopfamilystmt() {
	    let localctx = new CreateopfamilystmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, PostgreSQLParser.RULE_createopfamilystmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4398;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 4399;
	        this.match(PostgreSQLParser.OPERATOR);
	        this.state = 4400;
	        this.match(PostgreSQLParser.FAMILY);
	        this.state = 4401;
	        this.any_name();
	        this.state = 4402;
	        this.match(PostgreSQLParser.USING);
	        this.state = 4403;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alteropfamilystmt() {
	    let localctx = new AlteropfamilystmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, PostgreSQLParser.RULE_alteropfamilystmt);
	    try {
	        this.state = 4423;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4405;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 4406;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4407;
	            this.match(PostgreSQLParser.FAMILY);
	            this.state = 4408;
	            this.any_name();
	            this.state = 4409;
	            this.match(PostgreSQLParser.USING);
	            this.state = 4410;
	            this.name();
	            this.state = 4411;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 4412;
	            this.opclass_item_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4414;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 4415;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4416;
	            this.match(PostgreSQLParser.FAMILY);
	            this.state = 4417;
	            this.any_name();
	            this.state = 4418;
	            this.match(PostgreSQLParser.USING);
	            this.state = 4419;
	            this.name();
	            this.state = 4420;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4421;
	            this.opclass_drop_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opclass_drop_list() {
	    let localctx = new Opclass_drop_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, PostgreSQLParser.RULE_opclass_drop_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4425;
	        this.opclass_drop();
	        this.state = 4430;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 4426;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 4427;
	            this.opclass_drop();
	            this.state = 4432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opclass_drop() {
	    let localctx = new Opclass_dropContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, PostgreSQLParser.RULE_opclass_drop);
	    try {
	        this.state = 4445;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 271:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4433;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4434;
	            this.iconst();
	            this.state = 4435;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 4436;
	            this.type_list();
	            this.state = 4437;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 211:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4439;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 4440;
	            this.iconst();
	            this.state = 4441;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 4442;
	            this.type_list();
	            this.state = 4443;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropopclassstmt() {
	    let localctx = new DropopclassstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, PostgreSQLParser.RULE_dropopclassstmt);
	    try {
	        this.state = 4465;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4447;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4448;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4449;
	            this.match(PostgreSQLParser.CLASS);
	            this.state = 4450;
	            this.any_name();
	            this.state = 4451;
	            this.match(PostgreSQLParser.USING);
	            this.state = 4452;
	            this.name();
	            this.state = 4453;
	            this.opt_drop_behavior();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4455;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4456;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4457;
	            this.match(PostgreSQLParser.CLASS);
	            this.state = 4458;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4459;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 4460;
	            this.any_name();
	            this.state = 4461;
	            this.match(PostgreSQLParser.USING);
	            this.state = 4462;
	            this.name();
	            this.state = 4463;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropopfamilystmt() {
	    let localctx = new DropopfamilystmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, PostgreSQLParser.RULE_dropopfamilystmt);
	    try {
	        this.state = 4485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4467;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4468;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4469;
	            this.match(PostgreSQLParser.FAMILY);
	            this.state = 4470;
	            this.any_name();
	            this.state = 4471;
	            this.match(PostgreSQLParser.USING);
	            this.state = 4472;
	            this.name();
	            this.state = 4473;
	            this.opt_drop_behavior();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4475;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4476;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4477;
	            this.match(PostgreSQLParser.FAMILY);
	            this.state = 4478;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4479;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 4480;
	            this.any_name();
	            this.state = 4481;
	            this.match(PostgreSQLParser.USING);
	            this.state = 4482;
	            this.name();
	            this.state = 4483;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropownedstmt() {
	    let localctx = new DropownedstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, PostgreSQLParser.RULE_dropownedstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4487;
	        this.match(PostgreSQLParser.DROP);
	        this.state = 4488;
	        this.match(PostgreSQLParser.OWNED);
	        this.state = 4489;
	        this.match(PostgreSQLParser.BY);
	        this.state = 4490;
	        this.role_list();
	        this.state = 4491;
	        this.opt_drop_behavior();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reassignownedstmt() {
	    let localctx = new ReassignownedstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, PostgreSQLParser.RULE_reassignownedstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4493;
	        this.match(PostgreSQLParser.REASSIGN);
	        this.state = 4494;
	        this.match(PostgreSQLParser.OWNED);
	        this.state = 4495;
	        this.match(PostgreSQLParser.BY);
	        this.state = 4496;
	        this.role_list();
	        this.state = 4497;
	        this.match(PostgreSQLParser.TO);
	        this.state = 4498;
	        this.rolespec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropstmt() {
	    let localctx = new DropstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, PostgreSQLParser.RULE_dropstmt);
	    try {
	        this.state = 4578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4500;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4501;
	            this.object_type_any_name();
	            this.state = 4502;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4503;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 4504;
	            this.any_name_list();
	            this.state = 4505;
	            this.opt_drop_behavior();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4507;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4508;
	            this.object_type_any_name();
	            this.state = 4509;
	            this.any_name_list();
	            this.state = 4510;
	            this.opt_drop_behavior();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4512;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4513;
	            this.drop_type_name();
	            this.state = 4514;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4515;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 4516;
	            this.name_list();
	            this.state = 4517;
	            this.opt_drop_behavior();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4519;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4520;
	            this.drop_type_name();
	            this.state = 4521;
	            this.name_list();
	            this.state = 4522;
	            this.opt_drop_behavior();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4524;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4525;
	            this.object_type_name_on_any_name();
	            this.state = 4526;
	            this.name();
	            this.state = 4527;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4528;
	            this.any_name();
	            this.state = 4529;
	            this.opt_drop_behavior();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4531;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4532;
	            this.object_type_name_on_any_name();
	            this.state = 4533;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4534;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 4535;
	            this.name();
	            this.state = 4536;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4537;
	            this.any_name();
	            this.state = 4538;
	            this.opt_drop_behavior();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4540;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4541;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4542;
	            this.type_name_list();
	            this.state = 4543;
	            this.opt_drop_behavior();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4545;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4546;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4547;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4548;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 4549;
	            this.type_name_list();
	            this.state = 4550;
	            this.opt_drop_behavior();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4552;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4553;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 4554;
	            this.type_name_list();
	            this.state = 4555;
	            this.opt_drop_behavior();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4557;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4558;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 4559;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4560;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 4561;
	            this.type_name_list();
	            this.state = 4562;
	            this.opt_drop_behavior();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4564;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4565;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 4566;
	            this.match(PostgreSQLParser.CONCURRENTLY);
	            this.state = 4567;
	            this.any_name_list();
	            this.state = 4568;
	            this.opt_drop_behavior();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4570;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 4571;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 4572;
	            this.match(PostgreSQLParser.CONCURRENTLY);
	            this.state = 4573;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 4574;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 4575;
	            this.any_name_list();
	            this.state = 4576;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_type_any_name() {
	    let localctx = new Object_type_any_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, PostgreSQLParser.RULE_object_type_any_name);
	    try {
	        this.state = 4603;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4580;
	            this.match(PostgreSQLParser.TABLE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4581;
	            this.match(PostgreSQLParser.SEQUENCE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4582;
	            this.match(PostgreSQLParser.VIEW);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4583;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            this.state = 4584;
	            this.match(PostgreSQLParser.VIEW);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4585;
	            this.match(PostgreSQLParser.INDEX);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4586;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 4587;
	            this.match(PostgreSQLParser.TABLE);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4588;
	            this.match(PostgreSQLParser.COLLATION);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4589;
	            this.match(PostgreSQLParser.CONVERSION_P);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4590;
	            this.match(PostgreSQLParser.STATISTICS);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4591;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 4592;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 4593;
	            this.match(PostgreSQLParser.PARSER);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4594;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 4595;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 4596;
	            this.match(PostgreSQLParser.DICTIONARY);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4597;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 4598;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 4599;
	            this.match(PostgreSQLParser.TEMPLATE);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 4600;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 4601;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 4602;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_type_name() {
	    let localctx = new Object_type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, PostgreSQLParser.RULE_object_type_name);
	    try {
	        this.state = 4610;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 63:
	        case 131:
	        case 198:
	        case 204:
	        case 238:
	        case 288:
	        case 316:
	        case 324:
	        case 452:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4605;
	            this.drop_type_name();
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4606;
	            this.match(PostgreSQLParser.DATABASE);
	            break;
	        case 311:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4607;
	            this.match(PostgreSQLParser.ROLE);
	            break;
	        case 451:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4608;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            break;
	        case 344:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4609;
	            this.match(PostgreSQLParser.TABLESPACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_type_name() {
	    let localctx = new Drop_type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, PostgreSQLParser.RULE_drop_type_name);
	    try {
	        this.state = 4626;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 131:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4612;
	            this.match(PostgreSQLParser.ACCESS);
	            this.state = 4613;
	            this.match(PostgreSQLParser.METHOD);
	            break;
	        case 198:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4614;
	            this.match(PostgreSQLParser.EVENT);
	            this.state = 4615;
	            this.match(PostgreSQLParser.TRIGGER);
	            break;
	        case 204:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4616;
	            this.match(PostgreSQLParser.EXTENSION);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4617;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 4618;
	            this.match(PostgreSQLParser.DATA_P);
	            this.state = 4619;
	            this.match(PostgreSQLParser.WRAPPER);
	            break;
	        case 238:
	        case 288:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4620;
	            this.opt_procedural();
	            this.state = 4621;
	            this.match(PostgreSQLParser.LANGUAGE);
	            break;
	        case 452:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4623;
	            this.match(PostgreSQLParser.PUBLICATION);
	            break;
	        case 316:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4624;
	            this.match(PostgreSQLParser.SCHEMA);
	            break;
	        case 324:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4625;
	            this.match(PostgreSQLParser.SERVER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_type_name_on_any_name() {
	    let localctx = new Object_type_name_on_any_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, PostgreSQLParser.RULE_object_type_name_on_any_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4628;
	        _la = this._input.LA(1);
	        if(!(_la===314 || _la===350 || _la===445)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_name_list() {
	    let localctx = new Any_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, PostgreSQLParser.RULE_any_name_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4630;
	        this.any_name();
	        this.state = 4635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 4631;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 4632;
	            this.any_name();
	            this.state = 4637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_name() {
	    let localctx = new Any_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, PostgreSQLParser.RULE_any_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4638;
	        this.colid();
	        this.state = 4640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 4639;
	            this.attrs();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attrs() {
	    let localctx = new AttrsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, PostgreSQLParser.RULE_attrs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4644; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4642;
	        		this.match(PostgreSQLParser.DOT);
	        		this.state = 4643;
	        		this.attr_name();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4646; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,224, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_list() {
	    let localctx = new Type_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, PostgreSQLParser.RULE_type_name_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4648;
	        this.typename();
	        this.state = 4653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 4649;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 4650;
	            this.typename();
	            this.state = 4655;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncatestmt() {
	    let localctx = new TruncatestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, PostgreSQLParser.RULE_truncatestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4656;
	        this.match(PostgreSQLParser.TRUNCATE);
	        this.state = 4657;
	        this.opt_table();
	        this.state = 4658;
	        this.relation_expr_list();
	        this.state = 4659;
	        this.opt_restart_seqs();
	        this.state = 4660;
	        this.opt_drop_behavior();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_restart_seqs() {
	    let localctx = new Opt_restart_seqsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, PostgreSQLParser.RULE_opt_restart_seqs);
	    try {
	        this.state = 4667;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 167:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4662;
	            this.match(PostgreSQLParser.CONTINUE_P);
	            this.state = 4663;
	            this.match(PostgreSQLParser.IDENTITY_P);
	            break;
	        case 307:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4664;
	            this.match(PostgreSQLParser.RESTART);
	            this.state = 4665;
	            this.match(PostgreSQLParser.IDENTITY_P);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 150:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 308:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentstmt() {
	    let localctx = new CommentstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, PostgreSQLParser.RULE_commentstmt);
	    try {
	        this.state = 4816;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4669;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4670;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4671;
	            this.object_type_any_name();
	            this.state = 4672;
	            this.any_name();
	            this.state = 4673;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4674;
	            this.comment_text();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4676;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4677;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4678;
	            this.match(PostgreSQLParser.COLUMN);
	            this.state = 4679;
	            this.any_name();
	            this.state = 4680;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4681;
	            this.comment_text();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4683;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4684;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4685;
	            this.object_type_name();
	            this.state = 4686;
	            this.name();
	            this.state = 4687;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4688;
	            this.comment_text();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4690;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4691;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4692;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4693;
	            this.typename();
	            this.state = 4694;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4695;
	            this.comment_text();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4697;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4698;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4699;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 4700;
	            this.typename();
	            this.state = 4701;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4702;
	            this.comment_text();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4704;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4705;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4706;
	            this.match(PostgreSQLParser.AGGREGATE);
	            this.state = 4707;
	            this.aggregate_with_argtypes();
	            this.state = 4708;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4709;
	            this.comment_text();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4711;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4712;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4713;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 4714;
	            this.function_with_argtypes();
	            this.state = 4715;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4716;
	            this.comment_text();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4718;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4719;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4720;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4721;
	            this.operator_with_argtypes();
	            this.state = 4722;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4723;
	            this.comment_text();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4725;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4726;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4727;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 4728;
	            this.name();
	            this.state = 4729;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4730;
	            this.any_name();
	            this.state = 4731;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4732;
	            this.comment_text();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4734;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4735;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4736;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 4737;
	            this.name();
	            this.state = 4738;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4739;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 4740;
	            this.any_name();
	            this.state = 4741;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4742;
	            this.comment_text();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4744;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4745;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4746;
	            this.object_type_name_on_any_name();
	            this.state = 4747;
	            this.name();
	            this.state = 4748;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4749;
	            this.any_name();
	            this.state = 4750;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4751;
	            this.comment_text();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4753;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4754;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4755;
	            this.match(PostgreSQLParser.PROCEDURE);
	            this.state = 4756;
	            this.function_with_argtypes();
	            this.state = 4757;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4758;
	            this.comment_text();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 4760;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4761;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4762;
	            this.match(PostgreSQLParser.ROUTINE);
	            this.state = 4763;
	            this.function_with_argtypes();
	            this.state = 4764;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4765;
	            this.comment_text();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 4767;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4768;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4769;
	            this.match(PostgreSQLParser.TRANSFORM);
	            this.state = 4770;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 4771;
	            this.typename();
	            this.state = 4772;
	            this.match(PostgreSQLParser.LANGUAGE);
	            this.state = 4773;
	            this.name();
	            this.state = 4774;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4775;
	            this.comment_text();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 4777;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4778;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4779;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4780;
	            this.match(PostgreSQLParser.CLASS);
	            this.state = 4781;
	            this.any_name();
	            this.state = 4782;
	            this.match(PostgreSQLParser.USING);
	            this.state = 4783;
	            this.name();
	            this.state = 4784;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4785;
	            this.comment_text();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 4787;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4788;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4789;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 4790;
	            this.match(PostgreSQLParser.FAMILY);
	            this.state = 4791;
	            this.any_name();
	            this.state = 4792;
	            this.match(PostgreSQLParser.USING);
	            this.state = 4793;
	            this.name();
	            this.state = 4794;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4795;
	            this.comment_text();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 4797;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4798;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4799;
	            this.match(PostgreSQLParser.LARGE_P);
	            this.state = 4800;
	            this.match(PostgreSQLParser.OBJECT_P);
	            this.state = 4801;
	            this.numericonly();
	            this.state = 4802;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4803;
	            this.comment_text();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 4805;
	            this.match(PostgreSQLParser.COMMENT);
	            this.state = 4806;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4807;
	            this.match(PostgreSQLParser.CAST);
	            this.state = 4808;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 4809;
	            this.typename();
	            this.state = 4810;
	            this.match(PostgreSQLParser.AS);
	            this.state = 4811;
	            this.typename();
	            this.state = 4812;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 4813;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4814;
	            this.comment_text();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment_text() {
	    let localctx = new Comment_textContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, PostgreSQLParser.RULE_comment_text);
	    try {
	        this.state = 4820;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4818;
	            this.sconst();
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4819;
	            this.match(PostgreSQLParser.NULL_P);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seclabelstmt() {
	    let localctx = new SeclabelstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, PostgreSQLParser.RULE_seclabelstmt);
	    try {
	        this.state = 4913;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4822;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 4823;
	            this.match(PostgreSQLParser.LABEL);
	            this.state = 4824;
	            this.opt_provider();
	            this.state = 4825;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4826;
	            this.object_type_any_name();
	            this.state = 4827;
	            this.any_name();
	            this.state = 4828;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4829;
	            this.security_label();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4831;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 4832;
	            this.match(PostgreSQLParser.LABEL);
	            this.state = 4833;
	            this.opt_provider();
	            this.state = 4834;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4835;
	            this.match(PostgreSQLParser.COLUMN);
	            this.state = 4836;
	            this.any_name();
	            this.state = 4837;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4838;
	            this.security_label();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4840;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 4841;
	            this.match(PostgreSQLParser.LABEL);
	            this.state = 4842;
	            this.opt_provider();
	            this.state = 4843;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4844;
	            this.object_type_name();
	            this.state = 4845;
	            this.name();
	            this.state = 4846;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4847;
	            this.security_label();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4849;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 4850;
	            this.match(PostgreSQLParser.LABEL);
	            this.state = 4851;
	            this.opt_provider();
	            this.state = 4852;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4853;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 4854;
	            this.typename();
	            this.state = 4855;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4856;
	            this.security_label();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4858;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 4859;
	            this.match(PostgreSQLParser.LABEL);
	            this.state = 4860;
	            this.opt_provider();
	            this.state = 4861;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4862;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 4863;
	            this.typename();
	            this.state = 4864;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4865;
	            this.security_label();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4867;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 4868;
	            this.match(PostgreSQLParser.LABEL);
	            this.state = 4869;
	            this.opt_provider();
	            this.state = 4870;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4871;
	            this.match(PostgreSQLParser.AGGREGATE);
	            this.state = 4872;
	            this.aggregate_with_argtypes();
	            this.state = 4873;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4874;
	            this.security_label();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4876;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 4877;
	            this.match(PostgreSQLParser.LABEL);
	            this.state = 4878;
	            this.opt_provider();
	            this.state = 4879;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4880;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 4881;
	            this.function_with_argtypes();
	            this.state = 4882;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4883;
	            this.security_label();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4885;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 4886;
	            this.match(PostgreSQLParser.LABEL);
	            this.state = 4887;
	            this.opt_provider();
	            this.state = 4888;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4889;
	            this.match(PostgreSQLParser.LARGE_P);
	            this.state = 4890;
	            this.match(PostgreSQLParser.OBJECT_P);
	            this.state = 4891;
	            this.numericonly();
	            this.state = 4892;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4893;
	            this.security_label();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4895;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 4896;
	            this.match(PostgreSQLParser.LABEL);
	            this.state = 4897;
	            this.opt_provider();
	            this.state = 4898;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4899;
	            this.match(PostgreSQLParser.PROCEDURE);
	            this.state = 4900;
	            this.function_with_argtypes();
	            this.state = 4901;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4902;
	            this.security_label();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4904;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 4905;
	            this.match(PostgreSQLParser.LABEL);
	            this.state = 4906;
	            this.opt_provider();
	            this.state = 4907;
	            this.match(PostgreSQLParser.ON);
	            this.state = 4908;
	            this.match(PostgreSQLParser.ROUTINE);
	            this.state = 4909;
	            this.function_with_argtypes();
	            this.state = 4910;
	            this.match(PostgreSQLParser.IS);
	            this.state = 4911;
	            this.security_label();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_provider() {
	    let localctx = new Opt_providerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, PostgreSQLParser.RULE_opt_provider);
	    try {
	        this.state = 4918;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4915;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 4916;
	            this.nonreservedword_or_sconst();
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	security_label() {
	    let localctx = new Security_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, PostgreSQLParser.RULE_security_label);
	    try {
	        this.state = 4922;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4920;
	            this.sconst();
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4921;
	            this.match(PostgreSQLParser.NULL_P);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fetchstmt() {
	    let localctx = new FetchstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, PostgreSQLParser.RULE_fetchstmt);
	    try {
	        this.state = 4928;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4924;
	            this.match(PostgreSQLParser.FETCH);
	            this.state = 4925;
	            this.fetch_args();
	            break;
	        case 258:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4926;
	            this.match(PostgreSQLParser.MOVE);
	            this.state = 4927;
	            this.fetch_args();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fetch_args() {
	    let localctx = new Fetch_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, PostgreSQLParser.RULE_fetch_args);
	    try {
	        this.state = 4996;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4930;
	            this.cursor_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4931;
	            this.from_in();
	            this.state = 4932;
	            this.cursor_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4934;
	            this.match(PostgreSQLParser.NEXT);
	            this.state = 4935;
	            this.opt_from_in();
	            this.state = 4936;
	            this.cursor_name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4938;
	            this.match(PostgreSQLParser.PRIOR);
	            this.state = 4939;
	            this.opt_from_in();
	            this.state = 4940;
	            this.cursor_name();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4942;
	            this.match(PostgreSQLParser.FIRST_P);
	            this.state = 4943;
	            this.opt_from_in();
	            this.state = 4944;
	            this.cursor_name();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4946;
	            this.match(PostgreSQLParser.LAST_P);
	            this.state = 4947;
	            this.opt_from_in();
	            this.state = 4948;
	            this.cursor_name();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4950;
	            this.match(PostgreSQLParser.ABSOLUTE_P);
	            this.state = 4951;
	            this.signediconst();
	            this.state = 4952;
	            this.opt_from_in();
	            this.state = 4953;
	            this.cursor_name();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4955;
	            this.match(PostgreSQLParser.RELATIVE_P);
	            this.state = 4956;
	            this.signediconst();
	            this.state = 4957;
	            this.opt_from_in();
	            this.state = 4958;
	            this.cursor_name();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4960;
	            this.signediconst();
	            this.state = 4961;
	            this.opt_from_in();
	            this.state = 4962;
	            this.cursor_name();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4964;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 4965;
	            this.opt_from_in();
	            this.state = 4966;
	            this.cursor_name();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4968;
	            this.match(PostgreSQLParser.FORWARD);
	            this.state = 4969;
	            this.opt_from_in();
	            this.state = 4970;
	            this.cursor_name();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4972;
	            this.match(PostgreSQLParser.FORWARD);
	            this.state = 4973;
	            this.signediconst();
	            this.state = 4974;
	            this.opt_from_in();
	            this.state = 4975;
	            this.cursor_name();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 4977;
	            this.match(PostgreSQLParser.FORWARD);
	            this.state = 4978;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 4979;
	            this.opt_from_in();
	            this.state = 4980;
	            this.cursor_name();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 4982;
	            this.match(PostgreSQLParser.BACKWARD);
	            this.state = 4983;
	            this.opt_from_in();
	            this.state = 4984;
	            this.cursor_name();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 4986;
	            this.match(PostgreSQLParser.BACKWARD);
	            this.state = 4987;
	            this.signediconst();
	            this.state = 4988;
	            this.opt_from_in();
	            this.state = 4989;
	            this.cursor_name();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 4991;
	            this.match(PostgreSQLParser.BACKWARD);
	            this.state = 4992;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 4993;
	            this.opt_from_in();
	            this.state = 4994;
	            this.cursor_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	from_in() {
	    let localctx = new From_inContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, PostgreSQLParser.RULE_from_in);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4998;
	        _la = this._input.LA(1);
	        if(!(_la===64 || _la===68)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_from_in() {
	    let localctx = new Opt_from_inContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, PostgreSQLParser.RULE_opt_from_in);
	    try {
	        this.state = 5002;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	        case 68:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5000;
	            this.from_in();
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantstmt() {
	    let localctx = new GrantstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, PostgreSQLParser.RULE_grantstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5004;
	        this.match(PostgreSQLParser.GRANT);
	        this.state = 5005;
	        this.privileges();
	        this.state = 5006;
	        this.match(PostgreSQLParser.ON);
	        this.state = 5007;
	        this.privilege_target();
	        this.state = 5008;
	        this.match(PostgreSQLParser.TO);
	        this.state = 5009;
	        this.grantee_list();
	        this.state = 5010;
	        this.opt_grant_grant_option();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokestmt() {
	    let localctx = new RevokestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, PostgreSQLParser.RULE_revokestmt);
	    try {
	        this.state = 5031;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5012;
	            this.match(PostgreSQLParser.REVOKE);
	            this.state = 5013;
	            this.privileges();
	            this.state = 5014;
	            this.match(PostgreSQLParser.ON);
	            this.state = 5015;
	            this.privilege_target();
	            this.state = 5016;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 5017;
	            this.grantee_list();
	            this.state = 5018;
	            this.opt_drop_behavior();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5020;
	            this.match(PostgreSQLParser.REVOKE);
	            this.state = 5021;
	            this.match(PostgreSQLParser.GRANT);
	            this.state = 5022;
	            this.match(PostgreSQLParser.OPTION);
	            this.state = 5023;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 5024;
	            this.privileges();
	            this.state = 5025;
	            this.match(PostgreSQLParser.ON);
	            this.state = 5026;
	            this.privilege_target();
	            this.state = 5027;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 5028;
	            this.grantee_list();
	            this.state = 5029;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privileges() {
	    let localctx = new PrivilegesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, PostgreSQLParser.RULE_privileges);
	    try {
	        this.state = 5048;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5033;
	            this.privilege_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5034;
	            this.match(PostgreSQLParser.ALL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5035;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 5036;
	            this.match(PostgreSQLParser.PRIVILEGES);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5037;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 5038;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5039;
	            this.columnlist();
	            this.state = 5040;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5042;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 5043;
	            this.match(PostgreSQLParser.PRIVILEGES);
	            this.state = 5044;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5045;
	            this.columnlist();
	            this.state = 5046;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilege_list() {
	    let localctx = new Privilege_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, PostgreSQLParser.RULE_privilege_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5050;
	        this.privilege();
	        this.state = 5055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5051;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5052;
	            this.privilege();
	            this.state = 5057;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilege() {
	    let localctx = new PrivilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, PostgreSQLParser.RULE_privilege);
	    try {
	        this.state = 5067;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 88:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5058;
	            this.match(PostgreSQLParser.SELECT);
	            this.state = 5059;
	            this.opt_column_list();
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5060;
	            this.match(PostgreSQLParser.REFERENCES);
	            this.state = 5061;
	            this.opt_column_list();
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5062;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 5063;
	            this.opt_column_list();
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5064;
	            this.colid();
	            this.state = 5065;
	            this.opt_column_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilege_target() {
	    let localctx = new Privilege_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, PostgreSQLParser.RULE_privilege_target);
	    try {
	        this.state = 5127;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5069;
	            this.qualified_name_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5070;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 5071;
	            this.qualified_name_list();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5072;
	            this.match(PostgreSQLParser.SEQUENCE);
	            this.state = 5073;
	            this.qualified_name_list();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5074;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 5075;
	            this.match(PostgreSQLParser.DATA_P);
	            this.state = 5076;
	            this.match(PostgreSQLParser.WRAPPER);
	            this.state = 5077;
	            this.name_list();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5078;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 5079;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 5080;
	            this.name_list();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5081;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5082;
	            this.function_with_argtypes_list();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5083;
	            this.match(PostgreSQLParser.PROCEDURE);
	            this.state = 5084;
	            this.function_with_argtypes_list();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5085;
	            this.match(PostgreSQLParser.ROUTINE);
	            this.state = 5086;
	            this.function_with_argtypes_list();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5087;
	            this.match(PostgreSQLParser.DATABASE);
	            this.state = 5088;
	            this.name_list();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5089;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 5090;
	            this.any_name_list();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5091;
	            this.match(PostgreSQLParser.LANGUAGE);
	            this.state = 5092;
	            this.name_list();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5093;
	            this.match(PostgreSQLParser.LARGE_P);
	            this.state = 5094;
	            this.match(PostgreSQLParser.OBJECT_P);
	            this.state = 5095;
	            this.numericonly_list();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5096;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 5097;
	            this.name_list();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 5098;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 5099;
	            this.name_list();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 5100;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 5101;
	            this.any_name_list();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 5102;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 5103;
	            this.match(PostgreSQLParser.TABLES);
	            this.state = 5104;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 5105;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 5106;
	            this.name_list();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 5107;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 5108;
	            this.match(PostgreSQLParser.SEQUENCES);
	            this.state = 5109;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 5110;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 5111;
	            this.name_list();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 5112;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 5113;
	            this.match(PostgreSQLParser.FUNCTIONS);
	            this.state = 5114;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 5115;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 5116;
	            this.name_list();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 5117;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 5118;
	            this.match(PostgreSQLParser.PROCEDURES);
	            this.state = 5119;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 5120;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 5121;
	            this.name_list();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 5122;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 5123;
	            this.match(PostgreSQLParser.ROUTINES);
	            this.state = 5124;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 5125;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 5126;
	            this.name_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantee_list() {
	    let localctx = new Grantee_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, PostgreSQLParser.RULE_grantee_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5129;
	        this.grantee();
	        this.state = 5134;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5130;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5131;
	            this.grantee();
	            this.state = 5136;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantee() {
	    let localctx = new GranteeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, PostgreSQLParser.RULE_grantee);
	    try {
	        this.state = 5140;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 52:
	        case 53:
	        case 57:
	        case 61:
	        case 89:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5137;
	            this.rolespec();
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5138;
	            this.match(PostgreSQLParser.GROUP_P);
	            this.state = 5139;
	            this.rolespec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_grant_grant_option() {
	    let localctx = new Opt_grant_grant_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, PostgreSQLParser.RULE_opt_grant_grant_option);
	    try {
	        this.state = 5146;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5142;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5143;
	            this.match(PostgreSQLParser.GRANT);
	            this.state = 5144;
	            this.match(PostgreSQLParser.OPTION);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantrolestmt() {
	    let localctx = new GrantrolestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, PostgreSQLParser.RULE_grantrolestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5148;
	        this.match(PostgreSQLParser.GRANT);
	        this.state = 5149;
	        this.privilege_list();
	        this.state = 5150;
	        this.match(PostgreSQLParser.TO);
	        this.state = 5151;
	        this.role_list();
	        this.state = 5152;
	        this.opt_grant_admin_option();
	        this.state = 5153;
	        this.opt_granted_by();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokerolestmt() {
	    let localctx = new RevokerolestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, PostgreSQLParser.RULE_revokerolestmt);
	    try {
	        this.state = 5172;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5155;
	            this.match(PostgreSQLParser.REVOKE);
	            this.state = 5156;
	            this.privilege_list();
	            this.state = 5157;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 5158;
	            this.role_list();
	            this.state = 5159;
	            this.opt_granted_by();
	            this.state = 5160;
	            this.opt_drop_behavior();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5162;
	            this.match(PostgreSQLParser.REVOKE);
	            this.state = 5163;
	            this.match(PostgreSQLParser.ADMIN);
	            this.state = 5164;
	            this.match(PostgreSQLParser.OPTION);
	            this.state = 5165;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 5166;
	            this.privilege_list();
	            this.state = 5167;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 5168;
	            this.role_list();
	            this.state = 5169;
	            this.opt_granted_by();
	            this.state = 5170;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_grant_admin_option() {
	    let localctx = new Opt_grant_admin_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, PostgreSQLParser.RULE_opt_grant_admin_option);
	    try {
	        this.state = 5178;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5174;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5175;
	            this.match(PostgreSQLParser.ADMIN);
	            this.state = 5176;
	            this.match(PostgreSQLParser.OPTION);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_granted_by() {
	    let localctx = new Opt_granted_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, PostgreSQLParser.RULE_opt_granted_by);
	    try {
	        this.state = 5184;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 214:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5180;
	            this.match(PostgreSQLParser.GRANTED);
	            this.state = 5181;
	            this.match(PostgreSQLParser.BY);
	            this.state = 5182;
	            this.rolespec();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 150:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 308:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterdefaultprivilegesstmt() {
	    let localctx = new AlterdefaultprivilegesstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, PostgreSQLParser.RULE_alterdefaultprivilegesstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5186;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 5187;
	        this.match(PostgreSQLParser.DEFAULT);
	        this.state = 5188;
	        this.match(PostgreSQLParser.PRIVILEGES);
	        this.state = 5189;
	        this.defacloptionlist();
	        this.state = 5190;
	        this.defaclaction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defacloptionlist() {
	    let localctx = new DefacloptionlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, PostgreSQLParser.RULE_defacloptionlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===62 || _la===68) {
	            this.state = 5192;
	            this.defacloption();
	            this.state = 5197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defacloption() {
	    let localctx = new DefacloptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, PostgreSQLParser.RULE_defacloption);
	    try {
	        this.state = 5207;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5198;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 5199;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 5200;
	            this.name_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5201;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 5202;
	            this.match(PostgreSQLParser.ROLE);
	            this.state = 5203;
	            this.role_list();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5204;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 5205;
	            this.match(PostgreSQLParser.USER);
	            this.state = 5206;
	            this.role_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaclaction() {
	    let localctx = new DefaclactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, PostgreSQLParser.RULE_defaclaction);
	    try {
	        this.state = 5236;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5209;
	            this.match(PostgreSQLParser.GRANT);
	            this.state = 5210;
	            this.privileges();
	            this.state = 5211;
	            this.match(PostgreSQLParser.ON);
	            this.state = 5212;
	            this.defacl_privilege_target();
	            this.state = 5213;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5214;
	            this.grantee_list();
	            this.state = 5215;
	            this.opt_grant_grant_option();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5217;
	            this.match(PostgreSQLParser.REVOKE);
	            this.state = 5218;
	            this.privileges();
	            this.state = 5219;
	            this.match(PostgreSQLParser.ON);
	            this.state = 5220;
	            this.defacl_privilege_target();
	            this.state = 5221;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 5222;
	            this.grantee_list();
	            this.state = 5223;
	            this.opt_drop_behavior();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5225;
	            this.match(PostgreSQLParser.REVOKE);
	            this.state = 5226;
	            this.match(PostgreSQLParser.GRANT);
	            this.state = 5227;
	            this.match(PostgreSQLParser.OPTION);
	            this.state = 5228;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 5229;
	            this.privileges();
	            this.state = 5230;
	            this.match(PostgreSQLParser.ON);
	            this.state = 5231;
	            this.defacl_privilege_target();
	            this.state = 5232;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 5233;
	            this.grantee_list();
	            this.state = 5234;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defacl_privilege_target() {
	    let localctx = new Defacl_privilege_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, PostgreSQLParser.RULE_defacl_privilege_target);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5238;
	        _la = this._input.LA(1);
	        if(!(_la===212 || _la===322 || _la===343 || _la===354 || _la===455 || _la===456)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexstmt() {
	    let localctx = new IndexstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, PostgreSQLParser.RULE_indexstmt);
	    try {
	        this.state = 5275;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5240;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 5241;
	            this.opt_unique();
	            this.state = 5242;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 5243;
	            this.opt_concurrently();
	            this.state = 5244;
	            this.opt_index_name();
	            this.state = 5245;
	            this.match(PostgreSQLParser.ON);
	            this.state = 5246;
	            this.relation_expr();
	            this.state = 5247;
	            this.access_method_clause();
	            this.state = 5248;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5249;
	            this.index_params();
	            this.state = 5250;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 5251;
	            this.opt_include();
	            this.state = 5252;
	            this.opt_reloptions();
	            this.state = 5253;
	            this.opttablespace();
	            this.state = 5254;
	            this.where_clause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5256;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 5257;
	            this.opt_unique();
	            this.state = 5258;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 5259;
	            this.opt_concurrently();
	            this.state = 5260;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 5261;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 5262;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 5263;
	            this.name();
	            this.state = 5264;
	            this.match(PostgreSQLParser.ON);
	            this.state = 5265;
	            this.relation_expr();
	            this.state = 5266;
	            this.access_method_clause();
	            this.state = 5267;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5268;
	            this.index_params();
	            this.state = 5269;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 5270;
	            this.opt_include();
	            this.state = 5271;
	            this.opt_reloptions();
	            this.state = 5272;
	            this.opttablespace();
	            this.state = 5273;
	            this.where_clause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_unique() {
	    let localctx = new Opt_uniqueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, PostgreSQLParser.RULE_opt_unique);
	    try {
	        this.state = 5279;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5277;
	            this.match(PostgreSQLParser.UNIQUE);
	            break;
	        case 226:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_concurrently() {
	    let localctx = new Opt_concurrentlyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, PostgreSQLParser.RULE_opt_concurrently);
	    try {
	        this.state = 5283;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5281;
	            this.match(PostgreSQLParser.CONCURRENTLY);
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 80:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_index_name() {
	    let localctx = new Opt_index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, PostgreSQLParser.RULE_opt_index_name);
	    try {
	        this.state = 5287;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5285;
	            this.name();
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	access_method_clause() {
	    let localctx = new Access_method_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, PostgreSQLParser.RULE_access_method_clause);
	    try {
	        this.state = 5292;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5289;
	            this.match(PostgreSQLParser.USING);
	            this.state = 5290;
	            this.name();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_params() {
	    let localctx = new Index_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, PostgreSQLParser.RULE_index_params);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5294;
	        this.index_elem();
	        this.state = 5299;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5295;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5296;
	            this.index_elem();
	            this.state = 5301;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_elem_options() {
	    let localctx = new Index_elem_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, PostgreSQLParser.RULE_index_elem_options);
	    try {
	        this.state = 5313;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5302;
	            this.opt_collate();
	            this.state = 5303;
	            this.opt_class();
	            this.state = 5304;
	            this.opt_asc_desc();
	            this.state = 5305;
	            this.opt_nulls_order();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5307;
	            this.opt_collate();
	            this.state = 5308;
	            this.any_name();
	            this.state = 5309;
	            this.reloptions();
	            this.state = 5310;
	            this.opt_asc_desc();
	            this.state = 5311;
	            this.opt_nulls_order();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_elem() {
	    let localctx = new Index_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, PostgreSQLParser.RULE_index_elem);
	    try {
	        this.state = 5326;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5315;
	            this.colid();
	            this.state = 5316;
	            this.index_elem_options();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5318;
	            this.func_expr_windowless();
	            this.state = 5319;
	            this.index_elem_options();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5321;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5322;
	            this.a_expr();
	            this.state = 5323;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 5324;
	            this.index_elem_options();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_include() {
	    let localctx = new Opt_includeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, PostgreSQLParser.RULE_opt_include);
	    try {
	        this.state = 5334;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 441:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5328;
	            this.match(PostgreSQLParser.INCLUDE);
	            this.state = 5329;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5330;
	            this.index_including_params();
	            this.state = 5331;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 103:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 344:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_including_params() {
	    let localctx = new Index_including_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, PostgreSQLParser.RULE_index_including_params);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5336;
	        this.index_elem();
	        this.state = 5341;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5337;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5338;
	            this.index_elem();
	            this.state = 5343;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_collate() {
	    let localctx = new Opt_collateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, PostgreSQLParser.RULE_opt_collate);
	    try {
	        this.state = 5347;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5344;
	            this.match(PostgreSQLParser.COLLATE);
	            this.state = 5345;
	            this.any_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_class() {
	    let localctx = new Opt_classContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, PostgreSQLParser.RULE_opt_class);
	    try {
	        this.state = 5351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5349;
	            this.any_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_asc_desc() {
	    let localctx = new Opt_asc_descContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, PostgreSQLParser.RULE_opt_asc_desc);
	    try {
	        this.state = 5356;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 37:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5353;
	            this.match(PostgreSQLParser.ASC);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5354;
	            this.match(PostgreSQLParser.DESC);
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 62:
	        case 65:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 87:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 266:
	        case 283:
	        case 292:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 313:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 481:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_nulls_order() {
	    let localctx = new Opt_nulls_orderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, PostgreSQLParser.RULE_opt_nulls_order);
	    try {
	        this.state = 5363;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5358;
	            this.match(PostgreSQLParser.NULLS_P);
	            this.state = 5359;
	            this.match(PostgreSQLParser.FIRST_P);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5360;
	            this.match(PostgreSQLParser.NULLS_P);
	            this.state = 5361;
	            this.match(PostgreSQLParser.LAST_P);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createfunctionstmt() {
	    let localctx = new CreatefunctionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, PostgreSQLParser.RULE_createfunctionstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5365;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 5366;
	        this.opt_or_replace();
	        this.state = 5367;
	        _la = this._input.LA(1);
	        if(!(_la===211 || _la===289)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5368;
	        this.func_name();
	        this.state = 5369;
	        this.func_args_with_defaults();
	        this.state = 5379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	        if(la_===1) {
	            this.state = 5370;
	            this.match(PostgreSQLParser.RETURNS);
	            this.state = 5377;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5371;
	                this.func_return();
	                break;

	            case 2:
	                this.state = 5372;
	                this.match(PostgreSQLParser.TABLE);
	                this.state = 5373;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 5374;
	                this.table_func_column_list();
	                this.state = 5375;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	                break;

	            }

	        }
	        this.state = 5381;
	        this.createfunc_opt_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_or_replace() {
	    let localctx = new Opt_or_replaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, PostgreSQLParser.RULE_opt_or_replace);
	    try {
	        this.state = 5386;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 82:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5383;
	            this.match(PostgreSQLParser.OR);
	            this.state = 5384;
	            this.match(PostgreSQLParser.REPLACE);
	            break;
	        case 136:
	        case 211:
	        case 238:
	        case 288:
	        case 289:
	        case 314:
	        case 352:
	        case 443:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_args() {
	    let localctx = new Func_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, PostgreSQLParser.RULE_func_args);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5388;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 5390;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 286264325) !== 0) || _la===68 || _la===92 || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 4276092927) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 4294967295) !== 0) || ((((_la - 293)) & ~0x1f) === 0 && ((1 << (_la - 293)) & 4294967295) !== 0) || ((((_la - 325)) & ~0x1f) === 0 && ((1 << (_la - 325)) & 4294967295) !== 0) || ((((_la - 357)) & ~0x1f) === 0 && ((1 << (_la - 357)) & 4294967295) !== 0) || ((((_la - 389)) & ~0x1f) === 0 && ((1 << (_la - 389)) & 4294967295) !== 0) || ((((_la - 421)) & ~0x1f) === 0 && ((1 << (_la - 421)) & 4294967295) !== 0) || ((((_la - 453)) & ~0x1f) === 0 && ((1 << (_la - 453)) & 4294967293) !== 0) || ((((_la - 485)) & ~0x1f) === 0 && ((1 << (_la - 485)) & 4293656575) !== 0) || ((((_la - 517)) & ~0x1f) === 0 && ((1 << (_la - 517)) & 4294967291) !== 0) || ((((_la - 549)) & ~0x1f) === 0 && ((1 << (_la - 549)) & 4294967295) !== 0) || ((((_la - 581)) & ~0x1f) === 0 && ((1 << (_la - 581)) & 4294967295) !== 0) || ((((_la - 613)) & ~0x1f) === 0 && ((1 << (_la - 613)) & 301989887) !== 0) || _la===661 || _la===662) {
	            this.state = 5389;
	            this.func_args_list();
	        }

	        this.state = 5392;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_args_list() {
	    let localctx = new Func_args_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, PostgreSQLParser.RULE_func_args_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5394;
	        this.func_arg();
	        this.state = 5399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5395;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5396;
	            this.func_arg();
	            this.state = 5401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_with_argtypes_list() {
	    let localctx = new Function_with_argtypes_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, PostgreSQLParser.RULE_function_with_argtypes_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5402;
	        this.function_with_argtypes();
	        this.state = 5407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5403;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5404;
	            this.function_with_argtypes();
	            this.state = 5409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_with_argtypes() {
	    let localctx = new Function_with_argtypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, PostgreSQLParser.RULE_function_with_argtypes);
	    var _la = 0;
	    try {
	        this.state = 5418;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5410;
	            this.func_name();
	            this.state = 5411;
	            this.func_args();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5413;
	            this.type_func_name_keyword();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5414;
	            this.colid();
	            this.state = 5416;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4 || _la===11) {
	                this.state = 5415;
	                this.indirection();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_args_with_defaults() {
	    let localctx = new Func_args_with_defaultsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, PostgreSQLParser.RULE_func_args_with_defaults);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5420;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 5422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 286264325) !== 0) || _la===68 || _la===92 || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 4276092927) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 4294967295) !== 0) || ((((_la - 293)) & ~0x1f) === 0 && ((1 << (_la - 293)) & 4294967295) !== 0) || ((((_la - 325)) & ~0x1f) === 0 && ((1 << (_la - 325)) & 4294967295) !== 0) || ((((_la - 357)) & ~0x1f) === 0 && ((1 << (_la - 357)) & 4294967295) !== 0) || ((((_la - 389)) & ~0x1f) === 0 && ((1 << (_la - 389)) & 4294967295) !== 0) || ((((_la - 421)) & ~0x1f) === 0 && ((1 << (_la - 421)) & 4294967295) !== 0) || ((((_la - 453)) & ~0x1f) === 0 && ((1 << (_la - 453)) & 4294967293) !== 0) || ((((_la - 485)) & ~0x1f) === 0 && ((1 << (_la - 485)) & 4293656575) !== 0) || ((((_la - 517)) & ~0x1f) === 0 && ((1 << (_la - 517)) & 4294967291) !== 0) || ((((_la - 549)) & ~0x1f) === 0 && ((1 << (_la - 549)) & 4294967295) !== 0) || ((((_la - 581)) & ~0x1f) === 0 && ((1 << (_la - 581)) & 4294967295) !== 0) || ((((_la - 613)) & ~0x1f) === 0 && ((1 << (_la - 613)) & 301989887) !== 0) || _la===661 || _la===662) {
	            this.state = 5421;
	            this.func_args_with_defaults_list();
	        }

	        this.state = 5424;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_args_with_defaults_list() {
	    let localctx = new Func_args_with_defaults_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, PostgreSQLParser.RULE_func_args_with_defaults_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5426;
	        this.func_arg_with_default();
	        this.state = 5431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5427;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5428;
	            this.func_arg_with_default();
	            this.state = 5433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_arg() {
	    let localctx = new Func_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, PostgreSQLParser.RULE_func_arg);
	    try {
	        this.state = 5447;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5434;
	            this.arg_class();
	            this.state = 5436;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	            if(la_===1) {
	                this.state = 5435;
	                this.param_name();

	            }
	            this.state = 5438;
	            this.func_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5440;
	            this.param_name();
	            this.state = 5442;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	            if(la_===1) {
	                this.state = 5441;
	                this.arg_class();

	            }
	            this.state = 5444;
	            this.func_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5446;
	            this.func_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_class() {
	    let localctx = new Arg_classContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, PostgreSQLParser.RULE_arg_class);
	    try {
	        this.state = 5456;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5449;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 5451;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	            if(la_===1) {
	                this.state = 5450;
	                this.match(PostgreSQLParser.OUT_P);

	            }
	            break;
	        case 453:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5453;
	            this.match(PostgreSQLParser.OUT_P);
	            break;
	        case 393:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5454;
	            this.match(PostgreSQLParser.INOUT);
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5455;
	            this.match(PostgreSQLParser.VARIADIC);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_name() {
	    let localctx = new Param_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, PostgreSQLParser.RULE_param_name);
	    try {
	        this.state = 5462;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 471:
	        case 472:
	        case 473:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5458;
	            this.type_function_name();
	            break;
	        case 304:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 504:
	        case 513:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5459;
	            this.builtin_function_name();
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5460;
	            this.match(PostgreSQLParser.LEFT);
	            break;
	        case 126:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5461;
	            this.match(PostgreSQLParser.RIGHT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_return() {
	    let localctx = new Func_returnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, PostgreSQLParser.RULE_func_return);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5464;
	        this.func_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_type() {
	    let localctx = new Func_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, PostgreSQLParser.RULE_func_type);
	    var _la = 0;
	    try {
	        this.state = 5480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5466;
	            this.typename();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===408) {
	                this.state = 5467;
	                this.match(PostgreSQLParser.SETOF);
	            }

	            this.state = 5474;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 304:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 504:
	            case 513:
	            case 521:
	            case 522:
	            case 523:
	            case 524:
	            case 525:
	            case 526:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 545:
	            case 546:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 559:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 590:
	            case 591:
	            case 592:
	            case 593:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 607:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	                this.state = 5470;
	                this.builtin_function_name();
	                break;
	            case 33:
	            case 35:
	            case 43:
	            case 44:
	            case 53:
	            case 57:
	            case 61:
	            case 92:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 251:
	            case 252:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 433:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 471:
	            case 472:
	            case 473:
	            case 475:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 520:
	            case 636:
	            case 637:
	            case 641:
	            case 661:
	            case 662:
	                this.state = 5471;
	                this.type_function_name();
	                break;
	            case 119:
	                this.state = 5472;
	                this.match(PostgreSQLParser.LEFT);
	                break;
	            case 126:
	                this.state = 5473;
	                this.match(PostgreSQLParser.RIGHT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5476;
	            this.attrs();
	            this.state = 5477;
	            this.match(PostgreSQLParser.PERCENT);
	            this.state = 5478;
	            this.match(PostgreSQLParser.TYPE_P);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_arg_with_default() {
	    let localctx = new Func_arg_with_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, PostgreSQLParser.RULE_func_arg_with_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5482;
	        this.func_arg();
	        this.state = 5485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===53) {
	            this.state = 5483;
	            _la = this._input.LA(1);
	            if(!(_la===10 || _la===53)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5484;
	            this.a_expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggr_arg() {
	    let localctx = new Aggr_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, PostgreSQLParser.RULE_aggr_arg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5487;
	        this.func_arg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggr_args() {
	    let localctx = new Aggr_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, PostgreSQLParser.RULE_aggr_args);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5489;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 5500;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5490;
	            this.match(PostgreSQLParser.STAR);
	            break;

	        case 2:
	            this.state = 5491;
	            this.aggr_args_list();
	            break;

	        case 3:
	            this.state = 5492;
	            this.match(PostgreSQLParser.ORDER);
	            this.state = 5493;
	            this.match(PostgreSQLParser.BY);
	            this.state = 5494;
	            this.aggr_args_list();
	            break;

	        case 4:
	            this.state = 5495;
	            this.aggr_args_list();
	            this.state = 5496;
	            this.match(PostgreSQLParser.ORDER);
	            this.state = 5497;
	            this.match(PostgreSQLParser.BY);
	            this.state = 5498;
	            this.aggr_args_list();
	            break;

	        }
	        this.state = 5502;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggr_args_list() {
	    let localctx = new Aggr_args_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, PostgreSQLParser.RULE_aggr_args_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5504;
	        this.aggr_arg();
	        this.state = 5509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5505;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5506;
	            this.aggr_arg();
	            this.state = 5511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate_with_argtypes() {
	    let localctx = new Aggregate_with_argtypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, PostgreSQLParser.RULE_aggregate_with_argtypes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5512;
	        this.func_name();
	        this.state = 5513;
	        this.aggr_args();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate_with_argtypes_list() {
	    let localctx = new Aggregate_with_argtypes_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, PostgreSQLParser.RULE_aggregate_with_argtypes_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5515;
	        this.aggregate_with_argtypes();
	        this.state = 5520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5516;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5517;
	            this.aggregate_with_argtypes();
	            this.state = 5522;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createfunc_opt_list() {
	    let localctx = new Createfunc_opt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, PostgreSQLParser.RULE_createfunc_opt_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5524; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 5523;
	        		this.createfunc_opt_item();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 5526; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,286, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	                        ParseRoutineBody(_localctx);
	                    
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_func_opt_item() {
	    let localctx = new Common_func_opt_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, PostgreSQLParser.RULE_common_func_opt_item);
	    try {
	        this.state = 5565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5530;
	            this.match(PostgreSQLParser.CALLED);
	            this.state = 5531;
	            this.match(PostgreSQLParser.ON);
	            this.state = 5532;
	            this.match(PostgreSQLParser.NULL_P);
	            this.state = 5533;
	            this.match(PostgreSQLParser.INPUT_P);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5534;
	            this.match(PostgreSQLParser.RETURNS);
	            this.state = 5535;
	            this.match(PostgreSQLParser.NULL_P);
	            this.state = 5536;
	            this.match(PostgreSQLParser.ON);
	            this.state = 5537;
	            this.match(PostgreSQLParser.NULL_P);
	            this.state = 5538;
	            this.match(PostgreSQLParser.INPUT_P);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5539;
	            this.match(PostgreSQLParser.STRICT_P);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5540;
	            this.match(PostgreSQLParser.IMMUTABLE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5541;
	            this.match(PostgreSQLParser.STABLE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5542;
	            this.match(PostgreSQLParser.VOLATILE);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5543;
	            this.match(PostgreSQLParser.EXTERNAL);
	            this.state = 5544;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 5545;
	            this.match(PostgreSQLParser.DEFINER);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5546;
	            this.match(PostgreSQLParser.EXTERNAL);
	            this.state = 5547;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 5548;
	            this.match(PostgreSQLParser.INVOKER);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5549;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 5550;
	            this.match(PostgreSQLParser.DEFINER);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5551;
	            this.match(PostgreSQLParser.SECURITY);
	            this.state = 5552;
	            this.match(PostgreSQLParser.INVOKER);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5553;
	            this.match(PostgreSQLParser.LEAKPROOF);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5554;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 5555;
	            this.match(PostgreSQLParser.LEAKPROOF);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5556;
	            this.match(PostgreSQLParser.COST);
	            this.state = 5557;
	            this.numericonly();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 5558;
	            this.match(PostgreSQLParser.ROWS);
	            this.state = 5559;
	            this.numericonly();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 5560;
	            this.match(PostgreSQLParser.SUPPORT);
	            this.state = 5561;
	            this.any_name();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 5562;
	            this.functionsetresetclause();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 5563;
	            this.match(PostgreSQLParser.PARALLEL);
	            this.state = 5564;
	            this.colid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createfunc_opt_item() {
	    let localctx = new Createfunc_opt_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, PostgreSQLParser.RULE_createfunc_opt_item);
	    try {
	        this.state = 5575;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 36:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5567;
	            this.match(PostgreSQLParser.AS);
	            this.state = 5568;
	            this.func_as();
	            break;
	        case 238:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5569;
	            this.match(PostgreSQLParser.LANGUAGE);
	            this.state = 5570;
	            this.nonreservedword_or_sconst();
	            break;
	        case 443:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5571;
	            this.match(PostgreSQLParser.TRANSFORM);
	            this.state = 5572;
	            this.transform_type_list();
	            break;
	        case 104:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5573;
	            this.match(PostgreSQLParser.WINDOW);
	            break;
	        case 77:
	        case 149:
	        case 170:
	        case 205:
	        case 222:
	        case 241:
	        case 306:
	        case 309:
	        case 313:
	        case 320:
	        case 326:
	        case 331:
	        case 339:
	        case 370:
	        case 459:
	        case 460:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5574;
	            this.common_func_opt_item();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_as() {
	    let localctx = new Func_asContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, PostgreSQLParser.RULE_func_as);
	    try {
	        this.state = 5582;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5577;
	            localctx.def = this.sconst();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5578;
	            this.sconst();
	            this.state = 5579;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5580;
	            this.sconst();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transform_type_list() {
	    let localctx = new Transform_type_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, PostgreSQLParser.RULE_transform_type_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5584;
	        this.match(PostgreSQLParser.FOR);
	        this.state = 5585;
	        this.match(PostgreSQLParser.TYPE_P);
	        this.state = 5586;
	        this.typename();
	        this.state = 5593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5587;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5588;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 5589;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 5590;
	            this.typename();
	            this.state = 5595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_definition() {
	    let localctx = new Opt_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, PostgreSQLParser.RULE_opt_definition);
	    try {
	        this.state = 5599;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5596;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5597;
	            this.definition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_func_column() {
	    let localctx = new Table_func_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, PostgreSQLParser.RULE_table_func_column);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5601;
	        this.param_name();
	        this.state = 5602;
	        this.func_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_func_column_list() {
	    let localctx = new Table_func_column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, PostgreSQLParser.RULE_table_func_column_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5604;
	        this.table_func_column();
	        this.state = 5609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5605;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5606;
	            this.table_func_column();
	            this.state = 5611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterfunctionstmt() {
	    let localctx = new AlterfunctionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, PostgreSQLParser.RULE_alterfunctionstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5612;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 5613;
	        _la = this._input.LA(1);
	        if(!(_la===211 || _la===289 || _la===442)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5614;
	        this.function_with_argtypes();
	        this.state = 5615;
	        this.alterfunc_opt_list();
	        this.state = 5616;
	        this.opt_restrict();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterfunc_opt_list() {
	    let localctx = new Alterfunc_opt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, PostgreSQLParser.RULE_alterfunc_opt_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5619; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 5618;
	        		this.common_func_opt_item();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 5621; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,293, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_restrict() {
	    let localctx = new Opt_restrictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, PostgreSQLParser.RULE_opt_restrict);
	    try {
	        this.state = 5625;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 308:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5623;
	            this.match(PostgreSQLParser.RESTRICT);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removefuncstmt() {
	    let localctx = new RemovefuncstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, PostgreSQLParser.RULE_removefuncstmt);
	    try {
	        this.state = 5663;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5627;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 5628;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5629;
	            this.function_with_argtypes_list();
	            this.state = 5630;
	            this.opt_drop_behavior();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5632;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 5633;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5634;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 5635;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 5636;
	            this.function_with_argtypes_list();
	            this.state = 5637;
	            this.opt_drop_behavior();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5639;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 5640;
	            this.match(PostgreSQLParser.PROCEDURE);
	            this.state = 5641;
	            this.function_with_argtypes_list();
	            this.state = 5642;
	            this.opt_drop_behavior();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5644;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 5645;
	            this.match(PostgreSQLParser.PROCEDURE);
	            this.state = 5646;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 5647;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 5648;
	            this.function_with_argtypes_list();
	            this.state = 5649;
	            this.opt_drop_behavior();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5651;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 5652;
	            this.match(PostgreSQLParser.ROUTINE);
	            this.state = 5653;
	            this.function_with_argtypes_list();
	            this.state = 5654;
	            this.opt_drop_behavior();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5656;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 5657;
	            this.match(PostgreSQLParser.ROUTINE);
	            this.state = 5658;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 5659;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 5660;
	            this.function_with_argtypes_list();
	            this.state = 5661;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeaggrstmt() {
	    let localctx = new RemoveaggrstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, PostgreSQLParser.RULE_removeaggrstmt);
	    try {
	        this.state = 5677;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5665;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 5666;
	            this.match(PostgreSQLParser.AGGREGATE);
	            this.state = 5667;
	            this.aggregate_with_argtypes_list();
	            this.state = 5668;
	            this.opt_drop_behavior();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5670;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 5671;
	            this.match(PostgreSQLParser.AGGREGATE);
	            this.state = 5672;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 5673;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 5674;
	            this.aggregate_with_argtypes_list();
	            this.state = 5675;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeoperstmt() {
	    let localctx = new RemoveoperstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, PostgreSQLParser.RULE_removeoperstmt);
	    try {
	        this.state = 5691;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5679;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 5680;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 5681;
	            this.operator_with_argtypes_list();
	            this.state = 5682;
	            this.opt_drop_behavior();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5684;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 5685;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 5686;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 5687;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 5688;
	            this.operator_with_argtypes_list();
	            this.state = 5689;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oper_argtypes() {
	    let localctx = new Oper_argtypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, PostgreSQLParser.RULE_oper_argtypes);
	    try {
	        this.state = 5715;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5693;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5694;
	            this.typename();
	            this.state = 5695;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5697;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5698;
	            this.typename();
	            this.state = 5699;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5700;
	            this.typename();
	            this.state = 5701;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5703;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5704;
	            this.match(PostgreSQLParser.NONE);
	            this.state = 5705;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5706;
	            this.typename();
	            this.state = 5707;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5709;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5710;
	            this.typename();
	            this.state = 5711;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5712;
	            this.match(PostgreSQLParser.NONE);
	            this.state = 5713;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_operator() {
	    let localctx = new Any_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, PostgreSQLParser.RULE_any_operator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5722;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 286264325) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 2298478593) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 4294967269) !== 0) || ((((_la - 156)) & ~0x1f) === 0 && ((1 << (_la - 156)) & 4294967295) !== 0) || ((((_la - 188)) & ~0x1f) === 0 && ((1 << (_la - 188)) & 4294967295) !== 0) || ((((_la - 220)) & ~0x1f) === 0 && ((1 << (_la - 220)) & 3221225471) !== 0) || ((((_la - 252)) & ~0x1f) === 0 && ((1 << (_la - 252)) & 4294967293) !== 0) || ((((_la - 284)) & ~0x1f) === 0 && ((1 << (_la - 284)) & 4294967295) !== 0) || ((((_la - 316)) & ~0x1f) === 0 && ((1 << (_la - 316)) & 4294967295) !== 0) || ((((_la - 348)) & ~0x1f) === 0 && ((1 << (_la - 348)) & 4294967295) !== 0) || ((((_la - 380)) & ~0x1f) === 0 && ((1 << (_la - 380)) & 4294967295) !== 0) || ((((_la - 412)) & ~0x1f) === 0 && ((1 << (_la - 412)) & 4294967295) !== 0) || ((((_la - 444)) & ~0x1f) === 0 && ((1 << (_la - 444)) & 4026530815) !== 0) || ((((_la - 476)) & ~0x1f) === 0 && ((1 << (_la - 476)) & 3623878655) !== 0) || ((((_la - 508)) & ~0x1f) === 0 && ((1 << (_la - 508)) & 4294965247) !== 0) || ((((_la - 540)) & ~0x1f) === 0 && ((1 << (_la - 540)) & 4294967295) !== 0) || ((((_la - 572)) & ~0x1f) === 0 && ((1 << (_la - 572)) & 4294967295) !== 0) || ((((_la - 604)) & ~0x1f) === 0 && ((1 << (_la - 604)) & 4294967295) !== 0) || ((((_la - 636)) & ~0x1f) === 0 && ((1 << (_la - 636)) & 100663331) !== 0)) {
	            this.state = 5717;
	            this.colid();
	            this.state = 5718;
	            this.match(PostgreSQLParser.DOT);
	            this.state = 5724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5725;
	        this.all_op();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_with_argtypes_list() {
	    let localctx = new Operator_with_argtypes_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, PostgreSQLParser.RULE_operator_with_argtypes_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5727;
	        this.operator_with_argtypes();
	        this.state = 5732;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5728;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5729;
	            this.operator_with_argtypes();
	            this.state = 5734;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_with_argtypes() {
	    let localctx = new Operator_with_argtypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, PostgreSQLParser.RULE_operator_with_argtypes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5735;
	        this.any_operator();
	        this.state = 5736;
	        this.oper_argtypes();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dostmt() {
	    let localctx = new DostmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, PostgreSQLParser.RULE_dostmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5738;
	        this.match(PostgreSQLParser.DO);
	        this.state = 5739;
	        this.dostmt_opt_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dostmt_opt_list() {
	    let localctx = new Dostmt_opt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, PostgreSQLParser.RULE_dostmt_opt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5742; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5741;
	            this.dostmt_opt_item();
	            this.state = 5744; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===238 || ((((_la - 645)) & ~0x1f) === 0 && ((1 << (_la - 645)) & 67108885) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dostmt_opt_item() {
	    let localctx = new Dostmt_opt_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, PostgreSQLParser.RULE_dostmt_opt_item);
	    try {
	        this.state = 5749;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5746;
	            this.sconst();
	            break;
	        case 238:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5747;
	            this.match(PostgreSQLParser.LANGUAGE);
	            this.state = 5748;
	            this.nonreservedword_or_sconst();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createcaststmt() {
	    let localctx = new CreatecaststmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, PostgreSQLParser.RULE_createcaststmt);
	    try {
	        this.state = 5785;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5751;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 5752;
	            this.match(PostgreSQLParser.CAST);
	            this.state = 5753;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5754;
	            this.typename();
	            this.state = 5755;
	            this.match(PostgreSQLParser.AS);
	            this.state = 5756;
	            this.typename();
	            this.state = 5757;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 5758;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5759;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5760;
	            this.function_with_argtypes();
	            this.state = 5761;
	            this.cast_context();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5763;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 5764;
	            this.match(PostgreSQLParser.CAST);
	            this.state = 5765;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5766;
	            this.typename();
	            this.state = 5767;
	            this.match(PostgreSQLParser.AS);
	            this.state = 5768;
	            this.typename();
	            this.state = 5769;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 5770;
	            this.match(PostgreSQLParser.WITHOUT);
	            this.state = 5771;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5772;
	            this.cast_context();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5774;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 5775;
	            this.match(PostgreSQLParser.CAST);
	            this.state = 5776;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5777;
	            this.typename();
	            this.state = 5778;
	            this.match(PostgreSQLParser.AS);
	            this.state = 5779;
	            this.typename();
	            this.state = 5780;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 5781;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5782;
	            this.match(PostgreSQLParser.INOUT);
	            this.state = 5783;
	            this.cast_context();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cast_context() {
	    let localctx = new Cast_contextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, PostgreSQLParser.RULE_cast_context);
	    try {
	        this.state = 5792;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5787;
	            this.match(PostgreSQLParser.AS);
	            this.state = 5788;
	            this.match(PostgreSQLParser.IMPLICIT_P);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5789;
	            this.match(PostgreSQLParser.AS);
	            this.state = 5790;
	            this.match(PostgreSQLParser.ASSIGNMENT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropcaststmt() {
	    let localctx = new DropcaststmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, PostgreSQLParser.RULE_dropcaststmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5794;
	        this.match(PostgreSQLParser.DROP);
	        this.state = 5795;
	        this.match(PostgreSQLParser.CAST);
	        this.state = 5796;
	        this.opt_if_exists();
	        this.state = 5797;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 5798;
	        this.typename();
	        this.state = 5799;
	        this.match(PostgreSQLParser.AS);
	        this.state = 5800;
	        this.typename();
	        this.state = 5801;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	        this.state = 5802;
	        this.opt_drop_behavior();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_if_exists() {
	    let localctx = new Opt_if_existsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, PostgreSQLParser.RULE_opt_if_exists);
	    try {
	        this.state = 5807;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 220:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5804;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 5805;
	            this.match(PostgreSQLParser.EXISTS);
	            break;
	        case 2:
	        case 62:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createtransformstmt() {
	    let localctx = new CreatetransformstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, PostgreSQLParser.RULE_createtransformstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5809;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 5810;
	        this.opt_or_replace();
	        this.state = 5811;
	        this.match(PostgreSQLParser.TRANSFORM);
	        this.state = 5812;
	        this.match(PostgreSQLParser.FOR);
	        this.state = 5813;
	        this.typename();
	        this.state = 5814;
	        this.match(PostgreSQLParser.LANGUAGE);
	        this.state = 5815;
	        this.name();
	        this.state = 5816;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 5817;
	        this.transform_element_list();
	        this.state = 5818;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transform_element_list() {
	    let localctx = new Transform_element_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, PostgreSQLParser.RULE_transform_element_list);
	    try {
	        this.state = 5854;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5820;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 5821;
	            this.match(PostgreSQLParser.SQL_P);
	            this.state = 5822;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5823;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5824;
	            this.function_with_argtypes();
	            this.state = 5825;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5826;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5827;
	            this.match(PostgreSQLParser.SQL_P);
	            this.state = 5828;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5829;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5830;
	            this.function_with_argtypes();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5832;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5833;
	            this.match(PostgreSQLParser.SQL_P);
	            this.state = 5834;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5835;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5836;
	            this.function_with_argtypes();
	            this.state = 5837;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5838;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 5839;
	            this.match(PostgreSQLParser.SQL_P);
	            this.state = 5840;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5841;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5842;
	            this.function_with_argtypes();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5844;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 5845;
	            this.match(PostgreSQLParser.SQL_P);
	            this.state = 5846;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5847;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5848;
	            this.function_with_argtypes();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5849;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5850;
	            this.match(PostgreSQLParser.SQL_P);
	            this.state = 5851;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 5852;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5853;
	            this.function_with_argtypes();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	droptransformstmt() {
	    let localctx = new DroptransformstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, PostgreSQLParser.RULE_droptransformstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5856;
	        this.match(PostgreSQLParser.DROP);
	        this.state = 5857;
	        this.match(PostgreSQLParser.TRANSFORM);
	        this.state = 5858;
	        this.opt_if_exists();
	        this.state = 5859;
	        this.match(PostgreSQLParser.FOR);
	        this.state = 5860;
	        this.typename();
	        this.state = 5861;
	        this.match(PostgreSQLParser.LANGUAGE);
	        this.state = 5862;
	        this.name();
	        this.state = 5863;
	        this.opt_drop_behavior();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reindexstmt() {
	    let localctx = new ReindexstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, PostgreSQLParser.RULE_reindexstmt);
	    try {
	        this.state = 5891;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5865;
	            this.match(PostgreSQLParser.REINDEX);
	            this.state = 5866;
	            this.reindex_target_type();
	            this.state = 5867;
	            this.opt_concurrently();
	            this.state = 5868;
	            this.qualified_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5870;
	            this.match(PostgreSQLParser.REINDEX);
	            this.state = 5871;
	            this.reindex_target_multitable();
	            this.state = 5872;
	            this.opt_concurrently();
	            this.state = 5873;
	            this.name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5875;
	            this.match(PostgreSQLParser.REINDEX);
	            this.state = 5876;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5877;
	            this.reindex_option_list();
	            this.state = 5878;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 5879;
	            this.reindex_target_type();
	            this.state = 5880;
	            this.opt_concurrently();
	            this.state = 5881;
	            this.qualified_name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5883;
	            this.match(PostgreSQLParser.REINDEX);
	            this.state = 5884;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 5885;
	            this.reindex_option_list();
	            this.state = 5886;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 5887;
	            this.reindex_target_multitable();
	            this.state = 5888;
	            this.opt_concurrently();
	            this.state = 5889;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reindex_target_type() {
	    let localctx = new Reindex_target_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, PostgreSQLParser.RULE_reindex_target_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5893;
	        _la = this._input.LA(1);
	        if(!(_la===92 || _la===226)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reindex_target_multitable() {
	    let localctx = new Reindex_target_multitableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, PostgreSQLParser.RULE_reindex_target_multitable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5895;
	        _la = this._input.LA(1);
	        if(!(_la===175 || _la===316 || _la===342)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reindex_option_list() {
	    let localctx = new Reindex_option_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, PostgreSQLParser.RULE_reindex_option_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5897;
	        this.reindex_option_elem();
	        this.state = 5902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 5898;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 5899;
	            this.reindex_option_elem();
	            this.state = 5904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reindex_option_elem() {
	    let localctx = new Reindex_option_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, PostgreSQLParser.RULE_reindex_option_elem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5905;
	        this.match(PostgreSQLParser.VERBOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altertblspcstmt() {
	    let localctx = new AltertblspcstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, PostgreSQLParser.RULE_altertblspcstmt);
	    try {
	        this.state = 5919;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5907;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5908;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 5909;
	            this.name();
	            this.state = 5910;
	            this.match(PostgreSQLParser.SET);
	            this.state = 5911;
	            this.reloptions();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5913;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5914;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 5915;
	            this.name();
	            this.state = 5916;
	            this.match(PostgreSQLParser.RESET);
	            this.state = 5917;
	            this.reloptions();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renamestmt() {
	    let localctx = new RenamestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, PostgreSQLParser.RULE_renamestmt);
	    try {
	        this.state = 6389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5921;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5922;
	            this.match(PostgreSQLParser.AGGREGATE);
	            this.state = 5923;
	            this.aggregate_with_argtypes();
	            this.state = 5924;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 5925;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5926;
	            this.name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5928;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5929;
	            this.match(PostgreSQLParser.COLLATION);
	            this.state = 5930;
	            this.any_name();
	            this.state = 5931;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 5932;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5933;
	            this.name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5935;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5936;
	            this.match(PostgreSQLParser.CONVERSION_P);
	            this.state = 5937;
	            this.any_name();
	            this.state = 5938;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 5939;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5940;
	            this.name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5942;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5943;
	            this.match(PostgreSQLParser.DATABASE);
	            this.state = 5944;
	            this.name();
	            this.state = 5945;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 5946;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5947;
	            this.name();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5949;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5950;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 5951;
	            this.any_name();
	            this.state = 5952;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 5953;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5954;
	            this.name();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5956;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5957;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 5958;
	            this.any_name();
	            this.state = 5959;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 5960;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 5961;
	            this.name();
	            this.state = 5962;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5963;
	            this.name();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5965;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5966;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 5967;
	            this.match(PostgreSQLParser.DATA_P);
	            this.state = 5968;
	            this.match(PostgreSQLParser.WRAPPER);
	            this.state = 5969;
	            this.name();
	            this.state = 5970;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 5971;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5972;
	            this.name();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5974;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5975;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 5976;
	            this.function_with_argtypes();
	            this.state = 5977;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 5978;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5979;
	            this.name();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5981;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5982;
	            this.match(PostgreSQLParser.GROUP_P);
	            this.state = 5983;
	            this.roleid();
	            this.state = 5984;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 5985;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5986;
	            this.roleid();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5988;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5989;
	            this.opt_procedural();
	            this.state = 5990;
	            this.match(PostgreSQLParser.LANGUAGE);
	            this.state = 5991;
	            this.name();
	            this.state = 5992;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 5993;
	            this.match(PostgreSQLParser.TO);
	            this.state = 5994;
	            this.name();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5996;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 5997;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 5998;
	            this.match(PostgreSQLParser.CLASS);
	            this.state = 5999;
	            this.any_name();
	            this.state = 6000;
	            this.match(PostgreSQLParser.USING);
	            this.state = 6001;
	            this.name();
	            this.state = 6002;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6003;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6004;
	            this.name();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6006;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6007;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 6008;
	            this.match(PostgreSQLParser.FAMILY);
	            this.state = 6009;
	            this.any_name();
	            this.state = 6010;
	            this.match(PostgreSQLParser.USING);
	            this.state = 6011;
	            this.name();
	            this.state = 6012;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6013;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6014;
	            this.name();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6016;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6017;
	            this.match(PostgreSQLParser.POLICY);
	            this.state = 6018;
	            this.name();
	            this.state = 6019;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6020;
	            this.qualified_name();
	            this.state = 6021;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6022;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6023;
	            this.name();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6025;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6026;
	            this.match(PostgreSQLParser.POLICY);
	            this.state = 6027;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6028;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6029;
	            this.name();
	            this.state = 6030;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6031;
	            this.qualified_name();
	            this.state = 6032;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6033;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6034;
	            this.name();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 6036;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6037;
	            this.match(PostgreSQLParser.PROCEDURE);
	            this.state = 6038;
	            this.function_with_argtypes();
	            this.state = 6039;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6040;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6041;
	            this.name();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 6043;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6044;
	            this.match(PostgreSQLParser.PUBLICATION);
	            this.state = 6045;
	            this.name();
	            this.state = 6046;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6047;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6048;
	            this.name();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 6050;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6051;
	            this.match(PostgreSQLParser.ROUTINE);
	            this.state = 6052;
	            this.function_with_argtypes();
	            this.state = 6053;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6054;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6055;
	            this.name();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 6057;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6058;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6059;
	            this.name();
	            this.state = 6060;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6061;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6062;
	            this.name();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 6064;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6065;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 6066;
	            this.name();
	            this.state = 6067;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6068;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6069;
	            this.name();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 6071;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6072;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            this.state = 6073;
	            this.name();
	            this.state = 6074;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6075;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6076;
	            this.name();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 6078;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6079;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6080;
	            this.relation_expr();
	            this.state = 6081;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6082;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6083;
	            this.name();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 6085;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6086;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6087;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6088;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6089;
	            this.relation_expr();
	            this.state = 6090;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6091;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6092;
	            this.name();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 6094;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6095;
	            this.match(PostgreSQLParser.SEQUENCE);
	            this.state = 6096;
	            this.qualified_name();
	            this.state = 6097;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6098;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6099;
	            this.name();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 6101;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6102;
	            this.match(PostgreSQLParser.SEQUENCE);
	            this.state = 6103;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6104;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6105;
	            this.qualified_name();
	            this.state = 6106;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6107;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6108;
	            this.name();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 6110;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6111;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6112;
	            this.qualified_name();
	            this.state = 6113;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6114;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6115;
	            this.name();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 6117;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6118;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6119;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6120;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6121;
	            this.qualified_name();
	            this.state = 6122;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6123;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6124;
	            this.name();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 6126;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6127;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            this.state = 6128;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6129;
	            this.qualified_name();
	            this.state = 6130;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6131;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6132;
	            this.name();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 6134;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6135;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            this.state = 6136;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6137;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6138;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6139;
	            this.qualified_name();
	            this.state = 6140;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6141;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6142;
	            this.name();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 6144;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6145;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 6146;
	            this.qualified_name();
	            this.state = 6147;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6148;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6149;
	            this.name();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 6151;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6152;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 6153;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6154;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6155;
	            this.qualified_name();
	            this.state = 6156;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6157;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6158;
	            this.name();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 6160;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6161;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 6162;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6163;
	            this.relation_expr();
	            this.state = 6164;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6165;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6166;
	            this.name();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 6168;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6169;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 6170;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6171;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6172;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6173;
	            this.relation_expr();
	            this.state = 6174;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6175;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6176;
	            this.name();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 6178;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6179;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6180;
	            this.relation_expr();
	            this.state = 6181;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6182;
	            this.opt_column();
	            this.state = 6183;
	            this.name();
	            this.state = 6184;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6185;
	            this.name();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 6187;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6188;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6189;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6190;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6191;
	            this.relation_expr();
	            this.state = 6192;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6193;
	            this.opt_column();
	            this.state = 6194;
	            this.name();
	            this.state = 6195;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6196;
	            this.name();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 6198;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6199;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6200;
	            this.qualified_name();
	            this.state = 6201;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6202;
	            this.opt_column();
	            this.state = 6203;
	            this.name();
	            this.state = 6204;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6205;
	            this.name();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 6207;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6208;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6209;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6210;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6211;
	            this.qualified_name();
	            this.state = 6212;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6213;
	            this.opt_column();
	            this.state = 6214;
	            this.name();
	            this.state = 6215;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6216;
	            this.name();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 6218;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6219;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            this.state = 6220;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6221;
	            this.qualified_name();
	            this.state = 6222;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6223;
	            this.opt_column();
	            this.state = 6224;
	            this.name();
	            this.state = 6225;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6226;
	            this.name();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 6228;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6229;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            this.state = 6230;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6231;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6232;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6233;
	            this.qualified_name();
	            this.state = 6234;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6235;
	            this.opt_column();
	            this.state = 6236;
	            this.name();
	            this.state = 6237;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6238;
	            this.name();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 6240;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6241;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6242;
	            this.relation_expr();
	            this.state = 6243;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6244;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 6245;
	            this.name();
	            this.state = 6246;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6247;
	            this.name();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 6249;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6250;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6251;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6252;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6253;
	            this.relation_expr();
	            this.state = 6254;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6255;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 6256;
	            this.name();
	            this.state = 6257;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6258;
	            this.name();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 6260;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6261;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 6262;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6263;
	            this.relation_expr();
	            this.state = 6264;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6265;
	            this.opt_column();
	            this.state = 6266;
	            this.name();
	            this.state = 6267;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6268;
	            this.name();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 6270;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6271;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 6272;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6273;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6274;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6275;
	            this.relation_expr();
	            this.state = 6276;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6277;
	            this.opt_column();
	            this.state = 6278;
	            this.name();
	            this.state = 6279;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6280;
	            this.name();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 6282;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6283;
	            this.match(PostgreSQLParser.RULE);
	            this.state = 6284;
	            this.name();
	            this.state = 6285;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6286;
	            this.qualified_name();
	            this.state = 6287;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6288;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6289;
	            this.name();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 6291;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6292;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 6293;
	            this.name();
	            this.state = 6294;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6295;
	            this.qualified_name();
	            this.state = 6296;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6297;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6298;
	            this.name();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 6300;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6301;
	            this.match(PostgreSQLParser.EVENT);
	            this.state = 6302;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 6303;
	            this.name();
	            this.state = 6304;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6305;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6306;
	            this.name();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 6308;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6309;
	            this.match(PostgreSQLParser.ROLE);
	            this.state = 6310;
	            this.roleid();
	            this.state = 6311;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6312;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6313;
	            this.roleid();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 6315;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6316;
	            this.match(PostgreSQLParser.USER);
	            this.state = 6317;
	            this.roleid();
	            this.state = 6318;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6319;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6320;
	            this.roleid();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 6322;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6323;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 6324;
	            this.name();
	            this.state = 6325;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6326;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6327;
	            this.name();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 6329;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6330;
	            this.match(PostgreSQLParser.STATISTICS);
	            this.state = 6331;
	            this.any_name();
	            this.state = 6332;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6333;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6334;
	            this.name();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 6336;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6337;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 6338;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 6339;
	            this.match(PostgreSQLParser.PARSER);
	            this.state = 6340;
	            this.any_name();
	            this.state = 6341;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6342;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6343;
	            this.name();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 6345;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6346;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 6347;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 6348;
	            this.match(PostgreSQLParser.DICTIONARY);
	            this.state = 6349;
	            this.any_name();
	            this.state = 6350;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6351;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6352;
	            this.name();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 6354;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6355;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 6356;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 6357;
	            this.match(PostgreSQLParser.TEMPLATE);
	            this.state = 6358;
	            this.any_name();
	            this.state = 6359;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6360;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6361;
	            this.name();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 6363;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6364;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 6365;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 6366;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            this.state = 6367;
	            this.any_name();
	            this.state = 6368;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6369;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6370;
	            this.name();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 6372;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6373;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 6374;
	            this.any_name();
	            this.state = 6375;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6376;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6377;
	            this.name();
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 6379;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6380;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 6381;
	            this.any_name();
	            this.state = 6382;
	            this.match(PostgreSQLParser.RENAME);
	            this.state = 6383;
	            this.match(PostgreSQLParser.ATTRIBUTE);
	            this.state = 6384;
	            this.name();
	            this.state = 6385;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6386;
	            this.name();
	            this.state = 6387;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_column() {
	    let localctx = new Opt_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, PostgreSQLParser.RULE_opt_column);
	    try {
	        this.state = 6393;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6391;
	            this.match(PostgreSQLParser.COLUMN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_set_data() {
	    let localctx = new Opt_set_dataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, PostgreSQLParser.RULE_opt_set_data);
	    try {
	        this.state = 6398;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6395;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6396;
	            this.match(PostgreSQLParser.DATA_P);
	            break;
	        case 353:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterobjectdependsstmt() {
	    let localctx = new AlterobjectdependsstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, PostgreSQLParser.RULE_alterobjectdependsstmt);
	    try {
	        this.state = 6457;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,313,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6400;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6401;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 6402;
	            this.function_with_argtypes();
	            this.state = 6403;
	            this.opt_no();
	            this.state = 6404;
	            this.match(PostgreSQLParser.DEPENDS);
	            this.state = 6405;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6406;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 6407;
	            this.name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6409;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6410;
	            this.match(PostgreSQLParser.PROCEDURE);
	            this.state = 6411;
	            this.function_with_argtypes();
	            this.state = 6412;
	            this.opt_no();
	            this.state = 6413;
	            this.match(PostgreSQLParser.DEPENDS);
	            this.state = 6414;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6415;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 6416;
	            this.name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6418;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6419;
	            this.match(PostgreSQLParser.ROUTINE);
	            this.state = 6420;
	            this.function_with_argtypes();
	            this.state = 6421;
	            this.opt_no();
	            this.state = 6422;
	            this.match(PostgreSQLParser.DEPENDS);
	            this.state = 6423;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6424;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 6425;
	            this.name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6427;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6428;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 6429;
	            this.name();
	            this.state = 6430;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6431;
	            this.qualified_name();
	            this.state = 6432;
	            this.opt_no();
	            this.state = 6433;
	            this.match(PostgreSQLParser.DEPENDS);
	            this.state = 6434;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6435;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 6436;
	            this.name();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6438;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6439;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            this.state = 6440;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6441;
	            this.qualified_name();
	            this.state = 6442;
	            this.opt_no();
	            this.state = 6443;
	            this.match(PostgreSQLParser.DEPENDS);
	            this.state = 6444;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6445;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 6446;
	            this.name();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6448;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6449;
	            this.match(PostgreSQLParser.INDEX);
	            this.state = 6450;
	            this.qualified_name();
	            this.state = 6451;
	            this.opt_no();
	            this.state = 6452;
	            this.match(PostgreSQLParser.DEPENDS);
	            this.state = 6453;
	            this.match(PostgreSQLParser.ON);
	            this.state = 6454;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 6455;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_no() {
	    let localctx = new Opt_noContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, PostgreSQLParser.RULE_opt_no);
	    try {
	        this.state = 6461;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 262:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6459;
	            this.match(PostgreSQLParser.NO);
	            break;
	        case 462:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterobjectschemastmt() {
	    let localctx = new AlterobjectschemastmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, PostgreSQLParser.RULE_alterobjectschemastmt);
	    try {
	        this.state = 6680;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6463;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6464;
	            this.match(PostgreSQLParser.AGGREGATE);
	            this.state = 6465;
	            this.aggregate_with_argtypes();
	            this.state = 6466;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6467;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6468;
	            this.name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6470;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6471;
	            this.match(PostgreSQLParser.COLLATION);
	            this.state = 6472;
	            this.any_name();
	            this.state = 6473;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6474;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6475;
	            this.name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6477;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6478;
	            this.match(PostgreSQLParser.CONVERSION_P);
	            this.state = 6479;
	            this.any_name();
	            this.state = 6480;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6481;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6482;
	            this.name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6484;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6485;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 6486;
	            this.any_name();
	            this.state = 6487;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6488;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6489;
	            this.name();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6491;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6492;
	            this.match(PostgreSQLParser.EXTENSION);
	            this.state = 6493;
	            this.name();
	            this.state = 6494;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6495;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6496;
	            this.name();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6498;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6499;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 6500;
	            this.function_with_argtypes();
	            this.state = 6501;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6502;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6503;
	            this.name();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6505;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6506;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 6507;
	            this.operator_with_argtypes();
	            this.state = 6508;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6509;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6510;
	            this.name();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6512;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6513;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 6514;
	            this.match(PostgreSQLParser.CLASS);
	            this.state = 6515;
	            this.any_name();
	            this.state = 6516;
	            this.match(PostgreSQLParser.USING);
	            this.state = 6517;
	            this.name();
	            this.state = 6518;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6519;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6520;
	            this.name();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6522;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6523;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 6524;
	            this.match(PostgreSQLParser.FAMILY);
	            this.state = 6525;
	            this.any_name();
	            this.state = 6526;
	            this.match(PostgreSQLParser.USING);
	            this.state = 6527;
	            this.name();
	            this.state = 6528;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6529;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6530;
	            this.name();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6532;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6533;
	            this.match(PostgreSQLParser.PROCEDURE);
	            this.state = 6534;
	            this.function_with_argtypes();
	            this.state = 6535;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6536;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6537;
	            this.name();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6539;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6540;
	            this.match(PostgreSQLParser.ROUTINE);
	            this.state = 6541;
	            this.function_with_argtypes();
	            this.state = 6542;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6543;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6544;
	            this.name();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6546;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6547;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6548;
	            this.relation_expr();
	            this.state = 6549;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6550;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6551;
	            this.name();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6553;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6554;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6555;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6556;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6557;
	            this.relation_expr();
	            this.state = 6558;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6559;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6560;
	            this.name();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6562;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6563;
	            this.match(PostgreSQLParser.STATISTICS);
	            this.state = 6564;
	            this.any_name();
	            this.state = 6565;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6566;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6567;
	            this.name();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 6569;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6570;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 6571;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 6572;
	            this.match(PostgreSQLParser.PARSER);
	            this.state = 6573;
	            this.any_name();
	            this.state = 6574;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6575;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6576;
	            this.name();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 6578;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6579;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 6580;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 6581;
	            this.match(PostgreSQLParser.DICTIONARY);
	            this.state = 6582;
	            this.any_name();
	            this.state = 6583;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6584;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6585;
	            this.name();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 6587;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6588;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 6589;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 6590;
	            this.match(PostgreSQLParser.TEMPLATE);
	            this.state = 6591;
	            this.any_name();
	            this.state = 6592;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6593;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6594;
	            this.name();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 6596;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6597;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 6598;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 6599;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            this.state = 6600;
	            this.any_name();
	            this.state = 6601;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6602;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6603;
	            this.name();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 6605;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6606;
	            this.match(PostgreSQLParser.SEQUENCE);
	            this.state = 6607;
	            this.qualified_name();
	            this.state = 6608;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6609;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6610;
	            this.name();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 6612;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6613;
	            this.match(PostgreSQLParser.SEQUENCE);
	            this.state = 6614;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6615;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6616;
	            this.qualified_name();
	            this.state = 6617;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6618;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6619;
	            this.name();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 6621;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6622;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6623;
	            this.qualified_name();
	            this.state = 6624;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6625;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6626;
	            this.name();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 6628;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6629;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6630;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6631;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6632;
	            this.qualified_name();
	            this.state = 6633;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6634;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6635;
	            this.name();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 6637;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6638;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            this.state = 6639;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6640;
	            this.qualified_name();
	            this.state = 6641;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6642;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6643;
	            this.name();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 6645;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6646;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            this.state = 6647;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 6648;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6649;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6650;
	            this.qualified_name();
	            this.state = 6651;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6652;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6653;
	            this.name();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 6655;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6656;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 6657;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6658;
	            this.relation_expr();
	            this.state = 6659;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6660;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6661;
	            this.name();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 6663;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6664;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 6665;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6666;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 6667;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 6668;
	            this.relation_expr();
	            this.state = 6669;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6670;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6671;
	            this.name();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 6673;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6674;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 6675;
	            this.any_name();
	            this.state = 6676;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6677;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6678;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alteroperatorstmt() {
	    let localctx = new AlteroperatorstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, PostgreSQLParser.RULE_alteroperatorstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6682;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 6683;
	        this.match(PostgreSQLParser.OPERATOR);
	        this.state = 6684;
	        this.operator_with_argtypes();
	        this.state = 6685;
	        this.match(PostgreSQLParser.SET);
	        this.state = 6686;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 6687;
	        this.operator_def_list();
	        this.state = 6688;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_def_list() {
	    let localctx = new Operator_def_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, PostgreSQLParser.RULE_operator_def_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6690;
	        this.operator_def_elem();
	        this.state = 6695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 6691;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 6692;
	            this.operator_def_elem();
	            this.state = 6697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_def_elem() {
	    let localctx = new Operator_def_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, PostgreSQLParser.RULE_operator_def_elem);
	    try {
	        this.state = 6706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6698;
	            this.collabel();
	            this.state = 6699;
	            this.match(PostgreSQLParser.EQUAL);
	            this.state = 6700;
	            this.match(PostgreSQLParser.NONE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6702;
	            this.collabel();
	            this.state = 6703;
	            this.match(PostgreSQLParser.EQUAL);
	            this.state = 6704;
	            this.operator_def_arg();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_def_arg() {
	    let localctx = new Operator_def_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, PostgreSQLParser.RULE_operator_def_arg);
	    try {
	        this.state = 6713;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6708;
	            this.func_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6709;
	            this.reserved_keyword();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6710;
	            this.qual_all_op();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6711;
	            this.numericonly();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6712;
	            this.sconst();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altertypestmt() {
	    let localctx = new AltertypestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, PostgreSQLParser.RULE_altertypestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6715;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 6716;
	        this.match(PostgreSQLParser.TYPE_P);
	        this.state = 6717;
	        this.any_name();
	        this.state = 6718;
	        this.match(PostgreSQLParser.SET);
	        this.state = 6719;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 6720;
	        this.operator_def_list();
	        this.state = 6721;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterownerstmt() {
	    let localctx = new AlterownerstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, PostgreSQLParser.RULE_alterownerstmt);
	    try {
	        this.state = 6906;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6723;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6724;
	            this.match(PostgreSQLParser.AGGREGATE);
	            this.state = 6725;
	            this.aggregate_with_argtypes();
	            this.state = 6726;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6727;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6728;
	            this.rolespec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6730;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6731;
	            this.match(PostgreSQLParser.COLLATION);
	            this.state = 6732;
	            this.any_name();
	            this.state = 6733;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6734;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6735;
	            this.rolespec();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6737;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6738;
	            this.match(PostgreSQLParser.CONVERSION_P);
	            this.state = 6739;
	            this.any_name();
	            this.state = 6740;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6741;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6742;
	            this.rolespec();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6744;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6745;
	            this.match(PostgreSQLParser.DATABASE);
	            this.state = 6746;
	            this.name();
	            this.state = 6747;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6748;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6749;
	            this.rolespec();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6751;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6752;
	            this.match(PostgreSQLParser.DOMAIN_P);
	            this.state = 6753;
	            this.any_name();
	            this.state = 6754;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6755;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6756;
	            this.rolespec();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6758;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6759;
	            this.match(PostgreSQLParser.FUNCTION);
	            this.state = 6760;
	            this.function_with_argtypes();
	            this.state = 6761;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6762;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6763;
	            this.rolespec();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6765;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6766;
	            this.opt_procedural();
	            this.state = 6767;
	            this.match(PostgreSQLParser.LANGUAGE);
	            this.state = 6768;
	            this.name();
	            this.state = 6769;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6770;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6771;
	            this.rolespec();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6773;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6774;
	            this.match(PostgreSQLParser.LARGE_P);
	            this.state = 6775;
	            this.match(PostgreSQLParser.OBJECT_P);
	            this.state = 6776;
	            this.numericonly();
	            this.state = 6777;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6778;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6779;
	            this.rolespec();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6781;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6782;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 6783;
	            this.operator_with_argtypes();
	            this.state = 6784;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6785;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6786;
	            this.rolespec();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6788;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6789;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 6790;
	            this.match(PostgreSQLParser.CLASS);
	            this.state = 6791;
	            this.any_name();
	            this.state = 6792;
	            this.match(PostgreSQLParser.USING);
	            this.state = 6793;
	            this.name();
	            this.state = 6794;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6795;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6796;
	            this.rolespec();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6798;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6799;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 6800;
	            this.match(PostgreSQLParser.FAMILY);
	            this.state = 6801;
	            this.any_name();
	            this.state = 6802;
	            this.match(PostgreSQLParser.USING);
	            this.state = 6803;
	            this.name();
	            this.state = 6804;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6805;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6806;
	            this.rolespec();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6808;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6809;
	            this.match(PostgreSQLParser.PROCEDURE);
	            this.state = 6810;
	            this.function_with_argtypes();
	            this.state = 6811;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6812;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6813;
	            this.rolespec();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6815;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6816;
	            this.match(PostgreSQLParser.ROUTINE);
	            this.state = 6817;
	            this.function_with_argtypes();
	            this.state = 6818;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6819;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6820;
	            this.rolespec();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6822;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6823;
	            this.match(PostgreSQLParser.SCHEMA);
	            this.state = 6824;
	            this.name();
	            this.state = 6825;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6826;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6827;
	            this.rolespec();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 6829;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6830;
	            this.match(PostgreSQLParser.TYPE_P);
	            this.state = 6831;
	            this.any_name();
	            this.state = 6832;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6833;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6834;
	            this.rolespec();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 6836;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6837;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 6838;
	            this.name();
	            this.state = 6839;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6840;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6841;
	            this.rolespec();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 6843;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6844;
	            this.match(PostgreSQLParser.STATISTICS);
	            this.state = 6845;
	            this.any_name();
	            this.state = 6846;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6847;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6848;
	            this.rolespec();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 6850;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6851;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 6852;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 6853;
	            this.match(PostgreSQLParser.DICTIONARY);
	            this.state = 6854;
	            this.any_name();
	            this.state = 6855;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6856;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6857;
	            this.rolespec();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 6859;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6860;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 6861;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 6862;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            this.state = 6863;
	            this.any_name();
	            this.state = 6864;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6865;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6866;
	            this.rolespec();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 6868;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6869;
	            this.match(PostgreSQLParser.FOREIGN);
	            this.state = 6870;
	            this.match(PostgreSQLParser.DATA_P);
	            this.state = 6871;
	            this.match(PostgreSQLParser.WRAPPER);
	            this.state = 6872;
	            this.name();
	            this.state = 6873;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6874;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6875;
	            this.rolespec();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 6877;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6878;
	            this.match(PostgreSQLParser.SERVER);
	            this.state = 6879;
	            this.name();
	            this.state = 6880;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6881;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6882;
	            this.rolespec();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 6884;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6885;
	            this.match(PostgreSQLParser.EVENT);
	            this.state = 6886;
	            this.match(PostgreSQLParser.TRIGGER);
	            this.state = 6887;
	            this.name();
	            this.state = 6888;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6889;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6890;
	            this.rolespec();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 6892;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6893;
	            this.match(PostgreSQLParser.PUBLICATION);
	            this.state = 6894;
	            this.name();
	            this.state = 6895;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6896;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6897;
	            this.rolespec();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 6899;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6900;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            this.state = 6901;
	            this.name();
	            this.state = 6902;
	            this.match(PostgreSQLParser.OWNER);
	            this.state = 6903;
	            this.match(PostgreSQLParser.TO);
	            this.state = 6904;
	            this.rolespec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createpublicationstmt() {
	    let localctx = new CreatepublicationstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, PostgreSQLParser.RULE_createpublicationstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6908;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 6909;
	        this.match(PostgreSQLParser.PUBLICATION);
	        this.state = 6910;
	        this.name();
	        this.state = 6911;
	        this.opt_publication_for_tables();
	        this.state = 6912;
	        this.opt_definition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_publication_for_tables() {
	    let localctx = new Opt_publication_for_tablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, PostgreSQLParser.RULE_opt_publication_for_tables);
	    try {
	        this.state = 6916;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6914;
	            this.publication_for_tables();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	publication_for_tables() {
	    let localctx = new Publication_for_tablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, PostgreSQLParser.RULE_publication_for_tables);
	    try {
	        this.state = 6924;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6918;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 6919;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6920;
	            this.relation_expr_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6921;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 6922;
	            this.match(PostgreSQLParser.ALL);
	            this.state = 6923;
	            this.match(PostgreSQLParser.TABLES);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterpublicationstmt() {
	    let localctx = new AlterpublicationstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, PostgreSQLParser.RULE_alterpublicationstmt);
	    try {
	        this.state = 6953;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6926;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6927;
	            this.match(PostgreSQLParser.PUBLICATION);
	            this.state = 6928;
	            this.name();
	            this.state = 6929;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6930;
	            this.definition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6932;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6933;
	            this.match(PostgreSQLParser.PUBLICATION);
	            this.state = 6934;
	            this.name();
	            this.state = 6935;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 6936;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6937;
	            this.relation_expr_list();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6939;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6940;
	            this.match(PostgreSQLParser.PUBLICATION);
	            this.state = 6941;
	            this.name();
	            this.state = 6942;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6943;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6944;
	            this.relation_expr_list();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6946;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6947;
	            this.match(PostgreSQLParser.PUBLICATION);
	            this.state = 6948;
	            this.name();
	            this.state = 6949;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 6950;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 6951;
	            this.relation_expr_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createsubscriptionstmt() {
	    let localctx = new CreatesubscriptionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, PostgreSQLParser.RULE_createsubscriptionstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6955;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 6956;
	        this.match(PostgreSQLParser.SUBSCRIPTION);
	        this.state = 6957;
	        this.name();
	        this.state = 6958;
	        this.match(PostgreSQLParser.CONNECTION);
	        this.state = 6959;
	        this.sconst();
	        this.state = 6960;
	        this.match(PostgreSQLParser.PUBLICATION);
	        this.state = 6961;
	        this.publication_name_list();
	        this.state = 6962;
	        this.opt_definition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	publication_name_list() {
	    let localctx = new Publication_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, PostgreSQLParser.RULE_publication_name_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6964;
	        this.publication_name_item();
	        this.state = 6969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 6965;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 6966;
	            this.publication_name_item();
	            this.state = 6971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	publication_name_item() {
	    let localctx = new Publication_name_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, PostgreSQLParser.RULE_publication_name_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6972;
	        this.collabel();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altersubscriptionstmt() {
	    let localctx = new AltersubscriptionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, PostgreSQLParser.RULE_altersubscriptionstmt);
	    try {
	        this.state = 7011;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6974;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6975;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            this.state = 6976;
	            this.name();
	            this.state = 6977;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6978;
	            this.definition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6980;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6981;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            this.state = 6982;
	            this.name();
	            this.state = 6983;
	            this.match(PostgreSQLParser.CONNECTION);
	            this.state = 6984;
	            this.sconst();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6986;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6987;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            this.state = 6988;
	            this.name();
	            this.state = 6989;
	            this.match(PostgreSQLParser.REFRESH);
	            this.state = 6990;
	            this.match(PostgreSQLParser.PUBLICATION);
	            this.state = 6991;
	            this.opt_definition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6993;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 6994;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            this.state = 6995;
	            this.name();
	            this.state = 6996;
	            this.match(PostgreSQLParser.SET);
	            this.state = 6997;
	            this.match(PostgreSQLParser.PUBLICATION);
	            this.state = 6998;
	            this.publication_name_list();
	            this.state = 6999;
	            this.opt_definition();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7001;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7002;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            this.state = 7003;
	            this.name();
	            this.state = 7004;
	            this.match(PostgreSQLParser.ENABLE_P);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7006;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7007;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            this.state = 7008;
	            this.name();
	            this.state = 7009;
	            this.match(PostgreSQLParser.DISABLE_P);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropsubscriptionstmt() {
	    let localctx = new DropsubscriptionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, PostgreSQLParser.RULE_dropsubscriptionstmt);
	    try {
	        this.state = 7025;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7013;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 7014;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            this.state = 7015;
	            this.name();
	            this.state = 7016;
	            this.opt_drop_behavior();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7018;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 7019;
	            this.match(PostgreSQLParser.SUBSCRIPTION);
	            this.state = 7020;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 7021;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 7022;
	            this.name();
	            this.state = 7023;
	            this.opt_drop_behavior();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rulestmt() {
	    let localctx = new RulestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, PostgreSQLParser.RULE_rulestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7027;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 7028;
	        this.opt_or_replace();
	        this.state = 7029;
	        this.match(PostgreSQLParser.RULE);
	        this.state = 7030;
	        this.name();
	        this.state = 7031;
	        this.match(PostgreSQLParser.AS);
	        this.state = 7032;
	        this.match(PostgreSQLParser.ON);
	        this.state = 7033;
	        this.event();
	        this.state = 7034;
	        this.match(PostgreSQLParser.TO);
	        this.state = 7035;
	        this.qualified_name();
	        this.state = 7036;
	        this.where_clause();
	        this.state = 7037;
	        this.match(PostgreSQLParser.DO);
	        this.state = 7038;
	        this.opt_instead();
	        this.state = 7039;
	        this.ruleactionlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleactionlist() {
	    let localctx = new RuleactionlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, PostgreSQLParser.RULE_ruleactionlist);
	    try {
	        this.state = 7047;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7041;
	            this.match(PostgreSQLParser.NOTHING);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7042;
	            this.ruleactionstmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7043;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7044;
	            this.ruleactionmulti();
	            this.state = 7045;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleactionmulti() {
	    let localctx = new RuleactionmultiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, PostgreSQLParser.RULE_ruleactionmulti);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7049;
	        this.ruleactionstmtOrEmpty();
	        this.state = 7054;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===7) {
	            this.state = 7050;
	            this.match(PostgreSQLParser.SEMI);
	            this.state = 7051;
	            this.ruleactionstmtOrEmpty();
	            this.state = 7056;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleactionstmt() {
	    let localctx = new RuleactionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, PostgreSQLParser.RULE_ruleactionstmt);
	    try {
	        this.state = 7062;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7057;
	            this.selectstmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7058;
	            this.insertstmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7059;
	            this.updatestmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7060;
	            this.deletestmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7061;
	            this.notifystmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleactionstmtOrEmpty() {
	    let localctx = new RuleactionstmtOrEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, PostgreSQLParser.RULE_ruleactionstmtOrEmpty);
	    try {
	        this.state = 7066;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 88:
	        case 92:
	        case 105:
	        case 182:
	        case 232:
	        case 264:
	        case 362:
	        case 415:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7064;
	            this.ruleactionstmt();
	            break;
	        case 3:
	        case 7:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event() {
	    let localctx = new EventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, PostgreSQLParser.RULE_event);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7068;
	        _la = this._input.LA(1);
	        if(!(_la===88 || _la===182 || _la===232 || _la===362)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_instead() {
	    let localctx = new Opt_insteadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, PostgreSQLParser.RULE_opt_instead);
	    try {
	        this.state = 7073;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 233:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7070;
	            this.match(PostgreSQLParser.INSTEAD);
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7071;
	            this.match(PostgreSQLParser.ALSO);
	            break;
	        case 2:
	        case 88:
	        case 92:
	        case 105:
	        case 182:
	        case 232:
	        case 263:
	        case 264:
	        case 362:
	        case 415:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notifystmt() {
	    let localctx = new NotifystmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, PostgreSQLParser.RULE_notifystmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7075;
	        this.match(PostgreSQLParser.NOTIFY);
	        this.state = 7076;
	        this.colid();
	        this.state = 7077;
	        this.notify_payload();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notify_payload() {
	    let localctx = new Notify_payloadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, PostgreSQLParser.RULE_notify_payload);
	    try {
	        this.state = 7082;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7079;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 7080;
	            this.sconst();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listenstmt() {
	    let localctx = new ListenstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, PostgreSQLParser.RULE_listenstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7084;
	        this.match(PostgreSQLParser.LISTEN);
	        this.state = 7085;
	        this.colid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlistenstmt() {
	    let localctx = new UnlistenstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, PostgreSQLParser.RULE_unlistenstmt);
	    try {
	        this.state = 7091;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7087;
	            this.match(PostgreSQLParser.UNLISTEN);
	            this.state = 7088;
	            this.colid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7089;
	            this.match(PostgreSQLParser.UNLISTEN);
	            this.state = 7090;
	            this.match(PostgreSQLParser.STAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionstmt() {
	    let localctx = new TransactionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, PostgreSQLParser.RULE_transactionstmt);
	    try {
	        this.state = 7143;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7093;
	            this.match(PostgreSQLParser.ABORT_P);
	            this.state = 7094;
	            this.opt_transaction();
	            this.state = 7095;
	            this.opt_transaction_chain();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7097;
	            this.match(PostgreSQLParser.BEGIN_P);
	            this.state = 7098;
	            this.opt_transaction();
	            this.state = 7099;
	            this.transaction_mode_list_or_empty();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7101;
	            this.match(PostgreSQLParser.START);
	            this.state = 7102;
	            this.match(PostgreSQLParser.TRANSACTION);
	            this.state = 7103;
	            this.transaction_mode_list_or_empty();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7104;
	            this.match(PostgreSQLParser.COMMIT);
	            this.state = 7105;
	            this.opt_transaction();
	            this.state = 7106;
	            this.opt_transaction_chain();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7108;
	            this.match(PostgreSQLParser.END_P);
	            this.state = 7109;
	            this.opt_transaction();
	            this.state = 7110;
	            this.opt_transaction_chain();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7112;
	            this.match(PostgreSQLParser.ROLLBACK);
	            this.state = 7113;
	            this.opt_transaction();
	            this.state = 7114;
	            this.opt_transaction_chain();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7116;
	            this.match(PostgreSQLParser.SAVEPOINT);
	            this.state = 7117;
	            this.colid();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7118;
	            this.match(PostgreSQLParser.RELEASE);
	            this.state = 7119;
	            this.match(PostgreSQLParser.SAVEPOINT);
	            this.state = 7120;
	            this.colid();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7121;
	            this.match(PostgreSQLParser.RELEASE);
	            this.state = 7122;
	            this.colid();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7123;
	            this.match(PostgreSQLParser.ROLLBACK);
	            this.state = 7124;
	            this.opt_transaction();
	            this.state = 7125;
	            this.match(PostgreSQLParser.TO);
	            this.state = 7126;
	            this.match(PostgreSQLParser.SAVEPOINT);
	            this.state = 7127;
	            this.colid();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7129;
	            this.match(PostgreSQLParser.ROLLBACK);
	            this.state = 7130;
	            this.opt_transaction();
	            this.state = 7131;
	            this.match(PostgreSQLParser.TO);
	            this.state = 7132;
	            this.colid();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7134;
	            this.match(PostgreSQLParser.PREPARE);
	            this.state = 7135;
	            this.match(PostgreSQLParser.TRANSACTION);
	            this.state = 7136;
	            this.sconst();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7137;
	            this.match(PostgreSQLParser.COMMIT);
	            this.state = 7138;
	            this.match(PostgreSQLParser.PREPARED);
	            this.state = 7139;
	            this.sconst();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7140;
	            this.match(PostgreSQLParser.ROLLBACK);
	            this.state = 7141;
	            this.match(PostgreSQLParser.PREPARED);
	            this.state = 7142;
	            this.sconst();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_transaction() {
	    let localctx = new Opt_transactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, PostgreSQLParser.RULE_opt_transaction);
	    try {
	        this.state = 7148;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 373:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7145;
	            this.match(PostgreSQLParser.WORK);
	            break;
	        case 349:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7146;
	            this.match(PostgreSQLParser.TRANSACTION);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 33:
	        case 46:
	        case 54:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 77:
	        case 88:
	        case 92:
	        case 94:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 235:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 293:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction_mode_item() {
	    let localctx = new Transaction_mode_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, PostgreSQLParser.RULE_transaction_mode_item);
	    try {
	        this.state = 7160;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7150;
	            this.match(PostgreSQLParser.ISOLATION);
	            this.state = 7151;
	            this.match(PostgreSQLParser.LEVEL);
	            this.state = 7152;
	            this.iso_level();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7153;
	            this.match(PostgreSQLParser.READ);
	            this.state = 7154;
	            this.match(PostgreSQLParser.ONLY);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7155;
	            this.match(PostgreSQLParser.READ);
	            this.state = 7156;
	            this.match(PostgreSQLParser.WRITE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7157;
	            this.match(PostgreSQLParser.DEFERRABLE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7158;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 7159;
	            this.match(PostgreSQLParser.DEFERRABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction_mode_list() {
	    let localctx = new Transaction_mode_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, PostgreSQLParser.RULE_transaction_mode_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7162;
	        this.transaction_mode_item();
	        this.state = 7169;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6 || _la===54 || _la===77 || _la===235 || _la===293) {
	            this.state = 7164;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6) {
	                this.state = 7163;
	                this.match(PostgreSQLParser.COMMA);
	            }

	            this.state = 7166;
	            this.transaction_mode_item();
	            this.state = 7171;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction_mode_list_or_empty() {
	    let localctx = new Transaction_mode_list_or_emptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, PostgreSQLParser.RULE_transaction_mode_list_or_empty);
	    try {
	        this.state = 7174;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	        case 77:
	        case 235:
	        case 293:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7172;
	            this.transaction_mode_list();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_transaction_chain() {
	    let localctx = new Opt_transaction_chainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, PostgreSQLParser.RULE_opt_transaction_chain);
	    var _la = 0;
	    try {
	        this.state = 7182;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7176;
	            this.match(PostgreSQLParser.AND);
	            this.state = 7178;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===262) {
	                this.state = 7177;
	                this.match(PostgreSQLParser.NO);
	            }

	            this.state = 7180;
	            this.match(PostgreSQLParser.CHAIN);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewstmt() {
	    let localctx = new ViewstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, PostgreSQLParser.RULE_viewstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7184;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 7187;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===82) {
	            this.state = 7185;
	            this.match(PostgreSQLParser.OR);
	            this.state = 7186;
	            this.match(PostgreSQLParser.REPLACE);
	        }

	        this.state = 7189;
	        this.opttemp();
	        this.state = 7203;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 369:
	            this.state = 7190;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 7191;
	            this.qualified_name();
	            this.state = 7192;
	            this.opt_column_list();
	            this.state = 7193;
	            this.opt_reloptions();
	            break;
	        case 296:
	            this.state = 7195;
	            this.match(PostgreSQLParser.RECURSIVE);
	            this.state = 7196;
	            this.match(PostgreSQLParser.VIEW);
	            this.state = 7197;
	            this.qualified_name();
	            this.state = 7198;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7199;
	            this.columnlist();
	            this.state = 7200;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 7201;
	            this.opt_reloptions();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 7205;
	        this.match(PostgreSQLParser.AS);
	        this.state = 7206;
	        this.selectstmt();
	        this.state = 7207;
	        this.opt_check_option();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_check_option() {
	    let localctx = new Opt_check_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, PostgreSQLParser.RULE_opt_check_option);
	    var _la = 0;
	    try {
	        this.state = 7216;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7209;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 7211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===151 || _la===245) {
	                this.state = 7210;
	                _la = this._input.LA(1);
	                if(!(_la===151 || _la===245)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 7213;
	            this.match(PostgreSQLParser.CHECK);
	            this.state = 7214;
	            this.match(PostgreSQLParser.OPTION);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadstmt() {
	    let localctx = new LoadstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, PostgreSQLParser.RULE_loadstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7218;
	        this.match(PostgreSQLParser.LOAD);
	        this.state = 7219;
	        this.file_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createdbstmt() {
	    let localctx = new CreatedbstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, PostgreSQLParser.RULE_createdbstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7221;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 7222;
	        this.match(PostgreSQLParser.DATABASE);
	        this.state = 7223;
	        this.name();
	        this.state = 7224;
	        this.opt_with();
	        this.state = 7225;
	        this.createdb_opt_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createdb_opt_list() {
	    let localctx = new Createdb_opt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, PostgreSQLParser.RULE_createdb_opt_list);
	    try {
	        this.state = 7229;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7227;
	            this.createdb_opt_items();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createdb_opt_items() {
	    let localctx = new Createdb_opt_itemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, PostgreSQLParser.RULE_createdb_opt_items);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7232; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 7231;
	        		this.createdb_opt_item();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 7234; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,346, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createdb_opt_item() {
	    let localctx = new Createdb_opt_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, PostgreSQLParser.RULE_createdb_opt_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7236;
	        this.createdb_opt_name();
	        this.state = 7237;
	        this.opt_equal();
	        this.state = 7241;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7238;
	            this.signediconst();
	            break;

	        case 2:
	            this.state = 7239;
	            this.opt_boolean_or_string();
	            break;

	        case 3:
	            this.state = 7240;
	            this.match(PostgreSQLParser.DEFAULT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createdb_opt_name() {
	    let localctx = new Createdb_opt_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, PostgreSQLParser.RULE_createdb_opt_name);
	    try {
	        this.state = 7251;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 123:
	        case 130:
	        case 144:
	        case 153:
	        case 157:
	        case 161:
	        case 167:
	        case 172:
	        case 207:
	        case 210:
	        case 232:
	        case 240:
	        case 258:
	        case 261:
	        case 262:
	        case 272:
	        case 286:
	        case 300:
	        case 306:
	        case 312:
	        case 316:
	        case 317:
	        case 326:
	        case 353:
	        case 433:
	        case 434:
	        case 477:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7243;
	            this.identifier();
	            break;
	        case 164:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7244;
	            this.match(PostgreSQLParser.CONNECTION);
	            this.state = 7245;
	            this.match(PostgreSQLParser.LIMIT);
	            break;
	        case 194:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7246;
	            this.match(PostgreSQLParser.ENCODING);
	            break;
	        case 246:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7247;
	            this.match(PostgreSQLParser.LOCATION);
	            break;
	        case 275:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7248;
	            this.match(PostgreSQLParser.OWNER);
	            break;
	        case 344:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7249;
	            this.match(PostgreSQLParser.TABLESPACE);
	            break;
	        case 346:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7250;
	            this.match(PostgreSQLParser.TEMPLATE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_equal() {
	    let localctx = new Opt_equalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, PostgreSQLParser.RULE_opt_equal);
	    try {
	        this.state = 7255;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7253;
	            this.match(PostgreSQLParser.EQUAL);
	            break;
	        case 12:
	        case 13:
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 80:
	        case 92:
	        case 96:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 658:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterdatabasestmt() {
	    let localctx = new AlterdatabasestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, PostgreSQLParser.RULE_alterdatabasestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7257;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 7258;
	        this.match(PostgreSQLParser.DATABASE);
	        this.state = 7259;
	        this.name();
	        this.state = 7266;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7260;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 7261;
	            this.createdb_opt_list();
	            break;

	        case 2:
	            this.state = 7262;
	            this.createdb_opt_list();
	            break;

	        case 3:
	            this.state = 7263;
	            this.match(PostgreSQLParser.SET);
	            this.state = 7264;
	            this.match(PostgreSQLParser.TABLESPACE);
	            this.state = 7265;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterdatabasesetstmt() {
	    let localctx = new AlterdatabasesetstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, PostgreSQLParser.RULE_alterdatabasesetstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7268;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 7269;
	        this.match(PostgreSQLParser.DATABASE);
	        this.state = 7270;
	        this.name();
	        this.state = 7271;
	        this.setresetclause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropdbstmt() {
	    let localctx = new DropdbstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, PostgreSQLParser.RULE_dropdbstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7273;
	        this.match(PostgreSQLParser.DROP);
	        this.state = 7274;
	        this.match(PostgreSQLParser.DATABASE);
	        this.state = 7277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,351,this._ctx);
	        if(la_===1) {
	            this.state = 7275;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 7276;
	            this.match(PostgreSQLParser.EXISTS);

	        }
	        this.state = 7279;
	        this.name();
	        this.state = 7285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
	        if(la_===1) {
	            this.state = 7280;
	            this.opt_with();
	            this.state = 7281;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7282;
	            this.drop_option_list();
	            this.state = 7283;
	            this.match(PostgreSQLParser.CLOSE_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_option_list() {
	    let localctx = new Drop_option_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, PostgreSQLParser.RULE_drop_option_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7287;
	        this.drop_option();
	        this.state = 7292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 7288;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 7289;
	            this.drop_option();
	            this.state = 7294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_option() {
	    let localctx = new Drop_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, PostgreSQLParser.RULE_drop_option);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7295;
	        this.match(PostgreSQLParser.FORCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altercollationstmt() {
	    let localctx = new AltercollationstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, PostgreSQLParser.RULE_altercollationstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7297;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 7298;
	        this.match(PostgreSQLParser.COLLATION);
	        this.state = 7299;
	        this.any_name();
	        this.state = 7300;
	        this.match(PostgreSQLParser.REFRESH);
	        this.state = 7301;
	        this.match(PostgreSQLParser.VERSION_P);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altersystemstmt() {
	    let localctx = new AltersystemstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, PostgreSQLParser.RULE_altersystemstmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7303;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 7304;
	        this.match(PostgreSQLParser.SYSTEM_P);
	        this.state = 7305;
	        _la = this._input.LA(1);
	        if(!(_la===306 || _la===326)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7306;
	        this.generic_set();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createdomainstmt() {
	    let localctx = new CreatedomainstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, PostgreSQLParser.RULE_createdomainstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7308;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 7309;
	        this.match(PostgreSQLParser.DOMAIN_P);
	        this.state = 7310;
	        this.any_name();
	        this.state = 7311;
	        this.opt_as();
	        this.state = 7312;
	        this.typename();
	        this.state = 7313;
	        this.colquallist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterdomainstmt() {
	    let localctx = new AlterdomainstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, PostgreSQLParser.RULE_alterdomainstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7315;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 7316;
	        this.match(PostgreSQLParser.DOMAIN_P);
	        this.state = 7317;
	        this.any_name();
	        this.state = 7339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7318;
	            this.alter_column_default();
	            break;

	        case 2:
	            this.state = 7319;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 7320;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 7321;
	            this.match(PostgreSQLParser.NULL_P);
	            break;

	        case 3:
	            this.state = 7322;
	            this.match(PostgreSQLParser.SET);
	            this.state = 7323;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 7324;
	            this.match(PostgreSQLParser.NULL_P);
	            break;

	        case 4:
	            this.state = 7325;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 7326;
	            this.tableconstraint();
	            break;

	        case 5:
	            this.state = 7327;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 7328;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 7331;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,354,this._ctx);
	            if(la_===1) {
	                this.state = 7329;
	                this.match(PostgreSQLParser.IF_P);
	                this.state = 7330;
	                this.match(PostgreSQLParser.EXISTS);

	            }
	            this.state = 7333;
	            this.name();
	            this.state = 7334;
	            this.opt_drop_behavior();
	            break;

	        case 6:
	            this.state = 7336;
	            this.match(PostgreSQLParser.VALIDATE);
	            this.state = 7337;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 7338;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_as() {
	    let localctx = new Opt_asContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, PostgreSQLParser.RULE_opt_as);
	    try {
	        this.state = 7343;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 36:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7341;
	            this.match(PostgreSQLParser.AS);
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altertsdictionarystmt() {
	    let localctx = new AltertsdictionarystmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, PostgreSQLParser.RULE_altertsdictionarystmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7345;
	        this.match(PostgreSQLParser.ALTER);
	        this.state = 7346;
	        this.match(PostgreSQLParser.TEXT_P);
	        this.state = 7347;
	        this.match(PostgreSQLParser.SEARCH);
	        this.state = 7348;
	        this.match(PostgreSQLParser.DICTIONARY);
	        this.state = 7349;
	        this.any_name();
	        this.state = 7350;
	        this.definition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altertsconfigurationstmt() {
	    let localctx = new AltertsconfigurationstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, PostgreSQLParser.RULE_altertsconfigurationstmt);
	    try {
	        this.state = 7424;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7352;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7353;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 7354;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 7355;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            this.state = 7356;
	            this.any_name();
	            this.state = 7357;
	            this.match(PostgreSQLParser.ADD_P);
	            this.state = 7358;
	            this.match(PostgreSQLParser.MAPPING);
	            this.state = 7359;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 7360;
	            this.name_list();
	            this.state = 7361;
	            this.any_with();
	            this.state = 7362;
	            this.any_name_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7364;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7365;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 7366;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 7367;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            this.state = 7368;
	            this.any_name();
	            this.state = 7369;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7370;
	            this.match(PostgreSQLParser.MAPPING);
	            this.state = 7371;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 7372;
	            this.name_list();
	            this.state = 7373;
	            this.any_with();
	            this.state = 7374;
	            this.any_name_list();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7376;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7377;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 7378;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 7379;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            this.state = 7380;
	            this.any_name();
	            this.state = 7381;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7382;
	            this.match(PostgreSQLParser.MAPPING);
	            this.state = 7383;
	            this.match(PostgreSQLParser.REPLACE);
	            this.state = 7384;
	            this.any_name();
	            this.state = 7385;
	            this.any_with();
	            this.state = 7386;
	            this.any_name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7388;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7389;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 7390;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 7391;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            this.state = 7392;
	            this.any_name();
	            this.state = 7393;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7394;
	            this.match(PostgreSQLParser.MAPPING);
	            this.state = 7395;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 7396;
	            this.name_list();
	            this.state = 7397;
	            this.match(PostgreSQLParser.REPLACE);
	            this.state = 7398;
	            this.any_name();
	            this.state = 7399;
	            this.any_with();
	            this.state = 7400;
	            this.any_name();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7402;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7403;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 7404;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 7405;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            this.state = 7406;
	            this.any_name();
	            this.state = 7407;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 7408;
	            this.match(PostgreSQLParser.MAPPING);
	            this.state = 7409;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 7410;
	            this.name_list();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7412;
	            this.match(PostgreSQLParser.ALTER);
	            this.state = 7413;
	            this.match(PostgreSQLParser.TEXT_P);
	            this.state = 7414;
	            this.match(PostgreSQLParser.SEARCH);
	            this.state = 7415;
	            this.match(PostgreSQLParser.CONFIGURATION);
	            this.state = 7416;
	            this.any_name();
	            this.state = 7417;
	            this.match(PostgreSQLParser.DROP);
	            this.state = 7418;
	            this.match(PostgreSQLParser.MAPPING);
	            this.state = 7419;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 7420;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 7421;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 7422;
	            this.name_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_with() {
	    let localctx = new Any_withContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, PostgreSQLParser.RULE_any_with);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7426;
	        this.match(PostgreSQLParser.WITH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createconversionstmt() {
	    let localctx = new CreateconversionstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, PostgreSQLParser.RULE_createconversionstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7428;
	        this.match(PostgreSQLParser.CREATE);
	        this.state = 7429;
	        this.opt_default();
	        this.state = 7430;
	        this.match(PostgreSQLParser.CONVERSION_P);
	        this.state = 7431;
	        this.any_name();
	        this.state = 7432;
	        this.match(PostgreSQLParser.FOR);
	        this.state = 7433;
	        this.sconst();
	        this.state = 7434;
	        this.match(PostgreSQLParser.TO);
	        this.state = 7435;
	        this.sconst();
	        this.state = 7436;
	        this.match(PostgreSQLParser.FROM);
	        this.state = 7437;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clusterstmt() {
	    let localctx = new ClusterstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, PostgreSQLParser.RULE_clusterstmt);
	    try {
	        this.state = 7452;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7439;
	            this.match(PostgreSQLParser.CLUSTER);
	            this.state = 7440;
	            this.opt_verbose();
	            this.state = 7441;
	            this.qualified_name();
	            this.state = 7442;
	            this.cluster_index_specification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7444;
	            this.match(PostgreSQLParser.CLUSTER);
	            this.state = 7445;
	            this.opt_verbose();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7446;
	            this.match(PostgreSQLParser.CLUSTER);
	            this.state = 7447;
	            this.opt_verbose();
	            this.state = 7448;
	            this.name();
	            this.state = 7449;
	            this.match(PostgreSQLParser.ON);
	            this.state = 7450;
	            this.qualified_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cluster_index_specification() {
	    let localctx = new Cluster_index_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, PostgreSQLParser.RULE_cluster_index_specification);
	    try {
	        this.state = 7457;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7454;
	            this.match(PostgreSQLParser.USING);
	            this.state = 7455;
	            this.name();
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vacuumstmt() {
	    let localctx = new VacuumstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, PostgreSQLParser.RULE_vacuumstmt);
	    try {
	        this.state = 7472;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,360,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7459;
	            this.match(PostgreSQLParser.VACUUM);
	            this.state = 7460;
	            this.opt_full();
	            this.state = 7461;
	            this.opt_freeze();
	            this.state = 7462;
	            this.opt_verbose();
	            this.state = 7463;
	            this.opt_analyze();
	            this.state = 7464;
	            this.opt_vacuum_relation_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7466;
	            this.match(PostgreSQLParser.VACUUM);
	            this.state = 7467;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7468;
	            this.vac_analyze_option_list();
	            this.state = 7469;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 7470;
	            this.opt_vacuum_relation_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzestmt() {
	    let localctx = new AnalyzestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, PostgreSQLParser.RULE_analyzestmt);
	    try {
	        this.state = 7484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7474;
	            this.analyze_keyword();
	            this.state = 7475;
	            this.opt_verbose();
	            this.state = 7476;
	            this.opt_vacuum_relation_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7478;
	            this.analyze_keyword();
	            this.state = 7479;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7480;
	            this.vac_analyze_option_list();
	            this.state = 7481;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 7482;
	            this.opt_vacuum_relation_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vac_analyze_option_list() {
	    let localctx = new Vac_analyze_option_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, PostgreSQLParser.RULE_vac_analyze_option_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7486;
	        this.vac_analyze_option_elem();
	        this.state = 7491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 7487;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 7488;
	            this.vac_analyze_option_elem();
	            this.state = 7493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyze_keyword() {
	    let localctx = new Analyze_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, PostgreSQLParser.RULE_analyze_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7494;
	        _la = this._input.LA(1);
	        if(!(_la===31 || _la===32)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vac_analyze_option_elem() {
	    let localctx = new Vac_analyze_option_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, PostgreSQLParser.RULE_vac_analyze_option_elem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7496;
	        this.vac_analyze_option_name();
	        this.state = 7497;
	        this.vac_analyze_option_arg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vac_analyze_option_name() {
	    let localctx = new Vac_analyze_option_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, PostgreSQLParser.RULE_vac_analyze_option_name);
	    try {
	        this.state = 7501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7499;
	            this.nonreservedword();
	            break;
	        case 31:
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7500;
	            this.analyze_keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vac_analyze_option_arg() {
	    let localctx = new Vac_analyze_option_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, PostgreSQLParser.RULE_vac_analyze_option_arg);
	    try {
	        this.state = 7506;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 80:
	        case 92:
	        case 96:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7503;
	            this.opt_boolean_or_string();
	            break;
	        case 12:
	        case 13:
	        case 658:
	        case 660:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7504;
	            this.numericonly();
	            break;
	        case 3:
	        case 6:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_analyze() {
	    let localctx = new Opt_analyzeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, PostgreSQLParser.RULE_opt_analyze);
	    try {
	        this.state = 7510;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7508;
	            this.analyze_keyword();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_verbose() {
	    let localctx = new Opt_verboseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, PostgreSQLParser.RULE_opt_verbose);
	    try {
	        this.state = 7514;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7512;
	            this.match(PostgreSQLParser.VERBOSE);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 46:
	        case 53:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_full() {
	    let localctx = new Opt_fullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, PostgreSQLParser.RULE_opt_full);
	    try {
	        this.state = 7518;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7516;
	            this.match(PostgreSQLParser.FULL);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 46:
	        case 53:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 112:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_freeze() {
	    let localctx = new Opt_freezeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, PostgreSQLParser.RULE_opt_freeze);
	    try {
	        this.state = 7522;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7520;
	            this.match(PostgreSQLParser.FREEZE);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 46:
	        case 53:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_name_list() {
	    let localctx = new Opt_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, PostgreSQLParser.RULE_opt_name_list);
	    try {
	        this.state = 7529;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7524;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7525;
	            this.name_list();
	            this.state = 7526;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vacuum_relation() {
	    let localctx = new Vacuum_relationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, PostgreSQLParser.RULE_vacuum_relation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7531;
	        this.qualified_name();
	        this.state = 7532;
	        this.opt_name_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vacuum_relation_list() {
	    let localctx = new Vacuum_relation_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, PostgreSQLParser.RULE_vacuum_relation_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7534;
	        this.vacuum_relation();
	        this.state = 7539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 7535;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 7536;
	            this.vacuum_relation();
	            this.state = 7541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_vacuum_relation_list() {
	    let localctx = new Opt_vacuum_relation_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, PostgreSQLParser.RULE_opt_vacuum_relation_list);
	    try {
	        this.state = 7544;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7542;
	            this.vacuum_relation_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainstmt() {
	    let localctx = new ExplainstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, PostgreSQLParser.RULE_explainstmt);
	    try {
	        this.state = 7562;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,372,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7546;
	            this.match(PostgreSQLParser.EXPLAIN);
	            this.state = 7547;
	            this.explainablestmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7548;
	            this.match(PostgreSQLParser.EXPLAIN);
	            this.state = 7549;
	            this.analyze_keyword();
	            this.state = 7550;
	            this.opt_verbose();
	            this.state = 7551;
	            this.explainablestmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7553;
	            this.match(PostgreSQLParser.EXPLAIN);
	            this.state = 7554;
	            this.match(PostgreSQLParser.VERBOSE);
	            this.state = 7555;
	            this.explainablestmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7556;
	            this.match(PostgreSQLParser.EXPLAIN);
	            this.state = 7557;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7558;
	            this.explain_option_list();
	            this.state = 7559;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 7560;
	            this.explainablestmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainablestmt() {
	    let localctx = new ExplainablestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, PostgreSQLParser.RULE_explainablestmt);
	    try {
	        this.state = 7573;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,373,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7564;
	            this.selectstmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7565;
	            this.insertstmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7566;
	            this.updatestmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7567;
	            this.deletestmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7568;
	            this.declarecursorstmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7569;
	            this.createasstmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7570;
	            this.creatematviewstmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7571;
	            this.refreshmatviewstmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7572;
	            this.executestmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explain_option_list() {
	    let localctx = new Explain_option_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, PostgreSQLParser.RULE_explain_option_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7575;
	        this.explain_option_elem();
	        this.state = 7580;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 7576;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 7577;
	            this.explain_option_elem();
	            this.state = 7582;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explain_option_elem() {
	    let localctx = new Explain_option_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, PostgreSQLParser.RULE_explain_option_elem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7583;
	        this.explain_option_name();
	        this.state = 7584;
	        this.explain_option_arg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explain_option_name() {
	    let localctx = new Explain_option_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, PostgreSQLParser.RULE_explain_option_name);
	    try {
	        this.state = 7588;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7586;
	            this.nonreservedword();
	            break;
	        case 31:
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7587;
	            this.analyze_keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explain_option_arg() {
	    let localctx = new Explain_option_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, PostgreSQLParser.RULE_explain_option_arg);
	    try {
	        this.state = 7593;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 80:
	        case 92:
	        case 96:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7590;
	            this.opt_boolean_or_string();
	            break;
	        case 12:
	        case 13:
	        case 658:
	        case 660:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7591;
	            this.numericonly();
	            break;
	        case 3:
	        case 6:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preparestmt() {
	    let localctx = new PreparestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, PostgreSQLParser.RULE_preparestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7595;
	        this.match(PostgreSQLParser.PREPARE);
	        this.state = 7596;
	        this.name();
	        this.state = 7597;
	        this.prep_type_clause();
	        this.state = 7598;
	        this.match(PostgreSQLParser.AS);
	        this.state = 7599;
	        this.preparablestmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prep_type_clause() {
	    let localctx = new Prep_type_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, PostgreSQLParser.RULE_prep_type_clause);
	    try {
	        this.state = 7606;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7601;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7602;
	            this.type_list();
	            this.state = 7603;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preparablestmt() {
	    let localctx = new PreparablestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, PostgreSQLParser.RULE_preparablestmt);
	    try {
	        this.state = 7612;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7608;
	            this.selectstmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7609;
	            this.insertstmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7610;
	            this.updatestmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7611;
	            this.deletestmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executestmt() {
	    let localctx = new ExecutestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, PostgreSQLParser.RULE_executestmt);
	    try {
	        this.state = 7641;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,379,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7614;
	            this.match(PostgreSQLParser.EXECUTE);
	            this.state = 7615;
	            this.name();
	            this.state = 7616;
	            this.execute_param_clause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7618;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 7619;
	            this.opttemp();
	            this.state = 7620;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 7621;
	            this.create_as_target();
	            this.state = 7622;
	            this.match(PostgreSQLParser.AS);
	            this.state = 7623;
	            this.match(PostgreSQLParser.EXECUTE);
	            this.state = 7624;
	            this.name();
	            this.state = 7625;
	            this.execute_param_clause();
	            this.state = 7626;
	            this.opt_with_data();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7628;
	            this.match(PostgreSQLParser.CREATE);
	            this.state = 7629;
	            this.opttemp();
	            this.state = 7630;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 7631;
	            this.match(PostgreSQLParser.IF_P);
	            this.state = 7632;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 7633;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 7634;
	            this.create_as_target();
	            this.state = 7635;
	            this.match(PostgreSQLParser.AS);
	            this.state = 7636;
	            this.match(PostgreSQLParser.EXECUTE);
	            this.state = 7637;
	            this.name();
	            this.state = 7638;
	            this.execute_param_clause();
	            this.state = 7639;
	            this.opt_with_data();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execute_param_clause() {
	    let localctx = new Execute_param_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, PostgreSQLParser.RULE_execute_param_clause);
	    try {
	        this.state = 7648;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7643;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7644;
	            this.expr_list();
	            this.state = 7645;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deallocatestmt() {
	    let localctx = new DeallocatestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, PostgreSQLParser.RULE_deallocatestmt);
	    try {
	        this.state = 7660;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,381,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7650;
	            this.match(PostgreSQLParser.DEALLOCATE);
	            this.state = 7651;
	            this.name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7652;
	            this.match(PostgreSQLParser.DEALLOCATE);
	            this.state = 7653;
	            this.match(PostgreSQLParser.PREPARE);
	            this.state = 7654;
	            this.name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7655;
	            this.match(PostgreSQLParser.DEALLOCATE);
	            this.state = 7656;
	            this.match(PostgreSQLParser.ALL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7657;
	            this.match(PostgreSQLParser.DEALLOCATE);
	            this.state = 7658;
	            this.match(PostgreSQLParser.PREPARE);
	            this.state = 7659;
	            this.match(PostgreSQLParser.ALL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertstmt() {
	    let localctx = new InsertstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, PostgreSQLParser.RULE_insertstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7662;
	        this.opt_with_clause();
	        this.state = 7663;
	        this.match(PostgreSQLParser.INSERT);
	        this.state = 7664;
	        this.match(PostgreSQLParser.INTO);
	        this.state = 7665;
	        this.insert_target();
	        this.state = 7666;
	        this.insert_rest();
	        this.state = 7667;
	        this.opt_on_conflict();
	        this.state = 7668;
	        this.returning_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_target() {
	    let localctx = new Insert_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, PostgreSQLParser.RULE_insert_target);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7670;
	        this.qualified_name();
	        this.state = 7673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 7671;
	            this.match(PostgreSQLParser.AS);
	            this.state = 7672;
	            this.colid();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_rest() {
	    let localctx = new Insert_restContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, PostgreSQLParser.RULE_insert_rest);
	    var _la = 0;
	    try {
	        this.state = 7694;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,384,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7675;
	            this.selectstmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7676;
	            this.match(PostgreSQLParser.OVERRIDING);
	            this.state = 7677;
	            this.override_kind();
	            this.state = 7678;
	            this.match(PostgreSQLParser.VALUE_P);
	            this.state = 7679;
	            this.selectstmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7681;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7682;
	            this.insert_column_list();
	            this.state = 7683;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 7688;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===463) {
	                this.state = 7684;
	                this.match(PostgreSQLParser.OVERRIDING);
	                this.state = 7685;
	                this.override_kind();
	                this.state = 7686;
	                this.match(PostgreSQLParser.VALUE_P);
	            }

	            this.state = 7690;
	            this.selectstmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7692;
	            this.match(PostgreSQLParser.DEFAULT);
	            this.state = 7693;
	            this.match(PostgreSQLParser.VALUES);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	override_kind() {
	    let localctx = new Override_kindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, PostgreSQLParser.RULE_override_kind);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7696;
	        _la = this._input.LA(1);
	        if(!(_la===99 || _la===342)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_column_list() {
	    let localctx = new Insert_column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, PostgreSQLParser.RULE_insert_column_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7698;
	        this.insert_column_item();
	        this.state = 7703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 7699;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 7700;
	            this.insert_column_item();
	            this.state = 7705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_column_item() {
	    let localctx = new Insert_column_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, PostgreSQLParser.RULE_insert_column_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7706;
	        this.colid();
	        this.state = 7707;
	        this.opt_indirection();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_on_conflict() {
	    let localctx = new Opt_on_conflictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, PostgreSQLParser.RULE_opt_on_conflict);
	    try {
	        this.state = 7722;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7709;
	            this.match(PostgreSQLParser.ON);
	            this.state = 7710;
	            this.match(PostgreSQLParser.CONFLICT);
	            this.state = 7711;
	            this.opt_conf_expr();
	            this.state = 7712;
	            this.match(PostgreSQLParser.DO);
	            this.state = 7719;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 362:
	                this.state = 7713;
	                this.match(PostgreSQLParser.UPDATE);
	                this.state = 7714;
	                this.match(PostgreSQLParser.SET);
	                this.state = 7715;
	                this.set_clause_list();
	                this.state = 7716;
	                this.where_clause();
	                break;
	            case 263:
	                this.state = 7718;
	                this.match(PostgreSQLParser.NOTHING);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 87:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_conf_expr() {
	    let localctx = new Opt_conf_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, PostgreSQLParser.RULE_opt_conf_expr);
	    try {
	        this.state = 7733;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7724;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7725;
	            this.index_params();
	            this.state = 7726;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 7727;
	            this.where_clause();
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7729;
	            this.match(PostgreSQLParser.ON);
	            this.state = 7730;
	            this.match(PostgreSQLParser.CONSTRAINT);
	            this.state = 7731;
	            this.name();
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returning_clause() {
	    let localctx = new Returning_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, PostgreSQLParser.RULE_returning_clause);
	    try {
	        this.state = 7738;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 87:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7735;
	            this.match(PostgreSQLParser.RETURNING);
	            this.state = 7736;
	            this.target_list();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergestmt() {
	    let localctx = new MergestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, PostgreSQLParser.RULE_mergestmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7740;
	        this.match(PostgreSQLParser.MERGE);
	        this.state = 7742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71) {
	            this.state = 7741;
	            this.match(PostgreSQLParser.INTO);
	        }

	        this.state = 7744;
	        this.qualified_name();
	        this.state = 7746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 286264333) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 2298478593) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 4294967269) !== 0) || ((((_la - 156)) & ~0x1f) === 0 && ((1 << (_la - 156)) & 4294967295) !== 0) || ((((_la - 188)) & ~0x1f) === 0 && ((1 << (_la - 188)) & 4294967295) !== 0) || ((((_la - 220)) & ~0x1f) === 0 && ((1 << (_la - 220)) & 3221225471) !== 0) || ((((_la - 252)) & ~0x1f) === 0 && ((1 << (_la - 252)) & 4294967293) !== 0) || ((((_la - 284)) & ~0x1f) === 0 && ((1 << (_la - 284)) & 4294967295) !== 0) || ((((_la - 316)) & ~0x1f) === 0 && ((1 << (_la - 316)) & 4294967295) !== 0) || ((((_la - 348)) & ~0x1f) === 0 && ((1 << (_la - 348)) & 4294967295) !== 0) || ((((_la - 380)) & ~0x1f) === 0 && ((1 << (_la - 380)) & 4294967295) !== 0) || ((((_la - 412)) & ~0x1f) === 0 && ((1 << (_la - 412)) & 4294967295) !== 0) || ((((_la - 444)) & ~0x1f) === 0 && ((1 << (_la - 444)) & 4026530815) !== 0) || ((((_la - 476)) & ~0x1f) === 0 && ((1 << (_la - 476)) & 3623878655) !== 0) || ((((_la - 508)) & ~0x1f) === 0 && ((1 << (_la - 508)) & 4294965247) !== 0) || ((((_la - 540)) & ~0x1f) === 0 && ((1 << (_la - 540)) & 4294967295) !== 0) || ((((_la - 572)) & ~0x1f) === 0 && ((1 << (_la - 572)) & 4294967295) !== 0) || ((((_la - 604)) & ~0x1f) === 0 && ((1 << (_la - 604)) & 4294967295) !== 0) || ((((_la - 636)) & ~0x1f) === 0 && ((1 << (_la - 636)) & 100663331) !== 0)) {
	            this.state = 7745;
	            this.alias_clause();
	        }

	        this.state = 7748;
	        this.match(PostgreSQLParser.USING);
	        this.state = 7751;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.state = 7749;
	            this.select_with_parens();
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.state = 7750;
	            this.qualified_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 7754;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 286264333) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 2298478593) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 4294967269) !== 0) || ((((_la - 156)) & ~0x1f) === 0 && ((1 << (_la - 156)) & 4294967295) !== 0) || ((((_la - 188)) & ~0x1f) === 0 && ((1 << (_la - 188)) & 4294967295) !== 0) || ((((_la - 220)) & ~0x1f) === 0 && ((1 << (_la - 220)) & 3221225471) !== 0) || ((((_la - 252)) & ~0x1f) === 0 && ((1 << (_la - 252)) & 4294967293) !== 0) || ((((_la - 284)) & ~0x1f) === 0 && ((1 << (_la - 284)) & 4294967295) !== 0) || ((((_la - 316)) & ~0x1f) === 0 && ((1 << (_la - 316)) & 4294967295) !== 0) || ((((_la - 348)) & ~0x1f) === 0 && ((1 << (_la - 348)) & 4294967295) !== 0) || ((((_la - 380)) & ~0x1f) === 0 && ((1 << (_la - 380)) & 4294967295) !== 0) || ((((_la - 412)) & ~0x1f) === 0 && ((1 << (_la - 412)) & 4294967295) !== 0) || ((((_la - 444)) & ~0x1f) === 0 && ((1 << (_la - 444)) & 4026530815) !== 0) || ((((_la - 476)) & ~0x1f) === 0 && ((1 << (_la - 476)) & 3623878655) !== 0) || ((((_la - 508)) & ~0x1f) === 0 && ((1 << (_la - 508)) & 4294965247) !== 0) || ((((_la - 540)) & ~0x1f) === 0 && ((1 << (_la - 540)) & 4294967295) !== 0) || ((((_la - 572)) & ~0x1f) === 0 && ((1 << (_la - 572)) & 4294967295) !== 0) || ((((_la - 604)) & ~0x1f) === 0 && ((1 << (_la - 604)) & 4294967295) !== 0) || ((((_la - 636)) & ~0x1f) === 0 && ((1 << (_la - 636)) & 100663331) !== 0)) {
	            this.state = 7753;
	            this.alias_clause();
	        }

	        this.state = 7756;
	        this.match(PostgreSQLParser.ON);
	        this.state = 7757;
	        this.a_expr();
	        this.state = 7766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,396,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7758;
	            this.merge_insert_clause();
	            this.state = 7760;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
	            if(la_===1) {
	                this.state = 7759;
	                this.merge_update_clause();

	            }
	            break;

	        case 2:
	            this.state = 7762;
	            this.merge_update_clause();
	            this.state = 7764;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
	            if(la_===1) {
	                this.state = 7763;
	                this.merge_insert_clause();

	            }
	            break;

	        }
	        this.state = 7769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 7768;
	            this.merge_delete_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_insert_clause() {
	    let localctx = new Merge_insert_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, PostgreSQLParser.RULE_merge_insert_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7771;
	        this.match(PostgreSQLParser.WHEN);
	        this.state = 7772;
	        this.match(PostgreSQLParser.NOT);
	        this.state = 7773;
	        this.match(PostgreSQLParser.MATCHED);
	        this.state = 7776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===33) {
	            this.state = 7774;
	            this.match(PostgreSQLParser.AND);
	            this.state = 7775;
	            this.a_expr();
	        }

	        this.state = 7779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 7778;
	            this.match(PostgreSQLParser.THEN);
	        }

	        this.state = 7781;
	        this.match(PostgreSQLParser.INSERT);
	        this.state = 7786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 7782;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7783;
	            this.insert_column_list();
	            this.state = 7784;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	        }

	        this.state = 7788;
	        this.values_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_update_clause() {
	    let localctx = new Merge_update_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, PostgreSQLParser.RULE_merge_update_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7790;
	        this.match(PostgreSQLParser.WHEN);
	        this.state = 7791;
	        this.match(PostgreSQLParser.MATCHED);
	        this.state = 7794;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===33) {
	            this.state = 7792;
	            this.match(PostgreSQLParser.AND);
	            this.state = 7793;
	            this.a_expr();
	        }

	        this.state = 7797;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 7796;
	            this.match(PostgreSQLParser.THEN);
	        }

	        this.state = 7799;
	        this.match(PostgreSQLParser.UPDATE);
	        this.state = 7800;
	        this.match(PostgreSQLParser.SET);
	        this.state = 7801;
	        this.set_clause_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_delete_clause() {
	    let localctx = new Merge_delete_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, PostgreSQLParser.RULE_merge_delete_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7803;
	        this.match(PostgreSQLParser.WHEN);
	        this.state = 7804;
	        this.match(PostgreSQLParser.MATCHED);
	        this.state = 7806;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 7805;
	            this.match(PostgreSQLParser.THEN);
	        }

	        this.state = 7808;
	        this.match(PostgreSQLParser.DELETE_P);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deletestmt() {
	    let localctx = new DeletestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, PostgreSQLParser.RULE_deletestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7810;
	        this.opt_with_clause();
	        this.state = 7811;
	        this.match(PostgreSQLParser.DELETE_P);
	        this.state = 7812;
	        this.match(PostgreSQLParser.FROM);
	        this.state = 7813;
	        this.relation_expr_opt_alias();
	        this.state = 7814;
	        this.using_clause();
	        this.state = 7815;
	        this.where_or_current_clause();
	        this.state = 7816;
	        this.returning_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	using_clause() {
	    let localctx = new Using_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, PostgreSQLParser.RULE_using_clause);
	    try {
	        this.state = 7821;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7818;
	            this.match(PostgreSQLParser.USING);
	            this.state = 7819;
	            this.from_list();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 87:
	        case 88:
	        case 92:
	        case 103:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockstmt() {
	    let localctx = new LockstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, PostgreSQLParser.RULE_lockstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7823;
	        this.match(PostgreSQLParser.LOCK_P);
	        this.state = 7824;
	        this.opt_table();
	        this.state = 7825;
	        this.relation_expr_list();
	        this.state = 7826;
	        this.opt_lock();
	        this.state = 7827;
	        this.opt_nowait();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_lock() {
	    let localctx = new Opt_lockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, PostgreSQLParser.RULE_opt_lock);
	    try {
	        this.state = 7834;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7829;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 7830;
	            this.lock_type();
	            this.state = 7831;
	            this.match(PostgreSQLParser.MODE);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 265:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lock_type() {
	    let localctx = new Lock_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, PostgreSQLParser.RULE_lock_type);
	    var _la = 0;
	    try {
	        this.state = 7848;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 131:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7836;
	            this.match(PostgreSQLParser.ACCESS);
	            this.state = 7837;
	            _la = this._input.LA(1);
	            if(!(_la===201 || _la===327)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 407:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7838;
	            this.match(PostgreSQLParser.ROW);
	            this.state = 7839;
	            _la = this._input.LA(1);
	            if(!(_la===201 || _la===327)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7840;
	            this.match(PostgreSQLParser.SHARE);
	            this.state = 7845;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 362:
	            	this.state = 7841;
	            	this.match(PostgreSQLParser.UPDATE);
	            	this.state = 7842;
	            	this.match(PostgreSQLParser.EXCLUSIVE);
	            	break;
	            case 407:
	            	this.state = 7843;
	            	this.match(PostgreSQLParser.ROW);
	            	this.state = 7844;
	            	this.match(PostgreSQLParser.EXCLUSIVE);
	            	break;
	            case 256:
	            	break;
	            default:
	            	break;
	            }
	            break;
	        case 201:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7847;
	            this.match(PostgreSQLParser.EXCLUSIVE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_nowait() {
	    let localctx = new Opt_nowaitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, PostgreSQLParser.RULE_opt_nowait);
	    try {
	        this.state = 7852;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 265:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7850;
	            this.match(PostgreSQLParser.NOWAIT);
	            break;
	        case -1:
	        case 2:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_nowait_or_skip() {
	    let localctx = new Opt_nowait_or_skipContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, PostgreSQLParser.RULE_opt_nowait_or_skip);
	    try {
	        this.state = 7858;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 265:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7854;
	            this.match(PostgreSQLParser.NOWAIT);
	            break;
	        case 465:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7855;
	            this.match(PostgreSQLParser.SKIP_P);
	            this.state = 7856;
	            this.match(PostgreSQLParser.LOCKED);
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 62:
	        case 65:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 87:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updatestmt() {
	    let localctx = new UpdatestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, PostgreSQLParser.RULE_updatestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7860;
	        this.opt_with_clause();
	        this.state = 7861;
	        this.match(PostgreSQLParser.UPDATE);
	        this.state = 7862;
	        this.relation_expr_opt_alias();
	        this.state = 7863;
	        this.match(PostgreSQLParser.SET);
	        this.state = 7864;
	        this.set_clause_list();
	        this.state = 7865;
	        this.from_clause();
	        this.state = 7866;
	        this.where_or_current_clause();
	        this.state = 7867;
	        this.returning_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_clause_list() {
	    let localctx = new Set_clause_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, PostgreSQLParser.RULE_set_clause_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7869;
	        this.set_clause();
	        this.state = 7874;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 7870;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 7871;
	            this.set_clause();
	            this.state = 7876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_clause() {
	    let localctx = new Set_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, PostgreSQLParser.RULE_set_clause);
	    try {
	        this.state = 7887;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7877;
	            this.set_target();
	            this.state = 7878;
	            this.match(PostgreSQLParser.EQUAL);
	            this.state = 7879;
	            this.a_expr();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7881;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7882;
	            this.set_target_list();
	            this.state = 7883;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 7884;
	            this.match(PostgreSQLParser.EQUAL);
	            this.state = 7885;
	            this.a_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_target() {
	    let localctx = new Set_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, PostgreSQLParser.RULE_set_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7889;
	        this.colid();
	        this.state = 7890;
	        this.opt_indirection();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_target_list() {
	    let localctx = new Set_target_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, PostgreSQLParser.RULE_set_target_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7892;
	        this.set_target();
	        this.state = 7897;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 7893;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 7894;
	            this.set_target();
	            this.state = 7899;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarecursorstmt() {
	    let localctx = new DeclarecursorstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, PostgreSQLParser.RULE_declarecursorstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7900;
	        this.match(PostgreSQLParser.DECLARE);
	        this.state = 7901;
	        this.cursor_name();
	        this.state = 7902;
	        this.cursor_options();
	        this.state = 7903;
	        this.match(PostgreSQLParser.CURSOR);
	        this.state = 7904;
	        this.opt_hold();
	        this.state = 7905;
	        this.match(PostgreSQLParser.FOR);
	        this.state = 7906;
	        this.selectstmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursor_name() {
	    let localctx = new Cursor_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, PostgreSQLParser.RULE_cursor_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7908;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursor_options() {
	    let localctx = new Cursor_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, PostgreSQLParser.RULE_cursor_options);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===107 || _la===231 || _la===262 || _la===317) {
	            this.state = 7915;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 262:
	                this.state = 7910;
	                this.match(PostgreSQLParser.NO);
	                this.state = 7911;
	                this.match(PostgreSQLParser.SCROLL);
	                break;
	            case 317:
	                this.state = 7912;
	                this.match(PostgreSQLParser.SCROLL);
	                break;
	            case 107:
	                this.state = 7913;
	                this.match(PostgreSQLParser.BINARY);
	                break;
	            case 231:
	                this.state = 7914;
	                this.match(PostgreSQLParser.INSENSITIVE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_hold() {
	    let localctx = new Opt_holdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, PostgreSQLParser.RULE_opt_hold);
	    try {
	        this.state = 7925;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7921;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 7922;
	            this.match(PostgreSQLParser.HOLD);
	            break;
	        case 372:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7923;
	            this.match(PostgreSQLParser.WITHOUT);
	            this.state = 7924;
	            this.match(PostgreSQLParser.HOLD);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectstmt() {
	    let localctx = new SelectstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, PostgreSQLParser.RULE_selectstmt);
	    try {
	        this.state = 7929;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7927;
	            this.select_no_parens();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7928;
	            this.select_with_parens();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_with_parens() {
	    let localctx = new Select_with_parensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, PostgreSQLParser.RULE_select_with_parens);
	    try {
	        this.state = 7939;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,417,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7931;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7932;
	            this.select_no_parens();
	            this.state = 7933;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7935;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 7936;
	            this.select_with_parens();
	            this.state = 7937;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_no_parens() {
	    let localctx = new Select_no_parensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, PostgreSQLParser.RULE_select_no_parens);
	    try {
	        this.state = 7962;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 88:
	        case 92:
	        case 415:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7941;
	            this.select_clause();
	            this.state = 7942;
	            this.opt_sort_clause();
	            this.state = 7949;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,418,this._ctx);
	            if(la_===1) {
	                this.state = 7943;
	                this.for_locking_clause();
	                this.state = 7944;
	                this.opt_select_limit();

	            } else if(la_===2) {
	                this.state = 7946;
	                this.select_limit();
	                this.state = 7947;
	                this.opt_for_locking_clause();

	            }
	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7951;
	            this.with_clause();
	            this.state = 7952;
	            this.select_clause();
	            this.state = 7953;
	            this.opt_sort_clause();
	            this.state = 7960;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
	            if(la_===1) {
	                this.state = 7954;
	                this.for_locking_clause();
	                this.state = 7955;
	                this.opt_select_limit();

	            } else if(la_===2) {
	                this.state = 7957;
	                this.select_limit();
	                this.state = 7958;
	                this.opt_for_locking_clause();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_clause() {
	    let localctx = new Select_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, PostgreSQLParser.RULE_select_clause);
	    try {
	        this.state = 7966;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,421,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7964;
	            this.simple_select();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7965;
	            this.select_with_parens();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_select() {
	    let localctx = new Simple_selectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, PostgreSQLParser.RULE_simple_select);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7994;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 88:
	            this.state = 7968;
	            this.match(PostgreSQLParser.SELECT);
	            this.state = 7976;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case -1:
	            case 2:
	            case 3:
	            case 7:
	            case 9:
	            case 12:
	            case 13:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 35:
	            case 40:
	            case 41:
	            case 43:
	            case 44:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 70:
	            case 71:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 83:
	            case 87:
	            case 88:
	            case 89:
	            case 92:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 386:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 433:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 504:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 522:
	            case 523:
	            case 524:
	            case 525:
	            case 526:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 545:
	            case 546:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 559:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 590:
	            case 591:
	            case 592:
	            case 593:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 607:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 637:
	            case 641:
	            case 645:
	            case 647:
	            case 649:
	            case 650:
	            case 654:
	            case 658:
	            case 660:
	            case 661:
	            case 662:
	            case 668:
	            case 671:
	                this.state = 7969;
	                this.opt_all_clause();
	                this.state = 7970;
	                this.into_clause();
	                this.state = 7971;
	                this.opt_target_list();
	                break;
	            case 56:
	                this.state = 7973;
	                this.distinct_clause();
	                this.state = 7974;
	                this.target_list();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7978;
	            this.into_clause();
	            this.state = 7979;
	            this.from_clause();
	            this.state = 7980;
	            this.where_clause();
	            this.state = 7981;
	            this.group_clause();
	            this.state = 7982;
	            this.having_clause();
	            this.state = 7983;
	            this.window_clause();
	            break;
	        case 415:
	            this.state = 7985;
	            this.values_clause();
	            break;
	        case 92:
	            this.state = 7986;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 7987;
	            this.relation_expr();
	            break;
	        case 2:
	            this.state = 7988;
	            this.select_with_parens();
	            this.state = 7989;
	            this.set_operator_with_all_or_distinct();
	            this.state = 7992;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,423,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7990;
	                this.simple_select();
	                break;

	            case 2:
	                this.state = 7991;
	                this.select_with_parens();
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 8003;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,426,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7996;
	                this.set_operator_with_all_or_distinct();
	                this.state = 7999;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,425,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 7997;
	                    this.simple_select();
	                    break;

	                case 2:
	                    this.state = 7998;
	                    this.select_with_parens();
	                    break;

	                } 
	            }
	            this.state = 8005;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,426,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_operator() {
	    let localctx = new Set_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, PostgreSQLParser.RULE_set_operator);
	    try {
	        this.state = 8009;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 97:
	            localctx = new UnionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8006;
	            this.match(PostgreSQLParser.UNION);
	            break;
	        case 70:
	            localctx = new IntersectContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8007;
	            this.match(PostgreSQLParser.INTERSECT);
	            break;
	        case 59:
	            localctx = new ExceptContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8008;
	            this.match(PostgreSQLParser.EXCEPT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_operator_with_all_or_distinct() {
	    let localctx = new Set_operator_with_all_or_distinctContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, PostgreSQLParser.RULE_set_operator_with_all_or_distinct);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8011;
	        this.set_operator();
	        this.state = 8012;
	        this.all_or_distinct();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_clause() {
	    let localctx = new With_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, PostgreSQLParser.RULE_with_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8014;
	        this.match(PostgreSQLParser.WITH);
	        this.state = 8016;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,428,this._ctx);
	        if(la_===1) {
	            this.state = 8015;
	            this.match(PostgreSQLParser.RECURSIVE);

	        }
	        this.state = 8018;
	        this.cte_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cte_list() {
	    let localctx = new Cte_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, PostgreSQLParser.RULE_cte_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8020;
	        this.common_table_expr();
	        this.state = 8025;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 8021;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 8022;
	            this.common_table_expr();
	            this.state = 8027;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_table_expr() {
	    let localctx = new Common_table_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, PostgreSQLParser.RULE_common_table_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8028;
	        this.name();
	        this.state = 8029;
	        this.opt_name_list();
	        this.state = 8030;
	        this.match(PostgreSQLParser.AS);
	        this.state = 8031;
	        this.opt_materialized();
	        this.state = 8032;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 8033;
	        this.preparablestmt();
	        this.state = 8034;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_materialized() {
	    let localctx = new Opt_materializedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, PostgreSQLParser.RULE_opt_materialized);
	    try {
	        this.state = 8040;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 251:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8036;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8037;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 8038;
	            this.match(PostgreSQLParser.MATERIALIZED);
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_with_clause() {
	    let localctx = new Opt_with_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, PostgreSQLParser.RULE_opt_with_clause);
	    try {
	        this.state = 8044;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8042;
	            this.with_clause();
	            break;
	        case 182:
	        case 232:
	        case 362:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	into_clause() {
	    let localctx = new Into_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, PostgreSQLParser.RULE_into_clause);
	    try {
	        this.state = 8054;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8046;
	            this.match(PostgreSQLParser.INTO);
	            this.state = 8051;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,432,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8047;
	                this.opt_strict();
	                this.state = 8048;
	                this.opttempTableName();
	                break;

	            case 2:
	                this.state = 8050;
	                this.into_target();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_strict() {
	    let localctx = new Opt_strictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, PostgreSQLParser.RULE_opt_strict);
	    try {
	        this.state = 8058;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,434,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8057;
	            this.match(PostgreSQLParser.STRICT_P);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opttempTableName() {
	    let localctx = new OpttempTableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, PostgreSQLParser.RULE_opttempTableName);
	    var _la = 0;
	    try {
	        this.state = 8074;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,436,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8061;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===213 || _la===245) {
	                this.state = 8060;
	                _la = this._input.LA(1);
	                if(!(_la===213 || _la===245)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 8063;
	            _la = this._input.LA(1);
	            if(!(_la===345 || _la===347)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8064;
	            this.opt_table();
	            this.state = 8065;
	            this.qualified_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8067;
	            this.match(PostgreSQLParser.UNLOGGED);
	            this.state = 8068;
	            this.opt_table();
	            this.state = 8069;
	            this.qualified_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8071;
	            this.match(PostgreSQLParser.TABLE);
	            this.state = 8072;
	            this.qualified_name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8073;
	            this.qualified_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_table() {
	    let localctx = new Opt_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, PostgreSQLParser.RULE_opt_table);
	    try {
	        this.state = 8078;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,437,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8076;
	            this.match(PostgreSQLParser.TABLE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all_or_distinct() {
	    let localctx = new All_or_distinctContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, PostgreSQLParser.RULE_all_or_distinct);
	    try {
	        this.state = 8083;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8080;
	            this.match(PostgreSQLParser.ALL);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8081;
	            this.match(PostgreSQLParser.DISTINCT);
	            break;
	        case 2:
	        case 88:
	        case 92:
	        case 415:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distinct_clause() {
	    let localctx = new Distinct_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, PostgreSQLParser.RULE_distinct_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8085;
	        this.match(PostgreSQLParser.DISTINCT);
	        this.state = 8091;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80) {
	            this.state = 8086;
	            this.match(PostgreSQLParser.ON);
	            this.state = 8087;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8088;
	            this.expr_list();
	            this.state = 8089;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_all_clause() {
	    let localctx = new Opt_all_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, PostgreSQLParser.RULE_opt_all_clause);
	    try {
	        this.state = 8095;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8093;
	            this.match(PostgreSQLParser.ALL);
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 7:
	        case 9:
	        case 12:
	        case 13:
	        case 28:
	        case 29:
	        case 31:
	        case 32:
	        case 33:
	        case 35:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 70:
	        case 71:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 83:
	        case 87:
	        case 88:
	        case 89:
	        case 92:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 650:
	        case 654:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 668:
	        case 671:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_sort_clause() {
	    let localctx = new Opt_sort_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, PostgreSQLParser.RULE_opt_sort_clause);
	    try {
	        this.state = 8099;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8097;
	            this.sort_clause();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 62:
	        case 65:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 87:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 292:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 313:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 481:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sort_clause() {
	    let localctx = new Sort_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, PostgreSQLParser.RULE_sort_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8101;
	        this.match(PostgreSQLParser.ORDER);
	        this.state = 8102;
	        this.match(PostgreSQLParser.BY);
	        this.state = 8103;
	        this.sortby_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortby_list() {
	    let localctx = new Sortby_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, PostgreSQLParser.RULE_sortby_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8105;
	        this.sortby();
	        this.state = 8110;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 8106;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 8107;
	            this.sortby();
	            this.state = 8112;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortby() {
	    let localctx = new SortbyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, PostgreSQLParser.RULE_sortby);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8113;
	        this.a_expr();
	        this.state = 8117;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            this.state = 8114;
	            this.match(PostgreSQLParser.USING);
	            this.state = 8115;
	            this.qual_all_op();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 37:
	        case 46:
	        case 55:
	        case 57:
	        case 61:
	        case 62:
	        case 65:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 87:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 266:
	        case 283:
	        case 292:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 313:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 481:
	        case 519:
	        case 668:
	            this.state = 8116;
	            this.opt_asc_desc();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 8119;
	        this.opt_nulls_order();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_limit() {
	    let localctx = new Select_limitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, PostgreSQLParser.RULE_select_limit);
	    var _la = 0;
	    try {
	        this.state = 8129;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8121;
	            this.limit_clause();
	            this.state = 8123;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 8122;
	                this.offset_clause();
	            }

	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8125;
	            this.offset_clause();
	            this.state = 8127;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,445,this._ctx);
	            if(la_===1) {
	                this.state = 8126;
	                this.limit_clause();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_select_limit() {
	    let localctx = new Opt_select_limitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, PostgreSQLParser.RULE_opt_select_limit);
	    try {
	        this.state = 8133;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,447,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8131;
	            this.select_limit();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limit_clause() {
	    let localctx = new Limit_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, PostgreSQLParser.RULE_limit_clause);
	    var _la = 0;
	    try {
	        this.state = 8158;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8135;
	            this.match(PostgreSQLParser.LIMIT);
	            this.state = 8136;
	            this.select_limit_value();
	            this.state = 8139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6) {
	                this.state = 8137;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 8138;
	                this.select_offset_value();
	            }

	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8141;
	            this.match(PostgreSQLParser.FETCH);
	            this.state = 8142;
	            this.first_or_next();
	            this.state = 8156;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,451,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8143;
	                this.select_fetch_first_value();
	                this.state = 8144;
	                this.row_or_rows();
	                this.state = 8148;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 81:
	                    this.state = 8145;
	                    this.match(PostgreSQLParser.ONLY);
	                    break;
	                case 105:
	                    this.state = 8146;
	                    this.match(PostgreSQLParser.WITH);
	                    this.state = 8147;
	                    this.match(PostgreSQLParser.TIES);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 2:
	                this.state = 8150;
	                this.row_or_rows();
	                this.state = 8154;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 81:
	                    this.state = 8151;
	                    this.match(PostgreSQLParser.ONLY);
	                    break;
	                case 105:
	                    this.state = 8152;
	                    this.match(PostgreSQLParser.WITH);
	                    this.state = 8153;
	                    this.match(PostgreSQLParser.TIES);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offset_clause() {
	    let localctx = new Offset_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, PostgreSQLParser.RULE_offset_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8160;
	        this.match(PostgreSQLParser.OFFSET);
	        this.state = 8165;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,453,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8161;
	            this.select_offset_value();
	            break;

	        case 2:
	            this.state = 8162;
	            this.select_fetch_first_value();
	            this.state = 8163;
	            this.row_or_rows();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_limit_value() {
	    let localctx = new Select_limit_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, PostgreSQLParser.RULE_select_limit_value);
	    try {
	        this.state = 8169;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 12:
	        case 13:
	        case 28:
	        case 29:
	        case 33:
	        case 35:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 89:
	        case 92:
	        case 96:
	        case 98:
	        case 99:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 650:
	        case 654:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8167;
	            this.a_expr();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8168;
	            this.match(PostgreSQLParser.ALL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_offset_value() {
	    let localctx = new Select_offset_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, PostgreSQLParser.RULE_select_offset_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8171;
	        this.a_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_fetch_first_value() {
	    let localctx = new Select_fetch_first_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, PostgreSQLParser.RULE_select_fetch_first_value);
	    try {
	        this.state = 8178;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 28:
	        case 33:
	        case 35:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 75:
	        case 76:
	        case 78:
	        case 89:
	        case 92:
	        case 96:
	        case 98:
	        case 99:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 650:
	        case 654:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8173;
	            this.c_expr();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8174;
	            this.match(PostgreSQLParser.PLUS);
	            this.state = 8175;
	            this.i_or_f_const();
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8176;
	            this.match(PostgreSQLParser.MINUS);
	            this.state = 8177;
	            this.i_or_f_const();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	i_or_f_const() {
	    let localctx = new I_or_f_constContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, PostgreSQLParser.RULE_i_or_f_const);
	    try {
	        this.state = 8182;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 658:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8180;
	            this.iconst();
	            break;
	        case 660:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8181;
	            this.fconst();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_or_rows() {
	    let localctx = new Row_or_rowsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, PostgreSQLParser.RULE_row_or_rows);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8184;
	        _la = this._input.LA(1);
	        if(!(_la===313 || _la===407)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	first_or_next() {
	    let localctx = new First_or_nextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1024, PostgreSQLParser.RULE_first_or_next);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8186;
	        _la = this._input.LA(1);
	        if(!(_la===207 || _la===261)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_clause() {
	    let localctx = new Group_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, PostgreSQLParser.RULE_group_clause);
	    try {
	        this.state = 8192;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 66:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8188;
	            this.match(PostgreSQLParser.GROUP_P);
	            this.state = 8189;
	            this.match(PostgreSQLParser.BY);
	            this.state = 8190;
	            this.group_by_list();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 59:
	        case 61:
	        case 62:
	        case 65:
	        case 67:
	        case 70:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 83:
	        case 87:
	        case 88:
	        case 92:
	        case 93:
	        case 97:
	        case 100:
	        case 102:
	        case 104:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_by_list() {
	    let localctx = new Group_by_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1028, PostgreSQLParser.RULE_group_by_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8194;
	        this.group_by_item();
	        this.state = 8199;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,458,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8195;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 8196;
	                this.group_by_item(); 
	            }
	            this.state = 8201;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,458,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_by_item() {
	    let localctx = new Group_by_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1030, PostgreSQLParser.RULE_group_by_item);
	    try {
	        this.state = 8207;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,459,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8202;
	            this.a_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8203;
	            this.empty_grouping_set();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8204;
	            this.cube_clause();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8205;
	            this.rollup_clause();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8206;
	            this.grouping_sets_clause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	empty_grouping_set() {
	    let localctx = new Empty_grouping_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1032, PostgreSQLParser.RULE_empty_grouping_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8209;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 8210;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollup_clause() {
	    let localctx = new Rollup_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1034, PostgreSQLParser.RULE_rollup_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8212;
	        this.match(PostgreSQLParser.ROLLUP);
	        this.state = 8213;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 8214;
	        this.expr_list();
	        this.state = 8215;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cube_clause() {
	    let localctx = new Cube_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1036, PostgreSQLParser.RULE_cube_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8217;
	        this.match(PostgreSQLParser.CUBE);
	        this.state = 8218;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 8219;
	        this.expr_list();
	        this.state = 8220;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grouping_sets_clause() {
	    let localctx = new Grouping_sets_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1038, PostgreSQLParser.RULE_grouping_sets_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8222;
	        this.match(PostgreSQLParser.GROUPING);
	        this.state = 8223;
	        this.match(PostgreSQLParser.SETS);
	        this.state = 8224;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 8225;
	        this.group_by_list();
	        this.state = 8226;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	having_clause() {
	    let localctx = new Having_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1040, PostgreSQLParser.RULE_having_clause);
	    try {
	        this.state = 8231;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8228;
	            this.match(PostgreSQLParser.HAVING);
	            this.state = 8229;
	            this.a_expr();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 59:
	        case 61:
	        case 62:
	        case 65:
	        case 70:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 83:
	        case 87:
	        case 88:
	        case 92:
	        case 93:
	        case 97:
	        case 100:
	        case 102:
	        case 104:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_locking_clause() {
	    let localctx = new For_locking_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1042, PostgreSQLParser.RULE_for_locking_clause);
	    try {
	        this.state = 8237;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,461,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8233;
	            this.for_locking_items();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8234;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 8235;
	            this.match(PostgreSQLParser.READ);
	            this.state = 8236;
	            this.match(PostgreSQLParser.ONLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_for_locking_clause() {
	    let localctx = new Opt_for_locking_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1044, PostgreSQLParser.RULE_opt_for_locking_clause);
	    try {
	        this.state = 8241;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8239;
	            this.for_locking_clause();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 80:
	        case 87:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_locking_items() {
	    let localctx = new For_locking_itemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1046, PostgreSQLParser.RULE_for_locking_items);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8244; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 8243;
	            this.for_locking_item();
	            this.state = 8246; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===62);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_locking_item() {
	    let localctx = new For_locking_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1048, PostgreSQLParser.RULE_for_locking_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8248;
	        this.for_locking_strength();
	        this.state = 8249;
	        this.locked_rels_list();
	        this.state = 8250;
	        this.opt_nowait_or_skip();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_locking_strength() {
	    let localctx = new For_locking_strengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1050, PostgreSQLParser.RULE_for_locking_strength);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8252;
	        this.match(PostgreSQLParser.FOR);
	        this.state = 8262;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 262:
	        case 362:
	            this.state = 8255;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===262) {
	                this.state = 8253;
	                this.match(PostgreSQLParser.NO);
	                this.state = 8254;
	                this.match(PostgreSQLParser.KEY);
	            }

	            this.state = 8257;
	            this.match(PostgreSQLParser.UPDATE);
	            break;
	        case 236:
	        case 327:
	            this.state = 8259;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===236) {
	                this.state = 8258;
	                this.match(PostgreSQLParser.KEY);
	            }

	            this.state = 8261;
	            this.match(PostgreSQLParser.SHARE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	locked_rels_list() {
	    let localctx = new Locked_rels_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1052, PostgreSQLParser.RULE_locked_rels_list);
	    try {
	        this.state = 8267;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 268:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8264;
	            this.match(PostgreSQLParser.OF);
	            this.state = 8265;
	            this.qualified_name_list();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 62:
	        case 65:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 87:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 265:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 465:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_clause() {
	    let localctx = new Values_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1054, PostgreSQLParser.RULE_values_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8269;
	        this.match(PostgreSQLParser.VALUES);
	        this.state = 8270;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 8271;
	        this.expr_list();
	        this.state = 8272;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	        this.state = 8280;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 8273;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 8274;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8275;
	            this.expr_list();
	            this.state = 8276;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 8282;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	from_clause() {
	    let localctx = new From_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1056, PostgreSQLParser.RULE_from_clause);
	    try {
	        this.state = 8286;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8283;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 8284;
	            this.from_list();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 59:
	        case 61:
	        case 62:
	        case 65:
	        case 66:
	        case 67:
	        case 70:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 83:
	        case 87:
	        case 88:
	        case 92:
	        case 93:
	        case 97:
	        case 100:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	from_list() {
	    let localctx = new From_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1058, PostgreSQLParser.RULE_from_list);
	    try {
	        this.state = 8297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8288;
	            this.non_ansi_join();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8289;
	            this.table_ref();
	            this.state = 8294;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,470,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 8290;
	                    this.match(PostgreSQLParser.COMMA);
	                    this.state = 8291;
	                    this.table_ref(); 
	                }
	                this.state = 8296;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,470,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	non_ansi_join() {
	    let localctx = new Non_ansi_joinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1060, PostgreSQLParser.RULE_non_ansi_join);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8299;
	        this.table_ref();
	        this.state = 8302; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 8300;
	        		this.match(PostgreSQLParser.COMMA);
	        		this.state = 8301;
	        		this.table_ref();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 8304; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,472, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_ref() {
	    let localctx = new Table_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1062, PostgreSQLParser.RULE_table_ref);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8355;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,478,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8306;
	            this.relation_expr();
	            this.state = 8307;
	            this.opt_alias_clause();
	            this.state = 8309;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 8308;
	                this.tablesample_clause();
	            }

	            break;

	        case 2:
	            this.state = 8311;
	            this.func_table();
	            this.state = 8312;
	            this.func_alias_clause();
	            break;

	        case 3:
	            this.state = 8314;
	            this.xmltable();
	            this.state = 8315;
	            this.opt_alias_clause();
	            break;

	        case 4:
	            this.state = 8317;
	            this.select_with_parens();
	            this.state = 8318;
	            this.opt_alias_clause();
	            break;

	        case 5:
	            this.state = 8320;
	            this.match(PostgreSQLParser.LATERAL_P);
	            this.state = 8330;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,474,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8321;
	                this.xmltable();
	                this.state = 8322;
	                this.opt_alias_clause();
	                break;

	            case 2:
	                this.state = 8324;
	                this.func_table();
	                this.state = 8325;
	                this.func_alias_clause();
	                break;

	            case 3:
	                this.state = 8327;
	                this.select_with_parens();
	                this.state = 8328;
	                this.opt_alias_clause();
	                break;

	            }
	            break;

	        case 6:
	            this.state = 8332;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8333;
	            this.table_ref();
	            this.state = 8350;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 110:
	            	this.state = 8334;
	            	this.match(PostgreSQLParser.CROSS);
	            	this.state = 8335;
	            	this.match(PostgreSQLParser.JOIN);
	            	this.state = 8336;
	            	this.table_ref();
	            	break;
	            case 121:
	            	this.state = 8337;
	            	this.match(PostgreSQLParser.NATURAL);
	            	this.state = 8339;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(((((_la - 113)) & ~0x1f) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
	            	    this.state = 8338;
	            	    this.join_type();
	            	}

	            	this.state = 8341;
	            	this.match(PostgreSQLParser.JOIN);
	            	this.state = 8342;
	            	this.table_ref();
	            	break;
	            case 113:
	            case 115:
	            case 118:
	            case 119:
	            case 126:
	            	this.state = 8344;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(((((_la - 113)) & ~0x1f) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
	            	    this.state = 8343;
	            	    this.join_type();
	            	}

	            	this.state = 8346;
	            	this.match(PostgreSQLParser.JOIN);
	            	this.state = 8347;
	            	this.table_ref();
	            	this.state = 8348;
	            	this.join_qual();
	            	break;
	            case 3:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 8352;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 8353;
	            this.opt_alias_clause();
	            break;

	        }
	        this.state = 8375;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,482,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8373;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 110:
	                    this.state = 8357;
	                    this.match(PostgreSQLParser.CROSS);
	                    this.state = 8358;
	                    this.match(PostgreSQLParser.JOIN);
	                    this.state = 8359;
	                    this.table_ref();
	                    break;
	                case 121:
	                    this.state = 8360;
	                    this.match(PostgreSQLParser.NATURAL);
	                    this.state = 8362;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 113)) & ~0x1f) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
	                        this.state = 8361;
	                        this.join_type();
	                    }

	                    this.state = 8364;
	                    this.match(PostgreSQLParser.JOIN);
	                    this.state = 8365;
	                    this.table_ref();
	                    break;
	                case 113:
	                case 115:
	                case 118:
	                case 119:
	                case 126:
	                    this.state = 8367;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 113)) & ~0x1f) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
	                        this.state = 8366;
	                        this.join_type();
	                    }

	                    this.state = 8369;
	                    this.match(PostgreSQLParser.JOIN);
	                    this.state = 8370;
	                    this.table_ref();
	                    this.state = 8371;
	                    this.join_qual();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 8377;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,482,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias_clause() {
	    let localctx = new Alias_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1064, PostgreSQLParser.RULE_alias_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 8378;
	            this.match(PostgreSQLParser.AS);
	        }

	        this.state = 8381;
	        this.colid();
	        this.state = 8386;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        if(la_===1) {
	            this.state = 8382;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8383;
	            this.name_list();
	            this.state = 8384;
	            this.match(PostgreSQLParser.CLOSE_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_alias_clause() {
	    let localctx = new Opt_alias_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1066, PostgreSQLParser.RULE_opt_alias_clause);
	    try {
	        this.state = 8390;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,485,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8388;
	            this.table_alias_clause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_alias_clause() {
	    let localctx = new Table_alias_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1068, PostgreSQLParser.RULE_table_alias_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 8392;
	            this.match(PostgreSQLParser.AS);
	        }

	        this.state = 8395;
	        this.table_alias();
	        this.state = 8400;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,487,this._ctx);
	        if(la_===1) {
	            this.state = 8396;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8397;
	            this.name_list();
	            this.state = 8398;
	            this.match(PostgreSQLParser.CLOSE_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_alias_clause() {
	    let localctx = new Func_alias_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1070, PostgreSQLParser.RULE_func_alias_clause);
	    var _la = 0;
	    try {
	        this.state = 8415;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8402;
	            this.alias_clause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8408;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 36:
	                this.state = 8403;
	                this.match(PostgreSQLParser.AS);
	                this.state = 8405;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 286264325) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 2298478593) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 4294967269) !== 0) || ((((_la - 156)) & ~0x1f) === 0 && ((1 << (_la - 156)) & 4294967295) !== 0) || ((((_la - 188)) & ~0x1f) === 0 && ((1 << (_la - 188)) & 4294967295) !== 0) || ((((_la - 220)) & ~0x1f) === 0 && ((1 << (_la - 220)) & 3221225471) !== 0) || ((((_la - 252)) & ~0x1f) === 0 && ((1 << (_la - 252)) & 4294967293) !== 0) || ((((_la - 284)) & ~0x1f) === 0 && ((1 << (_la - 284)) & 4294967295) !== 0) || ((((_la - 316)) & ~0x1f) === 0 && ((1 << (_la - 316)) & 4294967295) !== 0) || ((((_la - 348)) & ~0x1f) === 0 && ((1 << (_la - 348)) & 4294967295) !== 0) || ((((_la - 380)) & ~0x1f) === 0 && ((1 << (_la - 380)) & 4294967295) !== 0) || ((((_la - 412)) & ~0x1f) === 0 && ((1 << (_la - 412)) & 4294967295) !== 0) || ((((_la - 444)) & ~0x1f) === 0 && ((1 << (_la - 444)) & 4026530815) !== 0) || ((((_la - 476)) & ~0x1f) === 0 && ((1 << (_la - 476)) & 3623878655) !== 0) || ((((_la - 508)) & ~0x1f) === 0 && ((1 << (_la - 508)) & 4294965247) !== 0) || ((((_la - 540)) & ~0x1f) === 0 && ((1 << (_la - 540)) & 4294967295) !== 0) || ((((_la - 572)) & ~0x1f) === 0 && ((1 << (_la - 572)) & 4294967295) !== 0) || ((((_la - 604)) & ~0x1f) === 0 && ((1 << (_la - 604)) & 4294967295) !== 0) || ((((_la - 636)) & ~0x1f) === 0 && ((1 << (_la - 636)) & 100663331) !== 0)) {
	                    this.state = 8404;
	                    this.colid();
	                }

	                break;
	            case 33:
	            case 35:
	            case 43:
	            case 44:
	            case 53:
	            case 57:
	            case 61:
	            case 92:
	            case 116:
	            case 119:
	            case 123:
	            case 124:
	            case 126:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 251:
	            case 252:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 386:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 433:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 453:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 504:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 520:
	            case 521:
	            case 522:
	            case 523:
	            case 524:
	            case 525:
	            case 526:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 545:
	            case 546:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 559:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 590:
	            case 591:
	            case 592:
	            case 593:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 607:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 637:
	            case 641:
	            case 661:
	            case 662:
	                this.state = 8407;
	                this.colid();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 8410;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8411;
	            this.tablefuncelementlist();
	            this.state = 8412;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_type() {
	    let localctx = new Join_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1072, PostgreSQLParser.RULE_join_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8417;
	        _la = this._input.LA(1);
	        if(!(((((_la - 113)) & ~0x1f) === 0 && ((1 << (_la - 113)) & 8261) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 8419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===123) {
	            this.state = 8418;
	            this.match(PostgreSQLParser.OUTER_P);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_qual() {
	    let localctx = new Join_qualContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1074, PostgreSQLParser.RULE_join_qual);
	    try {
	        this.state = 8428;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8421;
	            this.match(PostgreSQLParser.USING);
	            this.state = 8422;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8423;
	            this.name_list();
	            this.state = 8424;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8426;
	            this.match(PostgreSQLParser.ON);
	            this.state = 8427;
	            this.a_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relation_expr() {
	    let localctx = new Relation_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1076, PostgreSQLParser.RULE_relation_expr);
	    var _la = 0;
	    try {
	        this.state = 8442;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8430;
	            this.qualified_name();
	            this.state = 8432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===9) {
	                this.state = 8431;
	                this.match(PostgreSQLParser.STAR);
	            }

	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8434;
	            this.match(PostgreSQLParser.ONLY);
	            this.state = 8440;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 33:
	            case 35:
	            case 43:
	            case 44:
	            case 53:
	            case 57:
	            case 61:
	            case 92:
	            case 116:
	            case 119:
	            case 123:
	            case 124:
	            case 126:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 251:
	            case 252:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 386:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 433:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 453:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 504:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 520:
	            case 521:
	            case 522:
	            case 523:
	            case 524:
	            case 525:
	            case 526:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 545:
	            case 546:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 559:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 590:
	            case 591:
	            case 592:
	            case 593:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 607:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 637:
	            case 641:
	            case 661:
	            case 662:
	                this.state = 8435;
	                this.qualified_name();
	                break;
	            case 2:
	                this.state = 8436;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 8437;
	                this.qualified_name();
	                this.state = 8438;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relation_expr_list() {
	    let localctx = new Relation_expr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1078, PostgreSQLParser.RULE_relation_expr_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8444;
	        this.relation_expr();
	        this.state = 8449;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 8445;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 8446;
	            this.relation_expr();
	            this.state = 8451;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relation_expr_opt_alias() {
	    let localctx = new Relation_expr_opt_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1080, PostgreSQLParser.RULE_relation_expr_opt_alias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8452;
	        this.relation_expr();
	        this.state = 8457;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,498,this._ctx);
	        if(la_===1) {
	            this.state = 8454;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===36) {
	                this.state = 8453;
	                this.match(PostgreSQLParser.AS);
	            }

	            this.state = 8456;
	            this.colid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablesample_clause() {
	    let localctx = new Tablesample_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1082, PostgreSQLParser.RULE_tablesample_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8459;
	        this.match(PostgreSQLParser.TABLESAMPLE);
	        this.state = 8460;
	        this.func_name();
	        this.state = 8461;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 8462;
	        this.expr_list();
	        this.state = 8463;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	        this.state = 8464;
	        this.opt_repeatable_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_repeatable_clause() {
	    let localctx = new Opt_repeatable_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1084, PostgreSQLParser.RULE_opt_repeatable_clause);
	    try {
	        this.state = 8472;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 303:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8466;
	            this.match(PostgreSQLParser.REPEATABLE);
	            this.state = 8467;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8468;
	            this.a_expr();
	            this.state = 8469;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 59:
	        case 61:
	        case 62:
	        case 65:
	        case 66:
	        case 67:
	        case 70:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 83:
	        case 87:
	        case 88:
	        case 92:
	        case 93:
	        case 97:
	        case 100:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 110:
	        case 113:
	        case 115:
	        case 118:
	        case 119:
	        case 121:
	        case 126:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_table() {
	    let localctx = new Func_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1086, PostgreSQLParser.RULE_func_table);
	    try {
	        this.state = 8484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,500,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8474;
	            this.func_expr_windowless();
	            this.state = 8475;
	            this.opt_ordinality();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8477;
	            this.match(PostgreSQLParser.ROWS);
	            this.state = 8478;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 8479;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8480;
	            this.rowsfrom_list();
	            this.state = 8481;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 8482;
	            this.opt_ordinality();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowsfrom_item() {
	    let localctx = new Rowsfrom_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1088, PostgreSQLParser.RULE_rowsfrom_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8486;
	        this.func_expr_windowless();
	        this.state = 8487;
	        this.opt_col_def_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowsfrom_list() {
	    let localctx = new Rowsfrom_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1090, PostgreSQLParser.RULE_rowsfrom_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8489;
	        this.rowsfrom_item();
	        this.state = 8494;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 8490;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 8491;
	            this.rowsfrom_item();
	            this.state = 8496;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_col_def_list() {
	    let localctx = new Opt_col_def_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1092, PostgreSQLParser.RULE_opt_col_def_list);
	    try {
	        this.state = 8503;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 36:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8497;
	            this.match(PostgreSQLParser.AS);
	            this.state = 8498;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8499;
	            this.tablefuncelementlist();
	            this.state = 8500;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 3:
	        case 6:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_ordinality() {
	    let localctx = new Opt_ordinalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1094, PostgreSQLParser.RULE_opt_ordinality);
	    try {
	        this.state = 8508;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,503,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8505;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 8506;
	            this.match(PostgreSQLParser.ORDINALITY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where_clause() {
	    let localctx = new Where_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1096, PostgreSQLParser.RULE_where_clause);
	    try {
	        this.state = 8513;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8510;
	            this.match(PostgreSQLParser.WHERE);
	            this.state = 8511;
	            this.a_expr();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 59:
	        case 61:
	        case 62:
	        case 65:
	        case 66:
	        case 67:
	        case 70:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 83:
	        case 87:
	        case 88:
	        case 92:
	        case 93:
	        case 97:
	        case 100:
	        case 102:
	        case 104:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where_or_current_clause() {
	    let localctx = new Where_or_current_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1098, PostgreSQLParser.RULE_where_or_current_clause);
	    try {
	        this.state = 8523;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8515;
	            this.match(PostgreSQLParser.WHERE);
	            this.state = 8520;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,505,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8516;
	                this.match(PostgreSQLParser.CURRENT_P);
	                this.state = 8517;
	                this.match(PostgreSQLParser.OF);
	                this.state = 8518;
	                this.cursor_name();
	                break;

	            case 2:
	                this.state = 8519;
	                this.a_expr();
	                break;

	            }
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 61:
	        case 65:
	        case 71:
	        case 87:
	        case 88:
	        case 92:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opttablefuncelementlist() {
	    let localctx = new OpttablefuncelementlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1100, PostgreSQLParser.RULE_opttablefuncelementlist);
	    try {
	        this.state = 8527;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8525;
	            this.tablefuncelementlist();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablefuncelementlist() {
	    let localctx = new TablefuncelementlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1102, PostgreSQLParser.RULE_tablefuncelementlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8529;
	        this.tablefuncelement();
	        this.state = 8534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 8530;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 8531;
	            this.tablefuncelement();
	            this.state = 8536;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablefuncelement() {
	    let localctx = new TablefuncelementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1104, PostgreSQLParser.RULE_tablefuncelement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8537;
	        this.colid();
	        this.state = 8538;
	        this.typename();
	        this.state = 8539;
	        this.opt_collate_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xmltable() {
	    let localctx = new XmltableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1106, PostgreSQLParser.RULE_xmltable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8541;
	        this.match(PostgreSQLParser.XMLTABLE);
	        this.state = 8542;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 8558;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,509,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8543;
	            this.c_expr();
	            this.state = 8544;
	            this.xmlexists_argument();
	            this.state = 8545;
	            this.match(PostgreSQLParser.COLUMNS);
	            this.state = 8546;
	            this.xmltable_column_list();
	            break;

	        case 2:
	            this.state = 8548;
	            this.match(PostgreSQLParser.XMLNAMESPACES);
	            this.state = 8549;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8550;
	            this.xml_namespace_list();
	            this.state = 8551;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 8552;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 8553;
	            this.c_expr();
	            this.state = 8554;
	            this.xmlexists_argument();
	            this.state = 8555;
	            this.match(PostgreSQLParser.COLUMNS);
	            this.state = 8556;
	            this.xmltable_column_list();
	            break;

	        }
	        this.state = 8560;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xmltable_column_list() {
	    let localctx = new Xmltable_column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1108, PostgreSQLParser.RULE_xmltable_column_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8562;
	        this.xmltable_column_el();
	        this.state = 8567;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 8563;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 8564;
	            this.xmltable_column_el();
	            this.state = 8569;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xmltable_column_el() {
	    let localctx = new Xmltable_column_elContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1110, PostgreSQLParser.RULE_xmltable_column_el);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8570;
	        this.colid();
	        this.state = 8577;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.state = 8571;
	            this.typename();
	            this.state = 8573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 286264325) !== 0) || ((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 32771) !== 0) || ((((_la - 116)) & ~0x1f) === 0 && ((1 << (_la - 116)) & 268451969) !== 0) || ((((_la - 153)) & ~0x1f) === 0 && ((1 << (_la - 153)) & 540945) !== 0) || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 33554441) !== 0) || ((((_la - 240)) & ~0x1f) === 0 && ((1 << (_la - 240)) & 6553601) !== 0) || ((((_la - 272)) & ~0x1f) === 0 && ((1 << (_la - 272)) & 268451841) !== 0) || ((((_la - 306)) & ~0x1f) === 0 && ((1 << (_la - 306)) & 1051713) !== 0) || _la===353 || _la===433 || _la===434 || ((((_la - 477)) & ~0x1f) === 0 && ((1 << (_la - 477)) & 3825197057) !== 0) || ((((_la - 509)) & ~0x1f) === 0 && ((1 << (_la - 509)) & 3055) !== 0) || ((((_la - 636)) & ~0x1f) === 0 && ((1 << (_la - 636)) & 100663331) !== 0)) {
	                this.state = 8572;
	                this.xmltable_column_option_list();
	            }

	            break;
	        case 62:
	            this.state = 8575;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 8576;
	            this.match(PostgreSQLParser.ORDINALITY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xmltable_column_option_list() {
	    let localctx = new Xmltable_column_option_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1112, PostgreSQLParser.RULE_xmltable_column_option_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8580; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 8579;
	            this.xmltable_column_option_el();
	            this.state = 8582; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 286264325) !== 0) || ((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 32771) !== 0) || ((((_la - 116)) & ~0x1f) === 0 && ((1 << (_la - 116)) & 268451969) !== 0) || ((((_la - 153)) & ~0x1f) === 0 && ((1 << (_la - 153)) & 540945) !== 0) || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 33554441) !== 0) || ((((_la - 240)) & ~0x1f) === 0 && ((1 << (_la - 240)) & 6553601) !== 0) || ((((_la - 272)) & ~0x1f) === 0 && ((1 << (_la - 272)) & 268451841) !== 0) || ((((_la - 306)) & ~0x1f) === 0 && ((1 << (_la - 306)) & 1051713) !== 0) || _la===353 || _la===433 || _la===434 || ((((_la - 477)) & ~0x1f) === 0 && ((1 << (_la - 477)) & 3825197057) !== 0) || ((((_la - 509)) & ~0x1f) === 0 && ((1 << (_la - 509)) & 3055) !== 0) || ((((_la - 636)) & ~0x1f) === 0 && ((1 << (_la - 636)) & 100663331) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xmltable_column_option_el() {
	    let localctx = new Xmltable_column_option_elContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1114, PostgreSQLParser.RULE_xmltable_column_option_el);
	    try {
	        this.state = 8592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,514,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8584;
	            this.match(PostgreSQLParser.DEFAULT);
	            this.state = 8585;
	            this.a_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8586;
	            this.identifier();
	            this.state = 8587;
	            this.a_expr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8589;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 8590;
	            this.match(PostgreSQLParser.NULL_P);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8591;
	            this.match(PostgreSQLParser.NULL_P);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xml_namespace_list() {
	    let localctx = new Xml_namespace_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1116, PostgreSQLParser.RULE_xml_namespace_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8594;
	        this.xml_namespace_el();
	        this.state = 8599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 8595;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 8596;
	            this.xml_namespace_el();
	            this.state = 8601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xml_namespace_el() {
	    let localctx = new Xml_namespace_elContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1118, PostgreSQLParser.RULE_xml_namespace_el);
	    try {
	        this.state = 8608;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,516,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8602;
	            this.b_expr(0);
	            this.state = 8603;
	            this.match(PostgreSQLParser.AS);
	            this.state = 8604;
	            this.collabel();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8606;
	            this.match(PostgreSQLParser.DEFAULT);
	            this.state = 8607;
	            this.b_expr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typename() {
	    let localctx = new TypenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1120, PostgreSQLParser.RULE_typename);
	    var _la = 0;
	    try {
	        this.state = 8628;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,520,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===408) {
	                this.state = 8610;
	                this.match(PostgreSQLParser.SETOF);
	            }

	            this.state = 8613;
	            this.simpletypename();
	            this.state = 8622;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,519,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8614;
	                this.opt_array_bounds();
	                break;

	            case 2:
	                this.state = 8615;
	                this.match(PostgreSQLParser.ARRAY);
	                this.state = 8620;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,518,this._ctx);
	                if(la_===1) {
	                    this.state = 8616;
	                    this.match(PostgreSQLParser.OPEN_BRACKET);
	                    this.state = 8617;
	                    this.iconst();
	                    this.state = 8618;
	                    this.match(PostgreSQLParser.CLOSE_BRACKET);

	                }
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8624;
	            this.qualified_name();
	            this.state = 8625;
	            this.match(PostgreSQLParser.PERCENT);
	            this.state = 8626;
	            _la = this._input.LA(1);
	            if(!(_la===353 || _la===477)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_array_bounds() {
	    let localctx = new Opt_array_boundsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1122, PostgreSQLParser.RULE_opt_array_bounds);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8637;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,522,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8630;
	                this.match(PostgreSQLParser.OPEN_BRACKET);
	                this.state = 8632;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===658) {
	                    this.state = 8631;
	                    this.iconst();
	                }

	                this.state = 8634;
	                this.match(PostgreSQLParser.CLOSE_BRACKET); 
	            }
	            this.state = 8639;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,522,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpletypename() {
	    let localctx = new SimpletypenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1124, PostgreSQLParser.RULE_simpletypename);
	    try {
	        this.state = 8653;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,524,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8640;
	            this.generictype();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8641;
	            this.numeric();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8642;
	            this.bit();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8643;
	            this.character();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8644;
	            this.constdatetime();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8645;
	            this.constinterval();
	            this.state = 8651;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,523,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8646;
	                this.opt_interval();
	                break;

	            case 2:
	                this.state = 8647;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 8648;
	                this.iconst();
	                this.state = 8649;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	consttypename() {
	    let localctx = new ConsttypenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1126, PostgreSQLParser.RULE_consttypename);
	    try {
	        this.state = 8659;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 190:
	        case 381:
	        case 383:
	        case 387:
	        case 388:
	        case 391:
	        case 394:
	        case 395:
	        case 402:
	        case 406:
	        case 409:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8655;
	            this.numeric();
	            break;
	        case 382:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8656;
	            this.constbit();
	            break;
	        case 384:
	        case 385:
	        case 398:
	        case 399:
	        case 416:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8657;
	            this.constcharacter();
	            break;
	        case 411:
	        case 412:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8658;
	            this.constdatetime();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generictype() {
	    let localctx = new GenerictypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1128, PostgreSQLParser.RULE_generictype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8665;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 304:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 504:
	        case 513:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	            this.state = 8661;
	            this.builtin_function_name();
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 471:
	        case 472:
	        case 473:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.state = 8662;
	            this.type_function_name();
	            break;
	        case 119:
	            this.state = 8663;
	            this.match(PostgreSQLParser.LEFT);
	            break;
	        case 126:
	            this.state = 8664;
	            this.match(PostgreSQLParser.RIGHT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 8668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,527,this._ctx);
	        if(la_===1) {
	            this.state = 8667;
	            this.attrs();

	        }
	        this.state = 8670;
	        this.opt_type_modifiers();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_type_modifiers() {
	    let localctx = new Opt_type_modifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1130, PostgreSQLParser.RULE_opt_type_modifiers);
	    try {
	        this.state = 8677;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,528,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8672;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8673;
	            this.expr_list();
	            this.state = 8674;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric() {
	    let localctx = new NumericContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1132, PostgreSQLParser.RULE_numeric);
	    try {
	        this.state = 8695;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 394:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8679;
	            this.match(PostgreSQLParser.INT_P);
	            break;
	        case 395:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8680;
	            this.match(PostgreSQLParser.INTEGER);
	            break;
	        case 409:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8681;
	            this.match(PostgreSQLParser.SMALLINT);
	            break;
	        case 381:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8682;
	            this.match(PostgreSQLParser.BIGINT);
	            break;
	        case 406:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8683;
	            this.match(PostgreSQLParser.REAL);
	            break;
	        case 391:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8684;
	            this.match(PostgreSQLParser.FLOAT_P);
	            this.state = 8685;
	            this.opt_float();
	            break;
	        case 190:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 8686;
	            this.match(PostgreSQLParser.DOUBLE_P);
	            this.state = 8687;
	            this.match(PostgreSQLParser.PRECISION);
	            break;
	        case 388:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 8688;
	            this.match(PostgreSQLParser.DECIMAL_P);
	            this.state = 8689;
	            this.opt_type_modifiers();
	            break;
	        case 387:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 8690;
	            this.match(PostgreSQLParser.DEC);
	            this.state = 8691;
	            this.opt_type_modifiers();
	            break;
	        case 402:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 8692;
	            this.match(PostgreSQLParser.NUMERIC);
	            this.state = 8693;
	            this.opt_type_modifiers();
	            break;
	        case 383:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 8694;
	            this.match(PostgreSQLParser.BOOLEAN_P);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_float() {
	    let localctx = new Opt_floatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1134, PostgreSQLParser.RULE_opt_float);
	    try {
	        this.state = 8702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,530,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8697;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8698;
	            this.iconst();
	            this.state = 8699;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bit() {
	    let localctx = new BitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1136, PostgreSQLParser.RULE_bit);
	    try {
	        this.state = 8706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,531,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8704;
	            this.bitwithlength();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8705;
	            this.bitwithoutlength();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constbit() {
	    let localctx = new ConstbitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1138, PostgreSQLParser.RULE_constbit);
	    try {
	        this.state = 8710;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,532,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8708;
	            this.bitwithlength();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8709;
	            this.bitwithoutlength();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwithlength() {
	    let localctx = new BitwithlengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1140, PostgreSQLParser.RULE_bitwithlength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8712;
	        this.match(PostgreSQLParser.BIT);
	        this.state = 8713;
	        this.opt_varying();
	        this.state = 8714;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 8715;
	        this.expr_list();
	        this.state = 8716;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwithoutlength() {
	    let localctx = new BitwithoutlengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1142, PostgreSQLParser.RULE_bitwithoutlength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8718;
	        this.match(PostgreSQLParser.BIT);
	        this.state = 8719;
	        this.opt_varying();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	character() {
	    let localctx = new CharacterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1144, PostgreSQLParser.RULE_character);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8721;
	        this.character_c();
	        this.state = 8726;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,533,this._ctx);
	        if(la_===1) {
	            this.state = 8722;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8723;
	            this.iconst();
	            this.state = 8724;
	            this.match(PostgreSQLParser.CLOSE_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constcharacter() {
	    let localctx = new ConstcharacterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1146, PostgreSQLParser.RULE_constcharacter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8728;
	        this.character_c();
	        this.state = 8733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 8729;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8730;
	            this.iconst();
	            this.state = 8731;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	character_c() {
	    let localctx = new Character_cContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1148, PostgreSQLParser.RULE_character_c);
	    var _la = 0;
	    try {
	        this.state = 8741;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 384:
	        case 385:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8735;
	            _la = this._input.LA(1);
	            if(!(((((_la - 384)) & ~0x1f) === 0 && ((1 << (_la - 384)) & 32771) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8736;
	            this.opt_varying();
	            break;
	        case 416:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8737;
	            this.match(PostgreSQLParser.VARCHAR);
	            break;
	        case 398:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8738;
	            this.match(PostgreSQLParser.NATIONAL);
	            this.state = 8739;
	            _la = this._input.LA(1);
	            if(!(_la===384 || _la===385)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8740;
	            this.opt_varying();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_varying() {
	    let localctx = new Opt_varyingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1150, PostgreSQLParser.RULE_opt_varying);
	    try {
	        this.state = 8745;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,536,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8743;
	            this.match(PostgreSQLParser.VARYING);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constdatetime() {
	    let localctx = new ConstdatetimeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1152, PostgreSQLParser.RULE_constdatetime);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8747;
	        _la = this._input.LA(1);
	        if(!(_la===411 || _la===412)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 8752;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,537,this._ctx);
	        if(la_===1) {
	            this.state = 8748;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8749;
	            this.iconst();
	            this.state = 8750;
	            this.match(PostgreSQLParser.CLOSE_PAREN);

	        }
	        this.state = 8754;
	        this.opt_timezone();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constinterval() {
	    let localctx = new ConstintervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1154, PostgreSQLParser.RULE_constinterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8756;
	        this.match(PostgreSQLParser.INTERVAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_timezone() {
	    let localctx = new Opt_timezoneContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1156, PostgreSQLParser.RULE_opt_timezone);
	    try {
	        this.state = 8765;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,538,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8758;
	            this.match(PostgreSQLParser.WITH);
	            this.state = 8759;
	            this.match(PostgreSQLParser.TIME);
	            this.state = 8760;
	            this.match(PostgreSQLParser.ZONE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8761;
	            this.match(PostgreSQLParser.WITHOUT);
	            this.state = 8762;
	            this.match(PostgreSQLParser.TIME);
	            this.state = 8763;
	            this.match(PostgreSQLParser.ZONE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_interval() {
	    let localctx = new Opt_intervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1158, PostgreSQLParser.RULE_opt_interval);
	    try {
	        this.state = 8793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,541,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8767;
	            this.match(PostgreSQLParser.YEAR_P);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8768;
	            this.match(PostgreSQLParser.MONTH_P);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8769;
	            this.match(PostgreSQLParser.DAY_P);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8770;
	            this.match(PostgreSQLParser.HOUR_P);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8771;
	            this.match(PostgreSQLParser.MINUTE_P);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8772;
	            this.interval_second();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 8773;
	            this.match(PostgreSQLParser.YEAR_P);
	            this.state = 8774;
	            this.match(PostgreSQLParser.TO);
	            this.state = 8775;
	            this.match(PostgreSQLParser.MONTH_P);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 8776;
	            this.match(PostgreSQLParser.DAY_P);
	            this.state = 8777;
	            this.match(PostgreSQLParser.TO);
	            this.state = 8781;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 218:
	                this.state = 8778;
	                this.match(PostgreSQLParser.HOUR_P);
	                break;
	            case 254:
	                this.state = 8779;
	                this.match(PostgreSQLParser.MINUTE_P);
	                break;
	            case 319:
	                this.state = 8780;
	                this.interval_second();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 8783;
	            this.match(PostgreSQLParser.HOUR_P);
	            this.state = 8784;
	            this.match(PostgreSQLParser.TO);
	            this.state = 8787;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 254:
	                this.state = 8785;
	                this.match(PostgreSQLParser.MINUTE_P);
	                break;
	            case 319:
	                this.state = 8786;
	                this.interval_second();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 8789;
	            this.match(PostgreSQLParser.MINUTE_P);
	            this.state = 8790;
	            this.match(PostgreSQLParser.TO);
	            this.state = 8791;
	            this.interval_second();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interval_second() {
	    let localctx = new Interval_secondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1160, PostgreSQLParser.RULE_interval_second);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8795;
	        this.match(PostgreSQLParser.SECOND_P);
	        this.state = 8800;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,542,this._ctx);
	        if(la_===1) {
	            this.state = 8796;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 8797;
	            this.iconst();
	            this.state = 8798;
	            this.match(PostgreSQLParser.CLOSE_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_escape() {
	    let localctx = new Opt_escapeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1162, PostgreSQLParser.RULE_opt_escape);
	    try {
	        this.state = 8805;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,543,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8802;
	            this.match(PostgreSQLParser.ESCAPE);
	            this.state = 8803;
	            this.a_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr() {
	    let localctx = new A_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1164, PostgreSQLParser.RULE_a_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8807;
	        this.a_expr_qual();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_qual() {
	    let localctx = new A_expr_qualContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1166, PostgreSQLParser.RULE_a_expr_qual);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8809;
	        this.a_expr_lessless();
	        this.state = 8811;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,544,this._ctx);
	        if(la_===1) {
	            this.state = 8810;
	            this.qual_op();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_lessless() {
	    let localctx = new A_expr_lesslessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1168, PostgreSQLParser.RULE_a_expr_lessless);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8813;
	        this.a_expr_or();
	        this.state = 8818;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,545,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8814;
	                _la = this._input.LA(1);
	                if(!(_la===18 || _la===19)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 8815;
	                this.a_expr_or(); 
	            }
	            this.state = 8820;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,545,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_or() {
	    let localctx = new A_expr_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1170, PostgreSQLParser.RULE_a_expr_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8821;
	        this.a_expr_and();
	        this.state = 8826;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,546,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8822;
	                this.match(PostgreSQLParser.OR);
	                this.state = 8823;
	                this.a_expr_and(); 
	            }
	            this.state = 8828;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,546,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_and() {
	    let localctx = new A_expr_andContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1172, PostgreSQLParser.RULE_a_expr_and);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8829;
	        this.a_expr_between();
	        this.state = 8834;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,547,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8830;
	                this.match(PostgreSQLParser.AND);
	                this.state = 8831;
	                this.a_expr_between(); 
	            }
	            this.state = 8836;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,547,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_between() {
	    let localctx = new A_expr_betweenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1174, PostgreSQLParser.RULE_a_expr_between);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8837;
	        this.a_expr_in();
	        this.state = 8849;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,550,this._ctx);
	        if(la_===1) {
	            this.state = 8839;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===77) {
	                this.state = 8838;
	                this.match(PostgreSQLParser.NOT);
	            }

	            this.state = 8841;
	            this.match(PostgreSQLParser.BETWEEN);
	            this.state = 8843;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 8842;
	                this.match(PostgreSQLParser.SYMMETRIC);
	            }

	            this.state = 8845;
	            this.a_expr_in();
	            this.state = 8846;
	            this.match(PostgreSQLParser.AND);
	            this.state = 8847;
	            this.a_expr_in();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_in() {
	    let localctx = new A_expr_inContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1176, PostgreSQLParser.RULE_a_expr_in);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8851;
	        this.a_expr_unary_not();
	        this.state = 8857;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,552,this._ctx);
	        if(la_===1) {
	            this.state = 8853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===77) {
	                this.state = 8852;
	                this.match(PostgreSQLParser.NOT);
	            }

	            this.state = 8855;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 8856;
	            this.in_expr();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_unary_not() {
	    let localctx = new A_expr_unary_notContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1178, PostgreSQLParser.RULE_a_expr_unary_not);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8860;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===77) {
	            this.state = 8859;
	            this.match(PostgreSQLParser.NOT);
	        }

	        this.state = 8862;
	        this.a_expr_isnull();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_isnull() {
	    let localctx = new A_expr_isnullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1180, PostgreSQLParser.RULE_a_expr_isnull);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8864;
	        this.a_expr_is_not();
	        this.state = 8866;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,554,this._ctx);
	        if(la_===1) {
	            this.state = 8865;
	            _la = this._input.LA(1);
	            if(!(_la===117 || _la===122)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_is_not() {
	    let localctx = new A_expr_is_notContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1182, PostgreSQLParser.RULE_a_expr_is_not);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8868;
	        this.a_expr_compare();
	        this.state = 8892;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,558,this._ctx);
	        if(la_===1) {
	            this.state = 8869;
	            this.match(PostgreSQLParser.IS);
	            this.state = 8871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===77) {
	                this.state = 8870;
	                this.match(PostgreSQLParser.NOT);
	            }

	            this.state = 8890;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 78:
	                this.state = 8873;
	                this.match(PostgreSQLParser.NULL_P);
	                break;
	            case 96:
	                this.state = 8874;
	                this.match(PostgreSQLParser.TRUE_P);
	                break;
	            case 60:
	                this.state = 8875;
	                this.match(PostgreSQLParser.FALSE_P);
	                break;
	            case 358:
	                this.state = 8876;
	                this.match(PostgreSQLParser.UNKNOWN);
	                break;
	            case 56:
	                this.state = 8877;
	                this.match(PostgreSQLParser.DISTINCT);
	                this.state = 8878;
	                this.match(PostgreSQLParser.FROM);
	                this.state = 8879;
	                this.a_expr();
	                break;
	            case 268:
	                this.state = 8880;
	                this.match(PostgreSQLParser.OF);
	                this.state = 8881;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 8882;
	                this.type_list();
	                this.state = 8883;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	                break;
	            case 188:
	                this.state = 8885;
	                this.match(PostgreSQLParser.DOCUMENT_P);
	                break;
	            case 478:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	                this.state = 8887;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 483)) & ~0x1f) === 0 && ((1 << (_la - 483)) & 15) !== 0)) {
	                    this.state = 8886;
	                    this.unicode_normal_form();
	                }

	                this.state = 8889;
	                this.match(PostgreSQLParser.NORMALIZED);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_compare() {
	    let localctx = new A_expr_compareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1184, PostgreSQLParser.RULE_a_expr_compare);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8894;
	        this.a_expr_like();
	        this.state = 8906;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,560,this._ctx);
	        if(la_===1) {
	            this.state = 8895;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 44237824) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8896;
	            this.a_expr_like();

	        } else if(la_===2) {
	            this.state = 8897;
	            this.subquery_Op();
	            this.state = 8898;
	            this.sub_type();
	            this.state = 8904;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,559,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8899;
	                this.select_with_parens();
	                break;

	            case 2:
	                this.state = 8900;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 8901;
	                this.a_expr();
	                this.state = 8902;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_like() {
	    let localctx = new A_expr_likeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1186, PostgreSQLParser.RULE_a_expr_like);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8908;
	        this.a_expr_qual_op();
	        this.state = 8921;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,563,this._ctx);
	        if(la_===1) {
	            this.state = 8910;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===77) {
	                this.state = 8909;
	                this.match(PostgreSQLParser.NOT);
	            }

	            this.state = 8916;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 120:
	                this.state = 8912;
	                this.match(PostgreSQLParser.LIKE);
	                break;
	            case 114:
	                this.state = 8913;
	                this.match(PostgreSQLParser.ILIKE);
	                break;
	            case 127:
	                this.state = 8914;
	                this.match(PostgreSQLParser.SIMILAR);
	                this.state = 8915;
	                this.match(PostgreSQLParser.TO);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 8918;
	            this.a_expr_qual_op();
	            this.state = 8919;
	            this.opt_escape();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_qual_op() {
	    let localctx = new A_expr_qual_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1188, PostgreSQLParser.RULE_a_expr_qual_op);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8923;
	        this.a_expr_unary_qualop();
	        this.state = 8929;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,564,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8924;
	                this.qual_op();
	                this.state = 8925;
	                this.a_expr_unary_qualop(); 
	            }
	            this.state = 8931;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,564,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_unary_qualop() {
	    let localctx = new A_expr_unary_qualopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1190, PostgreSQLParser.RULE_a_expr_unary_qualop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8933;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,565,this._ctx);
	        if(la_===1) {
	            this.state = 8932;
	            this.qual_op();

	        }
	        this.state = 8935;
	        this.a_expr_add();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_add() {
	    let localctx = new A_expr_addContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1192, PostgreSQLParser.RULE_a_expr_add);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8937;
	        this.a_expr_mul();
	        this.state = 8942;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,566,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8938;
	                _la = this._input.LA(1);
	                if(!(_la===12 || _la===13)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 8939;
	                this.a_expr_mul(); 
	            }
	            this.state = 8944;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,566,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_mul() {
	    let localctx = new A_expr_mulContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1194, PostgreSQLParser.RULE_a_expr_mul);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8945;
	        this.a_expr_caret();
	        this.state = 8950;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,567,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8946;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 134234624) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 8947;
	                this.a_expr_caret(); 
	            }
	            this.state = 8952;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,567,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_caret() {
	    let localctx = new A_expr_caretContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1196, PostgreSQLParser.RULE_a_expr_caret);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8953;
	        this.a_expr_unary_sign();
	        this.state = 8956;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,568,this._ctx);
	        if(la_===1) {
	            this.state = 8954;
	            this.match(PostgreSQLParser.CARET);
	            this.state = 8955;
	            this.a_expr();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_unary_sign() {
	    let localctx = new A_expr_unary_signContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1198, PostgreSQLParser.RULE_a_expr_unary_sign);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8959;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12 || _la===13) {
	            this.state = 8958;
	            _la = this._input.LA(1);
	            if(!(_la===12 || _la===13)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 8961;
	        this.a_expr_at_time_zone();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_at_time_zone() {
	    let localctx = new A_expr_at_time_zoneContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1200, PostgreSQLParser.RULE_a_expr_at_time_zone);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8963;
	        this.a_expr_collate();
	        this.state = 8968;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,570,this._ctx);
	        if(la_===1) {
	            this.state = 8964;
	            this.match(PostgreSQLParser.AT);
	            this.state = 8965;
	            this.match(PostgreSQLParser.TIME);
	            this.state = 8966;
	            this.match(PostgreSQLParser.ZONE);
	            this.state = 8967;
	            this.a_expr();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_collate() {
	    let localctx = new A_expr_collateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1202, PostgreSQLParser.RULE_a_expr_collate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8970;
	        this.a_expr_typecast();
	        this.state = 8973;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,571,this._ctx);
	        if(la_===1) {
	            this.state = 8971;
	            this.match(PostgreSQLParser.COLLATE);
	            this.state = 8972;
	            this.any_name();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_expr_typecast() {
	    let localctx = new A_expr_typecastContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1204, PostgreSQLParser.RULE_a_expr_typecast);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8975;
	        this.c_expr();
	        this.state = 8980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 8976;
	            this.match(PostgreSQLParser.TYPECAST);
	            this.state = 8977;
	            this.typename();
	            this.state = 8982;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	b_expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new B_exprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1206;
	    this.enterRecursionRule(localctx, 1206, PostgreSQLParser.RULE_b_expr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8990;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,573,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8984;
	            this.c_expr();
	            break;

	        case 2:
	            this.state = 8985;
	            _la = this._input.LA(1);
	            if(!(_la===12 || _la===13)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8986;
	            this.b_expr(9);
	            break;

	        case 3:
	            this.state = 8987;
	            this.qual_op();
	            this.state = 8988;
	            this.b_expr(3);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 9031;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,577,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 9029;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,576,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, PostgreSQLParser.RULE_b_expr);
	                    this.state = 8992;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 8993;
	                    this.match(PostgreSQLParser.CARET);
	                    this.state = 8994;
	                    this.b_expr(9);
	                    break;

	                case 2:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, PostgreSQLParser.RULE_b_expr);
	                    this.state = 8995;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 8996;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 134234624) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 8997;
	                    this.b_expr(8);
	                    break;

	                case 3:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, PostgreSQLParser.RULE_b_expr);
	                    this.state = 8998;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 8999;
	                    _la = this._input.LA(1);
	                    if(!(_la===12 || _la===13)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 9000;
	                    this.b_expr(7);
	                    break;

	                case 4:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, PostgreSQLParser.RULE_b_expr);
	                    this.state = 9001;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 9002;
	                    this.qual_op();
	                    this.state = 9003;
	                    this.b_expr(6);
	                    break;

	                case 5:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, PostgreSQLParser.RULE_b_expr);
	                    this.state = 9005;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 9006;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 44237824) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 9007;
	                    this.b_expr(5);
	                    break;

	                case 6:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, PostgreSQLParser.RULE_b_expr);
	                    this.state = 9008;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 9009;
	                    this.match(PostgreSQLParser.TYPECAST);
	                    this.state = 9010;
	                    this.typename();
	                    break;

	                case 7:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, PostgreSQLParser.RULE_b_expr);
	                    this.state = 9011;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 9012;
	                    this.qual_op();
	                    break;

	                case 8:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, PostgreSQLParser.RULE_b_expr);
	                    this.state = 9013;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 9014;
	                    this.match(PostgreSQLParser.IS);
	                    this.state = 9016;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===77) {
	                        this.state = 9015;
	                        this.match(PostgreSQLParser.NOT);
	                    }

	                    this.state = 9027;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 56:
	                        this.state = 9018;
	                        this.match(PostgreSQLParser.DISTINCT);
	                        this.state = 9019;
	                        this.match(PostgreSQLParser.FROM);
	                        this.state = 9020;
	                        this.b_expr(0);
	                        break;
	                    case 268:
	                        this.state = 9021;
	                        this.match(PostgreSQLParser.OF);
	                        this.state = 9022;
	                        this.match(PostgreSQLParser.OPEN_PAREN);
	                        this.state = 9023;
	                        this.type_list();
	                        this.state = 9024;
	                        this.match(PostgreSQLParser.CLOSE_PAREN);
	                        break;
	                    case 188:
	                        this.state = 9026;
	                        this.match(PostgreSQLParser.DOCUMENT_P);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;

	                } 
	            }
	            this.state = 9033;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,577,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	c_expr() {
	    let localctx = new C_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1208, PostgreSQLParser.RULE_c_expr);
	    try {
	        this.state = 9070;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,580,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new C_expr_existsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9034;
	            this.match(PostgreSQLParser.EXISTS);
	            this.state = 9035;
	            this.select_with_parens();
	            break;

	        case 2:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9036;
	            this.match(PostgreSQLParser.ARRAY);
	            this.state = 9039;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 9037;
	                this.select_with_parens();
	                break;
	            case 4:
	                this.state = 9038;
	                this.array_expr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9041;
	            this.match(PostgreSQLParser.PARAM);
	            this.state = 9042;
	            this.opt_indirection();
	            break;

	        case 4:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9043;
	            this.match(PostgreSQLParser.GROUPING);
	            this.state = 9044;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9045;
	            this.expr_list();
	            this.state = 9046;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 5:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9048;
	            this.match(PostgreSQLParser.UNIQUE);
	            this.state = 9049;
	            this.select_with_parens();
	            break;

	        case 6:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9050;
	            this.columnref();
	            break;

	        case 7:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9051;
	            this.aexprconst();
	            break;

	        case 8:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9052;
	            this.plsqlvariablename();
	            break;

	        case 9:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 9053;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9054;
	            localctx.a_expr_in_parens = this.a_expr();
	            this.state = 9055;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 9056;
	            this.opt_indirection();
	            break;

	        case 10:
	            localctx = new C_expr_caseContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 9058;
	            this.case_expr();
	            break;

	        case 11:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 9059;
	            this.func_expr();
	            break;

	        case 12:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 9060;
	            this.select_with_parens();
	            this.state = 9062;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,579,this._ctx);
	            if(la_===1) {
	                this.state = 9061;
	                this.indirection();

	            }
	            break;

	        case 13:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 9064;
	            this.explicit_row();
	            break;

	        case 14:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 9065;
	            this.implicit_row();
	            break;

	        case 15:
	            localctx = new C_expr_exprContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 9066;
	            this.row();
	            this.state = 9067;
	            this.match(PostgreSQLParser.OVERLAPS);
	            this.state = 9068;
	            this.row();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plsqlvariablename() {
	    let localctx = new PlsqlvariablenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1210, PostgreSQLParser.RULE_plsqlvariablename);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9072;
	        this.match(PostgreSQLParser.PLSQLVARIABLENAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_application() {
	    let localctx = new Func_applicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1212, PostgreSQLParser.RULE_func_application);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9074;
	        this.func_name();
	        this.state = 9075;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 9094;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 12:
	        case 13:
	        case 28:
	        case 29:
	        case 33:
	        case 35:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 89:
	        case 92:
	        case 96:
	        case 98:
	        case 99:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 650:
	        case 654:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 671:
	            this.state = 9076;
	            this.func_arg_list();
	            this.state = 9080;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6) {
	                this.state = 9077;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 9078;
	                this.match(PostgreSQLParser.VARIADIC);
	                this.state = 9079;
	                this.func_arg_expr();
	            }

	            this.state = 9082;
	            this.opt_sort_clause();
	            break;
	        case 101:
	            this.state = 9084;
	            this.match(PostgreSQLParser.VARIADIC);
	            this.state = 9085;
	            this.func_arg_expr();
	            this.state = 9086;
	            this.opt_sort_clause();
	            break;
	        case 30:
	        case 56:
	            this.state = 9088;
	            _la = this._input.LA(1);
	            if(!(_la===30 || _la===56)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 9089;
	            this.func_arg_list();
	            this.state = 9090;
	            this.opt_sort_clause();
	            break;
	        case 9:
	            this.state = 9092;
	            this.match(PostgreSQLParser.STAR);
	            break;
	        case 3:
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 9096;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_expr() {
	    let localctx = new Func_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1214, PostgreSQLParser.RULE_func_expr);
	    try {
	        this.state = 9104;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,583,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9098;
	            this.func_application();
	            this.state = 9099;
	            this.within_group_clause();
	            this.state = 9100;
	            this.filter_clause();
	            this.state = 9101;
	            this.over_clause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9103;
	            this.func_expr_common_subexpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_expr_windowless() {
	    let localctx = new Func_expr_windowlessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1216, PostgreSQLParser.RULE_func_expr_windowless);
	    try {
	        this.state = 9108;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,584,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9106;
	            this.func_application();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9107;
	            this.func_expr_common_subexpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_expr_common_subexpr() {
	    let localctx = new Func_expr_common_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1218, PostgreSQLParser.RULE_func_expr_common_subexpr);
	    var _la = 0;
	    try {
	        this.state = 9287;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9110;
	            this.match(PostgreSQLParser.COLLATION);
	            this.state = 9111;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 9112;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9113;
	            this.a_expr();
	            this.state = 9114;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9116;
	            this.match(PostgreSQLParser.CURRENT_DATE);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9117;
	            this.match(PostgreSQLParser.CURRENT_TIME);
	            this.state = 9122;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,585,this._ctx);
	            if(la_===1) {
	                this.state = 9118;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 9119;
	                this.iconst();
	                this.state = 9120;
	                this.match(PostgreSQLParser.CLOSE_PAREN);

	            }
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9124;
	            this.match(PostgreSQLParser.CURRENT_TIMESTAMP);
	            this.state = 9129;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,586,this._ctx);
	            if(la_===1) {
	                this.state = 9125;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 9126;
	                this.iconst();
	                this.state = 9127;
	                this.match(PostgreSQLParser.CLOSE_PAREN);

	            }
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9131;
	            this.match(PostgreSQLParser.LOCALTIME);
	            this.state = 9136;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,587,this._ctx);
	            if(la_===1) {
	                this.state = 9132;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 9133;
	                this.iconst();
	                this.state = 9134;
	                this.match(PostgreSQLParser.CLOSE_PAREN);

	            }
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9138;
	            this.match(PostgreSQLParser.LOCALTIMESTAMP);
	            this.state = 9143;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,588,this._ctx);
	            if(la_===1) {
	                this.state = 9139;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 9140;
	                this.iconst();
	                this.state = 9141;
	                this.match(PostgreSQLParser.CLOSE_PAREN);

	            }
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9145;
	            this.match(PostgreSQLParser.CURRENT_ROLE);
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9146;
	            this.match(PostgreSQLParser.CURRENT_USER);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 9147;
	            this.match(PostgreSQLParser.SESSION_USER);
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 9148;
	            this.match(PostgreSQLParser.USER);
	            break;
	        case 47:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 9149;
	            this.match(PostgreSQLParser.CURRENT_CATALOG);
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 9150;
	            this.match(PostgreSQLParser.CURRENT_SCHEMA);
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 9151;
	            this.match(PostgreSQLParser.CAST);
	            this.state = 9152;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9153;
	            this.a_expr();
	            this.state = 9154;
	            this.match(PostgreSQLParser.AS);
	            this.state = 9155;
	            this.typename();
	            this.state = 9156;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 390:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 9158;
	            this.match(PostgreSQLParser.EXTRACT);
	            this.state = 9159;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9160;
	            this.extract_list();
	            this.state = 9161;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 489:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 9163;
	            this.match(PostgreSQLParser.NORMALIZE);
	            this.state = 9164;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9165;
	            this.a_expr();
	            this.state = 9168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6) {
	                this.state = 9166;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 9167;
	                this.unicode_normal_form();
	            }

	            this.state = 9170;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 403:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 9172;
	            this.match(PostgreSQLParser.OVERLAY);
	            this.state = 9173;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9174;
	            this.overlay_list();
	            this.state = 9175;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 404:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 9177;
	            this.match(PostgreSQLParser.POSITION);
	            this.state = 9178;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9179;
	            this.position_list();
	            this.state = 9180;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 410:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 9182;
	            this.match(PostgreSQLParser.SUBSTRING);
	            this.state = 9183;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9184;
	            this.substr_list();
	            this.state = 9185;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 413:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 9187;
	            this.match(PostgreSQLParser.TREAT);
	            this.state = 9188;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9189;
	            this.a_expr();
	            this.state = 9190;
	            this.match(PostgreSQLParser.AS);
	            this.state = 9191;
	            this.typename();
	            this.state = 9192;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 414:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 9194;
	            this.match(PostgreSQLParser.TRIM);
	            this.state = 9195;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===39 || _la===73 || _la===95) {
	                this.state = 9196;
	                _la = this._input.LA(1);
	                if(!(_la===39 || _la===73 || _la===95)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 9199;
	            this.trim_list();
	            this.state = 9200;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 401:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 9202;
	            this.match(PostgreSQLParser.NULLIF);
	            this.state = 9203;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9204;
	            this.a_expr();
	            this.state = 9205;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9206;
	            this.a_expr();
	            this.state = 9207;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 386:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 9209;
	            this.match(PostgreSQLParser.COALESCE);
	            this.state = 9210;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9211;
	            this.expr_list();
	            this.state = 9212;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 392:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 9214;
	            this.match(PostgreSQLParser.GREATEST);
	            this.state = 9215;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9216;
	            this.expr_list();
	            this.state = 9217;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 397:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 9219;
	            this.match(PostgreSQLParser.LEAST);
	            this.state = 9220;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9221;
	            this.expr_list();
	            this.state = 9222;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 425:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 9224;
	            this.match(PostgreSQLParser.XMLCONCAT);
	            this.state = 9225;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9226;
	            this.expr_list();
	            this.state = 9227;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 426:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 9229;
	            this.match(PostgreSQLParser.XMLELEMENT);
	            this.state = 9230;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9231;
	            this.match(PostgreSQLParser.NAME_P);
	            this.state = 9232;
	            this.collabel();
	            this.state = 9238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6) {
	                this.state = 9233;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 9236;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,591,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 9234;
	                    this.xml_attributes();
	                    break;

	                case 2:
	                    this.state = 9235;
	                    this.expr_list();
	                    break;

	                }
	            }

	            this.state = 9240;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 427:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 9242;
	            this.match(PostgreSQLParser.XMLEXISTS);
	            this.state = 9243;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9244;
	            this.c_expr();
	            this.state = 9245;
	            this.xmlexists_argument();
	            this.state = 9246;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 428:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 9248;
	            this.match(PostgreSQLParser.XMLFOREST);
	            this.state = 9249;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9250;
	            this.xml_attribute_list();
	            this.state = 9251;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 429:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 9253;
	            this.match(PostgreSQLParser.XMLPARSE);
	            this.state = 9254;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9255;
	            this.document_or_content();
	            this.state = 9256;
	            this.a_expr();
	            this.state = 9257;
	            this.xml_whitespace_option();
	            this.state = 9258;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 430:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 9260;
	            this.match(PostgreSQLParser.XMLPI);
	            this.state = 9261;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9262;
	            this.match(PostgreSQLParser.NAME_P);
	            this.state = 9263;
	            this.collabel();
	            this.state = 9266;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6) {
	                this.state = 9264;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 9265;
	                this.a_expr();
	            }

	            this.state = 9268;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 431:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 9270;
	            this.match(PostgreSQLParser.XMLROOT);
	            this.state = 9271;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9272;
	            this.match(PostgreSQLParser.XML_P);
	            this.state = 9273;
	            this.a_expr();
	            this.state = 9274;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9275;
	            this.xml_root_version();
	            this.state = 9276;
	            this.opt_xml_root_standalone();
	            this.state = 9277;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 432:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 9279;
	            this.match(PostgreSQLParser.XMLSERIALIZE);
	            this.state = 9280;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9281;
	            this.document_or_content();
	            this.state = 9282;
	            this.a_expr();
	            this.state = 9283;
	            this.match(PostgreSQLParser.AS);
	            this.state = 9284;
	            this.simpletypename();
	            this.state = 9285;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xml_root_version() {
	    let localctx = new Xml_root_versionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1220, PostgreSQLParser.RULE_xml_root_version);
	    try {
	        this.state = 9294;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,595,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9289;
	            this.match(PostgreSQLParser.VERSION_P);
	            this.state = 9290;
	            this.a_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9291;
	            this.match(PostgreSQLParser.VERSION_P);
	            this.state = 9292;
	            this.match(PostgreSQLParser.NO);
	            this.state = 9293;
	            this.match(PostgreSQLParser.VALUE_P);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_xml_root_standalone() {
	    let localctx = new Opt_xml_root_standaloneContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1222, PostgreSQLParser.RULE_opt_xml_root_standalone);
	    try {
	        this.state = 9307;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,596,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9296;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9297;
	            this.match(PostgreSQLParser.STANDALONE_P);
	            this.state = 9298;
	            this.match(PostgreSQLParser.YES_P);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9299;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9300;
	            this.match(PostgreSQLParser.STANDALONE_P);
	            this.state = 9301;
	            this.match(PostgreSQLParser.NO);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9302;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9303;
	            this.match(PostgreSQLParser.STANDALONE_P);
	            this.state = 9304;
	            this.match(PostgreSQLParser.NO);
	            this.state = 9305;
	            this.match(PostgreSQLParser.VALUE_P);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xml_attributes() {
	    let localctx = new Xml_attributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1224, PostgreSQLParser.RULE_xml_attributes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9309;
	        this.match(PostgreSQLParser.XMLATTRIBUTES);
	        this.state = 9310;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 9311;
	        this.xml_attribute_list();
	        this.state = 9312;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xml_attribute_list() {
	    let localctx = new Xml_attribute_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1226, PostgreSQLParser.RULE_xml_attribute_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9314;
	        this.xml_attribute_el();
	        this.state = 9319;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 9315;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9316;
	            this.xml_attribute_el();
	            this.state = 9321;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xml_attribute_el() {
	    let localctx = new Xml_attribute_elContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1228, PostgreSQLParser.RULE_xml_attribute_el);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9322;
	        this.a_expr();
	        this.state = 9325;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 9323;
	            this.match(PostgreSQLParser.AS);
	            this.state = 9324;
	            this.collabel();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	document_or_content() {
	    let localctx = new Document_or_contentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1230, PostgreSQLParser.RULE_document_or_content);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9327;
	        _la = this._input.LA(1);
	        if(!(_la===166 || _la===188)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xml_whitespace_option() {
	    let localctx = new Xml_whitespace_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1232, PostgreSQLParser.RULE_xml_whitespace_option);
	    try {
	        this.state = 9334;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 285:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9329;
	            this.match(PostgreSQLParser.PRESERVE);
	            this.state = 9330;
	            this.match(PostgreSQLParser.WHITESPACE_P);
	            break;
	        case 340:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9331;
	            this.match(PostgreSQLParser.STRIP_P);
	            this.state = 9332;
	            this.match(PostgreSQLParser.WHITESPACE_P);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xmlexists_argument() {
	    let localctx = new Xmlexists_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1234, PostgreSQLParser.RULE_xmlexists_argument);
	    try {
	        this.state = 9351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,600,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9336;
	            this.match(PostgreSQLParser.PASSING);
	            this.state = 9337;
	            this.c_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9338;
	            this.match(PostgreSQLParser.PASSING);
	            this.state = 9339;
	            this.c_expr();
	            this.state = 9340;
	            this.xml_passing_mech();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9342;
	            this.match(PostgreSQLParser.PASSING);
	            this.state = 9343;
	            this.xml_passing_mech();
	            this.state = 9344;
	            this.c_expr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9346;
	            this.match(PostgreSQLParser.PASSING);
	            this.state = 9347;
	            this.xml_passing_mech();
	            this.state = 9348;
	            this.c_expr();
	            this.state = 9349;
	            this.xml_passing_mech();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xml_passing_mech() {
	    let localctx = new Xml_passing_mechContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1236, PostgreSQLParser.RULE_xml_passing_mech);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9353;
	        this.match(PostgreSQLParser.BY);
	        this.state = 9354;
	        _la = this._input.LA(1);
	        if(!(_la===297 || _la===450)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	within_group_clause() {
	    let localctx = new Within_group_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1238, PostgreSQLParser.RULE_within_group_clause);
	    try {
	        this.state = 9363;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,601,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9356;
	            this.match(PostgreSQLParser.WITHIN);
	            this.state = 9357;
	            this.match(PostgreSQLParser.GROUP_P);
	            this.state = 9358;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9359;
	            this.sort_clause();
	            this.state = 9360;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filter_clause() {
	    let localctx = new Filter_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1240, PostgreSQLParser.RULE_filter_clause);
	    try {
	        this.state = 9372;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,602,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9365;
	            this.match(PostgreSQLParser.FILTER);
	            this.state = 9366;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9367;
	            this.match(PostgreSQLParser.WHERE);
	            this.state = 9368;
	            this.a_expr();
	            this.state = 9369;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_clause() {
	    let localctx = new Window_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1242, PostgreSQLParser.RULE_window_clause);
	    try {
	        this.state = 9377;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 104:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9374;
	            this.match(PostgreSQLParser.WINDOW);
	            this.state = 9375;
	            this.window_definition_list();
	            break;
	        case -1:
	        case 2:
	        case 3:
	        case 6:
	        case 7:
	        case 31:
	        case 32:
	        case 46:
	        case 57:
	        case 59:
	        case 61:
	        case 62:
	        case 65:
	        case 70:
	        case 71:
	        case 74:
	        case 79:
	        case 80:
	        case 83:
	        case 87:
	        case 88:
	        case 92:
	        case 93:
	        case 97:
	        case 100:
	        case 102:
	        case 105:
	        case 129:
	        case 138:
	        case 146:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 161:
	        case 169:
	        case 177:
	        case 178:
	        case 182:
	        case 187:
	        case 191:
	        case 202:
	        case 203:
	        case 232:
	        case 243:
	        case 244:
	        case 247:
	        case 253:
	        case 258:
	        case 264:
	        case 283:
	        case 294:
	        case 298:
	        case 299:
	        case 301:
	        case 306:
	        case 310:
	        case 312:
	        case 315:
	        case 320:
	        case 326:
	        case 328:
	        case 333:
	        case 351:
	        case 359:
	        case 362:
	        case 363:
	        case 415:
	        case 433:
	        case 444:
	        case 454:
	        case 519:
	        case 668:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_definition_list() {
	    let localctx = new Window_definition_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1244, PostgreSQLParser.RULE_window_definition_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9379;
	        this.window_definition();
	        this.state = 9384;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,604,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 9380;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 9381;
	                this.window_definition(); 
	            }
	            this.state = 9386;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,604,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_definition() {
	    let localctx = new Window_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1246, PostgreSQLParser.RULE_window_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9387;
	        this.colid();
	        this.state = 9388;
	        this.match(PostgreSQLParser.AS);
	        this.state = 9389;
	        this.window_specification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	over_clause() {
	    let localctx = new Over_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1248, PostgreSQLParser.RULE_over_clause);
	    try {
	        this.state = 9397;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,606,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9391;
	            this.match(PostgreSQLParser.OVER);
	            this.state = 9394;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 9392;
	                this.window_specification();
	                break;
	            case 33:
	            case 35:
	            case 43:
	            case 44:
	            case 53:
	            case 57:
	            case 61:
	            case 92:
	            case 116:
	            case 119:
	            case 123:
	            case 124:
	            case 126:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 251:
	            case 252:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 386:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 433:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 453:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 504:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 520:
	            case 521:
	            case 522:
	            case 523:
	            case 524:
	            case 525:
	            case 526:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 545:
	            case 546:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 559:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 590:
	            case 591:
	            case 592:
	            case 593:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 607:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 637:
	            case 641:
	            case 661:
	            case 662:
	                this.state = 9393;
	                this.colid();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_specification() {
	    let localctx = new Window_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1250, PostgreSQLParser.RULE_window_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9399;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 9400;
	        this.opt_existing_window_name();
	        this.state = 9401;
	        this.opt_partition_clause();
	        this.state = 9402;
	        this.opt_sort_clause();
	        this.state = 9403;
	        this.opt_frame_clause();
	        this.state = 9404;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_existing_window_name() {
	    let localctx = new Opt_existing_window_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1252, PostgreSQLParser.RULE_opt_existing_window_name);
	    try {
	        this.state = 9408;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,607,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9406;
	            this.colid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_partition_clause() {
	    let localctx = new Opt_partition_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1254, PostgreSQLParser.RULE_opt_partition_clause);
	    try {
	        this.state = 9414;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 278:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9410;
	            this.match(PostgreSQLParser.PARTITION);
	            this.state = 9411;
	            this.match(PostgreSQLParser.BY);
	            this.state = 9412;
	            this.expr_list();
	            break;
	        case 3:
	        case 83:
	        case 292:
	        case 313:
	        case 481:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_frame_clause() {
	    let localctx = new Opt_frame_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1256, PostgreSQLParser.RULE_opt_frame_clause);
	    try {
	        this.state = 9429;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 292:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9416;
	            this.match(PostgreSQLParser.RANGE);
	            this.state = 9417;
	            this.frame_extent();
	            this.state = 9418;
	            this.opt_window_exclusion_clause();
	            break;
	        case 313:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9420;
	            this.match(PostgreSQLParser.ROWS);
	            this.state = 9421;
	            this.frame_extent();
	            this.state = 9422;
	            this.opt_window_exclusion_clause();
	            break;
	        case 481:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9424;
	            this.match(PostgreSQLParser.GROUPS);
	            this.state = 9425;
	            this.frame_extent();
	            this.state = 9426;
	            this.opt_window_exclusion_clause();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 4);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frame_extent() {
	    let localctx = new Frame_extentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1258, PostgreSQLParser.RULE_frame_extent);
	    try {
	        this.state = 9437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,610,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9431;
	            this.frame_bound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9432;
	            this.match(PostgreSQLParser.BETWEEN);
	            this.state = 9433;
	            this.frame_bound();
	            this.state = 9434;
	            this.match(PostgreSQLParser.AND);
	            this.state = 9435;
	            this.frame_bound();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frame_bound() {
	    let localctx = new Frame_boundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1260, PostgreSQLParser.RULE_frame_bound);
	    var _la = 0;
	    try {
	        this.state = 9446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,611,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9439;
	            this.match(PostgreSQLParser.UNBOUNDED);
	            this.state = 9440;
	            _la = this._input.LA(1);
	            if(!(_la===208 || _la===282)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9441;
	            this.match(PostgreSQLParser.CURRENT_P);
	            this.state = 9442;
	            this.match(PostgreSQLParser.ROW);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9443;
	            this.a_expr();
	            this.state = 9444;
	            _la = this._input.LA(1);
	            if(!(_la===208 || _la===282)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_window_exclusion_clause() {
	    let localctx = new Opt_window_exclusion_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1262, PostgreSQLParser.RULE_opt_window_exclusion_clause);
	    try {
	        this.state = 9458;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 199:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9448;
	            this.match(PostgreSQLParser.EXCLUDE);
	            this.state = 9455;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 434:
	                this.state = 9449;
	                this.match(PostgreSQLParser.CURRENT_P);
	                this.state = 9450;
	                this.match(PostgreSQLParser.ROW);
	                break;
	            case 66:
	                this.state = 9451;
	                this.match(PostgreSQLParser.GROUP_P);
	                break;
	            case 467:
	                this.state = 9452;
	                this.match(PostgreSQLParser.TIES);
	                break;
	            case 262:
	                this.state = 9453;
	                this.match(PostgreSQLParser.NO);
	                this.state = 9454;
	                this.match(PostgreSQLParser.OTHERS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row() {
	    let localctx = new RowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1264, PostgreSQLParser.RULE_row);
	    var _la = 0;
	    try {
	        this.state = 9472;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 407:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9460;
	            this.match(PostgreSQLParser.ROW);
	            this.state = 9461;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9463;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 421514629) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2174894095) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1f) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1f) === 0 && ((1 << (_la - 203)) & 4294967295) !== 0) || ((((_la - 235)) & ~0x1f) === 0 && ((1 << (_la - 235)) & 4294672383) !== 0) || ((((_la - 267)) & ~0x1f) === 0 && ((1 << (_la - 267)) & 4294967295) !== 0) || ((((_la - 299)) & ~0x1f) === 0 && ((1 << (_la - 299)) & 4294967295) !== 0) || ((((_la - 331)) & ~0x1f) === 0 && ((1 << (_la - 331)) & 4294967295) !== 0) || ((((_la - 363)) & ~0x1f) === 0 && ((1 << (_la - 363)) & 4294967295) !== 0) || ((((_la - 395)) & ~0x1f) === 0 && ((1 << (_la - 395)) & 4294967295) !== 0) || ((((_la - 427)) & ~0x1f) === 0 && ((1 << (_la - 427)) & 4160749567) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 4294967295) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 4026511359) !== 0) || ((((_la - 523)) & ~0x1f) === 0 && ((1 << (_la - 523)) & 4294967295) !== 0) || ((((_la - 555)) & ~0x1f) === 0 && ((1 << (_la - 555)) & 4294967295) !== 0) || ((((_la - 587)) & ~0x1f) === 0 && ((1 << (_la - 587)) & 4294967295) !== 0) || ((((_la - 619)) & ~0x1f) === 0 && ((1 << (_la - 619)) & 3561488383) !== 0) || ((((_la - 654)) & ~0x1f) === 0 && ((1 << (_la - 654)) & 131537) !== 0)) {
	                this.state = 9462;
	                this.expr_list();
	            }

	            this.state = 9465;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9466;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9467;
	            this.expr_list();
	            this.state = 9468;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9469;
	            this.a_expr();
	            this.state = 9470;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicit_row() {
	    let localctx = new Explicit_rowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1266, PostgreSQLParser.RULE_explicit_row);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9474;
	        this.match(PostgreSQLParser.ROW);
	        this.state = 9475;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 9477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 421514629) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2174894095) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1f) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1f) === 0 && ((1 << (_la - 203)) & 4294967295) !== 0) || ((((_la - 235)) & ~0x1f) === 0 && ((1 << (_la - 235)) & 4294672383) !== 0) || ((((_la - 267)) & ~0x1f) === 0 && ((1 << (_la - 267)) & 4294967295) !== 0) || ((((_la - 299)) & ~0x1f) === 0 && ((1 << (_la - 299)) & 4294967295) !== 0) || ((((_la - 331)) & ~0x1f) === 0 && ((1 << (_la - 331)) & 4294967295) !== 0) || ((((_la - 363)) & ~0x1f) === 0 && ((1 << (_la - 363)) & 4294967295) !== 0) || ((((_la - 395)) & ~0x1f) === 0 && ((1 << (_la - 395)) & 4294967295) !== 0) || ((((_la - 427)) & ~0x1f) === 0 && ((1 << (_la - 427)) & 4160749567) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 4294967295) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 4026511359) !== 0) || ((((_la - 523)) & ~0x1f) === 0 && ((1 << (_la - 523)) & 4294967295) !== 0) || ((((_la - 555)) & ~0x1f) === 0 && ((1 << (_la - 555)) & 4294967295) !== 0) || ((((_la - 587)) & ~0x1f) === 0 && ((1 << (_la - 587)) & 4294967295) !== 0) || ((((_la - 619)) & ~0x1f) === 0 && ((1 << (_la - 619)) & 3561488383) !== 0) || ((((_la - 654)) & ~0x1f) === 0 && ((1 << (_la - 654)) & 131537) !== 0)) {
	            this.state = 9476;
	            this.expr_list();
	        }

	        this.state = 9479;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicit_row() {
	    let localctx = new Implicit_rowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1268, PostgreSQLParser.RULE_implicit_row);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9481;
	        this.match(PostgreSQLParser.OPEN_PAREN);
	        this.state = 9482;
	        this.expr_list();
	        this.state = 9483;
	        this.match(PostgreSQLParser.COMMA);
	        this.state = 9484;
	        this.a_expr();
	        this.state = 9485;
	        this.match(PostgreSQLParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sub_type() {
	    let localctx = new Sub_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1270, PostgreSQLParser.RULE_sub_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9487;
	        _la = this._input.LA(1);
	        if(!(_la===30 || _la===34 || _la===90)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all_op() {
	    let localctx = new All_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1272, PostgreSQLParser.RULE_all_op);
	    try {
	        this.state = 9491;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9489;
	            this.match(PostgreSQLParser.Operator);
	            break;
	        case 9:
	        case 10:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 21:
	        case 23:
	        case 25:
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9490;
	            this.mathop();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mathop() {
	    let localctx = new MathopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1274, PostgreSQLParser.RULE_mathop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9493;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 178517504) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qual_op() {
	    let localctx = new Qual_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1276, PostgreSQLParser.RULE_qual_op);
	    try {
	        this.state = 9501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9495;
	            this.match(PostgreSQLParser.Operator);
	            break;
	        case 271:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9496;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 9497;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9498;
	            this.any_operator();
	            this.state = 9499;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qual_all_op() {
	    let localctx = new Qual_all_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1278, PostgreSQLParser.RULE_qual_all_op);
	    try {
	        this.state = 9509;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	        case 10:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 21:
	        case 23:
	        case 25:
	        case 27:
	        case 29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9503;
	            this.all_op();
	            break;
	        case 271:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9504;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 9505;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9506;
	            this.any_operator();
	            this.state = 9507;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subquery_Op() {
	    let localctx = new Subquery_OpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1280, PostgreSQLParser.RULE_subquery_Op);
	    try {
	        this.state = 9523;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,620,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9511;
	            this.all_op();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9512;
	            this.match(PostgreSQLParser.OPERATOR);
	            this.state = 9513;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9514;
	            this.any_operator();
	            this.state = 9515;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9517;
	            this.match(PostgreSQLParser.LIKE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9518;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 9519;
	            this.match(PostgreSQLParser.LIKE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9520;
	            this.match(PostgreSQLParser.ILIKE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9521;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 9522;
	            this.match(PostgreSQLParser.ILIKE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_list() {
	    let localctx = new Expr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1282, PostgreSQLParser.RULE_expr_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9525;
	        this.a_expr();
	        this.state = 9530;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,621,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 9526;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 9527;
	                this.a_expr(); 
	            }
	            this.state = 9532;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,621,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_arg_list() {
	    let localctx = new Func_arg_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1284, PostgreSQLParser.RULE_func_arg_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9533;
	        this.func_arg_expr();
	        this.state = 9538;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,622,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 9534;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 9535;
	                this.func_arg_expr(); 
	            }
	            this.state = 9540;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,622,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_arg_expr() {
	    let localctx = new Func_arg_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1286, PostgreSQLParser.RULE_func_arg_expr);
	    var _la = 0;
	    try {
	        this.state = 9546;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,623,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9541;
	            this.a_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9542;
	            this.param_name();
	            this.state = 9543;
	            _la = this._input.LA(1);
	            if(!(_la===20 || _la===22)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 9544;
	            this.a_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_list() {
	    let localctx = new Type_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1288, PostgreSQLParser.RULE_type_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9548;
	        this.typename();
	        this.state = 9553;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 9549;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9550;
	            this.typename();
	            this.state = 9555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_expr() {
	    let localctx = new Array_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1290, PostgreSQLParser.RULE_array_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9556;
	        this.match(PostgreSQLParser.OPEN_BRACKET);
	        this.state = 9559;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 2:
	        case 12:
	        case 13:
	        case 28:
	        case 29:
	        case 33:
	        case 35:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 89:
	        case 92:
	        case 96:
	        case 98:
	        case 99:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 650:
	        case 654:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 671:
	        	this.state = 9557;
	        	this.expr_list();
	        	break;
	        case 4:
	        	this.state = 9558;
	        	this.array_expr_list();
	        	break;
	        case 5:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 9561;
	        this.match(PostgreSQLParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_expr_list() {
	    let localctx = new Array_expr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1292, PostgreSQLParser.RULE_array_expr_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9563;
	        this.array_expr();
	        this.state = 9568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 9564;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9565;
	            this.array_expr();
	            this.state = 9570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extract_list() {
	    let localctx = new Extract_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1294, PostgreSQLParser.RULE_extract_list);
	    try {
	        this.state = 9576;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 123:
	        case 130:
	        case 144:
	        case 153:
	        case 157:
	        case 161:
	        case 167:
	        case 172:
	        case 176:
	        case 207:
	        case 210:
	        case 218:
	        case 232:
	        case 240:
	        case 254:
	        case 257:
	        case 258:
	        case 261:
	        case 262:
	        case 272:
	        case 286:
	        case 300:
	        case 306:
	        case 312:
	        case 316:
	        case 317:
	        case 319:
	        case 326:
	        case 353:
	        case 377:
	        case 433:
	        case 434:
	        case 477:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9571;
	            this.extract_arg();
	            this.state = 9572;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 9573;
	            this.a_expr();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extract_arg() {
	    let localctx = new Extract_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1296, PostgreSQLParser.RULE_extract_arg);
	    try {
	        this.state = 9586;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 123:
	        case 130:
	        case 144:
	        case 153:
	        case 157:
	        case 161:
	        case 167:
	        case 172:
	        case 207:
	        case 210:
	        case 232:
	        case 240:
	        case 258:
	        case 261:
	        case 262:
	        case 272:
	        case 286:
	        case 300:
	        case 306:
	        case 312:
	        case 316:
	        case 317:
	        case 326:
	        case 353:
	        case 433:
	        case 434:
	        case 477:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9578;
	            this.identifier();
	            break;
	        case 377:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9579;
	            this.match(PostgreSQLParser.YEAR_P);
	            break;
	        case 257:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9580;
	            this.match(PostgreSQLParser.MONTH_P);
	            break;
	        case 176:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9581;
	            this.match(PostgreSQLParser.DAY_P);
	            break;
	        case 218:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9582;
	            this.match(PostgreSQLParser.HOUR_P);
	            break;
	        case 254:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9583;
	            this.match(PostgreSQLParser.MINUTE_P);
	            break;
	        case 319:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9584;
	            this.match(PostgreSQLParser.SECOND_P);
	            break;
	        case 645:
	        case 647:
	        case 649:
	        case 671:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9585;
	            this.sconst();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unicode_normal_form() {
	    let localctx = new Unicode_normal_formContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1298, PostgreSQLParser.RULE_unicode_normal_form);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9588;
	        _la = this._input.LA(1);
	        if(!(((((_la - 483)) & ~0x1f) === 0 && ((1 << (_la - 483)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	overlay_list() {
	    let localctx = new Overlay_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1300, PostgreSQLParser.RULE_overlay_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9590;
	        this.a_expr();
	        this.state = 9591;
	        this.match(PostgreSQLParser.PLACING);
	        this.state = 9592;
	        this.a_expr();
	        this.state = 9593;
	        this.match(PostgreSQLParser.FROM);
	        this.state = 9594;
	        this.a_expr();
	        this.state = 9597;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 9595;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 9596;
	            this.a_expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	position_list() {
	    let localctx = new Position_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1302, PostgreSQLParser.RULE_position_list);
	    try {
	        this.state = 9604;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 12:
	        case 13:
	        case 28:
	        case 29:
	        case 33:
	        case 35:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 75:
	        case 76:
	        case 78:
	        case 89:
	        case 92:
	        case 96:
	        case 98:
	        case 99:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 650:
	        case 654:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9599;
	            this.b_expr(0);
	            this.state = 9600;
	            this.match(PostgreSQLParser.IN_P);
	            this.state = 9601;
	            this.b_expr(0);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	substr_list() {
	    let localctx = new Substr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1304, PostgreSQLParser.RULE_substr_list);
	    try {
	        this.state = 9634;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,631,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9606;
	            this.a_expr();
	            this.state = 9607;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 9608;
	            this.a_expr();
	            this.state = 9609;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 9610;
	            this.a_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9612;
	            this.a_expr();
	            this.state = 9613;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 9614;
	            this.a_expr();
	            this.state = 9615;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 9616;
	            this.a_expr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9618;
	            this.a_expr();
	            this.state = 9619;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 9620;
	            this.a_expr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9622;
	            this.a_expr();
	            this.state = 9623;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 9624;
	            this.a_expr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9626;
	            this.a_expr();
	            this.state = 9627;
	            this.match(PostgreSQLParser.SIMILAR);
	            this.state = 9628;
	            this.a_expr();
	            this.state = 9629;
	            this.match(PostgreSQLParser.ESCAPE);
	            this.state = 9630;
	            this.a_expr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9632;
	            this.expr_list();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trim_list() {
	    let localctx = new Trim_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1306, PostgreSQLParser.RULE_trim_list);
	    try {
	        this.state = 9643;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,632,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9636;
	            this.a_expr();
	            this.state = 9637;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 9638;
	            this.expr_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9640;
	            this.match(PostgreSQLParser.FROM);
	            this.state = 9641;
	            this.expr_list();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9642;
	            this.expr_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_expr() {
	    let localctx = new In_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1308, PostgreSQLParser.RULE_in_expr);
	    try {
	        this.state = 9650;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,633,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new In_expr_selectContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9645;
	            this.select_with_parens();
	            break;

	        case 2:
	            localctx = new In_expr_listContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9646;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 9647;
	            this.expr_list();
	            this.state = 9648;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_expr() {
	    let localctx = new Case_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1310, PostgreSQLParser.RULE_case_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9652;
	        this.match(PostgreSQLParser.CASE);
	        this.state = 9653;
	        this.case_arg();
	        this.state = 9654;
	        this.when_clause_list();
	        this.state = 9655;
	        this.case_default();
	        this.state = 9656;
	        this.match(PostgreSQLParser.END_P);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	when_clause_list() {
	    let localctx = new When_clause_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1312, PostgreSQLParser.RULE_when_clause_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9659; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 9658;
	            this.when_clause();
	            this.state = 9661; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===102);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	when_clause() {
	    let localctx = new When_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1314, PostgreSQLParser.RULE_when_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9663;
	        this.match(PostgreSQLParser.WHEN);
	        this.state = 9664;
	        this.a_expr();
	        this.state = 9665;
	        this.match(PostgreSQLParser.THEN);
	        this.state = 9666;
	        this.a_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_default() {
	    let localctx = new Case_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1316, PostgreSQLParser.RULE_case_default);
	    try {
	        this.state = 9671;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 58:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9668;
	            this.match(PostgreSQLParser.ELSE);
	            this.state = 9669;
	            this.a_expr();
	            break;
	        case 454:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_arg() {
	    let localctx = new Case_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1318, PostgreSQLParser.RULE_case_arg);
	    try {
	        this.state = 9675;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 12:
	        case 13:
	        case 28:
	        case 29:
	        case 33:
	        case 35:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 89:
	        case 92:
	        case 96:
	        case 98:
	        case 99:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 650:
	        case 654:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9673;
	            this.a_expr();
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnref() {
	    let localctx = new ColumnrefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1320, PostgreSQLParser.RULE_columnref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9677;
	        this.colid();
	        this.state = 9679;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,637,this._ctx);
	        if(la_===1) {
	            this.state = 9678;
	            this.indirection();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indirection_el() {
	    let localctx = new Indirection_elContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1322, PostgreSQLParser.RULE_indirection_el);
	    try {
	        this.state = 9696;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9681;
	            this.match(PostgreSQLParser.DOT);
	            this.state = 9684;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 251:
	            case 252:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 386:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 433:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 504:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 520:
	            case 521:
	            case 522:
	            case 523:
	            case 524:
	            case 525:
	            case 526:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 545:
	            case 546:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 559:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 590:
	            case 591:
	            case 592:
	            case 593:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 607:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 637:
	            case 641:
	            case 661:
	            case 662:
	                this.state = 9682;
	                this.attr_name();
	                break;
	            case 9:
	                this.state = 9683;
	                this.match(PostgreSQLParser.STAR);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9686;
	            this.match(PostgreSQLParser.OPEN_BRACKET);
	            this.state = 9692;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,639,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 9687;
	                this.a_expr();
	                break;

	            case 2:
	                this.state = 9688;
	                this.opt_slice_bound();
	                this.state = 9689;
	                this.match(PostgreSQLParser.COLON);
	                this.state = 9690;
	                this.opt_slice_bound();
	                break;

	            }
	            this.state = 9694;
	            this.match(PostgreSQLParser.CLOSE_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_slice_bound() {
	    let localctx = new Opt_slice_boundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1324, PostgreSQLParser.RULE_opt_slice_bound);
	    try {
	        this.state = 9700;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 12:
	        case 13:
	        case 28:
	        case 29:
	        case 33:
	        case 35:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 89:
	        case 92:
	        case 96:
	        case 98:
	        case 99:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 650:
	        case 654:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9698;
	            this.a_expr();
	            break;
	        case 5:
	        case 8:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indirection() {
	    let localctx = new IndirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1326, PostgreSQLParser.RULE_indirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9703; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 9702;
	        		this.indirection_el();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 9705; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,642, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_indirection() {
	    let localctx = new Opt_indirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1328, PostgreSQLParser.RULE_opt_indirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9710;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,643,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 9707;
	                this.indirection_el(); 
	            }
	            this.state = 9712;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,643,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_target_list() {
	    let localctx = new Opt_target_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1330, PostgreSQLParser.RULE_opt_target_list);
	    try {
	        this.state = 9715;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,644,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9713;
	            this.target_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	target_list() {
	    let localctx = new Target_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1332, PostgreSQLParser.RULE_target_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9717;
	        this.target_el();
	        this.state = 9722;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,645,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 9718;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 9719;
	                this.target_el(); 
	            }
	            this.state = 9724;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,645,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	target_el() {
	    let localctx = new Target_elContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1334, PostgreSQLParser.RULE_target_el);
	    try {
	        this.state = 9733;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 12:
	        case 13:
	        case 28:
	        case 29:
	        case 33:
	        case 35:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 89:
	        case 92:
	        case 96:
	        case 98:
	        case 99:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 650:
	        case 654:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 671:
	            localctx = new Target_labelContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9725;
	            this.a_expr();
	            this.state = 9730;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,646,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 9726;
	                this.match(PostgreSQLParser.AS);
	                this.state = 9727;
	                this.collabel();
	                break;

	            case 2:
	                this.state = 9728;
	                this.identifier();
	                break;

	            case 3:
	                break;

	            }
	            break;
	        case 9:
	            localctx = new Target_starContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9732;
	            this.match(PostgreSQLParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_name_list() {
	    let localctx = new Qualified_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1336, PostgreSQLParser.RULE_qualified_name_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9735;
	        this.qualified_name();
	        this.state = 9740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 9736;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9737;
	            this.qualified_name();
	            this.state = 9742;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_name() {
	    let localctx = new Qualified_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1338, PostgreSQLParser.RULE_qualified_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9743;
	        this.colid();
	        this.state = 9745;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===11) {
	            this.state = 9744;
	            this.indirection();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_list() {
	    let localctx = new Name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1340, PostgreSQLParser.RULE_name_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9747;
	        this.name();
	        this.state = 9752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 9748;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9749;
	            this.name();
	            this.state = 9754;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1342, PostgreSQLParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9755;
	        this.colid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attr_name() {
	    let localctx = new Attr_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1344, PostgreSQLParser.RULE_attr_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9757;
	        this.collabel();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_name() {
	    let localctx = new File_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1346, PostgreSQLParser.RULE_file_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9759;
	        this.sconst();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_name() {
	    let localctx = new Func_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1348, PostgreSQLParser.RULE_func_name);
	    try {
	        this.state = 9768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,651,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9761;
	            this.builtin_function_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9762;
	            this.type_function_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9763;
	            this.colid();
	            this.state = 9764;
	            this.indirection();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9766;
	            this.match(PostgreSQLParser.LEFT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9767;
	            this.match(PostgreSQLParser.RIGHT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aexprconst() {
	    let localctx = new AexprconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1350, PostgreSQLParser.RULE_aexprconst);
	    try {
	        this.state = 9802;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,654,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9770;
	            this.iconst();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9771;
	            this.fconst();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9772;
	            this.sconst();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9773;
	            this.bconst();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9774;
	            this.xconst();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9775;
	            this.func_name();
	            this.state = 9783;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 645:
	            case 647:
	            case 649:
	            case 671:
	                this.state = 9776;
	                this.sconst();
	                break;
	            case 2:
	                this.state = 9777;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 9778;
	                this.func_arg_list();
	                this.state = 9779;
	                this.opt_sort_clause();
	                this.state = 9780;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	                this.state = 9781;
	                this.sconst();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9785;
	            this.consttypename();
	            this.state = 9786;
	            this.sconst();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9788;
	            this.constinterval();
	            this.state = 9797;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 645:
	            case 647:
	            case 649:
	            case 671:
	                this.state = 9789;
	                this.sconst();
	                this.state = 9790;
	                this.opt_interval();
	                break;
	            case 2:
	                this.state = 9792;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 9793;
	                this.iconst();
	                this.state = 9794;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	                this.state = 9795;
	                this.sconst();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 9799;
	            this.match(PostgreSQLParser.TRUE_P);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 9800;
	            this.match(PostgreSQLParser.FALSE_P);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 9801;
	            this.match(PostgreSQLParser.NULL_P);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xconst() {
	    let localctx = new XconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1352, PostgreSQLParser.RULE_xconst);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9804;
	        this.match(PostgreSQLParser.HexadecimalStringConstant);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bconst() {
	    let localctx = new BconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1354, PostgreSQLParser.RULE_bconst);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9806;
	        this.match(PostgreSQLParser.BinaryStringConstant);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fconst() {
	    let localctx = new FconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1356, PostgreSQLParser.RULE_fconst);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9808;
	        this.match(PostgreSQLParser.Numeric);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iconst() {
	    let localctx = new IconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1358, PostgreSQLParser.RULE_iconst);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9810;
	        this.match(PostgreSQLParser.Integral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sconst() {
	    let localctx = new SconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1360, PostgreSQLParser.RULE_sconst);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9812;
	        this.anysconst();
	        this.state = 9813;
	        this.opt_uescape();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anysconst() {
	    let localctx = new AnysconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1362, PostgreSQLParser.RULE_anysconst);
	    var _la = 0;
	    try {
	        this.state = 9826;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 645:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9815;
	            this.match(PostgreSQLParser.StringConstant);
	            break;
	        case 647:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9816;
	            this.match(PostgreSQLParser.UnicodeEscapeStringConstant);
	            break;
	        case 649:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9817;
	            this.match(PostgreSQLParser.BeginDollarStringConstant);
	            this.state = 9821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===677) {
	                this.state = 9818;
	                this.match(PostgreSQLParser.DollarText);
	                this.state = 9823;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 9824;
	            this.match(PostgreSQLParser.EndDollarStringConstant);
	            break;
	        case 671:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9825;
	            this.match(PostgreSQLParser.EscapeStringConstant);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_uescape() {
	    let localctx = new Opt_uescapeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1364, PostgreSQLParser.RULE_opt_uescape);
	    try {
	        this.state = 9831;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,657,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9828;
	            this.match(PostgreSQLParser.UESCAPE);
	            this.state = 9829;
	            this.anysconst();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signediconst() {
	    let localctx = new SignediconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1366, PostgreSQLParser.RULE_signediconst);
	    try {
	        this.state = 9838;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 658:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9833;
	            this.iconst();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9834;
	            this.match(PostgreSQLParser.PLUS);
	            this.state = 9835;
	            this.iconst();
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9836;
	            this.match(PostgreSQLParser.MINUS);
	            this.state = 9837;
	            this.iconst();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleid() {
	    let localctx = new RoleidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1368, PostgreSQLParser.RULE_roleid);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9840;
	        this.rolespec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rolespec() {
	    let localctx = new RolespecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1370, PostgreSQLParser.RULE_rolespec);
	    try {
	        this.state = 9845;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9842;
	            this.nonreservedword();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9843;
	            this.match(PostgreSQLParser.CURRENT_USER);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9844;
	            this.match(PostgreSQLParser.SESSION_USER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	role_list() {
	    let localctx = new Role_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1372, PostgreSQLParser.RULE_role_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9847;
	        this.rolespec();
	        this.state = 9852;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 9848;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 9849;
	            this.rolespec();
	            this.state = 9854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colid() {
	    let localctx = new ColidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1374, PostgreSQLParser.RULE_colid);
	    try {
	        this.state = 9861;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,661,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9855;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9856;
	            this.unreserved_keyword();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9857;
	            this.col_name_keyword();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9858;
	            this.plsql_unreserved_keyword();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9859;
	            this.match(PostgreSQLParser.LEFT);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9860;
	            this.match(PostgreSQLParser.RIGHT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_alias() {
	    let localctx = new Table_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1376, PostgreSQLParser.RULE_table_alias);
	    try {
	        this.state = 9867;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,662,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9863;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9864;
	            this.unreserved_keyword();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9865;
	            this.col_name_keyword();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9866;
	            this.plsql_unreserved_keyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_function_name() {
	    let localctx = new Type_function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1378, PostgreSQLParser.RULE_type_function_name);
	    try {
	        this.state = 9873;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,663,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9869;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9870;
	            this.unreserved_keyword();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9871;
	            this.plsql_unreserved_keyword();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9872;
	            this.type_func_name_keyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonreservedword() {
	    let localctx = new NonreservedwordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1380, PostgreSQLParser.RULE_nonreservedword);
	    try {
	        this.state = 9879;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,664,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9875;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9876;
	            this.unreserved_keyword();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9877;
	            this.col_name_keyword();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9878;
	            this.type_func_name_keyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collabel() {
	    let localctx = new CollabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1382, PostgreSQLParser.RULE_collabel);
	    try {
	        this.state = 9887;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,665,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9881;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9882;
	            this.plsql_unreserved_keyword();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9883;
	            this.unreserved_keyword();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9884;
	            this.col_name_keyword();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9885;
	            this.type_func_name_keyword();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9886;
	            this.reserved_keyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1384, PostgreSQLParser.RULE_identifier);
	    try {
	        this.state = 9896;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 636:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9889;
	            this.match(PostgreSQLParser.Identifier);
	            this.state = 9890;
	            this.opt_uescape();
	            break;
	        case 637:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9891;
	            this.match(PostgreSQLParser.QuotedIdentifier);
	            break;
	        case 641:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9892;
	            this.match(PostgreSQLParser.UnicodeQuotedIdentifier);
	            break;
	        case 661:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9893;
	            this.plsqlvariablename();
	            break;
	        case 662:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9894;
	            this.plsqlidentifier();
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 123:
	        case 130:
	        case 144:
	        case 153:
	        case 157:
	        case 161:
	        case 167:
	        case 172:
	        case 207:
	        case 210:
	        case 232:
	        case 240:
	        case 258:
	        case 261:
	        case 262:
	        case 272:
	        case 286:
	        case 300:
	        case 306:
	        case 312:
	        case 316:
	        case 317:
	        case 326:
	        case 353:
	        case 433:
	        case 434:
	        case 477:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9895;
	            this.plsql_unreserved_keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plsqlidentifier() {
	    let localctx = new PlsqlidentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1386, PostgreSQLParser.RULE_plsqlidentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9898;
	        this.match(PostgreSQLParser.PLSQLIDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unreserved_keyword() {
	    let localctx = new Unreserved_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1388, PostgreSQLParser.RULE_unreserved_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9900;
	        _la = this._input.LA(1);
	        if(!(((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 4294967265) !== 0) || ((((_la - 156)) & ~0x1f) === 0 && ((1 << (_la - 156)) & 4294967295) !== 0) || ((((_la - 188)) & ~0x1f) === 0 && ((1 << (_la - 188)) & 4294967295) !== 0) || ((((_la - 220)) & ~0x1f) === 0 && ((1 << (_la - 220)) & 3221225471) !== 0) || ((((_la - 252)) & ~0x1f) === 0 && ((1 << (_la - 252)) & 4294967293) !== 0) || ((((_la - 284)) & ~0x1f) === 0 && ((1 << (_la - 284)) & 4293918719) !== 0) || ((((_la - 316)) & ~0x1f) === 0 && ((1 << (_la - 316)) & 4294967295) !== 0) || ((((_la - 348)) & ~0x1f) === 0 && ((1 << (_la - 348)) & 4294967295) !== 0) || ((((_la - 433)) & ~0x1f) === 0 && ((1 << (_la - 433)) & 4291821567) !== 0) || ((((_la - 465)) & ~0x1f) === 0 && ((1 << (_la - 465)) & 16770399) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	col_name_keyword() {
	    let localctx = new Col_name_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1390, PostgreSQLParser.RULE_col_name_keyword);
	    try {
	        this.state = 9954;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,667,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9902;
	            this.match(PostgreSQLParser.BETWEEN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9903;
	            this.match(PostgreSQLParser.BIGINT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9904;
	            this.bit();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9905;
	            this.match(PostgreSQLParser.BOOLEAN_P);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9906;
	            this.match(PostgreSQLParser.CHAR_P);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9907;
	            this.character();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9908;
	            this.match(PostgreSQLParser.COALESCE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9909;
	            this.match(PostgreSQLParser.DEC);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 9910;
	            this.match(PostgreSQLParser.DECIMAL_P);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 9911;
	            this.match(PostgreSQLParser.EXISTS);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 9912;
	            this.match(PostgreSQLParser.EXTRACT);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 9913;
	            this.match(PostgreSQLParser.FLOAT_P);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 9914;
	            this.match(PostgreSQLParser.GREATEST);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 9915;
	            this.match(PostgreSQLParser.GROUPING);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 9916;
	            this.match(PostgreSQLParser.INOUT);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 9917;
	            this.match(PostgreSQLParser.INT_P);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 9918;
	            this.match(PostgreSQLParser.INTEGER);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 9919;
	            this.match(PostgreSQLParser.INTERVAL);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 9920;
	            this.match(PostgreSQLParser.LEAST);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 9921;
	            this.match(PostgreSQLParser.NATIONAL);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 9922;
	            this.match(PostgreSQLParser.NCHAR);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 9923;
	            this.match(PostgreSQLParser.NONE);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 9924;
	            this.match(PostgreSQLParser.NORMALIZE);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 9925;
	            this.match(PostgreSQLParser.NULLIF);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 9926;
	            this.numeric();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 9927;
	            this.match(PostgreSQLParser.OUT_P);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 9928;
	            this.match(PostgreSQLParser.OVERLAY);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 9929;
	            this.match(PostgreSQLParser.POSITION);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 9930;
	            this.match(PostgreSQLParser.PRECISION);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 9931;
	            this.match(PostgreSQLParser.REAL);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 9932;
	            this.match(PostgreSQLParser.ROW);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 9933;
	            this.match(PostgreSQLParser.SETOF);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 9934;
	            this.match(PostgreSQLParser.SMALLINT);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 9935;
	            this.match(PostgreSQLParser.SUBSTRING);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 9936;
	            this.match(PostgreSQLParser.TIME);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 9937;
	            this.match(PostgreSQLParser.TIMESTAMP);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 9938;
	            this.match(PostgreSQLParser.TREAT);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 9939;
	            this.match(PostgreSQLParser.TRIM);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 9940;
	            this.match(PostgreSQLParser.VALUES);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 9941;
	            this.match(PostgreSQLParser.VARCHAR);
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 9942;
	            this.match(PostgreSQLParser.XMLATTRIBUTES);
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 9943;
	            this.match(PostgreSQLParser.XMLCONCAT);
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 9944;
	            this.match(PostgreSQLParser.XMLELEMENT);
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 9945;
	            this.match(PostgreSQLParser.XMLEXISTS);
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 9946;
	            this.match(PostgreSQLParser.XMLFOREST);
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 9947;
	            this.match(PostgreSQLParser.XMLNAMESPACES);
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 9948;
	            this.match(PostgreSQLParser.XMLPARSE);
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 9949;
	            this.match(PostgreSQLParser.XMLPI);
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 9950;
	            this.match(PostgreSQLParser.XMLROOT);
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 9951;
	            this.match(PostgreSQLParser.XMLSERIALIZE);
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 9952;
	            this.match(PostgreSQLParser.XMLTABLE);
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 9953;
	            this.builtin_function_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_func_name_keyword() {
	    let localctx = new Type_func_name_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1392, PostgreSQLParser.RULE_type_func_name_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9956;
	        _la = this._input.LA(1);
	        if(!(((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 7069695) !== 0) || _la===472)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reserved_keyword() {
	    let localctx = new Reserved_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1394, PostgreSQLParser.RULE_reserved_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9958;
	        _la = this._input.LA(1);
	        if(!(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 4286578687) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 4294966783) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 4095) !== 0) || _la===454)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtin_function_name() {
	    let localctx = new Builtin_function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1396, PostgreSQLParser.RULE_builtin_function_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9960;
	        _la = this._input.LA(1);
	        if(!(_la===304 || ((((_la - 418)) & ~0x1f) === 0 && ((1 << (_la - 418)) & 127) !== 0) || ((((_la - 504)) & ~0x1f) === 0 && ((1 << (_la - 504)) & 4294836737) !== 0) || ((((_la - 536)) & ~0x1f) === 0 && ((1 << (_la - 536)) & 4294967295) !== 0) || ((((_la - 568)) & ~0x1f) === 0 && ((1 << (_la - 568)) & 4294967295) !== 0) || ((((_la - 600)) & ~0x1f) === 0 && ((1 << (_la - 600)) & 4294967295) !== 0) || ((((_la - 632)) & ~0x1f) === 0 && ((1 << (_la - 632)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pl_function() {
	    let localctx = new Pl_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1398, PostgreSQLParser.RULE_pl_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9962;
	        this.comp_options();
	        this.state = 9963;
	        this.pl_block();
	        this.state = 9964;
	        this.opt_semi();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_options() {
	    let localctx = new Comp_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1400, PostgreSQLParser.RULE_comp_options);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===29) {
	            this.state = 9966;
	            this.comp_option();
	            this.state = 9971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_option() {
	    let localctx = new Comp_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1402, PostgreSQLParser.RULE_comp_option);
	    try {
	        this.state = 9992;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,669,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9972;
	            this.sharp();
	            this.state = 9973;
	            this.match(PostgreSQLParser.OPTION);
	            this.state = 9974;
	            this.match(PostgreSQLParser.DUMP);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9976;
	            this.sharp();
	            this.state = 9977;
	            this.match(PostgreSQLParser.PRINT_STRICT_PARAMS);
	            this.state = 9978;
	            this.option_value();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9980;
	            this.sharp();
	            this.state = 9981;
	            this.match(PostgreSQLParser.VARIABLE_CONFLICT);
	            this.state = 9982;
	            this.match(PostgreSQLParser.ERROR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9984;
	            this.sharp();
	            this.state = 9985;
	            this.match(PostgreSQLParser.VARIABLE_CONFLICT);
	            this.state = 9986;
	            this.match(PostgreSQLParser.USE_VARIABLE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9988;
	            this.sharp();
	            this.state = 9989;
	            this.match(PostgreSQLParser.VARIABLE_CONFLICT);
	            this.state = 9990;
	            this.match(PostgreSQLParser.USE_COLUMN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sharp() {
	    let localctx = new SharpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1404, PostgreSQLParser.RULE_sharp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9994;
	        this.match(PostgreSQLParser.Operator);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	option_value() {
	    let localctx = new Option_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1406, PostgreSQLParser.RULE_option_value);
	    try {
	        this.state = 10000;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,670,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9996;
	            this.sconst();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9997;
	            this.reserved_keyword();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9998;
	            this.plsql_unreserved_keyword();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9999;
	            this.unreserved_keyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_semi() {
	    let localctx = new Opt_semiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1408, PostgreSQLParser.RULE_opt_semi);
	    try {
	        this.state = 10004;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case -1:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10003;
	            this.match(PostgreSQLParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pl_block() {
	    let localctx = new Pl_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1410, PostgreSQLParser.RULE_pl_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10006;
	        this.decl_sect();
	        this.state = 10007;
	        this.match(PostgreSQLParser.BEGIN_P);
	        this.state = 10008;
	        this.proc_sect();
	        this.state = 10009;
	        this.exception_sect();
	        this.state = 10010;
	        this.match(PostgreSQLParser.END_P);
	        this.state = 10011;
	        this.opt_label();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_sect() {
	    let localctx = new Decl_sectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1412, PostgreSQLParser.RULE_decl_sect);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10013;
	        this.opt_block_label();
	        this.state = 10018;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===178) {
	            this.state = 10014;
	            this.decl_start();
	            this.state = 10016;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,672,this._ctx);
	            if(la_===1) {
	                this.state = 10015;
	                this.decl_stmts();

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_start() {
	    let localctx = new Decl_startContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1414, PostgreSQLParser.RULE_decl_start);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10020;
	        this.match(PostgreSQLParser.DECLARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_stmts() {
	    let localctx = new Decl_stmtsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1416, PostgreSQLParser.RULE_decl_stmts);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10023; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 10022;
	        		this.decl_stmt();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 10025; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,674, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label_decl() {
	    let localctx = new Label_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1418, PostgreSQLParser.RULE_label_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10027;
	        this.match(PostgreSQLParser.LESS_LESS);
	        this.state = 10028;
	        this.any_identifier();
	        this.state = 10029;
	        this.match(PostgreSQLParser.GREATER_GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_stmt() {
	    let localctx = new Decl_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1420, PostgreSQLParser.RULE_decl_stmt);
	    try {
	        this.state = 10034;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,675,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10031;
	            this.decl_statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10032;
	            this.match(PostgreSQLParser.DECLARE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10033;
	            this.label_decl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_statement() {
	    let localctx = new Decl_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1422, PostgreSQLParser.RULE_decl_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10036;
	        this.decl_varname();
	        this.state = 10052;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,676,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 10037;
	            this.match(PostgreSQLParser.ALIAS);
	            this.state = 10038;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 10039;
	            this.decl_aliasitem();
	            break;

	        case 2:
	            this.state = 10040;
	            this.decl_const();
	            this.state = 10041;
	            this.decl_datatype();
	            this.state = 10042;
	            this.decl_collate();
	            this.state = 10043;
	            this.decl_notnull();
	            this.state = 10044;
	            this.decl_defval();
	            break;

	        case 3:
	            this.state = 10046;
	            this.opt_scrollable();
	            this.state = 10047;
	            this.match(PostgreSQLParser.CURSOR);
	            this.state = 10048;
	            this.decl_cursor_args();
	            this.state = 10049;
	            this.decl_is_for();
	            this.state = 10050;
	            this.decl_cursor_query();
	            break;

	        }
	        this.state = 10054;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_scrollable() {
	    let localctx = new Opt_scrollableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1424, PostgreSQLParser.RULE_opt_scrollable);
	    try {
	        this.state = 10060;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 172:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 262:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10057;
	            this.match(PostgreSQLParser.NO);
	            this.state = 10058;
	            this.match(PostgreSQLParser.SCROLL);
	            break;
	        case 317:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10059;
	            this.match(PostgreSQLParser.SCROLL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_cursor_query() {
	    let localctx = new Decl_cursor_queryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1426, PostgreSQLParser.RULE_decl_cursor_query);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10062;
	        this.selectstmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_cursor_args() {
	    let localctx = new Decl_cursor_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1428, PostgreSQLParser.RULE_decl_cursor_args);
	    try {
	        this.state = 10069;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	        case 116:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10065;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 10066;
	            this.decl_cursor_arglist();
	            this.state = 10067;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_cursor_arglist() {
	    let localctx = new Decl_cursor_arglistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1430, PostgreSQLParser.RULE_decl_cursor_arglist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10071;
	        this.decl_cursor_arg();
	        this.state = 10076;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 10072;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 10073;
	            this.decl_cursor_arg();
	            this.state = 10078;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_cursor_arg() {
	    let localctx = new Decl_cursor_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1432, PostgreSQLParser.RULE_decl_cursor_arg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10079;
	        this.decl_varname();
	        this.state = 10080;
	        this.decl_datatype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_is_for() {
	    let localctx = new Decl_is_forContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1434, PostgreSQLParser.RULE_decl_is_for);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10082;
	        _la = this._input.LA(1);
	        if(!(_la===62 || _la===116)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_aliasitem() {
	    let localctx = new Decl_aliasitemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1436, PostgreSQLParser.RULE_decl_aliasitem);
	    try {
	        this.state = 10086;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10084;
	            this.match(PostgreSQLParser.PARAM);
	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10085;
	            this.colid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_varname() {
	    let localctx = new Decl_varnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1438, PostgreSQLParser.RULE_decl_varname);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10088;
	        this.any_identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_const() {
	    let localctx = new Decl_constContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1440, PostgreSQLParser.RULE_decl_const);
	    try {
	        this.state = 10092;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,681,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10091;
	            this.match(PostgreSQLParser.CONSTANT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_datatype() {
	    let localctx = new Decl_datatypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1442, PostgreSQLParser.RULE_decl_datatype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10094;
	        this.typename();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_collate() {
	    let localctx = new Decl_collateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1444, PostgreSQLParser.RULE_decl_collate);
	    try {
	        this.state = 10099;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 10:
	        case 20:
	        case 53:
	        case 77:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10097;
	            this.match(PostgreSQLParser.COLLATE);
	            this.state = 10098;
	            this.any_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_notnull() {
	    let localctx = new Decl_notnullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1446, PostgreSQLParser.RULE_decl_notnull);
	    try {
	        this.state = 10104;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 10:
	        case 20:
	        case 53:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10102;
	            this.match(PostgreSQLParser.NOT);
	            this.state = 10103;
	            this.match(PostgreSQLParser.NULL_P);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_defval() {
	    let localctx = new Decl_defvalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1448, PostgreSQLParser.RULE_decl_defval);
	    try {
	        this.state = 10110;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 10:
	        case 20:
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10107;
	            this.decl_defkey();
	            this.state = 10108;
	            this.sql_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl_defkey() {
	    let localctx = new Decl_defkeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1450, PostgreSQLParser.RULE_decl_defkey);
	    try {
	        this.state = 10114;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 20:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10112;
	            this.assign_operator();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10113;
	            this.match(PostgreSQLParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_operator() {
	    let localctx = new Assign_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1452, PostgreSQLParser.RULE_assign_operator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10116;
	        _la = this._input.LA(1);
	        if(!(_la===10 || _la===20)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	proc_sect() {
	    let localctx = new Proc_sectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1454, PostgreSQLParser.RULE_proc_sect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10121;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,686,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 10118;
	                this.proc_stmt(); 
	            }
	            this.state = 10123;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,686,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	proc_stmt() {
	    let localctx = new Proc_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1456, PostgreSQLParser.RULE_proc_stmt);
	    try {
	        this.state = 10151;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,687,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10124;
	            this.pl_block();
	            this.state = 10125;
	            this.match(PostgreSQLParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10127;
	            this.stmt_return();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10128;
	            this.stmt_raise();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10129;
	            this.stmt_assign();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 10130;
	            this.stmt_if();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 10131;
	            this.stmt_case();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 10132;
	            this.stmt_loop();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 10133;
	            this.stmt_while();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 10134;
	            this.stmt_for();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 10135;
	            this.stmt_foreach_a();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 10136;
	            this.stmt_exit();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 10137;
	            this.stmt_assert();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 10138;
	            this.stmt_execsql();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 10139;
	            this.stmt_dynexecute();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 10140;
	            this.stmt_perform();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 10141;
	            this.stmt_call();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 10142;
	            this.stmt_getdiag();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 10143;
	            this.stmt_open();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 10144;
	            this.stmt_fetch();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 10145;
	            this.stmt_move();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 10146;
	            this.stmt_close();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 10147;
	            this.stmt_null();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 10148;
	            this.stmt_commit();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 10149;
	            this.stmt_rollback();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 10150;
	            this.stmt_set();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_perform() {
	    let localctx = new Stmt_performContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1458, PostgreSQLParser.RULE_stmt_perform);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10153;
	        this.match(PostgreSQLParser.PERFORM);
	        this.state = 10154;
	        this.expr_until_semi();
	        this.state = 10155;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_call() {
	    let localctx = new Stmt_callContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1460, PostgreSQLParser.RULE_stmt_call);
	    try {
	        this.state = 10171;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 433:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10157;
	            this.match(PostgreSQLParser.CALL);
	            this.state = 10158;
	            this.any_identifier();
	            this.state = 10159;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 10160;
	            this.opt_expr_list();
	            this.state = 10161;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 10162;
	            this.match(PostgreSQLParser.SEMI);
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10164;
	            this.match(PostgreSQLParser.DO);
	            this.state = 10165;
	            this.any_identifier();
	            this.state = 10166;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 10167;
	            this.opt_expr_list();
	            this.state = 10168;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            this.state = 10169;
	            this.match(PostgreSQLParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_expr_list() {
	    let localctx = new Opt_expr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1462, PostgreSQLParser.RULE_opt_expr_list);
	    try {
	        this.state = 10175;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 2:
	        case 12:
	        case 13:
	        case 28:
	        case 29:
	        case 33:
	        case 35:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 89:
	        case 92:
	        case 96:
	        case 98:
	        case 99:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 645:
	        case 647:
	        case 649:
	        case 650:
	        case 654:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 671:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10174;
	            this.expr_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_assign() {
	    let localctx = new Stmt_assignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1464, PostgreSQLParser.RULE_stmt_assign);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10177;
	        this.assign_var();
	        this.state = 10178;
	        this.assign_operator();
	        this.state = 10179;
	        this.sql_expression();
	        this.state = 10180;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_getdiag() {
	    let localctx = new Stmt_getdiagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1466, PostgreSQLParser.RULE_stmt_getdiag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10182;
	        this.match(PostgreSQLParser.GET);
	        this.state = 10183;
	        this.getdiag_area_opt();
	        this.state = 10184;
	        this.match(PostgreSQLParser.DIAGNOSTICS);
	        this.state = 10185;
	        this.getdiag_list();
	        this.state = 10186;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getdiag_area_opt() {
	    let localctx = new Getdiag_area_optContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1468, PostgreSQLParser.RULE_getdiag_area_opt);
	    try {
	        this.state = 10191;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 500:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 434:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10189;
	            this.match(PostgreSQLParser.CURRENT_P);
	            break;
	        case 501:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10190;
	            this.match(PostgreSQLParser.STACKED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getdiag_list() {
	    let localctx = new Getdiag_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1470, PostgreSQLParser.RULE_getdiag_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10193;
	        this.getdiag_list_item();
	        this.state = 10198;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 10194;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 10195;
	            this.getdiag_list_item();
	            this.state = 10200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getdiag_list_item() {
	    let localctx = new Getdiag_list_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1472, PostgreSQLParser.RULE_getdiag_list_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10201;
	        this.getdiag_target();
	        this.state = 10202;
	        this.assign_operator();
	        this.state = 10203;
	        this.getdiag_item();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getdiag_item() {
	    let localctx = new Getdiag_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1474, PostgreSQLParser.RULE_getdiag_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10205;
	        this.colid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getdiag_target() {
	    let localctx = new Getdiag_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1476, PostgreSQLParser.RULE_getdiag_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10207;
	        this.assign_var();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_var() {
	    let localctx = new Assign_varContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1478, PostgreSQLParser.RULE_assign_var);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10211;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.state = 10209;
	            this.any_name();
	            break;
	        case 28:
	            this.state = 10210;
	            this.match(PostgreSQLParser.PARAM);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 10219;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 10213;
	            this.match(PostgreSQLParser.OPEN_BRACKET);
	            this.state = 10214;
	            this.expr_until_rightbracket();
	            this.state = 10215;
	            this.match(PostgreSQLParser.CLOSE_BRACKET);
	            this.state = 10221;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_if() {
	    let localctx = new Stmt_ifContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1480, PostgreSQLParser.RULE_stmt_if);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10222;
	        this.match(PostgreSQLParser.IF_P);
	        this.state = 10223;
	        this.expr_until_then();
	        this.state = 10224;
	        this.match(PostgreSQLParser.THEN);
	        this.state = 10225;
	        this.proc_sect();
	        this.state = 10226;
	        this.stmt_elsifs();
	        this.state = 10227;
	        this.stmt_else();
	        this.state = 10228;
	        this.match(PostgreSQLParser.END_P);
	        this.state = 10229;
	        this.match(PostgreSQLParser.IF_P);
	        this.state = 10230;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_elsifs() {
	    let localctx = new Stmt_elsifsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1482, PostgreSQLParser.RULE_stmt_elsifs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===502) {
	            this.state = 10232;
	            this.match(PostgreSQLParser.ELSIF);
	            this.state = 10233;
	            this.a_expr();
	            this.state = 10234;
	            this.match(PostgreSQLParser.THEN);
	            this.state = 10235;
	            this.proc_sect();
	            this.state = 10241;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_else() {
	    let localctx = new Stmt_elseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1484, PostgreSQLParser.RULE_stmt_else);
	    try {
	        this.state = 10245;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 454:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10243;
	            this.match(PostgreSQLParser.ELSE);
	            this.state = 10244;
	            this.proc_sect();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_case() {
	    let localctx = new Stmt_caseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1486, PostgreSQLParser.RULE_stmt_case);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10247;
	        this.match(PostgreSQLParser.CASE);
	        this.state = 10248;
	        this.opt_expr_until_when();
	        this.state = 10249;
	        this.case_when_list();
	        this.state = 10250;
	        this.opt_case_else();
	        this.state = 10251;
	        this.match(PostgreSQLParser.END_P);
	        this.state = 10252;
	        this.match(PostgreSQLParser.CASE);
	        this.state = 10253;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_expr_until_when() {
	    let localctx = new Opt_expr_until_whenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1488, PostgreSQLParser.RULE_opt_expr_until_when);
	    try {
	        this.state = 10257;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,696,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10256;
	            this.sql_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_when_list() {
	    let localctx = new Case_when_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1490, PostgreSQLParser.RULE_case_when_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10260; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 10259;
	            this.case_when();
	            this.state = 10262; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===102);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_when() {
	    let localctx = new Case_whenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1492, PostgreSQLParser.RULE_case_when);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10264;
	        this.match(PostgreSQLParser.WHEN);
	        this.state = 10265;
	        this.expr_list();
	        this.state = 10266;
	        this.match(PostgreSQLParser.THEN);
	        this.state = 10267;
	        this.proc_sect();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_case_else() {
	    let localctx = new Opt_case_elseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1494, PostgreSQLParser.RULE_opt_case_else);
	    try {
	        this.state = 10272;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 454:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10270;
	            this.match(PostgreSQLParser.ELSE);
	            this.state = 10271;
	            this.proc_sect();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_loop() {
	    let localctx = new Stmt_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1496, PostgreSQLParser.RULE_stmt_loop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10274;
	        this.opt_loop_label();
	        this.state = 10275;
	        this.loop_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_while() {
	    let localctx = new Stmt_whileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1498, PostgreSQLParser.RULE_stmt_while);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10277;
	        this.opt_loop_label();
	        this.state = 10278;
	        this.match(PostgreSQLParser.WHILE);
	        this.state = 10279;
	        this.expr_until_loop();
	        this.state = 10280;
	        this.loop_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_for() {
	    let localctx = new Stmt_forContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1500, PostgreSQLParser.RULE_stmt_for);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10282;
	        this.opt_loop_label();
	        this.state = 10283;
	        this.match(PostgreSQLParser.FOR);
	        this.state = 10284;
	        this.for_control();
	        this.state = 10285;
	        this.loop_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_control() {
	    let localctx = new For_controlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1502, PostgreSQLParser.RULE_for_control);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10287;
	        this.for_variable();
	        this.state = 10288;
	        this.match(PostgreSQLParser.IN_P);
	        this.state = 10304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,699,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 10289;
	            this.cursor_name();
	            this.state = 10290;
	            this.opt_cursor_parameters();
	            break;

	        case 2:
	            this.state = 10292;
	            this.selectstmt();
	            break;

	        case 3:
	            this.state = 10293;
	            this.explainstmt();
	            break;

	        case 4:
	            this.state = 10294;
	            this.match(PostgreSQLParser.EXECUTE);
	            this.state = 10295;
	            this.a_expr();
	            this.state = 10296;
	            this.opt_for_using_expression();
	            break;

	        case 5:
	            this.state = 10298;
	            this.opt_reverse();
	            this.state = 10299;
	            this.a_expr();
	            this.state = 10300;
	            this.match(PostgreSQLParser.DOT_DOT);
	            this.state = 10301;
	            this.a_expr();
	            this.state = 10302;
	            this.opt_by_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_for_using_expression() {
	    let localctx = new Opt_for_using_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1504, PostgreSQLParser.RULE_opt_for_using_expression);
	    try {
	        this.state = 10309;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 519:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10307;
	            this.match(PostgreSQLParser.USING);
	            this.state = 10308;
	            this.expr_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_cursor_parameters() {
	    let localctx = new Opt_cursor_parametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1506, PostgreSQLParser.RULE_opt_cursor_parameters);
	    var _la = 0;
	    try {
	        this.state = 10323;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 519:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10312;
	            this.match(PostgreSQLParser.OPEN_PAREN);
	            this.state = 10313;
	            this.a_expr();
	            this.state = 10318;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===6) {
	                this.state = 10314;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 10315;
	                this.a_expr();
	                this.state = 10320;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 10321;
	            this.match(PostgreSQLParser.CLOSE_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_reverse() {
	    let localctx = new Opt_reverseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1508, PostgreSQLParser.RULE_opt_reverse);
	    try {
	        this.state = 10327;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,703,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10326;
	            this.match(PostgreSQLParser.REVERSE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_by_expression() {
	    let localctx = new Opt_by_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1510, PostgreSQLParser.RULE_opt_by_expression);
	    try {
	        this.state = 10332;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 519:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 147:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10330;
	            this.match(PostgreSQLParser.BY);
	            this.state = 10331;
	            this.a_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_variable() {
	    let localctx = new For_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1512, PostgreSQLParser.RULE_for_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10334;
	        this.any_name_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_foreach_a() {
	    let localctx = new Stmt_foreach_aContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1514, PostgreSQLParser.RULE_stmt_foreach_a);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10336;
	        this.opt_loop_label();
	        this.state = 10337;
	        this.match(PostgreSQLParser.FOREACH);
	        this.state = 10338;
	        this.for_variable();
	        this.state = 10339;
	        this.foreach_slice();
	        this.state = 10340;
	        this.match(PostgreSQLParser.IN_P);
	        this.state = 10341;
	        this.match(PostgreSQLParser.ARRAY);
	        this.state = 10342;
	        this.a_expr();
	        this.state = 10343;
	        this.loop_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreach_slice() {
	    let localctx = new Foreach_sliceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1516, PostgreSQLParser.RULE_foreach_slice);
	    try {
	        this.state = 10348;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 506:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10346;
	            this.match(PostgreSQLParser.SLICE);
	            this.state = 10347;
	            this.iconst();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_exit() {
	    let localctx = new Stmt_exitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1518, PostgreSQLParser.RULE_stmt_exit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10350;
	        this.exit_type();
	        this.state = 10351;
	        this.opt_label();
	        this.state = 10352;
	        this.opt_exitcond();
	        this.state = 10353;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exit_type() {
	    let localctx = new Exit_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1520, PostgreSQLParser.RULE_exit_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10355;
	        _la = this._input.LA(1);
	        if(!(_la===167 || _la===507)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_return() {
	    let localctx = new Stmt_returnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1522, PostgreSQLParser.RULE_stmt_return);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10357;
	        this.match(PostgreSQLParser.RETURN);
	        this.state = 10369;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,707,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 10358;
	            this.match(PostgreSQLParser.NEXT);
	            this.state = 10359;
	            this.sql_expression();
	            break;

	        case 2:
	            this.state = 10360;
	            this.match(PostgreSQLParser.QUERY);
	            this.state = 10366;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 202:
	                this.state = 10361;
	                this.match(PostgreSQLParser.EXECUTE);
	                this.state = 10362;
	                this.a_expr();
	                this.state = 10363;
	                this.opt_for_using_expression();
	                break;
	            case 2:
	            case 88:
	            case 92:
	            case 105:
	            case 415:
	                this.state = 10365;
	                this.selectstmt();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.state = 10368;
	            this.opt_return_result();
	            break;

	        }
	        this.state = 10371;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_return_result() {
	    let localctx = new Opt_return_resultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1524, PostgreSQLParser.RULE_opt_return_result);
	    try {
	        this.state = 10375;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,708,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10374;
	            this.sql_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_raise() {
	    let localctx = new Stmt_raiseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1526, PostgreSQLParser.RULE_stmt_raise);
	    try {
	        this.state = 10403;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,709,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10377;
	            this.match(PostgreSQLParser.RAISE);
	            this.state = 10378;
	            this.opt_stmt_raise_level();
	            this.state = 10379;
	            this.sconst();
	            this.state = 10380;
	            this.opt_raise_list();
	            this.state = 10381;
	            this.opt_raise_using();
	            this.state = 10382;
	            this.match(PostgreSQLParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10384;
	            this.match(PostgreSQLParser.RAISE);
	            this.state = 10385;
	            this.opt_stmt_raise_level();
	            this.state = 10386;
	            this.identifier();
	            this.state = 10387;
	            this.opt_raise_using();
	            this.state = 10388;
	            this.match(PostgreSQLParser.SEMI);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10390;
	            this.match(PostgreSQLParser.RAISE);
	            this.state = 10391;
	            this.opt_stmt_raise_level();
	            this.state = 10392;
	            this.match(PostgreSQLParser.SQLSTATE);
	            this.state = 10393;
	            this.sconst();
	            this.state = 10394;
	            this.opt_raise_using();
	            this.state = 10395;
	            this.match(PostgreSQLParser.SEMI);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10397;
	            this.match(PostgreSQLParser.RAISE);
	            this.state = 10398;
	            this.opt_stmt_raise_level();
	            this.state = 10399;
	            this.opt_raise_using();
	            this.state = 10400;
	            this.match(PostgreSQLParser.SEMI);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 10402;
	            this.match(PostgreSQLParser.RAISE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_stmt_raise_level() {
	    let localctx = new Opt_stmt_raise_levelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1528, PostgreSQLParser.RULE_opt_stmt_raise_level);
	    try {
	        this.state = 10413;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,710,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10407;
	            this.match(PostgreSQLParser.DEBUG);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10408;
	            this.match(PostgreSQLParser.LOG);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 10409;
	            this.match(PostgreSQLParser.INFO);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 10410;
	            this.match(PostgreSQLParser.NOTICE);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 10411;
	            this.match(PostgreSQLParser.WARNING);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 10412;
	            this.match(PostgreSQLParser.EXCEPTION);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_raise_list() {
	    let localctx = new Opt_raise_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1530, PostgreSQLParser.RULE_opt_raise_list);
	    var _la = 0;
	    try {
	        this.state = 10422;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 100:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10418; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 10416;
	                this.match(PostgreSQLParser.COMMA);
	                this.state = 10417;
	                this.a_expr();
	                this.state = 10420; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===6);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_raise_using() {
	    let localctx = new Opt_raise_usingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1532, PostgreSQLParser.RULE_opt_raise_using);
	    try {
	        this.state = 10427;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10425;
	            this.match(PostgreSQLParser.USING);
	            this.state = 10426;
	            this.opt_raise_using_elem_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_raise_using_elem() {
	    let localctx = new Opt_raise_using_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1534, PostgreSQLParser.RULE_opt_raise_using_elem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10429;
	        this.identifier();
	        this.state = 10430;
	        this.match(PostgreSQLParser.EQUAL);
	        this.state = 10431;
	        this.a_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_raise_using_elem_list() {
	    let localctx = new Opt_raise_using_elem_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1536, PostgreSQLParser.RULE_opt_raise_using_elem_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10433;
	        this.opt_raise_using_elem();
	        this.state = 10438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 10434;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 10435;
	            this.opt_raise_using_elem();
	            this.state = 10440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_assert() {
	    let localctx = new Stmt_assertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1538, PostgreSQLParser.RULE_stmt_assert);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10441;
	        this.match(PostgreSQLParser.ASSERT);
	        this.state = 10442;
	        this.sql_expression();
	        this.state = 10443;
	        this.opt_stmt_assert_message();
	        this.state = 10444;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_stmt_assert_message() {
	    let localctx = new Opt_stmt_assert_messageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1540, PostgreSQLParser.RULE_opt_stmt_assert_message);
	    try {
	        this.state = 10449;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10447;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 10448;
	            this.sql_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loop_body() {
	    let localctx = new Loop_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1542, PostgreSQLParser.RULE_loop_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10451;
	        this.match(PostgreSQLParser.LOOP);
	        this.state = 10452;
	        this.proc_sect();
	        this.state = 10453;
	        this.match(PostgreSQLParser.END_P);
	        this.state = 10454;
	        this.match(PostgreSQLParser.LOOP);
	        this.state = 10455;
	        this.opt_label();
	        this.state = 10456;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_execsql() {
	    let localctx = new Stmt_execsqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1544, PostgreSQLParser.RULE_stmt_execsql);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10458;
	        this.make_execsql_stmt();
	        this.state = 10459;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_dynexecute() {
	    let localctx = new Stmt_dynexecuteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1546, PostgreSQLParser.RULE_stmt_dynexecute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10461;
	        this.match(PostgreSQLParser.EXECUTE);
	        this.state = 10462;
	        this.a_expr();
	        this.state = 10470;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,716,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 10463;
	            this.opt_execute_into();
	            this.state = 10464;
	            this.opt_execute_using();
	            break;

	        case 2:
	            this.state = 10466;
	            this.opt_execute_using();
	            this.state = 10467;
	            this.opt_execute_into();
	            break;

	        case 3:
	            break;

	        }
	        this.state = 10472;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_execute_using() {
	    let localctx = new Opt_execute_usingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1548, PostgreSQLParser.RULE_opt_execute_using);
	    try {
	        this.state = 10477;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 71:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10475;
	            this.match(PostgreSQLParser.USING);
	            this.state = 10476;
	            this.opt_execute_using_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_execute_using_list() {
	    let localctx = new Opt_execute_using_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1550, PostgreSQLParser.RULE_opt_execute_using_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10479;
	        this.a_expr();
	        this.state = 10484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 10480;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 10481;
	            this.a_expr();
	            this.state = 10486;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_execute_into() {
	    let localctx = new Opt_execute_intoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1552, PostgreSQLParser.RULE_opt_execute_into);
	    try {
	        this.state = 10493;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 100:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10488;
	            this.match(PostgreSQLParser.INTO);
	            this.state = 10490;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,719,this._ctx);
	            if(la_===1) {
	                this.state = 10489;
	                this.match(PostgreSQLParser.STRICT_P);

	            }
	            this.state = 10492;
	            this.into_target();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_open() {
	    let localctx = new Stmt_openContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1554, PostgreSQLParser.RULE_stmt_open);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10495;
	        this.match(PostgreSQLParser.OPEN);
	        this.state = 10513;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,723,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 10496;
	            this.cursor_variable();
	            this.state = 10497;
	            this.opt_scroll_option();
	            this.state = 10498;
	            this.match(PostgreSQLParser.FOR);
	            this.state = 10504;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	            case 88:
	            case 92:
	            case 105:
	            case 415:
	                this.state = 10499;
	                this.selectstmt();
	                break;
	            case 202:
	                this.state = 10500;
	                this.match(PostgreSQLParser.EXECUTE);
	                this.state = 10501;
	                this.sql_expression();
	                this.state = 10502;
	                this.opt_open_using();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.state = 10506;
	            this.colid();
	            this.state = 10511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 10507;
	                this.match(PostgreSQLParser.OPEN_PAREN);
	                this.state = 10508;
	                this.opt_open_bound_list();
	                this.state = 10509;
	                this.match(PostgreSQLParser.CLOSE_PAREN);
	            }

	            break;

	        }
	        this.state = 10515;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_open_bound_list_item() {
	    let localctx = new Opt_open_bound_list_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1556, PostgreSQLParser.RULE_opt_open_bound_list_item);
	    try {
	        this.state = 10522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,724,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10517;
	            this.colid();
	            this.state = 10518;
	            this.match(PostgreSQLParser.COLON_EQUALS);
	            this.state = 10519;
	            this.a_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10521;
	            this.a_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_open_bound_list() {
	    let localctx = new Opt_open_bound_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1558, PostgreSQLParser.RULE_opt_open_bound_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10524;
	        this.opt_open_bound_list_item();
	        this.state = 10529;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 10525;
	            this.match(PostgreSQLParser.COMMA);
	            this.state = 10526;
	            this.opt_open_bound_list_item();
	            this.state = 10531;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_open_using() {
	    let localctx = new Opt_open_usingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1560, PostgreSQLParser.RULE_opt_open_using);
	    try {
	        this.state = 10535;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10533;
	            this.match(PostgreSQLParser.USING);
	            this.state = 10534;
	            this.expr_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_scroll_option() {
	    let localctx = new Opt_scroll_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1562, PostgreSQLParser.RULE_opt_scroll_option);
	    try {
	        this.state = 10541;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 262:
	        case 317:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10538;
	            this.opt_scroll_option_no();
	            this.state = 10539;
	            this.match(PostgreSQLParser.SCROLL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_scroll_option_no() {
	    let localctx = new Opt_scroll_option_noContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1564, PostgreSQLParser.RULE_opt_scroll_option_no);
	    try {
	        this.state = 10545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 317:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 262:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10544;
	            this.match(PostgreSQLParser.NO);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_fetch() {
	    let localctx = new Stmt_fetchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1566, PostgreSQLParser.RULE_stmt_fetch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10547;
	        this.match(PostgreSQLParser.FETCH);
	        this.state = 10548;
	        localctx.direction = this.opt_fetch_direction();
	        this.state = 10549;
	        this.opt_cursor_from();
	        this.state = 10550;
	        this.cursor_variable();
	        this.state = 10551;
	        this.match(PostgreSQLParser.INTO);
	        this.state = 10552;
	        this.into_target();
	        this.state = 10553;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	into_target() {
	    let localctx = new Into_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1568, PostgreSQLParser.RULE_into_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10555;
	        this.expr_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_cursor_from() {
	    let localctx = new Opt_cursor_fromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1570, PostgreSQLParser.RULE_opt_cursor_from);
	    try {
	        this.state = 10560;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10558;
	            this.match(PostgreSQLParser.FROM);
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10559;
	            this.match(PostgreSQLParser.IN_P);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_fetch_direction() {
	    let localctx = new Opt_fetch_directionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1572, PostgreSQLParser.RULE_opt_fetch_direction);
	    var _la = 0;
	    try {
	        this.state = 10579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,731,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10564;
	            this.match(PostgreSQLParser.NEXT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10565;
	            this.match(PostgreSQLParser.PRIOR);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 10566;
	            this.match(PostgreSQLParser.FIRST_P);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 10567;
	            this.match(PostgreSQLParser.LAST_P);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 10568;
	            this.match(PostgreSQLParser.ABSOLUTE_P);
	            this.state = 10569;
	            this.a_expr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 10570;
	            this.match(PostgreSQLParser.RELATIVE_P);
	            this.state = 10571;
	            this.a_expr();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 10572;
	            this.a_expr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 10573;
	            this.match(PostgreSQLParser.ALL);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 10574;
	            _la = this._input.LA(1);
	            if(!(_la===144 || _la===210)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 10577;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,730,this._ctx);
	            if(la_===1) {
	                this.state = 10575;
	                this.a_expr();

	            } else if(la_===2) {
	                this.state = 10576;
	                this.match(PostgreSQLParser.ALL);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_move() {
	    let localctx = new Stmt_moveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1574, PostgreSQLParser.RULE_stmt_move);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10581;
	        this.match(PostgreSQLParser.MOVE);
	        this.state = 10582;
	        this.opt_fetch_direction();
	        this.state = 10583;
	        this.cursor_variable();
	        this.state = 10584;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_close() {
	    let localctx = new Stmt_closeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1576, PostgreSQLParser.RULE_stmt_close);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10586;
	        this.match(PostgreSQLParser.CLOSE);
	        this.state = 10587;
	        this.cursor_variable();
	        this.state = 10588;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_null() {
	    let localctx = new Stmt_nullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1578, PostgreSQLParser.RULE_stmt_null);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10590;
	        this.match(PostgreSQLParser.NULL_P);
	        this.state = 10591;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_commit() {
	    let localctx = new Stmt_commitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1580, PostgreSQLParser.RULE_stmt_commit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10593;
	        this.match(PostgreSQLParser.COMMIT);
	        this.state = 10594;
	        this.plsql_opt_transaction_chain();
	        this.state = 10595;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_rollback() {
	    let localctx = new Stmt_rollbackContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1582, PostgreSQLParser.RULE_stmt_rollback);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10597;
	        this.match(PostgreSQLParser.ROLLBACK);
	        this.state = 10598;
	        this.plsql_opt_transaction_chain();
	        this.state = 10599;
	        this.match(PostgreSQLParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plsql_opt_transaction_chain() {
	    let localctx = new Plsql_opt_transaction_chainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1584, PostgreSQLParser.RULE_plsql_opt_transaction_chain);
	    var _la = 0;
	    try {
	        this.state = 10607;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10601;
	            this.match(PostgreSQLParser.AND);
	            this.state = 10603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===262) {
	                this.state = 10602;
	                this.match(PostgreSQLParser.NO);
	            }

	            this.state = 10605;
	            this.match(PostgreSQLParser.CHAIN);
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_set() {
	    let localctx = new Stmt_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1586, PostgreSQLParser.RULE_stmt_set);
	    try {
	        this.state = 10621;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10609;
	            this.match(PostgreSQLParser.SET);
	            this.state = 10610;
	            this.any_name();
	            this.state = 10611;
	            this.match(PostgreSQLParser.TO);
	            this.state = 10612;
	            this.match(PostgreSQLParser.DEFAULT);
	            this.state = 10613;
	            this.match(PostgreSQLParser.SEMI);
	            break;
	        case 306:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10615;
	            this.match(PostgreSQLParser.RESET);
	            this.state = 10618;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 33:
	            case 35:
	            case 43:
	            case 44:
	            case 53:
	            case 57:
	            case 61:
	            case 92:
	            case 116:
	            case 119:
	            case 123:
	            case 124:
	            case 126:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 251:
	            case 252:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 386:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 433:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 453:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 504:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 520:
	            case 521:
	            case 522:
	            case 523:
	            case 524:
	            case 525:
	            case 526:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 545:
	            case 546:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 559:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 590:
	            case 591:
	            case 592:
	            case 593:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 607:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 637:
	            case 641:
	            case 661:
	            case 662:
	                this.state = 10616;
	                this.any_name();
	                break;
	            case 30:
	                this.state = 10617;
	                this.match(PostgreSQLParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 10620;
	            this.match(PostgreSQLParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursor_variable() {
	    let localctx = new Cursor_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1588, PostgreSQLParser.RULE_cursor_variable);
	    try {
	        this.state = 10625;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10623;
	            this.colid();
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10624;
	            this.match(PostgreSQLParser.PARAM);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exception_sect() {
	    let localctx = new Exception_sectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1590, PostgreSQLParser.RULE_exception_sect);
	    try {
	        this.state = 10630;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 454:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 517:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10628;
	            this.match(PostgreSQLParser.EXCEPTION);
	            this.state = 10629;
	            this.proc_exceptions();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	proc_exceptions() {
	    let localctx = new Proc_exceptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1592, PostgreSQLParser.RULE_proc_exceptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10633; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 10632;
	            this.proc_exception();
	            this.state = 10635; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===102);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	proc_exception() {
	    let localctx = new Proc_exceptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1594, PostgreSQLParser.RULE_proc_exception);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10637;
	        this.match(PostgreSQLParser.WHEN);
	        this.state = 10638;
	        this.proc_conditions();
	        this.state = 10639;
	        this.match(PostgreSQLParser.THEN);
	        this.state = 10640;
	        this.proc_sect();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	proc_conditions() {
	    let localctx = new Proc_conditionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1596, PostgreSQLParser.RULE_proc_conditions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10642;
	        this.proc_condition();
	        this.state = 10647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===82) {
	            this.state = 10643;
	            this.match(PostgreSQLParser.OR);
	            this.state = 10644;
	            this.proc_condition();
	            this.state = 10649;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	proc_condition() {
	    let localctx = new Proc_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1598, PostgreSQLParser.RULE_proc_condition);
	    try {
	        this.state = 10653;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,740,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10650;
	            this.any_identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10651;
	            this.match(PostgreSQLParser.SQLSTATE);
	            this.state = 10652;
	            this.sconst();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_block_label() {
	    let localctx = new Opt_block_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1600, PostgreSQLParser.RULE_opt_block_label);
	    try {
	        this.state = 10657;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 146:
	        case 178:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10656;
	            this.label_decl();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_loop_label() {
	    let localctx = new Opt_loop_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1602, PostgreSQLParser.RULE_opt_loop_label);
	    try {
	        this.state = 10661;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	        case 503:
	        case 505:
	        case 519:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10660;
	            this.label_decl();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_label() {
	    let localctx = new Opt_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1604, PostgreSQLParser.RULE_opt_label);
	    try {
	        this.state = 10665;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case -1:
	        case 7:
	        case 102:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 33:
	        case 35:
	        case 43:
	        case 44:
	        case 53:
	        case 57:
	        case 61:
	        case 92:
	        case 116:
	        case 119:
	        case 123:
	        case 124:
	        case 126:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 251:
	        case 252:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 504:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 559:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 590:
	        case 591:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 607:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 641:
	        case 661:
	        case 662:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10664;
	            this.any_identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_exitcond() {
	    let localctx = new Opt_exitcondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1606, PostgreSQLParser.RULE_opt_exitcond);
	    try {
	        this.state = 10670;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 102:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10667;
	            this.match(PostgreSQLParser.WHEN);
	            this.state = 10668;
	            this.expr_until_semi();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_identifier() {
	    let localctx = new Any_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1608, PostgreSQLParser.RULE_any_identifier);
	    try {
	        this.state = 10674;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,745,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10672;
	            this.colid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10673;
	            this.plsql_unreserved_keyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plsql_unreserved_keyword() {
	    let localctx = new Plsql_unreserved_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1610, PostgreSQLParser.RULE_plsql_unreserved_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10676;
	        _la = this._input.LA(1);
	        if(!(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 286264325) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 2164260865) !== 0) || ((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 2290106369) !== 0) || _la===167 || _la===172 || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 33554441) !== 0) || ((((_la - 240)) & ~0x1f) === 0 && ((1 << (_la - 240)) & 6553601) !== 0) || ((((_la - 272)) & ~0x1f) === 0 && ((1 << (_la - 272)) & 268451841) !== 0) || ((((_la - 306)) & ~0x1f) === 0 && ((1 << (_la - 306)) & 1051713) !== 0) || _la===353 || _la===433 || _la===434 || ((((_la - 477)) & ~0x1f) === 0 && ((1 << (_la - 477)) & 3825197057) !== 0) || ((((_la - 509)) & ~0x1f) === 0 && ((1 << (_la - 509)) & 3055) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_expression() {
	    let localctx = new Sql_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1612, PostgreSQLParser.RULE_sql_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10678;
	        this.opt_target_list();
	        this.state = 10679;
	        this.into_clause();
	        this.state = 10680;
	        this.from_clause();
	        this.state = 10681;
	        this.where_clause();
	        this.state = 10682;
	        this.group_clause();
	        this.state = 10683;
	        this.having_clause();
	        this.state = 10684;
	        this.window_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_until_then() {
	    let localctx = new Expr_until_thenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1614, PostgreSQLParser.RULE_expr_until_then);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10686;
	        this.sql_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_until_semi() {
	    let localctx = new Expr_until_semiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1616, PostgreSQLParser.RULE_expr_until_semi);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10688;
	        this.sql_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_until_rightbracket() {
	    let localctx = new Expr_until_rightbracketContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1618, PostgreSQLParser.RULE_expr_until_rightbracket);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10690;
	        this.a_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_until_loop() {
	    let localctx = new Expr_until_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1620, PostgreSQLParser.RULE_expr_until_loop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10692;
	        this.a_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	make_execsql_stmt() {
	    let localctx = new Make_execsql_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1622, PostgreSQLParser.RULE_make_execsql_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10694;
	        this.stmt();
	        this.state = 10695;
	        this.opt_returning_clause_into();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_returning_clause_into() {
	    let localctx = new Opt_returning_clause_intoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1624, PostgreSQLParser.RULE_opt_returning_clause_into);
	    try {
	        this.state = 10702;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 71:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10697;
	            this.match(PostgreSQLParser.INTO);
	            this.state = 10698;
	            this.opt_strict();
	            this.state = 10699;
	            this.into_target();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

PostgreSQLParser.EOF = antlr4.Token.EOF;
PostgreSQLParser.Dollar = 1;
PostgreSQLParser.OPEN_PAREN = 2;
PostgreSQLParser.CLOSE_PAREN = 3;
PostgreSQLParser.OPEN_BRACKET = 4;
PostgreSQLParser.CLOSE_BRACKET = 5;
PostgreSQLParser.COMMA = 6;
PostgreSQLParser.SEMI = 7;
PostgreSQLParser.COLON = 8;
PostgreSQLParser.STAR = 9;
PostgreSQLParser.EQUAL = 10;
PostgreSQLParser.DOT = 11;
PostgreSQLParser.PLUS = 12;
PostgreSQLParser.MINUS = 13;
PostgreSQLParser.SLASH = 14;
PostgreSQLParser.CARET = 15;
PostgreSQLParser.LT = 16;
PostgreSQLParser.GT = 17;
PostgreSQLParser.LESS_LESS = 18;
PostgreSQLParser.GREATER_GREATER = 19;
PostgreSQLParser.COLON_EQUALS = 20;
PostgreSQLParser.LESS_EQUALS = 21;
PostgreSQLParser.EQUALS_GREATER = 22;
PostgreSQLParser.GREATER_EQUALS = 23;
PostgreSQLParser.DOT_DOT = 24;
PostgreSQLParser.NOT_EQUALS = 25;
PostgreSQLParser.TYPECAST = 26;
PostgreSQLParser.PERCENT = 27;
PostgreSQLParser.PARAM = 28;
PostgreSQLParser.Operator = 29;
PostgreSQLParser.ALL = 30;
PostgreSQLParser.ANALYSE = 31;
PostgreSQLParser.ANALYZE = 32;
PostgreSQLParser.AND = 33;
PostgreSQLParser.ANY = 34;
PostgreSQLParser.ARRAY = 35;
PostgreSQLParser.AS = 36;
PostgreSQLParser.ASC = 37;
PostgreSQLParser.ASYMMETRIC = 38;
PostgreSQLParser.BOTH = 39;
PostgreSQLParser.CASE = 40;
PostgreSQLParser.CAST = 41;
PostgreSQLParser.CHECK = 42;
PostgreSQLParser.COLLATE = 43;
PostgreSQLParser.COLUMN = 44;
PostgreSQLParser.CONSTRAINT = 45;
PostgreSQLParser.CREATE = 46;
PostgreSQLParser.CURRENT_CATALOG = 47;
PostgreSQLParser.CURRENT_DATE = 48;
PostgreSQLParser.CURRENT_ROLE = 49;
PostgreSQLParser.CURRENT_TIME = 50;
PostgreSQLParser.CURRENT_TIMESTAMP = 51;
PostgreSQLParser.CURRENT_USER = 52;
PostgreSQLParser.DEFAULT = 53;
PostgreSQLParser.DEFERRABLE = 54;
PostgreSQLParser.DESC = 55;
PostgreSQLParser.DISTINCT = 56;
PostgreSQLParser.DO = 57;
PostgreSQLParser.ELSE = 58;
PostgreSQLParser.EXCEPT = 59;
PostgreSQLParser.FALSE_P = 60;
PostgreSQLParser.FETCH = 61;
PostgreSQLParser.FOR = 62;
PostgreSQLParser.FOREIGN = 63;
PostgreSQLParser.FROM = 64;
PostgreSQLParser.GRANT = 65;
PostgreSQLParser.GROUP_P = 66;
PostgreSQLParser.HAVING = 67;
PostgreSQLParser.IN_P = 68;
PostgreSQLParser.INITIALLY = 69;
PostgreSQLParser.INTERSECT = 70;
PostgreSQLParser.INTO = 71;
PostgreSQLParser.LATERAL_P = 72;
PostgreSQLParser.LEADING = 73;
PostgreSQLParser.LIMIT = 74;
PostgreSQLParser.LOCALTIME = 75;
PostgreSQLParser.LOCALTIMESTAMP = 76;
PostgreSQLParser.NOT = 77;
PostgreSQLParser.NULL_P = 78;
PostgreSQLParser.OFFSET = 79;
PostgreSQLParser.ON = 80;
PostgreSQLParser.ONLY = 81;
PostgreSQLParser.OR = 82;
PostgreSQLParser.ORDER = 83;
PostgreSQLParser.PLACING = 84;
PostgreSQLParser.PRIMARY = 85;
PostgreSQLParser.REFERENCES = 86;
PostgreSQLParser.RETURNING = 87;
PostgreSQLParser.SELECT = 88;
PostgreSQLParser.SESSION_USER = 89;
PostgreSQLParser.SOME = 90;
PostgreSQLParser.SYMMETRIC = 91;
PostgreSQLParser.TABLE = 92;
PostgreSQLParser.THEN = 93;
PostgreSQLParser.TO = 94;
PostgreSQLParser.TRAILING = 95;
PostgreSQLParser.TRUE_P = 96;
PostgreSQLParser.UNION = 97;
PostgreSQLParser.UNIQUE = 98;
PostgreSQLParser.USER = 99;
PostgreSQLParser.USING = 100;
PostgreSQLParser.VARIADIC = 101;
PostgreSQLParser.WHEN = 102;
PostgreSQLParser.WHERE = 103;
PostgreSQLParser.WINDOW = 104;
PostgreSQLParser.WITH = 105;
PostgreSQLParser.AUTHORIZATION = 106;
PostgreSQLParser.BINARY = 107;
PostgreSQLParser.COLLATION = 108;
PostgreSQLParser.CONCURRENTLY = 109;
PostgreSQLParser.CROSS = 110;
PostgreSQLParser.CURRENT_SCHEMA = 111;
PostgreSQLParser.FREEZE = 112;
PostgreSQLParser.FULL = 113;
PostgreSQLParser.ILIKE = 114;
PostgreSQLParser.INNER_P = 115;
PostgreSQLParser.IS = 116;
PostgreSQLParser.ISNULL = 117;
PostgreSQLParser.JOIN = 118;
PostgreSQLParser.LEFT = 119;
PostgreSQLParser.LIKE = 120;
PostgreSQLParser.NATURAL = 121;
PostgreSQLParser.NOTNULL = 122;
PostgreSQLParser.OUTER_P = 123;
PostgreSQLParser.OVER = 124;
PostgreSQLParser.OVERLAPS = 125;
PostgreSQLParser.RIGHT = 126;
PostgreSQLParser.SIMILAR = 127;
PostgreSQLParser.VERBOSE = 128;
PostgreSQLParser.ABORT_P = 129;
PostgreSQLParser.ABSOLUTE_P = 130;
PostgreSQLParser.ACCESS = 131;
PostgreSQLParser.ACTION = 132;
PostgreSQLParser.ADD_P = 133;
PostgreSQLParser.ADMIN = 134;
PostgreSQLParser.AFTER = 135;
PostgreSQLParser.AGGREGATE = 136;
PostgreSQLParser.ALSO = 137;
PostgreSQLParser.ALTER = 138;
PostgreSQLParser.ALWAYS = 139;
PostgreSQLParser.ASSERTION = 140;
PostgreSQLParser.ASSIGNMENT = 141;
PostgreSQLParser.AT = 142;
PostgreSQLParser.ATTRIBUTE = 143;
PostgreSQLParser.BACKWARD = 144;
PostgreSQLParser.BEFORE = 145;
PostgreSQLParser.BEGIN_P = 146;
PostgreSQLParser.BY = 147;
PostgreSQLParser.CACHE = 148;
PostgreSQLParser.CALLED = 149;
PostgreSQLParser.CASCADE = 150;
PostgreSQLParser.CASCADED = 151;
PostgreSQLParser.CATALOG = 152;
PostgreSQLParser.CHAIN = 153;
PostgreSQLParser.CHARACTERISTICS = 154;
PostgreSQLParser.CHECKPOINT = 155;
PostgreSQLParser.CLASS = 156;
PostgreSQLParser.CLOSE = 157;
PostgreSQLParser.CLUSTER = 158;
PostgreSQLParser.COMMENT = 159;
PostgreSQLParser.COMMENTS = 160;
PostgreSQLParser.COMMIT = 161;
PostgreSQLParser.COMMITTED = 162;
PostgreSQLParser.CONFIGURATION = 163;
PostgreSQLParser.CONNECTION = 164;
PostgreSQLParser.CONSTRAINTS = 165;
PostgreSQLParser.CONTENT_P = 166;
PostgreSQLParser.CONTINUE_P = 167;
PostgreSQLParser.CONVERSION_P = 168;
PostgreSQLParser.COPY = 169;
PostgreSQLParser.COST = 170;
PostgreSQLParser.CSV = 171;
PostgreSQLParser.CURSOR = 172;
PostgreSQLParser.CYCLE = 173;
PostgreSQLParser.DATA_P = 174;
PostgreSQLParser.DATABASE = 175;
PostgreSQLParser.DAY_P = 176;
PostgreSQLParser.DEALLOCATE = 177;
PostgreSQLParser.DECLARE = 178;
PostgreSQLParser.DEFAULTS = 179;
PostgreSQLParser.DEFERRED = 180;
PostgreSQLParser.DEFINER = 181;
PostgreSQLParser.DELETE_P = 182;
PostgreSQLParser.DELIMITER = 183;
PostgreSQLParser.DELIMITERS = 184;
PostgreSQLParser.DICTIONARY = 185;
PostgreSQLParser.DISABLE_P = 186;
PostgreSQLParser.DISCARD = 187;
PostgreSQLParser.DOCUMENT_P = 188;
PostgreSQLParser.DOMAIN_P = 189;
PostgreSQLParser.DOUBLE_P = 190;
PostgreSQLParser.DROP = 191;
PostgreSQLParser.EACH = 192;
PostgreSQLParser.ENABLE_P = 193;
PostgreSQLParser.ENCODING = 194;
PostgreSQLParser.ENCRYPTED = 195;
PostgreSQLParser.ENUM_P = 196;
PostgreSQLParser.ESCAPE = 197;
PostgreSQLParser.EVENT = 198;
PostgreSQLParser.EXCLUDE = 199;
PostgreSQLParser.EXCLUDING = 200;
PostgreSQLParser.EXCLUSIVE = 201;
PostgreSQLParser.EXECUTE = 202;
PostgreSQLParser.EXPLAIN = 203;
PostgreSQLParser.EXTENSION = 204;
PostgreSQLParser.EXTERNAL = 205;
PostgreSQLParser.FAMILY = 206;
PostgreSQLParser.FIRST_P = 207;
PostgreSQLParser.FOLLOWING = 208;
PostgreSQLParser.FORCE = 209;
PostgreSQLParser.FORWARD = 210;
PostgreSQLParser.FUNCTION = 211;
PostgreSQLParser.FUNCTIONS = 212;
PostgreSQLParser.GLOBAL = 213;
PostgreSQLParser.GRANTED = 214;
PostgreSQLParser.HANDLER = 215;
PostgreSQLParser.HEADER_P = 216;
PostgreSQLParser.HOLD = 217;
PostgreSQLParser.HOUR_P = 218;
PostgreSQLParser.IDENTITY_P = 219;
PostgreSQLParser.IF_P = 220;
PostgreSQLParser.IMMEDIATE = 221;
PostgreSQLParser.IMMUTABLE = 222;
PostgreSQLParser.IMPLICIT_P = 223;
PostgreSQLParser.INCLUDING = 224;
PostgreSQLParser.INCREMENT = 225;
PostgreSQLParser.INDEX = 226;
PostgreSQLParser.INDEXES = 227;
PostgreSQLParser.INHERIT = 228;
PostgreSQLParser.INHERITS = 229;
PostgreSQLParser.INLINE_P = 230;
PostgreSQLParser.INSENSITIVE = 231;
PostgreSQLParser.INSERT = 232;
PostgreSQLParser.INSTEAD = 233;
PostgreSQLParser.INVOKER = 234;
PostgreSQLParser.ISOLATION = 235;
PostgreSQLParser.KEY = 236;
PostgreSQLParser.LABEL = 237;
PostgreSQLParser.LANGUAGE = 238;
PostgreSQLParser.LARGE_P = 239;
PostgreSQLParser.LAST_P = 240;
PostgreSQLParser.LEAKPROOF = 241;
PostgreSQLParser.LEVEL = 242;
PostgreSQLParser.LISTEN = 243;
PostgreSQLParser.LOAD = 244;
PostgreSQLParser.LOCAL = 245;
PostgreSQLParser.LOCATION = 246;
PostgreSQLParser.LOCK_P = 247;
PostgreSQLParser.MAPPING = 248;
PostgreSQLParser.MATCH = 249;
PostgreSQLParser.MATCHED = 250;
PostgreSQLParser.MATERIALIZED = 251;
PostgreSQLParser.MAXVALUE = 252;
PostgreSQLParser.MERGE = 253;
PostgreSQLParser.MINUTE_P = 254;
PostgreSQLParser.MINVALUE = 255;
PostgreSQLParser.MODE = 256;
PostgreSQLParser.MONTH_P = 257;
PostgreSQLParser.MOVE = 258;
PostgreSQLParser.NAME_P = 259;
PostgreSQLParser.NAMES = 260;
PostgreSQLParser.NEXT = 261;
PostgreSQLParser.NO = 262;
PostgreSQLParser.NOTHING = 263;
PostgreSQLParser.NOTIFY = 264;
PostgreSQLParser.NOWAIT = 265;
PostgreSQLParser.NULLS_P = 266;
PostgreSQLParser.OBJECT_P = 267;
PostgreSQLParser.OF = 268;
PostgreSQLParser.OFF = 269;
PostgreSQLParser.OIDS = 270;
PostgreSQLParser.OPERATOR = 271;
PostgreSQLParser.OPTION = 272;
PostgreSQLParser.OPTIONS = 273;
PostgreSQLParser.OWNED = 274;
PostgreSQLParser.OWNER = 275;
PostgreSQLParser.PARSER = 276;
PostgreSQLParser.PARTIAL = 277;
PostgreSQLParser.PARTITION = 278;
PostgreSQLParser.PASSING = 279;
PostgreSQLParser.PASSWORD = 280;
PostgreSQLParser.PLANS = 281;
PostgreSQLParser.PRECEDING = 282;
PostgreSQLParser.PREPARE = 283;
PostgreSQLParser.PREPARED = 284;
PostgreSQLParser.PRESERVE = 285;
PostgreSQLParser.PRIOR = 286;
PostgreSQLParser.PRIVILEGES = 287;
PostgreSQLParser.PROCEDURAL = 288;
PostgreSQLParser.PROCEDURE = 289;
PostgreSQLParser.PROGRAM = 290;
PostgreSQLParser.QUOTE = 291;
PostgreSQLParser.RANGE = 292;
PostgreSQLParser.READ = 293;
PostgreSQLParser.REASSIGN = 294;
PostgreSQLParser.RECHECK = 295;
PostgreSQLParser.RECURSIVE = 296;
PostgreSQLParser.REF = 297;
PostgreSQLParser.REFRESH = 298;
PostgreSQLParser.REINDEX = 299;
PostgreSQLParser.RELATIVE_P = 300;
PostgreSQLParser.RELEASE = 301;
PostgreSQLParser.RENAME = 302;
PostgreSQLParser.REPEATABLE = 303;
PostgreSQLParser.REPLACE = 304;
PostgreSQLParser.REPLICA = 305;
PostgreSQLParser.RESET = 306;
PostgreSQLParser.RESTART = 307;
PostgreSQLParser.RESTRICT = 308;
PostgreSQLParser.RETURNS = 309;
PostgreSQLParser.REVOKE = 310;
PostgreSQLParser.ROLE = 311;
PostgreSQLParser.ROLLBACK = 312;
PostgreSQLParser.ROWS = 313;
PostgreSQLParser.RULE = 314;
PostgreSQLParser.SAVEPOINT = 315;
PostgreSQLParser.SCHEMA = 316;
PostgreSQLParser.SCROLL = 317;
PostgreSQLParser.SEARCH = 318;
PostgreSQLParser.SECOND_P = 319;
PostgreSQLParser.SECURITY = 320;
PostgreSQLParser.SEQUENCE = 321;
PostgreSQLParser.SEQUENCES = 322;
PostgreSQLParser.SERIALIZABLE = 323;
PostgreSQLParser.SERVER = 324;
PostgreSQLParser.SESSION = 325;
PostgreSQLParser.SET = 326;
PostgreSQLParser.SHARE = 327;
PostgreSQLParser.SHOW = 328;
PostgreSQLParser.SIMPLE = 329;
PostgreSQLParser.SNAPSHOT = 330;
PostgreSQLParser.STABLE = 331;
PostgreSQLParser.STANDALONE_P = 332;
PostgreSQLParser.START = 333;
PostgreSQLParser.STATEMENT = 334;
PostgreSQLParser.STATISTICS = 335;
PostgreSQLParser.STDIN = 336;
PostgreSQLParser.STDOUT = 337;
PostgreSQLParser.STORAGE = 338;
PostgreSQLParser.STRICT_P = 339;
PostgreSQLParser.STRIP_P = 340;
PostgreSQLParser.SYSID = 341;
PostgreSQLParser.SYSTEM_P = 342;
PostgreSQLParser.TABLES = 343;
PostgreSQLParser.TABLESPACE = 344;
PostgreSQLParser.TEMP = 345;
PostgreSQLParser.TEMPLATE = 346;
PostgreSQLParser.TEMPORARY = 347;
PostgreSQLParser.TEXT_P = 348;
PostgreSQLParser.TRANSACTION = 349;
PostgreSQLParser.TRIGGER = 350;
PostgreSQLParser.TRUNCATE = 351;
PostgreSQLParser.TRUSTED = 352;
PostgreSQLParser.TYPE_P = 353;
PostgreSQLParser.TYPES_P = 354;
PostgreSQLParser.UNBOUNDED = 355;
PostgreSQLParser.UNCOMMITTED = 356;
PostgreSQLParser.UNENCRYPTED = 357;
PostgreSQLParser.UNKNOWN = 358;
PostgreSQLParser.UNLISTEN = 359;
PostgreSQLParser.UNLOGGED = 360;
PostgreSQLParser.UNTIL = 361;
PostgreSQLParser.UPDATE = 362;
PostgreSQLParser.VACUUM = 363;
PostgreSQLParser.VALID = 364;
PostgreSQLParser.VALIDATE = 365;
PostgreSQLParser.VALIDATOR = 366;
PostgreSQLParser.VARYING = 367;
PostgreSQLParser.VERSION_P = 368;
PostgreSQLParser.VIEW = 369;
PostgreSQLParser.VOLATILE = 370;
PostgreSQLParser.WHITESPACE_P = 371;
PostgreSQLParser.WITHOUT = 372;
PostgreSQLParser.WORK = 373;
PostgreSQLParser.WRAPPER = 374;
PostgreSQLParser.WRITE = 375;
PostgreSQLParser.XML_P = 376;
PostgreSQLParser.YEAR_P = 377;
PostgreSQLParser.YES_P = 378;
PostgreSQLParser.ZONE = 379;
PostgreSQLParser.BETWEEN = 380;
PostgreSQLParser.BIGINT = 381;
PostgreSQLParser.BIT = 382;
PostgreSQLParser.BOOLEAN_P = 383;
PostgreSQLParser.CHAR_P = 384;
PostgreSQLParser.CHARACTER = 385;
PostgreSQLParser.COALESCE = 386;
PostgreSQLParser.DEC = 387;
PostgreSQLParser.DECIMAL_P = 388;
PostgreSQLParser.EXISTS = 389;
PostgreSQLParser.EXTRACT = 390;
PostgreSQLParser.FLOAT_P = 391;
PostgreSQLParser.GREATEST = 392;
PostgreSQLParser.INOUT = 393;
PostgreSQLParser.INT_P = 394;
PostgreSQLParser.INTEGER = 395;
PostgreSQLParser.INTERVAL = 396;
PostgreSQLParser.LEAST = 397;
PostgreSQLParser.NATIONAL = 398;
PostgreSQLParser.NCHAR = 399;
PostgreSQLParser.NONE = 400;
PostgreSQLParser.NULLIF = 401;
PostgreSQLParser.NUMERIC = 402;
PostgreSQLParser.OVERLAY = 403;
PostgreSQLParser.POSITION = 404;
PostgreSQLParser.PRECISION = 405;
PostgreSQLParser.REAL = 406;
PostgreSQLParser.ROW = 407;
PostgreSQLParser.SETOF = 408;
PostgreSQLParser.SMALLINT = 409;
PostgreSQLParser.SUBSTRING = 410;
PostgreSQLParser.TIME = 411;
PostgreSQLParser.TIMESTAMP = 412;
PostgreSQLParser.TREAT = 413;
PostgreSQLParser.TRIM = 414;
PostgreSQLParser.VALUES = 415;
PostgreSQLParser.VARCHAR = 416;
PostgreSQLParser.XMLATTRIBUTES = 417;
PostgreSQLParser.XMLCOMMENT = 418;
PostgreSQLParser.XMLAGG = 419;
PostgreSQLParser.XML_IS_WELL_FORMED = 420;
PostgreSQLParser.XML_IS_WELL_FORMED_DOCUMENT = 421;
PostgreSQLParser.XML_IS_WELL_FORMED_CONTENT = 422;
PostgreSQLParser.XPATH = 423;
PostgreSQLParser.XPATH_EXISTS = 424;
PostgreSQLParser.XMLCONCAT = 425;
PostgreSQLParser.XMLELEMENT = 426;
PostgreSQLParser.XMLEXISTS = 427;
PostgreSQLParser.XMLFOREST = 428;
PostgreSQLParser.XMLPARSE = 429;
PostgreSQLParser.XMLPI = 430;
PostgreSQLParser.XMLROOT = 431;
PostgreSQLParser.XMLSERIALIZE = 432;
PostgreSQLParser.CALL = 433;
PostgreSQLParser.CURRENT_P = 434;
PostgreSQLParser.ATTACH = 435;
PostgreSQLParser.DETACH = 436;
PostgreSQLParser.EXPRESSION = 437;
PostgreSQLParser.GENERATED = 438;
PostgreSQLParser.LOGGED = 439;
PostgreSQLParser.STORED = 440;
PostgreSQLParser.INCLUDE = 441;
PostgreSQLParser.ROUTINE = 442;
PostgreSQLParser.TRANSFORM = 443;
PostgreSQLParser.IMPORT_P = 444;
PostgreSQLParser.POLICY = 445;
PostgreSQLParser.METHOD = 446;
PostgreSQLParser.REFERENCING = 447;
PostgreSQLParser.NEW = 448;
PostgreSQLParser.OLD = 449;
PostgreSQLParser.VALUE_P = 450;
PostgreSQLParser.SUBSCRIPTION = 451;
PostgreSQLParser.PUBLICATION = 452;
PostgreSQLParser.OUT_P = 453;
PostgreSQLParser.END_P = 454;
PostgreSQLParser.ROUTINES = 455;
PostgreSQLParser.SCHEMAS = 456;
PostgreSQLParser.PROCEDURES = 457;
PostgreSQLParser.INPUT_P = 458;
PostgreSQLParser.SUPPORT = 459;
PostgreSQLParser.PARALLEL = 460;
PostgreSQLParser.SQL_P = 461;
PostgreSQLParser.DEPENDS = 462;
PostgreSQLParser.OVERRIDING = 463;
PostgreSQLParser.CONFLICT = 464;
PostgreSQLParser.SKIP_P = 465;
PostgreSQLParser.LOCKED = 466;
PostgreSQLParser.TIES = 467;
PostgreSQLParser.ROLLUP = 468;
PostgreSQLParser.CUBE = 469;
PostgreSQLParser.GROUPING = 470;
PostgreSQLParser.SETS = 471;
PostgreSQLParser.TABLESAMPLE = 472;
PostgreSQLParser.ORDINALITY = 473;
PostgreSQLParser.XMLTABLE = 474;
PostgreSQLParser.COLUMNS = 475;
PostgreSQLParser.XMLNAMESPACES = 476;
PostgreSQLParser.ROWTYPE = 477;
PostgreSQLParser.NORMALIZED = 478;
PostgreSQLParser.WITHIN = 479;
PostgreSQLParser.FILTER = 480;
PostgreSQLParser.GROUPS = 481;
PostgreSQLParser.OTHERS = 482;
PostgreSQLParser.NFC = 483;
PostgreSQLParser.NFD = 484;
PostgreSQLParser.NFKC = 485;
PostgreSQLParser.NFKD = 486;
PostgreSQLParser.UESCAPE = 487;
PostgreSQLParser.VIEWS = 488;
PostgreSQLParser.NORMALIZE = 489;
PostgreSQLParser.DUMP = 490;
PostgreSQLParser.PRINT_STRICT_PARAMS = 491;
PostgreSQLParser.VARIABLE_CONFLICT = 492;
PostgreSQLParser.ERROR = 493;
PostgreSQLParser.USE_VARIABLE = 494;
PostgreSQLParser.USE_COLUMN = 495;
PostgreSQLParser.ALIAS = 496;
PostgreSQLParser.CONSTANT = 497;
PostgreSQLParser.PERFORM = 498;
PostgreSQLParser.GET = 499;
PostgreSQLParser.DIAGNOSTICS = 500;
PostgreSQLParser.STACKED = 501;
PostgreSQLParser.ELSIF = 502;
PostgreSQLParser.WHILE = 503;
PostgreSQLParser.REVERSE = 504;
PostgreSQLParser.FOREACH = 505;
PostgreSQLParser.SLICE = 506;
PostgreSQLParser.EXIT = 507;
PostgreSQLParser.RETURN = 508;
PostgreSQLParser.QUERY = 509;
PostgreSQLParser.RAISE = 510;
PostgreSQLParser.SQLSTATE = 511;
PostgreSQLParser.DEBUG = 512;
PostgreSQLParser.LOG = 513;
PostgreSQLParser.INFO = 514;
PostgreSQLParser.NOTICE = 515;
PostgreSQLParser.WARNING = 516;
PostgreSQLParser.EXCEPTION = 517;
PostgreSQLParser.ASSERT = 518;
PostgreSQLParser.LOOP = 519;
PostgreSQLParser.OPEN = 520;
PostgreSQLParser.ABS = 521;
PostgreSQLParser.CBRT = 522;
PostgreSQLParser.CEIL = 523;
PostgreSQLParser.CEILING = 524;
PostgreSQLParser.DEGREES = 525;
PostgreSQLParser.DIV = 526;
PostgreSQLParser.EXP = 527;
PostgreSQLParser.FACTORIAL = 528;
PostgreSQLParser.FLOOR = 529;
PostgreSQLParser.GCD = 530;
PostgreSQLParser.LCM = 531;
PostgreSQLParser.LN = 532;
PostgreSQLParser.LOG10 = 533;
PostgreSQLParser.MIN_SCALE = 534;
PostgreSQLParser.MOD = 535;
PostgreSQLParser.PI = 536;
PostgreSQLParser.POWER = 537;
PostgreSQLParser.RADIANS = 538;
PostgreSQLParser.ROUND = 539;
PostgreSQLParser.SCALE = 540;
PostgreSQLParser.SIGN = 541;
PostgreSQLParser.SQRT = 542;
PostgreSQLParser.TRIM_SCALE = 543;
PostgreSQLParser.TRUNC = 544;
PostgreSQLParser.WIDTH_BUCKET = 545;
PostgreSQLParser.RANDOM = 546;
PostgreSQLParser.SETSEED = 547;
PostgreSQLParser.ACOS = 548;
PostgreSQLParser.ACOSD = 549;
PostgreSQLParser.ASIN = 550;
PostgreSQLParser.ASIND = 551;
PostgreSQLParser.ATAN = 552;
PostgreSQLParser.ATAND = 553;
PostgreSQLParser.ATAN2 = 554;
PostgreSQLParser.ATAN2D = 555;
PostgreSQLParser.COS = 556;
PostgreSQLParser.COSD = 557;
PostgreSQLParser.COT = 558;
PostgreSQLParser.COTD = 559;
PostgreSQLParser.SIN = 560;
PostgreSQLParser.SIND = 561;
PostgreSQLParser.TAN = 562;
PostgreSQLParser.TAND = 563;
PostgreSQLParser.SINH = 564;
PostgreSQLParser.COSH = 565;
PostgreSQLParser.TANH = 566;
PostgreSQLParser.ASINH = 567;
PostgreSQLParser.ACOSH = 568;
PostgreSQLParser.ATANH = 569;
PostgreSQLParser.BIT_LENGTH = 570;
PostgreSQLParser.CHAR_LENGTH = 571;
PostgreSQLParser.CHARACTER_LENGTH = 572;
PostgreSQLParser.LOWER = 573;
PostgreSQLParser.OCTET_LENGTH = 574;
PostgreSQLParser.UPPER = 575;
PostgreSQLParser.ASCII = 576;
PostgreSQLParser.BTRIM = 577;
PostgreSQLParser.CHR = 578;
PostgreSQLParser.CONCAT = 579;
PostgreSQLParser.CONCAT_WS = 580;
PostgreSQLParser.FORMAT = 581;
PostgreSQLParser.INITCAP = 582;
PostgreSQLParser.LENGTH = 583;
PostgreSQLParser.LPAD = 584;
PostgreSQLParser.LTRIM = 585;
PostgreSQLParser.MD5 = 586;
PostgreSQLParser.PARSE_IDENT = 587;
PostgreSQLParser.PG_CLIENT_ENCODING = 588;
PostgreSQLParser.QUOTE_IDENT = 589;
PostgreSQLParser.QUOTE_LITERAL = 590;
PostgreSQLParser.QUOTE_NULLABLE = 591;
PostgreSQLParser.REGEXP_COUNT = 592;
PostgreSQLParser.REGEXP_INSTR = 593;
PostgreSQLParser.REGEXP_LIKE = 594;
PostgreSQLParser.REGEXP_MATCH = 595;
PostgreSQLParser.REGEXP_MATCHES = 596;
PostgreSQLParser.REGEXP_REPLACE = 597;
PostgreSQLParser.REGEXP_SPLIT_TO_ARRAY = 598;
PostgreSQLParser.REGEXP_SPLIT_TO_TABLE = 599;
PostgreSQLParser.REGEXP_SUBSTR = 600;
PostgreSQLParser.REPEAT = 601;
PostgreSQLParser.RPAD = 602;
PostgreSQLParser.RTRIM = 603;
PostgreSQLParser.SPLIT_PART = 604;
PostgreSQLParser.STARTS_WITH = 605;
PostgreSQLParser.STRING_TO_ARRAY = 606;
PostgreSQLParser.STRING_TO_TABLE = 607;
PostgreSQLParser.STRPOS = 608;
PostgreSQLParser.SUBSTR = 609;
PostgreSQLParser.TO_ASCII = 610;
PostgreSQLParser.TO_HEX = 611;
PostgreSQLParser.TRANSLATE = 612;
PostgreSQLParser.UNISTR = 613;
PostgreSQLParser.AGE = 614;
PostgreSQLParser.CLOCK_TIMESTAMP = 615;
PostgreSQLParser.DATE_BIN = 616;
PostgreSQLParser.DATE_PART = 617;
PostgreSQLParser.DATE_TRUNC = 618;
PostgreSQLParser.ISFINITE = 619;
PostgreSQLParser.JUSTIFY_DAYS = 620;
PostgreSQLParser.JUSTIFY_HOURS = 621;
PostgreSQLParser.JUSTIFY_INTERVAL = 622;
PostgreSQLParser.MAKE_DATE = 623;
PostgreSQLParser.MAKE_INTERVAL = 624;
PostgreSQLParser.MAKE_TIME = 625;
PostgreSQLParser.MAKE_TIMESTAMP = 626;
PostgreSQLParser.MAKE_TIMESTAMPTZ = 627;
PostgreSQLParser.NOW = 628;
PostgreSQLParser.STATEMENT_TIMESTAMP = 629;
PostgreSQLParser.TIMEOFDAY = 630;
PostgreSQLParser.TRANSACTION_TIMESTAMP = 631;
PostgreSQLParser.TO_TIMESTAMP = 632;
PostgreSQLParser.TO_CHAR = 633;
PostgreSQLParser.TO_DATE = 634;
PostgreSQLParser.TO_NUMBER = 635;
PostgreSQLParser.Identifier = 636;
PostgreSQLParser.QuotedIdentifier = 637;
PostgreSQLParser.UnterminatedQuotedIdentifier = 638;
PostgreSQLParser.InvalidQuotedIdentifier = 639;
PostgreSQLParser.InvalidUnterminatedQuotedIdentifier = 640;
PostgreSQLParser.UnicodeQuotedIdentifier = 641;
PostgreSQLParser.UnterminatedUnicodeQuotedIdentifier = 642;
PostgreSQLParser.InvalidUnicodeQuotedIdentifier = 643;
PostgreSQLParser.InvalidUnterminatedUnicodeQuotedIdentifier = 644;
PostgreSQLParser.StringConstant = 645;
PostgreSQLParser.UnterminatedStringConstant = 646;
PostgreSQLParser.UnicodeEscapeStringConstant = 647;
PostgreSQLParser.UnterminatedUnicodeEscapeStringConstant = 648;
PostgreSQLParser.BeginDollarStringConstant = 649;
PostgreSQLParser.BinaryStringConstant = 650;
PostgreSQLParser.UnterminatedBinaryStringConstant = 651;
PostgreSQLParser.InvalidBinaryStringConstant = 652;
PostgreSQLParser.InvalidUnterminatedBinaryStringConstant = 653;
PostgreSQLParser.HexadecimalStringConstant = 654;
PostgreSQLParser.UnterminatedHexadecimalStringConstant = 655;
PostgreSQLParser.InvalidHexadecimalStringConstant = 656;
PostgreSQLParser.InvalidUnterminatedHexadecimalStringConstant = 657;
PostgreSQLParser.Integral = 658;
PostgreSQLParser.NumericFail = 659;
PostgreSQLParser.Numeric = 660;
PostgreSQLParser.PLSQLVARIABLENAME = 661;
PostgreSQLParser.PLSQLIDENTIFIER = 662;
PostgreSQLParser.Whitespace = 663;
PostgreSQLParser.Newline = 664;
PostgreSQLParser.LineComment = 665;
PostgreSQLParser.BlockComment = 666;
PostgreSQLParser.UnterminatedBlockComment = 667;
PostgreSQLParser.MetaCommand = 668;
PostgreSQLParser.EndMetaCommand = 669;
PostgreSQLParser.ErrorCharacter = 670;
PostgreSQLParser.EscapeStringConstant = 671;
PostgreSQLParser.UnterminatedEscapeStringConstant = 672;
PostgreSQLParser.InvalidEscapeStringConstant = 673;
PostgreSQLParser.InvalidUnterminatedEscapeStringConstant = 674;
PostgreSQLParser.AfterEscapeStringConstantMode_NotContinued = 675;
PostgreSQLParser.AfterEscapeStringConstantWithNewlineMode_NotContinued = 676;
PostgreSQLParser.DollarText = 677;
PostgreSQLParser.EndDollarStringConstant = 678;
PostgreSQLParser.AfterEscapeStringConstantWithNewlineMode_Continued = 679;

PostgreSQLParser.RULE_root = 0;
PostgreSQLParser.RULE_plsqlroot = 1;
PostgreSQLParser.RULE_stmtblock = 2;
PostgreSQLParser.RULE_stmtmulti = 3;
PostgreSQLParser.RULE_stmt = 4;
PostgreSQLParser.RULE_plsqlconsolecommand = 5;
PostgreSQLParser.RULE_callstmt = 6;
PostgreSQLParser.RULE_createrolestmt = 7;
PostgreSQLParser.RULE_opt_with = 8;
PostgreSQLParser.RULE_optrolelist = 9;
PostgreSQLParser.RULE_alteroptrolelist = 10;
PostgreSQLParser.RULE_alteroptroleelem = 11;
PostgreSQLParser.RULE_createoptroleelem = 12;
PostgreSQLParser.RULE_createuserstmt = 13;
PostgreSQLParser.RULE_alterrolestmt = 14;
PostgreSQLParser.RULE_opt_in_database = 15;
PostgreSQLParser.RULE_alterrolesetstmt = 16;
PostgreSQLParser.RULE_droprolestmt = 17;
PostgreSQLParser.RULE_creategroupstmt = 18;
PostgreSQLParser.RULE_altergroupstmt = 19;
PostgreSQLParser.RULE_add_drop = 20;
PostgreSQLParser.RULE_createschemastmt = 21;
PostgreSQLParser.RULE_optschemaname = 22;
PostgreSQLParser.RULE_optschemaeltlist = 23;
PostgreSQLParser.RULE_schema_stmt = 24;
PostgreSQLParser.RULE_variablesetstmt = 25;
PostgreSQLParser.RULE_set_rest = 26;
PostgreSQLParser.RULE_generic_set = 27;
PostgreSQLParser.RULE_set_rest_more = 28;
PostgreSQLParser.RULE_var_name = 29;
PostgreSQLParser.RULE_var_list = 30;
PostgreSQLParser.RULE_var_value = 31;
PostgreSQLParser.RULE_iso_level = 32;
PostgreSQLParser.RULE_opt_boolean_or_string = 33;
PostgreSQLParser.RULE_zone_value = 34;
PostgreSQLParser.RULE_opt_encoding = 35;
PostgreSQLParser.RULE_nonreservedword_or_sconst = 36;
PostgreSQLParser.RULE_variableresetstmt = 37;
PostgreSQLParser.RULE_reset_rest = 38;
PostgreSQLParser.RULE_generic_reset = 39;
PostgreSQLParser.RULE_setresetclause = 40;
PostgreSQLParser.RULE_functionsetresetclause = 41;
PostgreSQLParser.RULE_variableshowstmt = 42;
PostgreSQLParser.RULE_constraintssetstmt = 43;
PostgreSQLParser.RULE_constraints_set_list = 44;
PostgreSQLParser.RULE_constraints_set_mode = 45;
PostgreSQLParser.RULE_checkpointstmt = 46;
PostgreSQLParser.RULE_discardstmt = 47;
PostgreSQLParser.RULE_altertablestmt = 48;
PostgreSQLParser.RULE_alter_table_cmds = 49;
PostgreSQLParser.RULE_partition_cmd = 50;
PostgreSQLParser.RULE_index_partition_cmd = 51;
PostgreSQLParser.RULE_alter_table_cmd = 52;
PostgreSQLParser.RULE_alter_column_default = 53;
PostgreSQLParser.RULE_opt_drop_behavior = 54;
PostgreSQLParser.RULE_opt_collate_clause = 55;
PostgreSQLParser.RULE_alter_using = 56;
PostgreSQLParser.RULE_replica_identity = 57;
PostgreSQLParser.RULE_reloptions = 58;
PostgreSQLParser.RULE_opt_reloptions = 59;
PostgreSQLParser.RULE_reloption_list = 60;
PostgreSQLParser.RULE_reloption_elem = 61;
PostgreSQLParser.RULE_alter_identity_column_option_list = 62;
PostgreSQLParser.RULE_alter_identity_column_option = 63;
PostgreSQLParser.RULE_partitionboundspec = 64;
PostgreSQLParser.RULE_hash_partbound_elem = 65;
PostgreSQLParser.RULE_hash_partbound = 66;
PostgreSQLParser.RULE_altercompositetypestmt = 67;
PostgreSQLParser.RULE_alter_type_cmds = 68;
PostgreSQLParser.RULE_alter_type_cmd = 69;
PostgreSQLParser.RULE_closeportalstmt = 70;
PostgreSQLParser.RULE_copystmt = 71;
PostgreSQLParser.RULE_copy_from = 72;
PostgreSQLParser.RULE_opt_program = 73;
PostgreSQLParser.RULE_copy_file_name = 74;
PostgreSQLParser.RULE_copy_options = 75;
PostgreSQLParser.RULE_copy_opt_list = 76;
PostgreSQLParser.RULE_copy_opt_item = 77;
PostgreSQLParser.RULE_opt_binary = 78;
PostgreSQLParser.RULE_copy_delimiter = 79;
PostgreSQLParser.RULE_opt_using = 80;
PostgreSQLParser.RULE_copy_generic_opt_list = 81;
PostgreSQLParser.RULE_copy_generic_opt_elem = 82;
PostgreSQLParser.RULE_copy_generic_opt_arg = 83;
PostgreSQLParser.RULE_copy_generic_opt_arg_list = 84;
PostgreSQLParser.RULE_copy_generic_opt_arg_list_item = 85;
PostgreSQLParser.RULE_createstmt = 86;
PostgreSQLParser.RULE_opttemp = 87;
PostgreSQLParser.RULE_opttableelementlist = 88;
PostgreSQLParser.RULE_opttypedtableelementlist = 89;
PostgreSQLParser.RULE_tableelementlist = 90;
PostgreSQLParser.RULE_typedtableelementlist = 91;
PostgreSQLParser.RULE_tableelement = 92;
PostgreSQLParser.RULE_typedtableelement = 93;
PostgreSQLParser.RULE_columnDef = 94;
PostgreSQLParser.RULE_columnOptions = 95;
PostgreSQLParser.RULE_colquallist = 96;
PostgreSQLParser.RULE_colconstraint = 97;
PostgreSQLParser.RULE_colconstraintelem = 98;
PostgreSQLParser.RULE_generated_when = 99;
PostgreSQLParser.RULE_constraintattr = 100;
PostgreSQLParser.RULE_tablelikeclause = 101;
PostgreSQLParser.RULE_tablelikeoptionlist = 102;
PostgreSQLParser.RULE_tablelikeoption = 103;
PostgreSQLParser.RULE_tableconstraint = 104;
PostgreSQLParser.RULE_constraintelem = 105;
PostgreSQLParser.RULE_opt_no_inherit = 106;
PostgreSQLParser.RULE_opt_column_list = 107;
PostgreSQLParser.RULE_columnlist = 108;
PostgreSQLParser.RULE_columnElem = 109;
PostgreSQLParser.RULE_opt_c_include = 110;
PostgreSQLParser.RULE_key_match = 111;
PostgreSQLParser.RULE_exclusionconstraintlist = 112;
PostgreSQLParser.RULE_exclusionconstraintelem = 113;
PostgreSQLParser.RULE_exclusionwhereclause = 114;
PostgreSQLParser.RULE_key_actions = 115;
PostgreSQLParser.RULE_key_update = 116;
PostgreSQLParser.RULE_key_delete = 117;
PostgreSQLParser.RULE_key_action = 118;
PostgreSQLParser.RULE_optinherit = 119;
PostgreSQLParser.RULE_optpartitionspec = 120;
PostgreSQLParser.RULE_partitionspec = 121;
PostgreSQLParser.RULE_part_params = 122;
PostgreSQLParser.RULE_part_elem = 123;
PostgreSQLParser.RULE_table_access_method_clause = 124;
PostgreSQLParser.RULE_optwith = 125;
PostgreSQLParser.RULE_oncommitoption = 126;
PostgreSQLParser.RULE_opttablespace = 127;
PostgreSQLParser.RULE_optconstablespace = 128;
PostgreSQLParser.RULE_existingindex = 129;
PostgreSQLParser.RULE_createstatsstmt = 130;
PostgreSQLParser.RULE_alterstatsstmt = 131;
PostgreSQLParser.RULE_createasstmt = 132;
PostgreSQLParser.RULE_create_as_target = 133;
PostgreSQLParser.RULE_opt_with_data = 134;
PostgreSQLParser.RULE_creatematviewstmt = 135;
PostgreSQLParser.RULE_create_mv_target = 136;
PostgreSQLParser.RULE_optnolog = 137;
PostgreSQLParser.RULE_refreshmatviewstmt = 138;
PostgreSQLParser.RULE_createseqstmt = 139;
PostgreSQLParser.RULE_alterseqstmt = 140;
PostgreSQLParser.RULE_optseqoptlist = 141;
PostgreSQLParser.RULE_optparenthesizedseqoptlist = 142;
PostgreSQLParser.RULE_seqoptlist = 143;
PostgreSQLParser.RULE_seqoptelem = 144;
PostgreSQLParser.RULE_opt_by = 145;
PostgreSQLParser.RULE_numericonly = 146;
PostgreSQLParser.RULE_numericonly_list = 147;
PostgreSQLParser.RULE_createplangstmt = 148;
PostgreSQLParser.RULE_opt_trusted = 149;
PostgreSQLParser.RULE_handler_name = 150;
PostgreSQLParser.RULE_opt_inline_handler = 151;
PostgreSQLParser.RULE_validator_clause = 152;
PostgreSQLParser.RULE_opt_validator = 153;
PostgreSQLParser.RULE_opt_procedural = 154;
PostgreSQLParser.RULE_createtablespacestmt = 155;
PostgreSQLParser.RULE_opttablespaceowner = 156;
PostgreSQLParser.RULE_droptablespacestmt = 157;
PostgreSQLParser.RULE_createextensionstmt = 158;
PostgreSQLParser.RULE_create_extension_opt_list = 159;
PostgreSQLParser.RULE_create_extension_opt_item = 160;
PostgreSQLParser.RULE_alterextensionstmt = 161;
PostgreSQLParser.RULE_alter_extension_opt_list = 162;
PostgreSQLParser.RULE_alter_extension_opt_item = 163;
PostgreSQLParser.RULE_alterextensioncontentsstmt = 164;
PostgreSQLParser.RULE_createfdwstmt = 165;
PostgreSQLParser.RULE_fdw_option = 166;
PostgreSQLParser.RULE_fdw_options = 167;
PostgreSQLParser.RULE_opt_fdw_options = 168;
PostgreSQLParser.RULE_alterfdwstmt = 169;
PostgreSQLParser.RULE_create_generic_options = 170;
PostgreSQLParser.RULE_generic_option_list = 171;
PostgreSQLParser.RULE_alter_generic_options = 172;
PostgreSQLParser.RULE_alter_generic_option_list = 173;
PostgreSQLParser.RULE_alter_generic_option_elem = 174;
PostgreSQLParser.RULE_generic_option_elem = 175;
PostgreSQLParser.RULE_generic_option_name = 176;
PostgreSQLParser.RULE_generic_option_arg = 177;
PostgreSQLParser.RULE_createforeignserverstmt = 178;
PostgreSQLParser.RULE_opt_type = 179;
PostgreSQLParser.RULE_foreign_server_version = 180;
PostgreSQLParser.RULE_opt_foreign_server_version = 181;
PostgreSQLParser.RULE_alterforeignserverstmt = 182;
PostgreSQLParser.RULE_createforeigntablestmt = 183;
PostgreSQLParser.RULE_importforeignschemastmt = 184;
PostgreSQLParser.RULE_import_qualification_type = 185;
PostgreSQLParser.RULE_import_qualification = 186;
PostgreSQLParser.RULE_createusermappingstmt = 187;
PostgreSQLParser.RULE_auth_ident = 188;
PostgreSQLParser.RULE_dropusermappingstmt = 189;
PostgreSQLParser.RULE_alterusermappingstmt = 190;
PostgreSQLParser.RULE_createpolicystmt = 191;
PostgreSQLParser.RULE_alterpolicystmt = 192;
PostgreSQLParser.RULE_rowsecurityoptionalexpr = 193;
PostgreSQLParser.RULE_rowsecurityoptionalwithcheck = 194;
PostgreSQLParser.RULE_rowsecuritydefaulttorole = 195;
PostgreSQLParser.RULE_rowsecurityoptionaltorole = 196;
PostgreSQLParser.RULE_rowsecuritydefaultpermissive = 197;
PostgreSQLParser.RULE_rowsecuritydefaultforcmd = 198;
PostgreSQLParser.RULE_row_security_cmd = 199;
PostgreSQLParser.RULE_createamstmt = 200;
PostgreSQLParser.RULE_am_type = 201;
PostgreSQLParser.RULE_createtrigstmt = 202;
PostgreSQLParser.RULE_triggeractiontime = 203;
PostgreSQLParser.RULE_triggerevents = 204;
PostgreSQLParser.RULE_triggeroneevent = 205;
PostgreSQLParser.RULE_triggerreferencing = 206;
PostgreSQLParser.RULE_triggertransitions = 207;
PostgreSQLParser.RULE_triggertransition = 208;
PostgreSQLParser.RULE_transitionoldornew = 209;
PostgreSQLParser.RULE_transitionrowortable = 210;
PostgreSQLParser.RULE_transitionrelname = 211;
PostgreSQLParser.RULE_triggerforspec = 212;
PostgreSQLParser.RULE_triggerforopteach = 213;
PostgreSQLParser.RULE_triggerfortype = 214;
PostgreSQLParser.RULE_triggerwhen = 215;
PostgreSQLParser.RULE_function_or_procedure = 216;
PostgreSQLParser.RULE_triggerfuncargs = 217;
PostgreSQLParser.RULE_triggerfuncarg = 218;
PostgreSQLParser.RULE_optconstrfromtable = 219;
PostgreSQLParser.RULE_constraintattributespec = 220;
PostgreSQLParser.RULE_constraintattributeElem = 221;
PostgreSQLParser.RULE_createeventtrigstmt = 222;
PostgreSQLParser.RULE_event_trigger_when_list = 223;
PostgreSQLParser.RULE_event_trigger_when_item = 224;
PostgreSQLParser.RULE_event_trigger_value_list = 225;
PostgreSQLParser.RULE_altereventtrigstmt = 226;
PostgreSQLParser.RULE_enable_trigger = 227;
PostgreSQLParser.RULE_createassertionstmt = 228;
PostgreSQLParser.RULE_definestmt = 229;
PostgreSQLParser.RULE_definition = 230;
PostgreSQLParser.RULE_def_list = 231;
PostgreSQLParser.RULE_def_elem = 232;
PostgreSQLParser.RULE_def_arg = 233;
PostgreSQLParser.RULE_old_aggr_definition = 234;
PostgreSQLParser.RULE_old_aggr_list = 235;
PostgreSQLParser.RULE_old_aggr_elem = 236;
PostgreSQLParser.RULE_opt_enum_val_list = 237;
PostgreSQLParser.RULE_enum_val_list = 238;
PostgreSQLParser.RULE_alterenumstmt = 239;
PostgreSQLParser.RULE_opt_if_not_exists = 240;
PostgreSQLParser.RULE_createopclassstmt = 241;
PostgreSQLParser.RULE_opclass_item_list = 242;
PostgreSQLParser.RULE_opclass_item = 243;
PostgreSQLParser.RULE_opt_default = 244;
PostgreSQLParser.RULE_opt_opfamily = 245;
PostgreSQLParser.RULE_opclass_purpose = 246;
PostgreSQLParser.RULE_opt_recheck = 247;
PostgreSQLParser.RULE_createopfamilystmt = 248;
PostgreSQLParser.RULE_alteropfamilystmt = 249;
PostgreSQLParser.RULE_opclass_drop_list = 250;
PostgreSQLParser.RULE_opclass_drop = 251;
PostgreSQLParser.RULE_dropopclassstmt = 252;
PostgreSQLParser.RULE_dropopfamilystmt = 253;
PostgreSQLParser.RULE_dropownedstmt = 254;
PostgreSQLParser.RULE_reassignownedstmt = 255;
PostgreSQLParser.RULE_dropstmt = 256;
PostgreSQLParser.RULE_object_type_any_name = 257;
PostgreSQLParser.RULE_object_type_name = 258;
PostgreSQLParser.RULE_drop_type_name = 259;
PostgreSQLParser.RULE_object_type_name_on_any_name = 260;
PostgreSQLParser.RULE_any_name_list = 261;
PostgreSQLParser.RULE_any_name = 262;
PostgreSQLParser.RULE_attrs = 263;
PostgreSQLParser.RULE_type_name_list = 264;
PostgreSQLParser.RULE_truncatestmt = 265;
PostgreSQLParser.RULE_opt_restart_seqs = 266;
PostgreSQLParser.RULE_commentstmt = 267;
PostgreSQLParser.RULE_comment_text = 268;
PostgreSQLParser.RULE_seclabelstmt = 269;
PostgreSQLParser.RULE_opt_provider = 270;
PostgreSQLParser.RULE_security_label = 271;
PostgreSQLParser.RULE_fetchstmt = 272;
PostgreSQLParser.RULE_fetch_args = 273;
PostgreSQLParser.RULE_from_in = 274;
PostgreSQLParser.RULE_opt_from_in = 275;
PostgreSQLParser.RULE_grantstmt = 276;
PostgreSQLParser.RULE_revokestmt = 277;
PostgreSQLParser.RULE_privileges = 278;
PostgreSQLParser.RULE_privilege_list = 279;
PostgreSQLParser.RULE_privilege = 280;
PostgreSQLParser.RULE_privilege_target = 281;
PostgreSQLParser.RULE_grantee_list = 282;
PostgreSQLParser.RULE_grantee = 283;
PostgreSQLParser.RULE_opt_grant_grant_option = 284;
PostgreSQLParser.RULE_grantrolestmt = 285;
PostgreSQLParser.RULE_revokerolestmt = 286;
PostgreSQLParser.RULE_opt_grant_admin_option = 287;
PostgreSQLParser.RULE_opt_granted_by = 288;
PostgreSQLParser.RULE_alterdefaultprivilegesstmt = 289;
PostgreSQLParser.RULE_defacloptionlist = 290;
PostgreSQLParser.RULE_defacloption = 291;
PostgreSQLParser.RULE_defaclaction = 292;
PostgreSQLParser.RULE_defacl_privilege_target = 293;
PostgreSQLParser.RULE_indexstmt = 294;
PostgreSQLParser.RULE_opt_unique = 295;
PostgreSQLParser.RULE_opt_concurrently = 296;
PostgreSQLParser.RULE_opt_index_name = 297;
PostgreSQLParser.RULE_access_method_clause = 298;
PostgreSQLParser.RULE_index_params = 299;
PostgreSQLParser.RULE_index_elem_options = 300;
PostgreSQLParser.RULE_index_elem = 301;
PostgreSQLParser.RULE_opt_include = 302;
PostgreSQLParser.RULE_index_including_params = 303;
PostgreSQLParser.RULE_opt_collate = 304;
PostgreSQLParser.RULE_opt_class = 305;
PostgreSQLParser.RULE_opt_asc_desc = 306;
PostgreSQLParser.RULE_opt_nulls_order = 307;
PostgreSQLParser.RULE_createfunctionstmt = 308;
PostgreSQLParser.RULE_opt_or_replace = 309;
PostgreSQLParser.RULE_func_args = 310;
PostgreSQLParser.RULE_func_args_list = 311;
PostgreSQLParser.RULE_function_with_argtypes_list = 312;
PostgreSQLParser.RULE_function_with_argtypes = 313;
PostgreSQLParser.RULE_func_args_with_defaults = 314;
PostgreSQLParser.RULE_func_args_with_defaults_list = 315;
PostgreSQLParser.RULE_func_arg = 316;
PostgreSQLParser.RULE_arg_class = 317;
PostgreSQLParser.RULE_param_name = 318;
PostgreSQLParser.RULE_func_return = 319;
PostgreSQLParser.RULE_func_type = 320;
PostgreSQLParser.RULE_func_arg_with_default = 321;
PostgreSQLParser.RULE_aggr_arg = 322;
PostgreSQLParser.RULE_aggr_args = 323;
PostgreSQLParser.RULE_aggr_args_list = 324;
PostgreSQLParser.RULE_aggregate_with_argtypes = 325;
PostgreSQLParser.RULE_aggregate_with_argtypes_list = 326;
PostgreSQLParser.RULE_createfunc_opt_list = 327;
PostgreSQLParser.RULE_common_func_opt_item = 328;
PostgreSQLParser.RULE_createfunc_opt_item = 329;
PostgreSQLParser.RULE_func_as = 330;
PostgreSQLParser.RULE_transform_type_list = 331;
PostgreSQLParser.RULE_opt_definition = 332;
PostgreSQLParser.RULE_table_func_column = 333;
PostgreSQLParser.RULE_table_func_column_list = 334;
PostgreSQLParser.RULE_alterfunctionstmt = 335;
PostgreSQLParser.RULE_alterfunc_opt_list = 336;
PostgreSQLParser.RULE_opt_restrict = 337;
PostgreSQLParser.RULE_removefuncstmt = 338;
PostgreSQLParser.RULE_removeaggrstmt = 339;
PostgreSQLParser.RULE_removeoperstmt = 340;
PostgreSQLParser.RULE_oper_argtypes = 341;
PostgreSQLParser.RULE_any_operator = 342;
PostgreSQLParser.RULE_operator_with_argtypes_list = 343;
PostgreSQLParser.RULE_operator_with_argtypes = 344;
PostgreSQLParser.RULE_dostmt = 345;
PostgreSQLParser.RULE_dostmt_opt_list = 346;
PostgreSQLParser.RULE_dostmt_opt_item = 347;
PostgreSQLParser.RULE_createcaststmt = 348;
PostgreSQLParser.RULE_cast_context = 349;
PostgreSQLParser.RULE_dropcaststmt = 350;
PostgreSQLParser.RULE_opt_if_exists = 351;
PostgreSQLParser.RULE_createtransformstmt = 352;
PostgreSQLParser.RULE_transform_element_list = 353;
PostgreSQLParser.RULE_droptransformstmt = 354;
PostgreSQLParser.RULE_reindexstmt = 355;
PostgreSQLParser.RULE_reindex_target_type = 356;
PostgreSQLParser.RULE_reindex_target_multitable = 357;
PostgreSQLParser.RULE_reindex_option_list = 358;
PostgreSQLParser.RULE_reindex_option_elem = 359;
PostgreSQLParser.RULE_altertblspcstmt = 360;
PostgreSQLParser.RULE_renamestmt = 361;
PostgreSQLParser.RULE_opt_column = 362;
PostgreSQLParser.RULE_opt_set_data = 363;
PostgreSQLParser.RULE_alterobjectdependsstmt = 364;
PostgreSQLParser.RULE_opt_no = 365;
PostgreSQLParser.RULE_alterobjectschemastmt = 366;
PostgreSQLParser.RULE_alteroperatorstmt = 367;
PostgreSQLParser.RULE_operator_def_list = 368;
PostgreSQLParser.RULE_operator_def_elem = 369;
PostgreSQLParser.RULE_operator_def_arg = 370;
PostgreSQLParser.RULE_altertypestmt = 371;
PostgreSQLParser.RULE_alterownerstmt = 372;
PostgreSQLParser.RULE_createpublicationstmt = 373;
PostgreSQLParser.RULE_opt_publication_for_tables = 374;
PostgreSQLParser.RULE_publication_for_tables = 375;
PostgreSQLParser.RULE_alterpublicationstmt = 376;
PostgreSQLParser.RULE_createsubscriptionstmt = 377;
PostgreSQLParser.RULE_publication_name_list = 378;
PostgreSQLParser.RULE_publication_name_item = 379;
PostgreSQLParser.RULE_altersubscriptionstmt = 380;
PostgreSQLParser.RULE_dropsubscriptionstmt = 381;
PostgreSQLParser.RULE_rulestmt = 382;
PostgreSQLParser.RULE_ruleactionlist = 383;
PostgreSQLParser.RULE_ruleactionmulti = 384;
PostgreSQLParser.RULE_ruleactionstmt = 385;
PostgreSQLParser.RULE_ruleactionstmtOrEmpty = 386;
PostgreSQLParser.RULE_event = 387;
PostgreSQLParser.RULE_opt_instead = 388;
PostgreSQLParser.RULE_notifystmt = 389;
PostgreSQLParser.RULE_notify_payload = 390;
PostgreSQLParser.RULE_listenstmt = 391;
PostgreSQLParser.RULE_unlistenstmt = 392;
PostgreSQLParser.RULE_transactionstmt = 393;
PostgreSQLParser.RULE_opt_transaction = 394;
PostgreSQLParser.RULE_transaction_mode_item = 395;
PostgreSQLParser.RULE_transaction_mode_list = 396;
PostgreSQLParser.RULE_transaction_mode_list_or_empty = 397;
PostgreSQLParser.RULE_opt_transaction_chain = 398;
PostgreSQLParser.RULE_viewstmt = 399;
PostgreSQLParser.RULE_opt_check_option = 400;
PostgreSQLParser.RULE_loadstmt = 401;
PostgreSQLParser.RULE_createdbstmt = 402;
PostgreSQLParser.RULE_createdb_opt_list = 403;
PostgreSQLParser.RULE_createdb_opt_items = 404;
PostgreSQLParser.RULE_createdb_opt_item = 405;
PostgreSQLParser.RULE_createdb_opt_name = 406;
PostgreSQLParser.RULE_opt_equal = 407;
PostgreSQLParser.RULE_alterdatabasestmt = 408;
PostgreSQLParser.RULE_alterdatabasesetstmt = 409;
PostgreSQLParser.RULE_dropdbstmt = 410;
PostgreSQLParser.RULE_drop_option_list = 411;
PostgreSQLParser.RULE_drop_option = 412;
PostgreSQLParser.RULE_altercollationstmt = 413;
PostgreSQLParser.RULE_altersystemstmt = 414;
PostgreSQLParser.RULE_createdomainstmt = 415;
PostgreSQLParser.RULE_alterdomainstmt = 416;
PostgreSQLParser.RULE_opt_as = 417;
PostgreSQLParser.RULE_altertsdictionarystmt = 418;
PostgreSQLParser.RULE_altertsconfigurationstmt = 419;
PostgreSQLParser.RULE_any_with = 420;
PostgreSQLParser.RULE_createconversionstmt = 421;
PostgreSQLParser.RULE_clusterstmt = 422;
PostgreSQLParser.RULE_cluster_index_specification = 423;
PostgreSQLParser.RULE_vacuumstmt = 424;
PostgreSQLParser.RULE_analyzestmt = 425;
PostgreSQLParser.RULE_vac_analyze_option_list = 426;
PostgreSQLParser.RULE_analyze_keyword = 427;
PostgreSQLParser.RULE_vac_analyze_option_elem = 428;
PostgreSQLParser.RULE_vac_analyze_option_name = 429;
PostgreSQLParser.RULE_vac_analyze_option_arg = 430;
PostgreSQLParser.RULE_opt_analyze = 431;
PostgreSQLParser.RULE_opt_verbose = 432;
PostgreSQLParser.RULE_opt_full = 433;
PostgreSQLParser.RULE_opt_freeze = 434;
PostgreSQLParser.RULE_opt_name_list = 435;
PostgreSQLParser.RULE_vacuum_relation = 436;
PostgreSQLParser.RULE_vacuum_relation_list = 437;
PostgreSQLParser.RULE_opt_vacuum_relation_list = 438;
PostgreSQLParser.RULE_explainstmt = 439;
PostgreSQLParser.RULE_explainablestmt = 440;
PostgreSQLParser.RULE_explain_option_list = 441;
PostgreSQLParser.RULE_explain_option_elem = 442;
PostgreSQLParser.RULE_explain_option_name = 443;
PostgreSQLParser.RULE_explain_option_arg = 444;
PostgreSQLParser.RULE_preparestmt = 445;
PostgreSQLParser.RULE_prep_type_clause = 446;
PostgreSQLParser.RULE_preparablestmt = 447;
PostgreSQLParser.RULE_executestmt = 448;
PostgreSQLParser.RULE_execute_param_clause = 449;
PostgreSQLParser.RULE_deallocatestmt = 450;
PostgreSQLParser.RULE_insertstmt = 451;
PostgreSQLParser.RULE_insert_target = 452;
PostgreSQLParser.RULE_insert_rest = 453;
PostgreSQLParser.RULE_override_kind = 454;
PostgreSQLParser.RULE_insert_column_list = 455;
PostgreSQLParser.RULE_insert_column_item = 456;
PostgreSQLParser.RULE_opt_on_conflict = 457;
PostgreSQLParser.RULE_opt_conf_expr = 458;
PostgreSQLParser.RULE_returning_clause = 459;
PostgreSQLParser.RULE_mergestmt = 460;
PostgreSQLParser.RULE_merge_insert_clause = 461;
PostgreSQLParser.RULE_merge_update_clause = 462;
PostgreSQLParser.RULE_merge_delete_clause = 463;
PostgreSQLParser.RULE_deletestmt = 464;
PostgreSQLParser.RULE_using_clause = 465;
PostgreSQLParser.RULE_lockstmt = 466;
PostgreSQLParser.RULE_opt_lock = 467;
PostgreSQLParser.RULE_lock_type = 468;
PostgreSQLParser.RULE_opt_nowait = 469;
PostgreSQLParser.RULE_opt_nowait_or_skip = 470;
PostgreSQLParser.RULE_updatestmt = 471;
PostgreSQLParser.RULE_set_clause_list = 472;
PostgreSQLParser.RULE_set_clause = 473;
PostgreSQLParser.RULE_set_target = 474;
PostgreSQLParser.RULE_set_target_list = 475;
PostgreSQLParser.RULE_declarecursorstmt = 476;
PostgreSQLParser.RULE_cursor_name = 477;
PostgreSQLParser.RULE_cursor_options = 478;
PostgreSQLParser.RULE_opt_hold = 479;
PostgreSQLParser.RULE_selectstmt = 480;
PostgreSQLParser.RULE_select_with_parens = 481;
PostgreSQLParser.RULE_select_no_parens = 482;
PostgreSQLParser.RULE_select_clause = 483;
PostgreSQLParser.RULE_simple_select = 484;
PostgreSQLParser.RULE_set_operator = 485;
PostgreSQLParser.RULE_set_operator_with_all_or_distinct = 486;
PostgreSQLParser.RULE_with_clause = 487;
PostgreSQLParser.RULE_cte_list = 488;
PostgreSQLParser.RULE_common_table_expr = 489;
PostgreSQLParser.RULE_opt_materialized = 490;
PostgreSQLParser.RULE_opt_with_clause = 491;
PostgreSQLParser.RULE_into_clause = 492;
PostgreSQLParser.RULE_opt_strict = 493;
PostgreSQLParser.RULE_opttempTableName = 494;
PostgreSQLParser.RULE_opt_table = 495;
PostgreSQLParser.RULE_all_or_distinct = 496;
PostgreSQLParser.RULE_distinct_clause = 497;
PostgreSQLParser.RULE_opt_all_clause = 498;
PostgreSQLParser.RULE_opt_sort_clause = 499;
PostgreSQLParser.RULE_sort_clause = 500;
PostgreSQLParser.RULE_sortby_list = 501;
PostgreSQLParser.RULE_sortby = 502;
PostgreSQLParser.RULE_select_limit = 503;
PostgreSQLParser.RULE_opt_select_limit = 504;
PostgreSQLParser.RULE_limit_clause = 505;
PostgreSQLParser.RULE_offset_clause = 506;
PostgreSQLParser.RULE_select_limit_value = 507;
PostgreSQLParser.RULE_select_offset_value = 508;
PostgreSQLParser.RULE_select_fetch_first_value = 509;
PostgreSQLParser.RULE_i_or_f_const = 510;
PostgreSQLParser.RULE_row_or_rows = 511;
PostgreSQLParser.RULE_first_or_next = 512;
PostgreSQLParser.RULE_group_clause = 513;
PostgreSQLParser.RULE_group_by_list = 514;
PostgreSQLParser.RULE_group_by_item = 515;
PostgreSQLParser.RULE_empty_grouping_set = 516;
PostgreSQLParser.RULE_rollup_clause = 517;
PostgreSQLParser.RULE_cube_clause = 518;
PostgreSQLParser.RULE_grouping_sets_clause = 519;
PostgreSQLParser.RULE_having_clause = 520;
PostgreSQLParser.RULE_for_locking_clause = 521;
PostgreSQLParser.RULE_opt_for_locking_clause = 522;
PostgreSQLParser.RULE_for_locking_items = 523;
PostgreSQLParser.RULE_for_locking_item = 524;
PostgreSQLParser.RULE_for_locking_strength = 525;
PostgreSQLParser.RULE_locked_rels_list = 526;
PostgreSQLParser.RULE_values_clause = 527;
PostgreSQLParser.RULE_from_clause = 528;
PostgreSQLParser.RULE_from_list = 529;
PostgreSQLParser.RULE_non_ansi_join = 530;
PostgreSQLParser.RULE_table_ref = 531;
PostgreSQLParser.RULE_alias_clause = 532;
PostgreSQLParser.RULE_opt_alias_clause = 533;
PostgreSQLParser.RULE_table_alias_clause = 534;
PostgreSQLParser.RULE_func_alias_clause = 535;
PostgreSQLParser.RULE_join_type = 536;
PostgreSQLParser.RULE_join_qual = 537;
PostgreSQLParser.RULE_relation_expr = 538;
PostgreSQLParser.RULE_relation_expr_list = 539;
PostgreSQLParser.RULE_relation_expr_opt_alias = 540;
PostgreSQLParser.RULE_tablesample_clause = 541;
PostgreSQLParser.RULE_opt_repeatable_clause = 542;
PostgreSQLParser.RULE_func_table = 543;
PostgreSQLParser.RULE_rowsfrom_item = 544;
PostgreSQLParser.RULE_rowsfrom_list = 545;
PostgreSQLParser.RULE_opt_col_def_list = 546;
PostgreSQLParser.RULE_opt_ordinality = 547;
PostgreSQLParser.RULE_where_clause = 548;
PostgreSQLParser.RULE_where_or_current_clause = 549;
PostgreSQLParser.RULE_opttablefuncelementlist = 550;
PostgreSQLParser.RULE_tablefuncelementlist = 551;
PostgreSQLParser.RULE_tablefuncelement = 552;
PostgreSQLParser.RULE_xmltable = 553;
PostgreSQLParser.RULE_xmltable_column_list = 554;
PostgreSQLParser.RULE_xmltable_column_el = 555;
PostgreSQLParser.RULE_xmltable_column_option_list = 556;
PostgreSQLParser.RULE_xmltable_column_option_el = 557;
PostgreSQLParser.RULE_xml_namespace_list = 558;
PostgreSQLParser.RULE_xml_namespace_el = 559;
PostgreSQLParser.RULE_typename = 560;
PostgreSQLParser.RULE_opt_array_bounds = 561;
PostgreSQLParser.RULE_simpletypename = 562;
PostgreSQLParser.RULE_consttypename = 563;
PostgreSQLParser.RULE_generictype = 564;
PostgreSQLParser.RULE_opt_type_modifiers = 565;
PostgreSQLParser.RULE_numeric = 566;
PostgreSQLParser.RULE_opt_float = 567;
PostgreSQLParser.RULE_bit = 568;
PostgreSQLParser.RULE_constbit = 569;
PostgreSQLParser.RULE_bitwithlength = 570;
PostgreSQLParser.RULE_bitwithoutlength = 571;
PostgreSQLParser.RULE_character = 572;
PostgreSQLParser.RULE_constcharacter = 573;
PostgreSQLParser.RULE_character_c = 574;
PostgreSQLParser.RULE_opt_varying = 575;
PostgreSQLParser.RULE_constdatetime = 576;
PostgreSQLParser.RULE_constinterval = 577;
PostgreSQLParser.RULE_opt_timezone = 578;
PostgreSQLParser.RULE_opt_interval = 579;
PostgreSQLParser.RULE_interval_second = 580;
PostgreSQLParser.RULE_opt_escape = 581;
PostgreSQLParser.RULE_a_expr = 582;
PostgreSQLParser.RULE_a_expr_qual = 583;
PostgreSQLParser.RULE_a_expr_lessless = 584;
PostgreSQLParser.RULE_a_expr_or = 585;
PostgreSQLParser.RULE_a_expr_and = 586;
PostgreSQLParser.RULE_a_expr_between = 587;
PostgreSQLParser.RULE_a_expr_in = 588;
PostgreSQLParser.RULE_a_expr_unary_not = 589;
PostgreSQLParser.RULE_a_expr_isnull = 590;
PostgreSQLParser.RULE_a_expr_is_not = 591;
PostgreSQLParser.RULE_a_expr_compare = 592;
PostgreSQLParser.RULE_a_expr_like = 593;
PostgreSQLParser.RULE_a_expr_qual_op = 594;
PostgreSQLParser.RULE_a_expr_unary_qualop = 595;
PostgreSQLParser.RULE_a_expr_add = 596;
PostgreSQLParser.RULE_a_expr_mul = 597;
PostgreSQLParser.RULE_a_expr_caret = 598;
PostgreSQLParser.RULE_a_expr_unary_sign = 599;
PostgreSQLParser.RULE_a_expr_at_time_zone = 600;
PostgreSQLParser.RULE_a_expr_collate = 601;
PostgreSQLParser.RULE_a_expr_typecast = 602;
PostgreSQLParser.RULE_b_expr = 603;
PostgreSQLParser.RULE_c_expr = 604;
PostgreSQLParser.RULE_plsqlvariablename = 605;
PostgreSQLParser.RULE_func_application = 606;
PostgreSQLParser.RULE_func_expr = 607;
PostgreSQLParser.RULE_func_expr_windowless = 608;
PostgreSQLParser.RULE_func_expr_common_subexpr = 609;
PostgreSQLParser.RULE_xml_root_version = 610;
PostgreSQLParser.RULE_opt_xml_root_standalone = 611;
PostgreSQLParser.RULE_xml_attributes = 612;
PostgreSQLParser.RULE_xml_attribute_list = 613;
PostgreSQLParser.RULE_xml_attribute_el = 614;
PostgreSQLParser.RULE_document_or_content = 615;
PostgreSQLParser.RULE_xml_whitespace_option = 616;
PostgreSQLParser.RULE_xmlexists_argument = 617;
PostgreSQLParser.RULE_xml_passing_mech = 618;
PostgreSQLParser.RULE_within_group_clause = 619;
PostgreSQLParser.RULE_filter_clause = 620;
PostgreSQLParser.RULE_window_clause = 621;
PostgreSQLParser.RULE_window_definition_list = 622;
PostgreSQLParser.RULE_window_definition = 623;
PostgreSQLParser.RULE_over_clause = 624;
PostgreSQLParser.RULE_window_specification = 625;
PostgreSQLParser.RULE_opt_existing_window_name = 626;
PostgreSQLParser.RULE_opt_partition_clause = 627;
PostgreSQLParser.RULE_opt_frame_clause = 628;
PostgreSQLParser.RULE_frame_extent = 629;
PostgreSQLParser.RULE_frame_bound = 630;
PostgreSQLParser.RULE_opt_window_exclusion_clause = 631;
PostgreSQLParser.RULE_row = 632;
PostgreSQLParser.RULE_explicit_row = 633;
PostgreSQLParser.RULE_implicit_row = 634;
PostgreSQLParser.RULE_sub_type = 635;
PostgreSQLParser.RULE_all_op = 636;
PostgreSQLParser.RULE_mathop = 637;
PostgreSQLParser.RULE_qual_op = 638;
PostgreSQLParser.RULE_qual_all_op = 639;
PostgreSQLParser.RULE_subquery_Op = 640;
PostgreSQLParser.RULE_expr_list = 641;
PostgreSQLParser.RULE_func_arg_list = 642;
PostgreSQLParser.RULE_func_arg_expr = 643;
PostgreSQLParser.RULE_type_list = 644;
PostgreSQLParser.RULE_array_expr = 645;
PostgreSQLParser.RULE_array_expr_list = 646;
PostgreSQLParser.RULE_extract_list = 647;
PostgreSQLParser.RULE_extract_arg = 648;
PostgreSQLParser.RULE_unicode_normal_form = 649;
PostgreSQLParser.RULE_overlay_list = 650;
PostgreSQLParser.RULE_position_list = 651;
PostgreSQLParser.RULE_substr_list = 652;
PostgreSQLParser.RULE_trim_list = 653;
PostgreSQLParser.RULE_in_expr = 654;
PostgreSQLParser.RULE_case_expr = 655;
PostgreSQLParser.RULE_when_clause_list = 656;
PostgreSQLParser.RULE_when_clause = 657;
PostgreSQLParser.RULE_case_default = 658;
PostgreSQLParser.RULE_case_arg = 659;
PostgreSQLParser.RULE_columnref = 660;
PostgreSQLParser.RULE_indirection_el = 661;
PostgreSQLParser.RULE_opt_slice_bound = 662;
PostgreSQLParser.RULE_indirection = 663;
PostgreSQLParser.RULE_opt_indirection = 664;
PostgreSQLParser.RULE_opt_target_list = 665;
PostgreSQLParser.RULE_target_list = 666;
PostgreSQLParser.RULE_target_el = 667;
PostgreSQLParser.RULE_qualified_name_list = 668;
PostgreSQLParser.RULE_qualified_name = 669;
PostgreSQLParser.RULE_name_list = 670;
PostgreSQLParser.RULE_name = 671;
PostgreSQLParser.RULE_attr_name = 672;
PostgreSQLParser.RULE_file_name = 673;
PostgreSQLParser.RULE_func_name = 674;
PostgreSQLParser.RULE_aexprconst = 675;
PostgreSQLParser.RULE_xconst = 676;
PostgreSQLParser.RULE_bconst = 677;
PostgreSQLParser.RULE_fconst = 678;
PostgreSQLParser.RULE_iconst = 679;
PostgreSQLParser.RULE_sconst = 680;
PostgreSQLParser.RULE_anysconst = 681;
PostgreSQLParser.RULE_opt_uescape = 682;
PostgreSQLParser.RULE_signediconst = 683;
PostgreSQLParser.RULE_roleid = 684;
PostgreSQLParser.RULE_rolespec = 685;
PostgreSQLParser.RULE_role_list = 686;
PostgreSQLParser.RULE_colid = 687;
PostgreSQLParser.RULE_table_alias = 688;
PostgreSQLParser.RULE_type_function_name = 689;
PostgreSQLParser.RULE_nonreservedword = 690;
PostgreSQLParser.RULE_collabel = 691;
PostgreSQLParser.RULE_identifier = 692;
PostgreSQLParser.RULE_plsqlidentifier = 693;
PostgreSQLParser.RULE_unreserved_keyword = 694;
PostgreSQLParser.RULE_col_name_keyword = 695;
PostgreSQLParser.RULE_type_func_name_keyword = 696;
PostgreSQLParser.RULE_reserved_keyword = 697;
PostgreSQLParser.RULE_builtin_function_name = 698;
PostgreSQLParser.RULE_pl_function = 699;
PostgreSQLParser.RULE_comp_options = 700;
PostgreSQLParser.RULE_comp_option = 701;
PostgreSQLParser.RULE_sharp = 702;
PostgreSQLParser.RULE_option_value = 703;
PostgreSQLParser.RULE_opt_semi = 704;
PostgreSQLParser.RULE_pl_block = 705;
PostgreSQLParser.RULE_decl_sect = 706;
PostgreSQLParser.RULE_decl_start = 707;
PostgreSQLParser.RULE_decl_stmts = 708;
PostgreSQLParser.RULE_label_decl = 709;
PostgreSQLParser.RULE_decl_stmt = 710;
PostgreSQLParser.RULE_decl_statement = 711;
PostgreSQLParser.RULE_opt_scrollable = 712;
PostgreSQLParser.RULE_decl_cursor_query = 713;
PostgreSQLParser.RULE_decl_cursor_args = 714;
PostgreSQLParser.RULE_decl_cursor_arglist = 715;
PostgreSQLParser.RULE_decl_cursor_arg = 716;
PostgreSQLParser.RULE_decl_is_for = 717;
PostgreSQLParser.RULE_decl_aliasitem = 718;
PostgreSQLParser.RULE_decl_varname = 719;
PostgreSQLParser.RULE_decl_const = 720;
PostgreSQLParser.RULE_decl_datatype = 721;
PostgreSQLParser.RULE_decl_collate = 722;
PostgreSQLParser.RULE_decl_notnull = 723;
PostgreSQLParser.RULE_decl_defval = 724;
PostgreSQLParser.RULE_decl_defkey = 725;
PostgreSQLParser.RULE_assign_operator = 726;
PostgreSQLParser.RULE_proc_sect = 727;
PostgreSQLParser.RULE_proc_stmt = 728;
PostgreSQLParser.RULE_stmt_perform = 729;
PostgreSQLParser.RULE_stmt_call = 730;
PostgreSQLParser.RULE_opt_expr_list = 731;
PostgreSQLParser.RULE_stmt_assign = 732;
PostgreSQLParser.RULE_stmt_getdiag = 733;
PostgreSQLParser.RULE_getdiag_area_opt = 734;
PostgreSQLParser.RULE_getdiag_list = 735;
PostgreSQLParser.RULE_getdiag_list_item = 736;
PostgreSQLParser.RULE_getdiag_item = 737;
PostgreSQLParser.RULE_getdiag_target = 738;
PostgreSQLParser.RULE_assign_var = 739;
PostgreSQLParser.RULE_stmt_if = 740;
PostgreSQLParser.RULE_stmt_elsifs = 741;
PostgreSQLParser.RULE_stmt_else = 742;
PostgreSQLParser.RULE_stmt_case = 743;
PostgreSQLParser.RULE_opt_expr_until_when = 744;
PostgreSQLParser.RULE_case_when_list = 745;
PostgreSQLParser.RULE_case_when = 746;
PostgreSQLParser.RULE_opt_case_else = 747;
PostgreSQLParser.RULE_stmt_loop = 748;
PostgreSQLParser.RULE_stmt_while = 749;
PostgreSQLParser.RULE_stmt_for = 750;
PostgreSQLParser.RULE_for_control = 751;
PostgreSQLParser.RULE_opt_for_using_expression = 752;
PostgreSQLParser.RULE_opt_cursor_parameters = 753;
PostgreSQLParser.RULE_opt_reverse = 754;
PostgreSQLParser.RULE_opt_by_expression = 755;
PostgreSQLParser.RULE_for_variable = 756;
PostgreSQLParser.RULE_stmt_foreach_a = 757;
PostgreSQLParser.RULE_foreach_slice = 758;
PostgreSQLParser.RULE_stmt_exit = 759;
PostgreSQLParser.RULE_exit_type = 760;
PostgreSQLParser.RULE_stmt_return = 761;
PostgreSQLParser.RULE_opt_return_result = 762;
PostgreSQLParser.RULE_stmt_raise = 763;
PostgreSQLParser.RULE_opt_stmt_raise_level = 764;
PostgreSQLParser.RULE_opt_raise_list = 765;
PostgreSQLParser.RULE_opt_raise_using = 766;
PostgreSQLParser.RULE_opt_raise_using_elem = 767;
PostgreSQLParser.RULE_opt_raise_using_elem_list = 768;
PostgreSQLParser.RULE_stmt_assert = 769;
PostgreSQLParser.RULE_opt_stmt_assert_message = 770;
PostgreSQLParser.RULE_loop_body = 771;
PostgreSQLParser.RULE_stmt_execsql = 772;
PostgreSQLParser.RULE_stmt_dynexecute = 773;
PostgreSQLParser.RULE_opt_execute_using = 774;
PostgreSQLParser.RULE_opt_execute_using_list = 775;
PostgreSQLParser.RULE_opt_execute_into = 776;
PostgreSQLParser.RULE_stmt_open = 777;
PostgreSQLParser.RULE_opt_open_bound_list_item = 778;
PostgreSQLParser.RULE_opt_open_bound_list = 779;
PostgreSQLParser.RULE_opt_open_using = 780;
PostgreSQLParser.RULE_opt_scroll_option = 781;
PostgreSQLParser.RULE_opt_scroll_option_no = 782;
PostgreSQLParser.RULE_stmt_fetch = 783;
PostgreSQLParser.RULE_into_target = 784;
PostgreSQLParser.RULE_opt_cursor_from = 785;
PostgreSQLParser.RULE_opt_fetch_direction = 786;
PostgreSQLParser.RULE_stmt_move = 787;
PostgreSQLParser.RULE_stmt_close = 788;
PostgreSQLParser.RULE_stmt_null = 789;
PostgreSQLParser.RULE_stmt_commit = 790;
PostgreSQLParser.RULE_stmt_rollback = 791;
PostgreSQLParser.RULE_plsql_opt_transaction_chain = 792;
PostgreSQLParser.RULE_stmt_set = 793;
PostgreSQLParser.RULE_cursor_variable = 794;
PostgreSQLParser.RULE_exception_sect = 795;
PostgreSQLParser.RULE_proc_exceptions = 796;
PostgreSQLParser.RULE_proc_exception = 797;
PostgreSQLParser.RULE_proc_conditions = 798;
PostgreSQLParser.RULE_proc_condition = 799;
PostgreSQLParser.RULE_opt_block_label = 800;
PostgreSQLParser.RULE_opt_loop_label = 801;
PostgreSQLParser.RULE_opt_label = 802;
PostgreSQLParser.RULE_opt_exitcond = 803;
PostgreSQLParser.RULE_any_identifier = 804;
PostgreSQLParser.RULE_plsql_unreserved_keyword = 805;
PostgreSQLParser.RULE_sql_expression = 806;
PostgreSQLParser.RULE_expr_until_then = 807;
PostgreSQLParser.RULE_expr_until_semi = 808;
PostgreSQLParser.RULE_expr_until_rightbracket = 809;
PostgreSQLParser.RULE_expr_until_loop = 810;
PostgreSQLParser.RULE_make_execsql_stmt = 811;
PostgreSQLParser.RULE_opt_returning_clause_into = 812;

class RootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_root;
    }

	stmtblock() {
	    return this.getTypedRuleContext(StmtblockContext,0);
	};

	EOF() {
	    return this.getToken(PostgreSQLParser.EOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRoot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlsqlrootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_plsqlroot;
    }

	pl_function() {
	    return this.getTypedRuleContext(Pl_functionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPlsqlroot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StmtblockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmtblock;
    }

	stmtmulti() {
	    return this.getTypedRuleContext(StmtmultiContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmtblock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StmtmultiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmtmulti;
    }

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.SEMI);
	    } else {
	        return this.getToken(PostgreSQLParser.SEMI, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmtmulti(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt;
    }

	altereventtrigstmt() {
	    return this.getTypedRuleContext(AltereventtrigstmtContext,0);
	};

	altercollationstmt() {
	    return this.getTypedRuleContext(AltercollationstmtContext,0);
	};

	alterdatabasestmt() {
	    return this.getTypedRuleContext(AlterdatabasestmtContext,0);
	};

	alterdatabasesetstmt() {
	    return this.getTypedRuleContext(AlterdatabasesetstmtContext,0);
	};

	alterdefaultprivilegesstmt() {
	    return this.getTypedRuleContext(AlterdefaultprivilegesstmtContext,0);
	};

	alterdomainstmt() {
	    return this.getTypedRuleContext(AlterdomainstmtContext,0);
	};

	alterenumstmt() {
	    return this.getTypedRuleContext(AlterenumstmtContext,0);
	};

	alterextensionstmt() {
	    return this.getTypedRuleContext(AlterextensionstmtContext,0);
	};

	alterextensioncontentsstmt() {
	    return this.getTypedRuleContext(AlterextensioncontentsstmtContext,0);
	};

	alterfdwstmt() {
	    return this.getTypedRuleContext(AlterfdwstmtContext,0);
	};

	alterforeignserverstmt() {
	    return this.getTypedRuleContext(AlterforeignserverstmtContext,0);
	};

	alterfunctionstmt() {
	    return this.getTypedRuleContext(AlterfunctionstmtContext,0);
	};

	altergroupstmt() {
	    return this.getTypedRuleContext(AltergroupstmtContext,0);
	};

	alterobjectdependsstmt() {
	    return this.getTypedRuleContext(AlterobjectdependsstmtContext,0);
	};

	alterobjectschemastmt() {
	    return this.getTypedRuleContext(AlterobjectschemastmtContext,0);
	};

	alterownerstmt() {
	    return this.getTypedRuleContext(AlterownerstmtContext,0);
	};

	alteroperatorstmt() {
	    return this.getTypedRuleContext(AlteroperatorstmtContext,0);
	};

	altertypestmt() {
	    return this.getTypedRuleContext(AltertypestmtContext,0);
	};

	alterpolicystmt() {
	    return this.getTypedRuleContext(AlterpolicystmtContext,0);
	};

	alterseqstmt() {
	    return this.getTypedRuleContext(AlterseqstmtContext,0);
	};

	altersystemstmt() {
	    return this.getTypedRuleContext(AltersystemstmtContext,0);
	};

	altertablestmt() {
	    return this.getTypedRuleContext(AltertablestmtContext,0);
	};

	altertblspcstmt() {
	    return this.getTypedRuleContext(AltertblspcstmtContext,0);
	};

	altercompositetypestmt() {
	    return this.getTypedRuleContext(AltercompositetypestmtContext,0);
	};

	alterpublicationstmt() {
	    return this.getTypedRuleContext(AlterpublicationstmtContext,0);
	};

	alterrolesetstmt() {
	    return this.getTypedRuleContext(AlterrolesetstmtContext,0);
	};

	alterrolestmt() {
	    return this.getTypedRuleContext(AlterrolestmtContext,0);
	};

	altersubscriptionstmt() {
	    return this.getTypedRuleContext(AltersubscriptionstmtContext,0);
	};

	alterstatsstmt() {
	    return this.getTypedRuleContext(AlterstatsstmtContext,0);
	};

	altertsconfigurationstmt() {
	    return this.getTypedRuleContext(AltertsconfigurationstmtContext,0);
	};

	altertsdictionarystmt() {
	    return this.getTypedRuleContext(AltertsdictionarystmtContext,0);
	};

	alterusermappingstmt() {
	    return this.getTypedRuleContext(AlterusermappingstmtContext,0);
	};

	analyzestmt() {
	    return this.getTypedRuleContext(AnalyzestmtContext,0);
	};

	callstmt() {
	    return this.getTypedRuleContext(CallstmtContext,0);
	};

	checkpointstmt() {
	    return this.getTypedRuleContext(CheckpointstmtContext,0);
	};

	closeportalstmt() {
	    return this.getTypedRuleContext(CloseportalstmtContext,0);
	};

	clusterstmt() {
	    return this.getTypedRuleContext(ClusterstmtContext,0);
	};

	commentstmt() {
	    return this.getTypedRuleContext(CommentstmtContext,0);
	};

	constraintssetstmt() {
	    return this.getTypedRuleContext(ConstraintssetstmtContext,0);
	};

	copystmt() {
	    return this.getTypedRuleContext(CopystmtContext,0);
	};

	createamstmt() {
	    return this.getTypedRuleContext(CreateamstmtContext,0);
	};

	createasstmt() {
	    return this.getTypedRuleContext(CreateasstmtContext,0);
	};

	createassertionstmt() {
	    return this.getTypedRuleContext(CreateassertionstmtContext,0);
	};

	createcaststmt() {
	    return this.getTypedRuleContext(CreatecaststmtContext,0);
	};

	createconversionstmt() {
	    return this.getTypedRuleContext(CreateconversionstmtContext,0);
	};

	createdomainstmt() {
	    return this.getTypedRuleContext(CreatedomainstmtContext,0);
	};

	createextensionstmt() {
	    return this.getTypedRuleContext(CreateextensionstmtContext,0);
	};

	createfdwstmt() {
	    return this.getTypedRuleContext(CreatefdwstmtContext,0);
	};

	createforeignserverstmt() {
	    return this.getTypedRuleContext(CreateforeignserverstmtContext,0);
	};

	createforeigntablestmt() {
	    return this.getTypedRuleContext(CreateforeigntablestmtContext,0);
	};

	createfunctionstmt() {
	    return this.getTypedRuleContext(CreatefunctionstmtContext,0);
	};

	creategroupstmt() {
	    return this.getTypedRuleContext(CreategroupstmtContext,0);
	};

	creatematviewstmt() {
	    return this.getTypedRuleContext(CreatematviewstmtContext,0);
	};

	createopclassstmt() {
	    return this.getTypedRuleContext(CreateopclassstmtContext,0);
	};

	createopfamilystmt() {
	    return this.getTypedRuleContext(CreateopfamilystmtContext,0);
	};

	createpublicationstmt() {
	    return this.getTypedRuleContext(CreatepublicationstmtContext,0);
	};

	alteropfamilystmt() {
	    return this.getTypedRuleContext(AlteropfamilystmtContext,0);
	};

	createpolicystmt() {
	    return this.getTypedRuleContext(CreatepolicystmtContext,0);
	};

	createplangstmt() {
	    return this.getTypedRuleContext(CreateplangstmtContext,0);
	};

	createschemastmt() {
	    return this.getTypedRuleContext(CreateschemastmtContext,0);
	};

	createseqstmt() {
	    return this.getTypedRuleContext(CreateseqstmtContext,0);
	};

	createstmt() {
	    return this.getTypedRuleContext(CreatestmtContext,0);
	};

	createsubscriptionstmt() {
	    return this.getTypedRuleContext(CreatesubscriptionstmtContext,0);
	};

	createstatsstmt() {
	    return this.getTypedRuleContext(CreatestatsstmtContext,0);
	};

	createtablespacestmt() {
	    return this.getTypedRuleContext(CreatetablespacestmtContext,0);
	};

	createtransformstmt() {
	    return this.getTypedRuleContext(CreatetransformstmtContext,0);
	};

	createtrigstmt() {
	    return this.getTypedRuleContext(CreatetrigstmtContext,0);
	};

	createeventtrigstmt() {
	    return this.getTypedRuleContext(CreateeventtrigstmtContext,0);
	};

	createrolestmt() {
	    return this.getTypedRuleContext(CreaterolestmtContext,0);
	};

	createuserstmt() {
	    return this.getTypedRuleContext(CreateuserstmtContext,0);
	};

	createusermappingstmt() {
	    return this.getTypedRuleContext(CreateusermappingstmtContext,0);
	};

	createdbstmt() {
	    return this.getTypedRuleContext(CreatedbstmtContext,0);
	};

	deallocatestmt() {
	    return this.getTypedRuleContext(DeallocatestmtContext,0);
	};

	declarecursorstmt() {
	    return this.getTypedRuleContext(DeclarecursorstmtContext,0);
	};

	definestmt() {
	    return this.getTypedRuleContext(DefinestmtContext,0);
	};

	deletestmt() {
	    return this.getTypedRuleContext(DeletestmtContext,0);
	};

	discardstmt() {
	    return this.getTypedRuleContext(DiscardstmtContext,0);
	};

	dostmt() {
	    return this.getTypedRuleContext(DostmtContext,0);
	};

	dropcaststmt() {
	    return this.getTypedRuleContext(DropcaststmtContext,0);
	};

	dropopclassstmt() {
	    return this.getTypedRuleContext(DropopclassstmtContext,0);
	};

	dropopfamilystmt() {
	    return this.getTypedRuleContext(DropopfamilystmtContext,0);
	};

	dropownedstmt() {
	    return this.getTypedRuleContext(DropownedstmtContext,0);
	};

	dropstmt() {
	    return this.getTypedRuleContext(DropstmtContext,0);
	};

	dropsubscriptionstmt() {
	    return this.getTypedRuleContext(DropsubscriptionstmtContext,0);
	};

	droptablespacestmt() {
	    return this.getTypedRuleContext(DroptablespacestmtContext,0);
	};

	droptransformstmt() {
	    return this.getTypedRuleContext(DroptransformstmtContext,0);
	};

	droprolestmt() {
	    return this.getTypedRuleContext(DroprolestmtContext,0);
	};

	dropusermappingstmt() {
	    return this.getTypedRuleContext(DropusermappingstmtContext,0);
	};

	dropdbstmt() {
	    return this.getTypedRuleContext(DropdbstmtContext,0);
	};

	executestmt() {
	    return this.getTypedRuleContext(ExecutestmtContext,0);
	};

	explainstmt() {
	    return this.getTypedRuleContext(ExplainstmtContext,0);
	};

	fetchstmt() {
	    return this.getTypedRuleContext(FetchstmtContext,0);
	};

	grantstmt() {
	    return this.getTypedRuleContext(GrantstmtContext,0);
	};

	grantrolestmt() {
	    return this.getTypedRuleContext(GrantrolestmtContext,0);
	};

	importforeignschemastmt() {
	    return this.getTypedRuleContext(ImportforeignschemastmtContext,0);
	};

	indexstmt() {
	    return this.getTypedRuleContext(IndexstmtContext,0);
	};

	insertstmt() {
	    return this.getTypedRuleContext(InsertstmtContext,0);
	};

	mergestmt() {
	    return this.getTypedRuleContext(MergestmtContext,0);
	};

	listenstmt() {
	    return this.getTypedRuleContext(ListenstmtContext,0);
	};

	refreshmatviewstmt() {
	    return this.getTypedRuleContext(RefreshmatviewstmtContext,0);
	};

	loadstmt() {
	    return this.getTypedRuleContext(LoadstmtContext,0);
	};

	lockstmt() {
	    return this.getTypedRuleContext(LockstmtContext,0);
	};

	notifystmt() {
	    return this.getTypedRuleContext(NotifystmtContext,0);
	};

	preparestmt() {
	    return this.getTypedRuleContext(PreparestmtContext,0);
	};

	reassignownedstmt() {
	    return this.getTypedRuleContext(ReassignownedstmtContext,0);
	};

	reindexstmt() {
	    return this.getTypedRuleContext(ReindexstmtContext,0);
	};

	removeaggrstmt() {
	    return this.getTypedRuleContext(RemoveaggrstmtContext,0);
	};

	removefuncstmt() {
	    return this.getTypedRuleContext(RemovefuncstmtContext,0);
	};

	removeoperstmt() {
	    return this.getTypedRuleContext(RemoveoperstmtContext,0);
	};

	renamestmt() {
	    return this.getTypedRuleContext(RenamestmtContext,0);
	};

	revokestmt() {
	    return this.getTypedRuleContext(RevokestmtContext,0);
	};

	revokerolestmt() {
	    return this.getTypedRuleContext(RevokerolestmtContext,0);
	};

	rulestmt() {
	    return this.getTypedRuleContext(RulestmtContext,0);
	};

	seclabelstmt() {
	    return this.getTypedRuleContext(SeclabelstmtContext,0);
	};

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	transactionstmt() {
	    return this.getTypedRuleContext(TransactionstmtContext,0);
	};

	truncatestmt() {
	    return this.getTypedRuleContext(TruncatestmtContext,0);
	};

	unlistenstmt() {
	    return this.getTypedRuleContext(UnlistenstmtContext,0);
	};

	updatestmt() {
	    return this.getTypedRuleContext(UpdatestmtContext,0);
	};

	vacuumstmt() {
	    return this.getTypedRuleContext(VacuumstmtContext,0);
	};

	variableresetstmt() {
	    return this.getTypedRuleContext(VariableresetstmtContext,0);
	};

	variablesetstmt() {
	    return this.getTypedRuleContext(VariablesetstmtContext,0);
	};

	variableshowstmt() {
	    return this.getTypedRuleContext(VariableshowstmtContext,0);
	};

	viewstmt() {
	    return this.getTypedRuleContext(ViewstmtContext,0);
	};

	plsqlconsolecommand() {
	    return this.getTypedRuleContext(PlsqlconsolecommandContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlsqlconsolecommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_plsqlconsolecommand;
    }

	MetaCommand() {
	    return this.getToken(PostgreSQLParser.MetaCommand, 0);
	};

	EndMetaCommand() {
	    return this.getToken(PostgreSQLParser.EndMetaCommand, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPlsqlconsolecommand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_callstmt;
    }

	CALL() {
	    return this.getToken(PostgreSQLParser.CALL, 0);
	};

	func_application() {
	    return this.getTypedRuleContext(Func_applicationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCallstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreaterolestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createrolestmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	ROLE() {
	    return this.getToken(PostgreSQLParser.ROLE, 0);
	};

	roleid() {
	    return this.getTypedRuleContext(RoleidContext,0);
	};

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	optrolelist() {
	    return this.getTypedRuleContext(OptrolelistContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreaterolestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_withContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_with;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_with(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptrolelistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optrolelist;
    }

	createoptroleelem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateoptroleelemContext);
	    } else {
	        return this.getTypedRuleContext(CreateoptroleelemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptrolelist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlteroptrolelistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alteroptrolelist;
    }

	alteroptroleelem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlteroptroleelemContext);
	    } else {
	        return this.getTypedRuleContext(AlteroptroleelemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlteroptrolelist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlteroptroleelemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alteroptroleelem;
    }

	PASSWORD() {
	    return this.getToken(PostgreSQLParser.PASSWORD, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	ENCRYPTED() {
	    return this.getToken(PostgreSQLParser.ENCRYPTED, 0);
	};

	UNENCRYPTED() {
	    return this.getToken(PostgreSQLParser.UNENCRYPTED, 0);
	};

	INHERIT() {
	    return this.getToken(PostgreSQLParser.INHERIT, 0);
	};

	CONNECTION() {
	    return this.getToken(PostgreSQLParser.CONNECTION, 0);
	};

	LIMIT() {
	    return this.getToken(PostgreSQLParser.LIMIT, 0);
	};

	signediconst() {
	    return this.getTypedRuleContext(SignediconstContext,0);
	};

	VALID() {
	    return this.getToken(PostgreSQLParser.VALID, 0);
	};

	UNTIL() {
	    return this.getToken(PostgreSQLParser.UNTIL, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlteroptroleelem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateoptroleelemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createoptroleelem;
    }

	alteroptroleelem() {
	    return this.getTypedRuleContext(AlteroptroleelemContext,0);
	};

	SYSID() {
	    return this.getToken(PostgreSQLParser.SYSID, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	ADMIN() {
	    return this.getToken(PostgreSQLParser.ADMIN, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	ROLE() {
	    return this.getToken(PostgreSQLParser.ROLE, 0);
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	GROUP_P() {
	    return this.getToken(PostgreSQLParser.GROUP_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateoptroleelem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateuserstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createuserstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	roleid() {
	    return this.getTypedRuleContext(RoleidContext,0);
	};

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	optrolelist() {
	    return this.getTypedRuleContext(OptrolelistContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateuserstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterrolestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterrolestmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	alteroptrolelist() {
	    return this.getTypedRuleContext(AlteroptrolelistContext,0);
	};

	ROLE() {
	    return this.getToken(PostgreSQLParser.ROLE, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterrolestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_in_databaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_in_database;
    }

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_in_database(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterrolesetstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterrolesetstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	opt_in_database() {
	    return this.getTypedRuleContext(Opt_in_databaseContext,0);
	};

	setresetclause() {
	    return this.getTypedRuleContext(SetresetclauseContext,0);
	};

	ROLE() {
	    return this.getToken(PostgreSQLParser.ROLE, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterrolesetstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DroprolestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_droprolestmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	ROLE() {
	    return this.getToken(PostgreSQLParser.ROLE, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	GROUP_P() {
	    return this.getToken(PostgreSQLParser.GROUP_P, 0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDroprolestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreategroupstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_creategroupstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	GROUP_P() {
	    return this.getToken(PostgreSQLParser.GROUP_P, 0);
	};

	roleid() {
	    return this.getTypedRuleContext(RoleidContext,0);
	};

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	optrolelist() {
	    return this.getTypedRuleContext(OptrolelistContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreategroupstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltergroupstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altergroupstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	GROUP_P() {
	    return this.getToken(PostgreSQLParser.GROUP_P, 0);
	};

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	add_drop() {
	    return this.getTypedRuleContext(Add_dropContext,0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltergroupstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Add_dropContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_add_drop;
    }

	ADD_P() {
	    return this.getToken(PostgreSQLParser.ADD_P, 0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAdd_drop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateschemastmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createschemastmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	optschemaeltlist() {
	    return this.getTypedRuleContext(OptschemaeltlistContext,0);
	};

	optschemaname() {
	    return this.getTypedRuleContext(OptschemanameContext,0);
	};

	AUTHORIZATION() {
	    return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
	};

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateschemastmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptschemanameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optschemaname;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptschemaname(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptschemaeltlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optschemaeltlist;
    }

	schema_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Schema_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Schema_stmtContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptschemaeltlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Schema_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_schema_stmt;
    }

	createstmt() {
	    return this.getTypedRuleContext(CreatestmtContext,0);
	};

	indexstmt() {
	    return this.getTypedRuleContext(IndexstmtContext,0);
	};

	createseqstmt() {
	    return this.getTypedRuleContext(CreateseqstmtContext,0);
	};

	createtrigstmt() {
	    return this.getTypedRuleContext(CreatetrigstmtContext,0);
	};

	grantstmt() {
	    return this.getTypedRuleContext(GrantstmtContext,0);
	};

	viewstmt() {
	    return this.getTypedRuleContext(ViewstmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSchema_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariablesetstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_variablesetstmt;
    }

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	set_rest() {
	    return this.getTypedRuleContext(Set_restContext,0);
	};

	LOCAL() {
	    return this.getToken(PostgreSQLParser.LOCAL, 0);
	};

	SESSION() {
	    return this.getToken(PostgreSQLParser.SESSION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVariablesetstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_restContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_set_rest;
    }

	TRANSACTION() {
	    return this.getToken(PostgreSQLParser.TRANSACTION, 0);
	};

	transaction_mode_list() {
	    return this.getTypedRuleContext(Transaction_mode_listContext,0);
	};

	SESSION() {
	    return this.getToken(PostgreSQLParser.SESSION, 0);
	};

	CHARACTERISTICS() {
	    return this.getToken(PostgreSQLParser.CHARACTERISTICS, 0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	set_rest_more() {
	    return this.getTypedRuleContext(Set_rest_moreContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSet_rest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Generic_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_generic_set;
    }

	var_name() {
	    return this.getTypedRuleContext(Var_nameContext,0);
	};

	var_list() {
	    return this.getTypedRuleContext(Var_listContext,0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGeneric_set(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_rest_moreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_set_rest_more;
    }

	generic_set() {
	    return this.getTypedRuleContext(Generic_setContext,0);
	};

	var_name() {
	    return this.getTypedRuleContext(Var_nameContext,0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	CURRENT_P() {
	    return this.getToken(PostgreSQLParser.CURRENT_P, 0);
	};

	TIME() {
	    return this.getToken(PostgreSQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(PostgreSQLParser.ZONE, 0);
	};

	zone_value() {
	    return this.getTypedRuleContext(Zone_valueContext,0);
	};

	CATALOG() {
	    return this.getToken(PostgreSQLParser.CATALOG, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	NAMES() {
	    return this.getToken(PostgreSQLParser.NAMES, 0);
	};

	opt_encoding() {
	    return this.getTypedRuleContext(Opt_encodingContext,0);
	};

	ROLE() {
	    return this.getToken(PostgreSQLParser.ROLE, 0);
	};

	nonreservedword_or_sconst() {
	    return this.getTypedRuleContext(Nonreservedword_or_sconstContext,0);
	};

	SESSION() {
	    return this.getToken(PostgreSQLParser.SESSION, 0);
	};

	AUTHORIZATION() {
	    return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
	};

	XML_P() {
	    return this.getToken(PostgreSQLParser.XML_P, 0);
	};

	OPTION() {
	    return this.getToken(PostgreSQLParser.OPTION, 0);
	};

	document_or_content() {
	    return this.getTypedRuleContext(Document_or_contentContext,0);
	};

	TRANSACTION() {
	    return this.getToken(PostgreSQLParser.TRANSACTION, 0);
	};

	SNAPSHOT() {
	    return this.getToken(PostgreSQLParser.SNAPSHOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSet_rest_more(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Var_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_var_name;
    }

	colid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColidContext);
	    } else {
	        return this.getTypedRuleContext(ColidContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.DOT);
	    } else {
	        return this.getToken(PostgreSQLParser.DOT, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVar_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Var_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_var_list;
    }

	var_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Var_valueContext);
	    } else {
	        return this.getTypedRuleContext(Var_valueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVar_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Var_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_var_value;
    }

	opt_boolean_or_string() {
	    return this.getTypedRuleContext(Opt_boolean_or_stringContext,0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVar_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Iso_levelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_iso_level;
    }

	READ() {
	    return this.getToken(PostgreSQLParser.READ, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(PostgreSQLParser.UNCOMMITTED, 0);
	};

	COMMITTED() {
	    return this.getToken(PostgreSQLParser.COMMITTED, 0);
	};

	REPEATABLE() {
	    return this.getToken(PostgreSQLParser.REPEATABLE, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(PostgreSQLParser.SERIALIZABLE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIso_level(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_boolean_or_stringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_boolean_or_string;
    }

	TRUE_P() {
	    return this.getToken(PostgreSQLParser.TRUE_P, 0);
	};

	FALSE_P() {
	    return this.getToken(PostgreSQLParser.FALSE_P, 0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	nonreservedword_or_sconst() {
	    return this.getTypedRuleContext(Nonreservedword_or_sconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_boolean_or_string(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Zone_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_zone_value;
    }

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	constinterval() {
	    return this.getTypedRuleContext(ConstintervalContext,0);
	};

	opt_interval() {
	    return this.getTypedRuleContext(Opt_intervalContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	LOCAL() {
	    return this.getToken(PostgreSQLParser.LOCAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitZone_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_encodingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_encoding;
    }

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_encoding(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Nonreservedword_or_sconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_nonreservedword_or_sconst;
    }

	nonreservedword() {
	    return this.getTypedRuleContext(NonreservedwordContext,0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitNonreservedword_or_sconst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableresetstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_variableresetstmt;
    }

	RESET() {
	    return this.getToken(PostgreSQLParser.RESET, 0);
	};

	reset_rest() {
	    return this.getTypedRuleContext(Reset_restContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVariableresetstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Reset_restContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reset_rest;
    }

	generic_reset() {
	    return this.getTypedRuleContext(Generic_resetContext,0);
	};

	TIME() {
	    return this.getToken(PostgreSQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(PostgreSQLParser.ZONE, 0);
	};

	TRANSACTION() {
	    return this.getToken(PostgreSQLParser.TRANSACTION, 0);
	};

	ISOLATION() {
	    return this.getToken(PostgreSQLParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(PostgreSQLParser.LEVEL, 0);
	};

	SESSION() {
	    return this.getToken(PostgreSQLParser.SESSION, 0);
	};

	AUTHORIZATION() {
	    return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReset_rest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Generic_resetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_generic_reset;
    }

	var_name() {
	    return this.getTypedRuleContext(Var_nameContext,0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGeneric_reset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetresetclauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_setresetclause;
    }

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	set_rest() {
	    return this.getTypedRuleContext(Set_restContext,0);
	};

	variableresetstmt() {
	    return this.getTypedRuleContext(VariableresetstmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSetresetclause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionsetresetclauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_functionsetresetclause;
    }

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	set_rest_more() {
	    return this.getTypedRuleContext(Set_rest_moreContext,0);
	};

	variableresetstmt() {
	    return this.getTypedRuleContext(VariableresetstmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunctionsetresetclause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableshowstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_variableshowstmt;
    }

	SHOW() {
	    return this.getToken(PostgreSQLParser.SHOW, 0);
	};

	var_name() {
	    return this.getTypedRuleContext(Var_nameContext,0);
	};

	TIME() {
	    return this.getToken(PostgreSQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(PostgreSQLParser.ZONE, 0);
	};

	TRANSACTION() {
	    return this.getToken(PostgreSQLParser.TRANSACTION, 0);
	};

	ISOLATION() {
	    return this.getToken(PostgreSQLParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(PostgreSQLParser.LEVEL, 0);
	};

	SESSION() {
	    return this.getToken(PostgreSQLParser.SESSION, 0);
	};

	AUTHORIZATION() {
	    return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVariableshowstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintssetstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constraintssetstmt;
    }

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	CONSTRAINTS() {
	    return this.getToken(PostgreSQLParser.CONSTRAINTS, 0);
	};

	constraints_set_list() {
	    return this.getTypedRuleContext(Constraints_set_listContext,0);
	};

	constraints_set_mode() {
	    return this.getTypedRuleContext(Constraints_set_modeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstraintssetstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constraints_set_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constraints_set_list;
    }

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	qualified_name_list() {
	    return this.getTypedRuleContext(Qualified_name_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstraints_set_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constraints_set_modeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constraints_set_mode;
    }

	DEFERRED() {
	    return this.getToken(PostgreSQLParser.DEFERRED, 0);
	};

	IMMEDIATE() {
	    return this.getToken(PostgreSQLParser.IMMEDIATE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstraints_set_mode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CheckpointstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_checkpointstmt;
    }

	CHECKPOINT() {
	    return this.getToken(PostgreSQLParser.CHECKPOINT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCheckpointstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_discardstmt;
    }

	DISCARD() {
	    return this.getToken(PostgreSQLParser.DISCARD, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	TEMP() {
	    return this.getToken(PostgreSQLParser.TEMP, 0);
	};

	TEMPORARY() {
	    return this.getToken(PostgreSQLParser.TEMPORARY, 0);
	};

	PLANS() {
	    return this.getToken(PostgreSQLParser.PLANS, 0);
	};

	SEQUENCES() {
	    return this.getToken(PostgreSQLParser.SEQUENCES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDiscardstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltertablestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altertablestmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	relation_expr() {
	    return this.getTypedRuleContext(Relation_exprContext,0);
	};

	alter_table_cmds() {
	    return this.getTypedRuleContext(Alter_table_cmdsContext,0);
	};

	partition_cmd() {
	    return this.getTypedRuleContext(Partition_cmdContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	TABLESPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.TABLESPACE);
	    } else {
	        return this.getToken(PostgreSQLParser.TABLESPACE, i);
	    }
	};


	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	opt_nowait() {
	    return this.getTypedRuleContext(Opt_nowaitContext,0);
	};

	OWNED() {
	    return this.getToken(PostgreSQLParser.OWNED, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	index_partition_cmd() {
	    return this.getTypedRuleContext(Index_partition_cmdContext,0);
	};

	SEQUENCE() {
	    return this.getToken(PostgreSQLParser.SEQUENCE, 0);
	};

	VIEW() {
	    return this.getToken(PostgreSQLParser.VIEW, 0);
	};

	MATERIALIZED() {
	    return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltertablestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_table_cmdsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_table_cmds;
    }

	alter_table_cmd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_table_cmdContext);
	    } else {
	        return this.getTypedRuleContext(Alter_table_cmdContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_table_cmds(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Partition_cmdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_partition_cmd;
    }

	ATTACH() {
	    return this.getToken(PostgreSQLParser.ATTACH, 0);
	};

	PARTITION() {
	    return this.getToken(PostgreSQLParser.PARTITION, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	partitionboundspec() {
	    return this.getTypedRuleContext(PartitionboundspecContext,0);
	};

	DETACH() {
	    return this.getToken(PostgreSQLParser.DETACH, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPartition_cmd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Index_partition_cmdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_index_partition_cmd;
    }

	ATTACH() {
	    return this.getToken(PostgreSQLParser.ATTACH, 0);
	};

	PARTITION() {
	    return this.getToken(PostgreSQLParser.PARTITION, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIndex_partition_cmd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_table_cmdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_table_cmd;
    }

	ADD_P() {
	    return this.getToken(PostgreSQLParser.ADD_P, 0);
	};

	columnDef() {
	    return this.getTypedRuleContext(ColumnDefContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	COLUMN() {
	    return this.getToken(PostgreSQLParser.COLUMN, 0);
	};

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	opt_column() {
	    return this.getTypedRuleContext(Opt_columnContext,0);
	};

	colid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColidContext);
	    } else {
	        return this.getTypedRuleContext(ColidContext,i);
	    }
	};

	alter_column_default() {
	    return this.getTypedRuleContext(Alter_column_defaultContext,0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	EXPRESSION() {
	    return this.getToken(PostgreSQLParser.EXPRESSION, 0);
	};

	STATISTICS() {
	    return this.getToken(PostgreSQLParser.STATISTICS, 0);
	};

	signediconst() {
	    return this.getTypedRuleContext(SignediconstContext,0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	reloptions() {
	    return this.getTypedRuleContext(ReloptionsContext,0);
	};

	RESET() {
	    return this.getToken(PostgreSQLParser.RESET, 0);
	};

	STORAGE() {
	    return this.getToken(PostgreSQLParser.STORAGE, 0);
	};

	GENERATED() {
	    return this.getToken(PostgreSQLParser.GENERATED, 0);
	};

	generated_when() {
	    return this.getTypedRuleContext(Generated_whenContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	IDENTITY_P() {
	    return this.getToken(PostgreSQLParser.IDENTITY_P, 0);
	};

	optparenthesizedseqoptlist() {
	    return this.getTypedRuleContext(OptparenthesizedseqoptlistContext,0);
	};

	alter_identity_column_option_list() {
	    return this.getTypedRuleContext(Alter_identity_column_option_listContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	opt_set_data() {
	    return this.getTypedRuleContext(Opt_set_dataContext,0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	opt_collate_clause() {
	    return this.getTypedRuleContext(Opt_collate_clauseContext,0);
	};

	alter_using() {
	    return this.getTypedRuleContext(Alter_usingContext,0);
	};

	alter_generic_options() {
	    return this.getTypedRuleContext(Alter_generic_optionsContext,0);
	};

	tableconstraint() {
	    return this.getTypedRuleContext(TableconstraintContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	constraintattributespec() {
	    return this.getTypedRuleContext(ConstraintattributespecContext,0);
	};

	VALIDATE() {
	    return this.getToken(PostgreSQLParser.VALIDATE, 0);
	};

	WITHOUT() {
	    return this.getToken(PostgreSQLParser.WITHOUT, 0);
	};

	OIDS() {
	    return this.getToken(PostgreSQLParser.OIDS, 0);
	};

	CLUSTER() {
	    return this.getToken(PostgreSQLParser.CLUSTER, 0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	LOGGED() {
	    return this.getToken(PostgreSQLParser.LOGGED, 0);
	};

	UNLOGGED() {
	    return this.getToken(PostgreSQLParser.UNLOGGED, 0);
	};

	ENABLE_P() {
	    return this.getToken(PostgreSQLParser.ENABLE_P, 0);
	};

	TRIGGER() {
	    return this.getToken(PostgreSQLParser.TRIGGER, 0);
	};

	ALWAYS() {
	    return this.getToken(PostgreSQLParser.ALWAYS, 0);
	};

	REPLICA() {
	    return this.getToken(PostgreSQLParser.REPLICA, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	DISABLE_P() {
	    return this.getToken(PostgreSQLParser.DISABLE_P, 0);
	};

	RULE() {
	    return this.getToken(PostgreSQLParser.RULE, 0);
	};

	INHERIT() {
	    return this.getToken(PostgreSQLParser.INHERIT, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	OF() {
	    return this.getToken(PostgreSQLParser.OF, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	OWNER() {
	    return this.getToken(PostgreSQLParser.OWNER, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	replica_identity() {
	    return this.getTypedRuleContext(Replica_identityContext,0);
	};

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	LEVEL() {
	    return this.getToken(PostgreSQLParser.LEVEL, 0);
	};

	SECURITY() {
	    return this.getToken(PostgreSQLParser.SECURITY, 0);
	};

	FORCE() {
	    return this.getToken(PostgreSQLParser.FORCE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_table_cmd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_column_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_column_default;
    }

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_column_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_drop_behaviorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_drop_behavior;
    }

	CASCADE() {
	    return this.getToken(PostgreSQLParser.CASCADE, 0);
	};

	RESTRICT() {
	    return this.getToken(PostgreSQLParser.RESTRICT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_drop_behavior(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_collate_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_collate_clause;
    }

	COLLATE() {
	    return this.getToken(PostgreSQLParser.COLLATE, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_collate_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_usingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_using;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_using(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Replica_identityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_replica_identity;
    }

	NOTHING() {
	    return this.getToken(PostgreSQLParser.NOTHING, 0);
	};

	FULL() {
	    return this.getToken(PostgreSQLParser.FULL, 0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReplica_identity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReloptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reloptions;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	reloption_list() {
	    return this.getTypedRuleContext(Reloption_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReloptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_reloptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_reloptions;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	reloptions() {
	    return this.getTypedRuleContext(ReloptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_reloptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Reloption_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reloption_list;
    }

	reloption_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Reloption_elemContext);
	    } else {
	        return this.getTypedRuleContext(Reloption_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReloption_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Reloption_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reloption_elem;
    }

	collabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CollabelContext);
	    } else {
	        return this.getTypedRuleContext(CollabelContext,i);
	    }
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	def_arg() {
	    return this.getTypedRuleContext(Def_argContext,0);
	};

	DOT() {
	    return this.getToken(PostgreSQLParser.DOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReloption_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_identity_column_option_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_identity_column_option_list;
    }

	alter_identity_column_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_identity_column_optionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_identity_column_optionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_identity_column_option_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_identity_column_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_identity_column_option;
    }

	RESTART() {
	    return this.getToken(PostgreSQLParser.RESTART, 0);
	};

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	seqoptelem() {
	    return this.getTypedRuleContext(SeqoptelemContext,0);
	};

	GENERATED() {
	    return this.getToken(PostgreSQLParser.GENERATED, 0);
	};

	generated_when() {
	    return this.getTypedRuleContext(Generated_whenContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_identity_column_option(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionboundspecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_partitionboundspec;
    }

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	VALUES() {
	    return this.getToken(PostgreSQLParser.VALUES, 0);
	};

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	OPEN_PAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.OPEN_PAREN);
	    } else {
	        return this.getToken(PostgreSQLParser.OPEN_PAREN, i);
	    }
	};


	hash_partbound() {
	    return this.getTypedRuleContext(Hash_partboundContext,0);
	};

	CLOSE_PAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.CLOSE_PAREN);
	    } else {
	        return this.getToken(PostgreSQLParser.CLOSE_PAREN, i);
	    }
	};


	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	expr_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr_listContext);
	    } else {
	        return this.getTypedRuleContext(Expr_listContext,i);
	    }
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPartitionboundspec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Hash_partbound_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_hash_partbound_elem;
    }

	nonreservedword() {
	    return this.getTypedRuleContext(NonreservedwordContext,0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitHash_partbound_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Hash_partboundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_hash_partbound;
    }

	hash_partbound_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Hash_partbound_elemContext);
	    } else {
	        return this.getTypedRuleContext(Hash_partbound_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitHash_partbound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltercompositetypestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altercompositetypestmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	alter_type_cmds() {
	    return this.getTypedRuleContext(Alter_type_cmdsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltercompositetypestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_type_cmdsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_type_cmds;
    }

	alter_type_cmd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_type_cmdContext);
	    } else {
	        return this.getTypedRuleContext(Alter_type_cmdContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_type_cmds(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_type_cmdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_type_cmd;
    }

	ADD_P() {
	    return this.getToken(PostgreSQLParser.ADD_P, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(PostgreSQLParser.ATTRIBUTE, 0);
	};

	tablefuncelement() {
	    return this.getTypedRuleContext(TablefuncelementContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	opt_set_data() {
	    return this.getTypedRuleContext(Opt_set_dataContext,0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	opt_collate_clause() {
	    return this.getTypedRuleContext(Opt_collate_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_type_cmd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CloseportalstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_closeportalstmt;
    }

	CLOSE() {
	    return this.getToken(PostgreSQLParser.CLOSE, 0);
	};

	cursor_name() {
	    return this.getTypedRuleContext(Cursor_nameContext,0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCloseportalstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopystmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copystmt;
    }

	COPY() {
	    return this.getToken(PostgreSQLParser.COPY, 0);
	};

	opt_binary() {
	    return this.getTypedRuleContext(Opt_binaryContext,0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	opt_column_list() {
	    return this.getTypedRuleContext(Opt_column_listContext,0);
	};

	copy_from() {
	    return this.getTypedRuleContext(Copy_fromContext,0);
	};

	opt_program() {
	    return this.getTypedRuleContext(Opt_programContext,0);
	};

	copy_file_name() {
	    return this.getTypedRuleContext(Copy_file_nameContext,0);
	};

	copy_delimiter() {
	    return this.getTypedRuleContext(Copy_delimiterContext,0);
	};

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	copy_options() {
	    return this.getTypedRuleContext(Copy_optionsContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	preparablestmt() {
	    return this.getTypedRuleContext(PreparablestmtContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopystmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_fromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_from;
    }

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_from(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_programContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_program;
    }

	PROGRAM() {
	    return this.getToken(PostgreSQLParser.PROGRAM, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_program(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_file_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_file_name;
    }

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	STDIN() {
	    return this.getToken(PostgreSQLParser.STDIN, 0);
	};

	STDOUT() {
	    return this.getToken(PostgreSQLParser.STDOUT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_file_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_options;
    }

	copy_opt_list() {
	    return this.getTypedRuleContext(Copy_opt_listContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	copy_generic_opt_list() {
	    return this.getTypedRuleContext(Copy_generic_opt_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_options(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_opt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_opt_list;
    }

	copy_opt_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Copy_opt_itemContext);
	    } else {
	        return this.getTypedRuleContext(Copy_opt_itemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_opt_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_opt_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_opt_item;
    }

	BINARY() {
	    return this.getToken(PostgreSQLParser.BINARY, 0);
	};

	FREEZE() {
	    return this.getToken(PostgreSQLParser.FREEZE, 0);
	};

	DELIMITER() {
	    return this.getToken(PostgreSQLParser.DELIMITER, 0);
	};

	opt_as() {
	    return this.getTypedRuleContext(Opt_asContext,0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	CSV() {
	    return this.getToken(PostgreSQLParser.CSV, 0);
	};

	HEADER_P() {
	    return this.getToken(PostgreSQLParser.HEADER_P, 0);
	};

	QUOTE() {
	    return this.getToken(PostgreSQLParser.QUOTE, 0);
	};

	ESCAPE() {
	    return this.getToken(PostgreSQLParser.ESCAPE, 0);
	};

	FORCE() {
	    return this.getToken(PostgreSQLParser.FORCE, 0);
	};

	columnlist() {
	    return this.getTypedRuleContext(ColumnlistContext,0);
	};

	STAR() {
	    return this.getToken(PostgreSQLParser.STAR, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	ENCODING() {
	    return this.getToken(PostgreSQLParser.ENCODING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_opt_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_binaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_binary;
    }

	BINARY() {
	    return this.getToken(PostgreSQLParser.BINARY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_binary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_delimiterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_delimiter;
    }

	opt_using() {
	    return this.getTypedRuleContext(Opt_usingContext,0);
	};

	DELIMITERS() {
	    return this.getToken(PostgreSQLParser.DELIMITERS, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_delimiter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_usingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_using;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_using(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_generic_opt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_generic_opt_list;
    }

	copy_generic_opt_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Copy_generic_opt_elemContext);
	    } else {
	        return this.getTypedRuleContext(Copy_generic_opt_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_generic_opt_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_generic_opt_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_generic_opt_elem;
    }

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	copy_generic_opt_arg() {
	    return this.getTypedRuleContext(Copy_generic_opt_argContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_generic_opt_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_generic_opt_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_generic_opt_arg;
    }

	opt_boolean_or_string() {
	    return this.getTypedRuleContext(Opt_boolean_or_stringContext,0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	STAR() {
	    return this.getToken(PostgreSQLParser.STAR, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	copy_generic_opt_arg_list() {
	    return this.getTypedRuleContext(Copy_generic_opt_arg_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_generic_opt_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_generic_opt_arg_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_generic_opt_arg_list;
    }

	copy_generic_opt_arg_list_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Copy_generic_opt_arg_list_itemContext);
	    } else {
	        return this.getTypedRuleContext(Copy_generic_opt_arg_list_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_generic_opt_arg_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_generic_opt_arg_list_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_copy_generic_opt_arg_list_item;
    }

	opt_boolean_or_string() {
	    return this.getTypedRuleContext(Opt_boolean_or_stringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCopy_generic_opt_arg_list_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opttemp() {
	    return this.getTypedRuleContext(OpttempContext,0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	qualified_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Qualified_nameContext);
	    } else {
	        return this.getTypedRuleContext(Qualified_nameContext,i);
	    }
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	opttableelementlist() {
	    return this.getTypedRuleContext(OpttableelementlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	optinherit() {
	    return this.getTypedRuleContext(OptinheritContext,0);
	};

	optpartitionspec() {
	    return this.getTypedRuleContext(OptpartitionspecContext,0);
	};

	table_access_method_clause() {
	    return this.getTypedRuleContext(Table_access_method_clauseContext,0);
	};

	optwith() {
	    return this.getTypedRuleContext(OptwithContext,0);
	};

	oncommitoption() {
	    return this.getTypedRuleContext(OncommitoptionContext,0);
	};

	opttablespace() {
	    return this.getTypedRuleContext(OpttablespaceContext,0);
	};

	OF() {
	    return this.getToken(PostgreSQLParser.OF, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	opttypedtableelementlist() {
	    return this.getTypedRuleContext(OpttypedtableelementlistContext,0);
	};

	PARTITION() {
	    return this.getToken(PostgreSQLParser.PARTITION, 0);
	};

	partitionboundspec() {
	    return this.getTypedRuleContext(PartitionboundspecContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpttempContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opttemp;
    }

	TEMPORARY() {
	    return this.getToken(PostgreSQLParser.TEMPORARY, 0);
	};

	TEMP() {
	    return this.getToken(PostgreSQLParser.TEMP, 0);
	};

	LOCAL() {
	    return this.getToken(PostgreSQLParser.LOCAL, 0);
	};

	GLOBAL() {
	    return this.getToken(PostgreSQLParser.GLOBAL, 0);
	};

	UNLOGGED() {
	    return this.getToken(PostgreSQLParser.UNLOGGED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpttemp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpttableelementlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opttableelementlist;
    }

	tableelementlist() {
	    return this.getTypedRuleContext(TableelementlistContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpttableelementlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpttypedtableelementlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opttypedtableelementlist;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	typedtableelementlist() {
	    return this.getTypedRuleContext(TypedtableelementlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpttypedtableelementlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableelementlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_tableelementlist;
    }

	tableelement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableelementContext);
	    } else {
	        return this.getTypedRuleContext(TableelementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTableelementlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypedtableelementlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_typedtableelementlist;
    }

	typedtableelement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypedtableelementContext);
	    } else {
	        return this.getTypedRuleContext(TypedtableelementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTypedtableelementlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableelementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_tableelement;
    }

	tableconstraint() {
	    return this.getTypedRuleContext(TableconstraintContext,0);
	};

	tablelikeclause() {
	    return this.getTypedRuleContext(TablelikeclauseContext,0);
	};

	columnDef() {
	    return this.getTypedRuleContext(ColumnDefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTableelement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypedtableelementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_typedtableelement;
    }

	columnOptions() {
	    return this.getTypedRuleContext(ColumnOptionsContext,0);
	};

	tableconstraint() {
	    return this.getTypedRuleContext(TableconstraintContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTypedtableelement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_columnDef;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	create_generic_options() {
	    return this.getTypedRuleContext(Create_generic_optionsContext,0);
	};

	colquallist() {
	    return this.getTypedRuleContext(ColquallistContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitColumnDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_columnOptions;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	colquallist() {
	    return this.getTypedRuleContext(ColquallistContext,0);
	};

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	OPTIONS() {
	    return this.getToken(PostgreSQLParser.OPTIONS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitColumnOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColquallistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_colquallist;
    }

	colconstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColconstraintContext);
	    } else {
	        return this.getTypedRuleContext(ColconstraintContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitColquallist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_colconstraint;
    }

	CONSTRAINT() {
	    return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	colconstraintelem() {
	    return this.getTypedRuleContext(ColconstraintelemContext,0);
	};

	constraintattr() {
	    return this.getTypedRuleContext(ConstraintattrContext,0);
	};

	COLLATE() {
	    return this.getToken(PostgreSQLParser.COLLATE, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitColconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColconstraintelemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_colconstraintelem;
    }

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	UNIQUE() {
	    return this.getToken(PostgreSQLParser.UNIQUE, 0);
	};

	opt_definition() {
	    return this.getTypedRuleContext(Opt_definitionContext,0);
	};

	optconstablespace() {
	    return this.getTypedRuleContext(OptconstablespaceContext,0);
	};

	PRIMARY() {
	    return this.getToken(PostgreSQLParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(PostgreSQLParser.KEY, 0);
	};

	CHECK() {
	    return this.getToken(PostgreSQLParser.CHECK, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	opt_no_inherit() {
	    return this.getTypedRuleContext(Opt_no_inheritContext,0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	b_expr() {
	    return this.getTypedRuleContext(B_exprContext,0);
	};

	GENERATED() {
	    return this.getToken(PostgreSQLParser.GENERATED, 0);
	};

	generated_when() {
	    return this.getTypedRuleContext(Generated_whenContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	IDENTITY_P() {
	    return this.getToken(PostgreSQLParser.IDENTITY_P, 0);
	};

	optparenthesizedseqoptlist() {
	    return this.getTypedRuleContext(OptparenthesizedseqoptlistContext,0);
	};

	STORED() {
	    return this.getToken(PostgreSQLParser.STORED, 0);
	};

	REFERENCES() {
	    return this.getToken(PostgreSQLParser.REFERENCES, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	opt_column_list() {
	    return this.getTypedRuleContext(Opt_column_listContext,0);
	};

	key_match() {
	    return this.getTypedRuleContext(Key_matchContext,0);
	};

	key_actions() {
	    return this.getTypedRuleContext(Key_actionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitColconstraintelem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Generated_whenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_generated_when;
    }

	ALWAYS() {
	    return this.getToken(PostgreSQLParser.ALWAYS, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGenerated_when(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintattrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constraintattr;
    }

	DEFERRABLE() {
	    return this.getToken(PostgreSQLParser.DEFERRABLE, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	INITIALLY() {
	    return this.getToken(PostgreSQLParser.INITIALLY, 0);
	};

	DEFERRED() {
	    return this.getToken(PostgreSQLParser.DEFERRED, 0);
	};

	IMMEDIATE() {
	    return this.getToken(PostgreSQLParser.IMMEDIATE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstraintattr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablelikeclauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_tablelikeclause;
    }

	LIKE() {
	    return this.getToken(PostgreSQLParser.LIKE, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	tablelikeoptionlist() {
	    return this.getTypedRuleContext(TablelikeoptionlistContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTablelikeclause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablelikeoptionlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_tablelikeoptionlist;
    }

	tablelikeoption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablelikeoptionContext);
	    } else {
	        return this.getTypedRuleContext(TablelikeoptionContext,i);
	    }
	};

	INCLUDING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.INCLUDING);
	    } else {
	        return this.getToken(PostgreSQLParser.INCLUDING, i);
	    }
	};


	EXCLUDING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.EXCLUDING);
	    } else {
	        return this.getToken(PostgreSQLParser.EXCLUDING, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTablelikeoptionlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablelikeoptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_tablelikeoption;
    }

	COMMENTS() {
	    return this.getToken(PostgreSQLParser.COMMENTS, 0);
	};

	CONSTRAINTS() {
	    return this.getToken(PostgreSQLParser.CONSTRAINTS, 0);
	};

	DEFAULTS() {
	    return this.getToken(PostgreSQLParser.DEFAULTS, 0);
	};

	IDENTITY_P() {
	    return this.getToken(PostgreSQLParser.IDENTITY_P, 0);
	};

	GENERATED() {
	    return this.getToken(PostgreSQLParser.GENERATED, 0);
	};

	INDEXES() {
	    return this.getToken(PostgreSQLParser.INDEXES, 0);
	};

	STATISTICS() {
	    return this.getToken(PostgreSQLParser.STATISTICS, 0);
	};

	STORAGE() {
	    return this.getToken(PostgreSQLParser.STORAGE, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTablelikeoption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_tableconstraint;
    }

	CONSTRAINT() {
	    return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	constraintelem() {
	    return this.getTypedRuleContext(ConstraintelemContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTableconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintelemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constraintelem;
    }

	CHECK() {
	    return this.getToken(PostgreSQLParser.CHECK, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	constraintattributespec() {
	    return this.getTypedRuleContext(ConstraintattributespecContext,0);
	};

	UNIQUE() {
	    return this.getToken(PostgreSQLParser.UNIQUE, 0);
	};

	columnlist() {
	    return this.getTypedRuleContext(ColumnlistContext,0);
	};

	opt_c_include() {
	    return this.getTypedRuleContext(Opt_c_includeContext,0);
	};

	opt_definition() {
	    return this.getTypedRuleContext(Opt_definitionContext,0);
	};

	optconstablespace() {
	    return this.getTypedRuleContext(OptconstablespaceContext,0);
	};

	existingindex() {
	    return this.getTypedRuleContext(ExistingindexContext,0);
	};

	PRIMARY() {
	    return this.getToken(PostgreSQLParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(PostgreSQLParser.KEY, 0);
	};

	EXCLUDE() {
	    return this.getToken(PostgreSQLParser.EXCLUDE, 0);
	};

	access_method_clause() {
	    return this.getTypedRuleContext(Access_method_clauseContext,0);
	};

	exclusionconstraintlist() {
	    return this.getTypedRuleContext(ExclusionconstraintlistContext,0);
	};

	exclusionwhereclause() {
	    return this.getTypedRuleContext(ExclusionwhereclauseContext,0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	REFERENCES() {
	    return this.getToken(PostgreSQLParser.REFERENCES, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	opt_column_list() {
	    return this.getTypedRuleContext(Opt_column_listContext,0);
	};

	key_match() {
	    return this.getTypedRuleContext(Key_matchContext,0);
	};

	key_actions() {
	    return this.getTypedRuleContext(Key_actionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstraintelem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_no_inheritContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_no_inherit;
    }

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	INHERIT() {
	    return this.getToken(PostgreSQLParser.INHERIT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_no_inherit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_column_list;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	columnlist() {
	    return this.getTypedRuleContext(ColumnlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_column_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_columnlist;
    }

	columnElem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnElemContext);
	    } else {
	        return this.getTypedRuleContext(ColumnElemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitColumnlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnElemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_columnElem;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitColumnElem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_c_includeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_c_include;
    }

	INCLUDE() {
	    return this.getToken(PostgreSQLParser.INCLUDE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	columnlist() {
	    return this.getTypedRuleContext(ColumnlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_c_include(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Key_matchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_key_match;
    }

	MATCH() {
	    return this.getToken(PostgreSQLParser.MATCH, 0);
	};

	FULL() {
	    return this.getToken(PostgreSQLParser.FULL, 0);
	};

	PARTIAL() {
	    return this.getToken(PostgreSQLParser.PARTIAL, 0);
	};

	SIMPLE() {
	    return this.getToken(PostgreSQLParser.SIMPLE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitKey_match(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExclusionconstraintlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_exclusionconstraintlist;
    }

	exclusionconstraintelem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExclusionconstraintelemContext);
	    } else {
	        return this.getTypedRuleContext(ExclusionconstraintelemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExclusionconstraintlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExclusionconstraintelemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_exclusionconstraintelem;
    }

	index_elem() {
	    return this.getTypedRuleContext(Index_elemContext,0);
	};

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	any_operator() {
	    return this.getTypedRuleContext(Any_operatorContext,0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExclusionconstraintelem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExclusionwhereclauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_exclusionwhereclause;
    }

	WHERE() {
	    return this.getToken(PostgreSQLParser.WHERE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExclusionwhereclause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Key_actionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_key_actions;
    }

	key_update() {
	    return this.getTypedRuleContext(Key_updateContext,0);
	};

	key_delete() {
	    return this.getTypedRuleContext(Key_deleteContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitKey_actions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Key_updateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_key_update;
    }

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	key_action() {
	    return this.getTypedRuleContext(Key_actionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitKey_update(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Key_deleteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_key_delete;
    }

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	DELETE_P() {
	    return this.getToken(PostgreSQLParser.DELETE_P, 0);
	};

	key_action() {
	    return this.getTypedRuleContext(Key_actionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitKey_delete(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Key_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_key_action;
    }

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	ACTION() {
	    return this.getToken(PostgreSQLParser.ACTION, 0);
	};

	RESTRICT() {
	    return this.getToken(PostgreSQLParser.RESTRICT, 0);
	};

	CASCADE() {
	    return this.getToken(PostgreSQLParser.CASCADE, 0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitKey_action(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptinheritContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optinherit;
    }

	INHERITS() {
	    return this.getToken(PostgreSQLParser.INHERITS, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	qualified_name_list() {
	    return this.getTypedRuleContext(Qualified_name_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptinherit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptpartitionspecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optpartitionspec;
    }

	partitionspec() {
	    return this.getTypedRuleContext(PartitionspecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptpartitionspec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionspecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_partitionspec;
    }

	PARTITION() {
	    return this.getToken(PostgreSQLParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	part_params() {
	    return this.getTypedRuleContext(Part_paramsContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPartitionspec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Part_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_part_params;
    }

	part_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Part_elemContext);
	    } else {
	        return this.getTypedRuleContext(Part_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPart_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Part_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_part_elem;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	opt_collate() {
	    return this.getTypedRuleContext(Opt_collateContext,0);
	};

	opt_class() {
	    return this.getTypedRuleContext(Opt_classContext,0);
	};

	func_expr_windowless() {
	    return this.getTypedRuleContext(Func_expr_windowlessContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPart_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_access_method_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_table_access_method_clause;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTable_access_method_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptwithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optwith;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	reloptions() {
	    return this.getTypedRuleContext(ReloptionsContext,0);
	};

	WITHOUT() {
	    return this.getToken(PostgreSQLParser.WITHOUT, 0);
	};

	OIDS() {
	    return this.getToken(PostgreSQLParser.OIDS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptwith(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OncommitoptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_oncommitoption;
    }

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	COMMIT() {
	    return this.getToken(PostgreSQLParser.COMMIT, 0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	DELETE_P() {
	    return this.getToken(PostgreSQLParser.DELETE_P, 0);
	};

	ROWS() {
	    return this.getToken(PostgreSQLParser.ROWS, 0);
	};

	PRESERVE() {
	    return this.getToken(PostgreSQLParser.PRESERVE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOncommitoption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpttablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opttablespace;
    }

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpttablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptconstablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optconstablespace;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptconstablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExistingindexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_existingindex;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExistingindex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatestatsstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createstatsstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	STATISTICS() {
	    return this.getToken(PostgreSQLParser.STATISTICS, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	opt_name_list() {
	    return this.getTypedRuleContext(Opt_name_listContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	from_list() {
	    return this.getTypedRuleContext(From_listContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatestatsstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterstatsstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterstatsstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	STATISTICS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.STATISTICS);
	    } else {
	        return this.getToken(PostgreSQLParser.STATISTICS, i);
	    }
	};


	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	signediconst() {
	    return this.getTypedRuleContext(SignediconstContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterstatsstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateasstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createasstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opttemp() {
	    return this.getTypedRuleContext(OpttempContext,0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	create_as_target() {
	    return this.getTypedRuleContext(Create_as_targetContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	opt_with_data() {
	    return this.getTypedRuleContext(Opt_with_dataContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateasstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_as_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_create_as_target;
    }

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	opt_column_list() {
	    return this.getTypedRuleContext(Opt_column_listContext,0);
	};

	table_access_method_clause() {
	    return this.getTypedRuleContext(Table_access_method_clauseContext,0);
	};

	optwith() {
	    return this.getTypedRuleContext(OptwithContext,0);
	};

	oncommitoption() {
	    return this.getTypedRuleContext(OncommitoptionContext,0);
	};

	opttablespace() {
	    return this.getTypedRuleContext(OpttablespaceContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreate_as_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_with_dataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_with_data;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	DATA_P() {
	    return this.getToken(PostgreSQLParser.DATA_P, 0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_with_data(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatematviewstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_creatematviewstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	optnolog() {
	    return this.getTypedRuleContext(OptnologContext,0);
	};

	MATERIALIZED() {
	    return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(PostgreSQLParser.VIEW, 0);
	};

	create_mv_target() {
	    return this.getTypedRuleContext(Create_mv_targetContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	opt_with_data() {
	    return this.getTypedRuleContext(Opt_with_dataContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatematviewstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_mv_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_create_mv_target;
    }

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	opt_column_list() {
	    return this.getTypedRuleContext(Opt_column_listContext,0);
	};

	table_access_method_clause() {
	    return this.getTypedRuleContext(Table_access_method_clauseContext,0);
	};

	opt_reloptions() {
	    return this.getTypedRuleContext(Opt_reloptionsContext,0);
	};

	opttablespace() {
	    return this.getTypedRuleContext(OpttablespaceContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreate_mv_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptnologContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optnolog;
    }

	UNLOGGED() {
	    return this.getToken(PostgreSQLParser.UNLOGGED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptnolog(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefreshmatviewstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_refreshmatviewstmt;
    }

	REFRESH() {
	    return this.getToken(PostgreSQLParser.REFRESH, 0);
	};

	MATERIALIZED() {
	    return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(PostgreSQLParser.VIEW, 0);
	};

	opt_concurrently() {
	    return this.getTypedRuleContext(Opt_concurrentlyContext,0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	opt_with_data() {
	    return this.getTypedRuleContext(Opt_with_dataContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRefreshmatviewstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateseqstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createseqstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opttemp() {
	    return this.getTypedRuleContext(OpttempContext,0);
	};

	SEQUENCE() {
	    return this.getToken(PostgreSQLParser.SEQUENCE, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	optseqoptlist() {
	    return this.getTypedRuleContext(OptseqoptlistContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateseqstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterseqstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterseqstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	SEQUENCE() {
	    return this.getToken(PostgreSQLParser.SEQUENCE, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	seqoptlist() {
	    return this.getTypedRuleContext(SeqoptlistContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterseqstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptseqoptlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optseqoptlist;
    }

	seqoptlist() {
	    return this.getTypedRuleContext(SeqoptlistContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptseqoptlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptparenthesizedseqoptlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optparenthesizedseqoptlist;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	seqoptlist() {
	    return this.getTypedRuleContext(SeqoptlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptparenthesizedseqoptlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SeqoptlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_seqoptlist;
    }

	seqoptelem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SeqoptelemContext);
	    } else {
	        return this.getTypedRuleContext(SeqoptelemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSeqoptlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SeqoptelemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_seqoptelem;
    }

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	simpletypename() {
	    return this.getTypedRuleContext(SimpletypenameContext,0);
	};

	CACHE() {
	    return this.getToken(PostgreSQLParser.CACHE, 0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	CYCLE() {
	    return this.getToken(PostgreSQLParser.CYCLE, 0);
	};

	INCREMENT() {
	    return this.getToken(PostgreSQLParser.INCREMENT, 0);
	};

	opt_by() {
	    return this.getTypedRuleContext(Opt_byContext,0);
	};

	MAXVALUE() {
	    return this.getToken(PostgreSQLParser.MAXVALUE, 0);
	};

	MINVALUE() {
	    return this.getToken(PostgreSQLParser.MINVALUE, 0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	OWNED() {
	    return this.getToken(PostgreSQLParser.OWNED, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	SEQUENCE() {
	    return this.getToken(PostgreSQLParser.SEQUENCE, 0);
	};

	NAME_P() {
	    return this.getToken(PostgreSQLParser.NAME_P, 0);
	};

	START() {
	    return this.getToken(PostgreSQLParser.START, 0);
	};

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	RESTART() {
	    return this.getToken(PostgreSQLParser.RESTART, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSeqoptelem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_by;
    }

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_by(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericonlyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_numericonly;
    }

	fconst() {
	    return this.getTypedRuleContext(FconstContext,0);
	};

	PLUS() {
	    return this.getToken(PostgreSQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(PostgreSQLParser.MINUS, 0);
	};

	signediconst() {
	    return this.getTypedRuleContext(SignediconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitNumericonly(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Numericonly_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_numericonly_list;
    }

	numericonly = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericonlyContext);
	    } else {
	        return this.getTypedRuleContext(NumericonlyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitNumericonly_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateplangstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createplangstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opt_or_replace() {
	    return this.getTypedRuleContext(Opt_or_replaceContext,0);
	};

	opt_trusted() {
	    return this.getTypedRuleContext(Opt_trustedContext,0);
	};

	opt_procedural() {
	    return this.getTypedRuleContext(Opt_proceduralContext,0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	HANDLER() {
	    return this.getToken(PostgreSQLParser.HANDLER, 0);
	};

	handler_name() {
	    return this.getTypedRuleContext(Handler_nameContext,0);
	};

	opt_inline_handler() {
	    return this.getTypedRuleContext(Opt_inline_handlerContext,0);
	};

	opt_validator() {
	    return this.getTypedRuleContext(Opt_validatorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateplangstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_trustedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_trusted;
    }

	TRUSTED() {
	    return this.getToken(PostgreSQLParser.TRUSTED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_trusted(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Handler_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_handler_name;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	attrs() {
	    return this.getTypedRuleContext(AttrsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitHandler_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_inline_handlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_inline_handler;
    }

	INLINE_P() {
	    return this.getToken(PostgreSQLParser.INLINE_P, 0);
	};

	handler_name() {
	    return this.getTypedRuleContext(Handler_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_inline_handler(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Validator_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_validator_clause;
    }

	VALIDATOR() {
	    return this.getToken(PostgreSQLParser.VALIDATOR, 0);
	};

	handler_name() {
	    return this.getTypedRuleContext(Handler_nameContext,0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitValidator_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_validatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_validator;
    }

	validator_clause() {
	    return this.getTypedRuleContext(Validator_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_validator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_proceduralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_procedural;
    }

	PROCEDURAL() {
	    return this.getToken(PostgreSQLParser.PROCEDURAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_procedural(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatetablespacestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createtablespacestmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opttablespaceowner() {
	    return this.getTypedRuleContext(OpttablespaceownerContext,0);
	};

	LOCATION() {
	    return this.getToken(PostgreSQLParser.LOCATION, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	opt_reloptions() {
	    return this.getTypedRuleContext(Opt_reloptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatetablespacestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpttablespaceownerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opttablespaceowner;
    }

	OWNER() {
	    return this.getToken(PostgreSQLParser.OWNER, 0);
	};

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpttablespaceowner(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DroptablespacestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_droptablespacestmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDroptablespacestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateextensionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createextensionstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	EXTENSION() {
	    return this.getToken(PostgreSQLParser.EXTENSION, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	create_extension_opt_list() {
	    return this.getTypedRuleContext(Create_extension_opt_listContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateextensionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_extension_opt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_create_extension_opt_list;
    }

	create_extension_opt_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Create_extension_opt_itemContext);
	    } else {
	        return this.getTypedRuleContext(Create_extension_opt_itemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreate_extension_opt_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_extension_opt_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_create_extension_opt_item;
    }

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	VERSION_P() {
	    return this.getToken(PostgreSQLParser.VERSION_P, 0);
	};

	nonreservedword_or_sconst() {
	    return this.getTypedRuleContext(Nonreservedword_or_sconstContext,0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	CASCADE() {
	    return this.getToken(PostgreSQLParser.CASCADE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreate_extension_opt_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterextensionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterextensionstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	EXTENSION() {
	    return this.getToken(PostgreSQLParser.EXTENSION, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	alter_extension_opt_list() {
	    return this.getTypedRuleContext(Alter_extension_opt_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterextensionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_extension_opt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_extension_opt_list;
    }

	alter_extension_opt_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_extension_opt_itemContext);
	    } else {
	        return this.getTypedRuleContext(Alter_extension_opt_itemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_extension_opt_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_extension_opt_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_extension_opt_item;
    }

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	nonreservedword_or_sconst() {
	    return this.getTypedRuleContext(Nonreservedword_or_sconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_extension_opt_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterextensioncontentsstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterextensioncontentsstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	EXTENSION() {
	    return this.getToken(PostgreSQLParser.EXTENSION, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	add_drop() {
	    return this.getTypedRuleContext(Add_dropContext,0);
	};

	object_type_name() {
	    return this.getTypedRuleContext(Object_type_nameContext,0);
	};

	object_type_any_name() {
	    return this.getTypedRuleContext(Object_type_any_nameContext,0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	AGGREGATE() {
	    return this.getToken(PostgreSQLParser.AGGREGATE, 0);
	};

	aggregate_with_argtypes() {
	    return this.getTypedRuleContext(Aggregate_with_argtypesContext,0);
	};

	CAST() {
	    return this.getToken(PostgreSQLParser.CAST, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	typename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypenameContext);
	    } else {
	        return this.getTypedRuleContext(TypenameContext,i);
	    }
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes() {
	    return this.getTypedRuleContext(Function_with_argtypesContext,0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	operator_with_argtypes() {
	    return this.getTypedRuleContext(Operator_with_argtypesContext,0);
	};

	CLASS() {
	    return this.getToken(PostgreSQLParser.CLASS, 0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	FAMILY() {
	    return this.getToken(PostgreSQLParser.FAMILY, 0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	TRANSFORM() {
	    return this.getToken(PostgreSQLParser.TRANSFORM, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterextensioncontentsstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatefdwstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createfdwstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	DATA_P() {
	    return this.getToken(PostgreSQLParser.DATA_P, 0);
	};

	WRAPPER() {
	    return this.getToken(PostgreSQLParser.WRAPPER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_fdw_options() {
	    return this.getTypedRuleContext(Opt_fdw_optionsContext,0);
	};

	create_generic_options() {
	    return this.getTypedRuleContext(Create_generic_optionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatefdwstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fdw_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_fdw_option;
    }

	HANDLER() {
	    return this.getToken(PostgreSQLParser.HANDLER, 0);
	};

	handler_name() {
	    return this.getTypedRuleContext(Handler_nameContext,0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	VALIDATOR() {
	    return this.getToken(PostgreSQLParser.VALIDATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFdw_option(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fdw_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_fdw_options;
    }

	fdw_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fdw_optionContext);
	    } else {
	        return this.getTypedRuleContext(Fdw_optionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFdw_options(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_fdw_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_fdw_options;
    }

	fdw_options() {
	    return this.getTypedRuleContext(Fdw_optionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_fdw_options(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterfdwstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterfdwstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	DATA_P() {
	    return this.getToken(PostgreSQLParser.DATA_P, 0);
	};

	WRAPPER() {
	    return this.getToken(PostgreSQLParser.WRAPPER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_fdw_options() {
	    return this.getTypedRuleContext(Opt_fdw_optionsContext,0);
	};

	alter_generic_options() {
	    return this.getTypedRuleContext(Alter_generic_optionsContext,0);
	};

	fdw_options() {
	    return this.getTypedRuleContext(Fdw_optionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterfdwstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_generic_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_create_generic_options;
    }

	OPTIONS() {
	    return this.getToken(PostgreSQLParser.OPTIONS, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	generic_option_list() {
	    return this.getTypedRuleContext(Generic_option_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreate_generic_options(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Generic_option_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_generic_option_list;
    }

	generic_option_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Generic_option_elemContext);
	    } else {
	        return this.getTypedRuleContext(Generic_option_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGeneric_option_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_generic_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_generic_options;
    }

	OPTIONS() {
	    return this.getToken(PostgreSQLParser.OPTIONS, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	alter_generic_option_list() {
	    return this.getTypedRuleContext(Alter_generic_option_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_generic_options(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_generic_option_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_generic_option_list;
    }

	alter_generic_option_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_generic_option_elemContext);
	    } else {
	        return this.getTypedRuleContext(Alter_generic_option_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_generic_option_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_generic_option_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alter_generic_option_elem;
    }

	generic_option_elem() {
	    return this.getTypedRuleContext(Generic_option_elemContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	ADD_P() {
	    return this.getToken(PostgreSQLParser.ADD_P, 0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	generic_option_name() {
	    return this.getTypedRuleContext(Generic_option_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlter_generic_option_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Generic_option_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_generic_option_elem;
    }

	generic_option_name() {
	    return this.getTypedRuleContext(Generic_option_nameContext,0);
	};

	generic_option_arg() {
	    return this.getTypedRuleContext(Generic_option_argContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGeneric_option_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Generic_option_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_generic_option_name;
    }

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGeneric_option_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Generic_option_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_generic_option_arg;
    }

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGeneric_option_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateforeignserverstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createforeignserverstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	opt_type() {
	    return this.getTypedRuleContext(Opt_typeContext,0);
	};

	opt_foreign_server_version() {
	    return this.getTypedRuleContext(Opt_foreign_server_versionContext,0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	DATA_P() {
	    return this.getToken(PostgreSQLParser.DATA_P, 0);
	};

	WRAPPER() {
	    return this.getToken(PostgreSQLParser.WRAPPER, 0);
	};

	create_generic_options() {
	    return this.getTypedRuleContext(Create_generic_optionsContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateforeignserverstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_type;
    }

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Foreign_server_versionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_foreign_server_version;
    }

	VERSION_P() {
	    return this.getToken(PostgreSQLParser.VERSION_P, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitForeign_server_version(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_foreign_server_versionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_foreign_server_version;
    }

	foreign_server_version() {
	    return this.getTypedRuleContext(Foreign_server_versionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_foreign_server_version(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterforeignserverstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterforeignserverstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	alter_generic_options() {
	    return this.getTypedRuleContext(Alter_generic_optionsContext,0);
	};

	foreign_server_version() {
	    return this.getTypedRuleContext(Foreign_server_versionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterforeignserverstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateforeigntablestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createforeigntablestmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	qualified_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Qualified_nameContext);
	    } else {
	        return this.getTypedRuleContext(Qualified_nameContext,i);
	    }
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	opttableelementlist() {
	    return this.getTypedRuleContext(OpttableelementlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	optinherit() {
	    return this.getTypedRuleContext(OptinheritContext,0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	create_generic_options() {
	    return this.getTypedRuleContext(Create_generic_optionsContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	PARTITION() {
	    return this.getToken(PostgreSQLParser.PARTITION, 0);
	};

	OF() {
	    return this.getToken(PostgreSQLParser.OF, 0);
	};

	opttypedtableelementlist() {
	    return this.getTypedRuleContext(OpttypedtableelementlistContext,0);
	};

	partitionboundspec() {
	    return this.getTypedRuleContext(PartitionboundspecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateforeigntablestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportforeignschemastmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_importforeignschemastmt;
    }

	IMPORT_P() {
	    return this.getToken(PostgreSQLParser.IMPORT_P, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	import_qualification() {
	    return this.getTypedRuleContext(Import_qualificationContext,0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	INTO() {
	    return this.getToken(PostgreSQLParser.INTO, 0);
	};

	create_generic_options() {
	    return this.getTypedRuleContext(Create_generic_optionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitImportforeignschemastmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_qualification_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_import_qualification_type;
    }

	LIMIT() {
	    return this.getToken(PostgreSQLParser.LIMIT, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	EXCEPT() {
	    return this.getToken(PostgreSQLParser.EXCEPT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitImport_qualification_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_qualificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_import_qualification;
    }

	import_qualification_type() {
	    return this.getTypedRuleContext(Import_qualification_typeContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	relation_expr_list() {
	    return this.getTypedRuleContext(Relation_expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitImport_qualification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateusermappingstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createusermappingstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	MAPPING() {
	    return this.getToken(PostgreSQLParser.MAPPING, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	auth_ident() {
	    return this.getTypedRuleContext(Auth_identContext,0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	create_generic_options() {
	    return this.getTypedRuleContext(Create_generic_optionsContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateusermappingstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Auth_identContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_auth_ident;
    }

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAuth_ident(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropusermappingstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dropusermappingstmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	MAPPING() {
	    return this.getToken(PostgreSQLParser.MAPPING, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	auth_ident() {
	    return this.getTypedRuleContext(Auth_identContext,0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDropusermappingstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterusermappingstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterusermappingstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	MAPPING() {
	    return this.getToken(PostgreSQLParser.MAPPING, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	auth_ident() {
	    return this.getTypedRuleContext(Auth_identContext,0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	alter_generic_options() {
	    return this.getTypedRuleContext(Alter_generic_optionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterusermappingstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatepolicystmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createpolicystmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	POLICY() {
	    return this.getToken(PostgreSQLParser.POLICY, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	rowsecuritydefaultpermissive() {
	    return this.getTypedRuleContext(RowsecuritydefaultpermissiveContext,0);
	};

	rowsecuritydefaultforcmd() {
	    return this.getTypedRuleContext(RowsecuritydefaultforcmdContext,0);
	};

	rowsecuritydefaulttorole() {
	    return this.getTypedRuleContext(RowsecuritydefaulttoroleContext,0);
	};

	rowsecurityoptionalexpr() {
	    return this.getTypedRuleContext(RowsecurityoptionalexprContext,0);
	};

	rowsecurityoptionalwithcheck() {
	    return this.getTypedRuleContext(RowsecurityoptionalwithcheckContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatepolicystmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterpolicystmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterpolicystmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	POLICY() {
	    return this.getToken(PostgreSQLParser.POLICY, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	rowsecurityoptionaltorole() {
	    return this.getTypedRuleContext(RowsecurityoptionaltoroleContext,0);
	};

	rowsecurityoptionalexpr() {
	    return this.getTypedRuleContext(RowsecurityoptionalexprContext,0);
	};

	rowsecurityoptionalwithcheck() {
	    return this.getTypedRuleContext(RowsecurityoptionalwithcheckContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterpolicystmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowsecurityoptionalexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rowsecurityoptionalexpr;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRowsecurityoptionalexpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowsecurityoptionalwithcheckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rowsecurityoptionalwithcheck;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	CHECK() {
	    return this.getToken(PostgreSQLParser.CHECK, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRowsecurityoptionalwithcheck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowsecuritydefaulttoroleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rowsecuritydefaulttorole;
    }

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRowsecuritydefaulttorole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowsecurityoptionaltoroleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rowsecurityoptionaltorole;
    }

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRowsecurityoptionaltorole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowsecuritydefaultpermissiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rowsecuritydefaultpermissive;
    }

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRowsecuritydefaultpermissive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowsecuritydefaultforcmdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rowsecuritydefaultforcmd;
    }

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	row_security_cmd() {
	    return this.getTypedRuleContext(Row_security_cmdContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRowsecuritydefaultforcmd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Row_security_cmdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_row_security_cmd;
    }

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	SELECT() {
	    return this.getToken(PostgreSQLParser.SELECT, 0);
	};

	INSERT() {
	    return this.getToken(PostgreSQLParser.INSERT, 0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	DELETE_P() {
	    return this.getToken(PostgreSQLParser.DELETE_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRow_security_cmd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateamstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createamstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	ACCESS() {
	    return this.getToken(PostgreSQLParser.ACCESS, 0);
	};

	METHOD() {
	    return this.getToken(PostgreSQLParser.METHOD, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	am_type() {
	    return this.getTypedRuleContext(Am_typeContext,0);
	};

	HANDLER() {
	    return this.getToken(PostgreSQLParser.HANDLER, 0);
	};

	handler_name() {
	    return this.getTypedRuleContext(Handler_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateamstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Am_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_am_type;
    }

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAm_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatetrigstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createtrigstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	TRIGGER() {
	    return this.getToken(PostgreSQLParser.TRIGGER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	triggeractiontime() {
	    return this.getTypedRuleContext(TriggeractiontimeContext,0);
	};

	triggerevents() {
	    return this.getTypedRuleContext(TriggereventsContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	triggerreferencing() {
	    return this.getTypedRuleContext(TriggerreferencingContext,0);
	};

	triggerforspec() {
	    return this.getTypedRuleContext(TriggerforspecContext,0);
	};

	triggerwhen() {
	    return this.getTypedRuleContext(TriggerwhenContext,0);
	};

	EXECUTE() {
	    return this.getToken(PostgreSQLParser.EXECUTE, 0);
	};

	function_or_procedure() {
	    return this.getTypedRuleContext(Function_or_procedureContext,0);
	};

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	triggerfuncargs() {
	    return this.getTypedRuleContext(TriggerfuncargsContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	CONSTRAINT() {
	    return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
	};

	AFTER() {
	    return this.getToken(PostgreSQLParser.AFTER, 0);
	};

	optconstrfromtable() {
	    return this.getTypedRuleContext(OptconstrfromtableContext,0);
	};

	constraintattributespec() {
	    return this.getTypedRuleContext(ConstraintattributespecContext,0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(PostgreSQLParser.EACH, 0);
	};

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatetrigstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggeractiontimeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggeractiontime;
    }

	BEFORE() {
	    return this.getToken(PostgreSQLParser.BEFORE, 0);
	};

	AFTER() {
	    return this.getToken(PostgreSQLParser.AFTER, 0);
	};

	INSTEAD() {
	    return this.getToken(PostgreSQLParser.INSTEAD, 0);
	};

	OF() {
	    return this.getToken(PostgreSQLParser.OF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggeractiontime(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggereventsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggerevents;
    }

	triggeroneevent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriggeroneeventContext);
	    } else {
	        return this.getTypedRuleContext(TriggeroneeventContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.OR);
	    } else {
	        return this.getToken(PostgreSQLParser.OR, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggerevents(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggeroneeventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggeroneevent;
    }

	INSERT() {
	    return this.getToken(PostgreSQLParser.INSERT, 0);
	};

	DELETE_P() {
	    return this.getToken(PostgreSQLParser.DELETE_P, 0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	OF() {
	    return this.getToken(PostgreSQLParser.OF, 0);
	};

	columnlist() {
	    return this.getTypedRuleContext(ColumnlistContext,0);
	};

	TRUNCATE() {
	    return this.getToken(PostgreSQLParser.TRUNCATE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggeroneevent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerreferencingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggerreferencing;
    }

	REFERENCING() {
	    return this.getToken(PostgreSQLParser.REFERENCING, 0);
	};

	triggertransitions() {
	    return this.getTypedRuleContext(TriggertransitionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggerreferencing(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggertransitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggertransitions;
    }

	triggertransition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriggertransitionContext);
	    } else {
	        return this.getTypedRuleContext(TriggertransitionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggertransitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggertransitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggertransition;
    }

	transitionoldornew() {
	    return this.getTypedRuleContext(TransitionoldornewContext,0);
	};

	transitionrowortable() {
	    return this.getTypedRuleContext(TransitionrowortableContext,0);
	};

	opt_as() {
	    return this.getTypedRuleContext(Opt_asContext,0);
	};

	transitionrelname() {
	    return this.getTypedRuleContext(TransitionrelnameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggertransition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransitionoldornewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_transitionoldornew;
    }

	NEW() {
	    return this.getToken(PostgreSQLParser.NEW, 0);
	};

	OLD() {
	    return this.getToken(PostgreSQLParser.OLD, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTransitionoldornew(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransitionrowortableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_transitionrowortable;
    }

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTransitionrowortable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransitionrelnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_transitionrelname;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTransitionrelname(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerforspecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggerforspec;
    }

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	triggerforopteach() {
	    return this.getTypedRuleContext(TriggerforopteachContext,0);
	};

	triggerfortype() {
	    return this.getTypedRuleContext(TriggerfortypeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggerforspec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerforopteachContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggerforopteach;
    }

	EACH() {
	    return this.getToken(PostgreSQLParser.EACH, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggerforopteach(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerfortypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggerfortype;
    }

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	STATEMENT() {
	    return this.getToken(PostgreSQLParser.STATEMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggerfortype(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerwhenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggerwhen;
    }

	WHEN() {
	    return this.getToken(PostgreSQLParser.WHEN, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggerwhen(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_or_procedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_function_or_procedure;
    }

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunction_or_procedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerfuncargsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggerfuncargs;
    }

	triggerfuncarg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriggerfuncargContext);
	    } else {
	        return this.getTypedRuleContext(TriggerfuncargContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggerfuncargs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerfuncargContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_triggerfuncarg;
    }

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	fconst() {
	    return this.getTypedRuleContext(FconstContext,0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTriggerfuncarg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptconstrfromtableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_optconstrfromtable;
    }

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOptconstrfromtable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintattributespecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constraintattributespec;
    }

	constraintattributeElem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstraintattributeElemContext);
	    } else {
	        return this.getTypedRuleContext(ConstraintattributeElemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstraintattributespec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintattributeElemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constraintattributeElem;
    }

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	DEFERRABLE() {
	    return this.getToken(PostgreSQLParser.DEFERRABLE, 0);
	};

	INITIALLY() {
	    return this.getToken(PostgreSQLParser.INITIALLY, 0);
	};

	IMMEDIATE() {
	    return this.getToken(PostgreSQLParser.IMMEDIATE, 0);
	};

	DEFERRED() {
	    return this.getToken(PostgreSQLParser.DEFERRED, 0);
	};

	VALID() {
	    return this.getToken(PostgreSQLParser.VALID, 0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	INHERIT() {
	    return this.getToken(PostgreSQLParser.INHERIT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstraintattributeElem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateeventtrigstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createeventtrigstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	EVENT() {
	    return this.getToken(PostgreSQLParser.EVENT, 0);
	};

	TRIGGER() {
	    return this.getToken(PostgreSQLParser.TRIGGER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	EXECUTE() {
	    return this.getToken(PostgreSQLParser.EXECUTE, 0);
	};

	function_or_procedure() {
	    return this.getTypedRuleContext(Function_or_procedureContext,0);
	};

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	WHEN() {
	    return this.getToken(PostgreSQLParser.WHEN, 0);
	};

	event_trigger_when_list() {
	    return this.getTypedRuleContext(Event_trigger_when_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateeventtrigstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Event_trigger_when_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_event_trigger_when_list;
    }

	event_trigger_when_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Event_trigger_when_itemContext);
	    } else {
	        return this.getTypedRuleContext(Event_trigger_when_itemContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.AND);
	    } else {
	        return this.getToken(PostgreSQLParser.AND, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitEvent_trigger_when_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Event_trigger_when_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_event_trigger_when_item;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	event_trigger_value_list() {
	    return this.getTypedRuleContext(Event_trigger_value_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitEvent_trigger_when_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Event_trigger_value_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_event_trigger_value_list;
    }

	sconst = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SconstContext);
	    } else {
	        return this.getTypedRuleContext(SconstContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitEvent_trigger_value_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltereventtrigstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altereventtrigstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	EVENT() {
	    return this.getToken(PostgreSQLParser.EVENT, 0);
	};

	TRIGGER() {
	    return this.getToken(PostgreSQLParser.TRIGGER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enable_trigger() {
	    return this.getTypedRuleContext(Enable_triggerContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltereventtrigstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enable_triggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_enable_trigger;
    }

	ENABLE_P() {
	    return this.getToken(PostgreSQLParser.ENABLE_P, 0);
	};

	REPLICA() {
	    return this.getToken(PostgreSQLParser.REPLICA, 0);
	};

	ALWAYS() {
	    return this.getToken(PostgreSQLParser.ALWAYS, 0);
	};

	DISABLE_P() {
	    return this.getToken(PostgreSQLParser.DISABLE_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitEnable_trigger(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateassertionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createassertionstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	ASSERTION() {
	    return this.getToken(PostgreSQLParser.ASSERTION, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	CHECK() {
	    return this.getToken(PostgreSQLParser.CHECK, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	constraintattributespec() {
	    return this.getTypedRuleContext(ConstraintattributespecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateassertionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefinestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_definestmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opt_or_replace() {
	    return this.getTypedRuleContext(Opt_or_replaceContext,0);
	};

	AGGREGATE() {
	    return this.getToken(PostgreSQLParser.AGGREGATE, 0);
	};

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	aggr_args() {
	    return this.getTypedRuleContext(Aggr_argsContext,0);
	};

	definition() {
	    return this.getTypedRuleContext(DefinitionContext,0);
	};

	old_aggr_definition() {
	    return this.getTypedRuleContext(Old_aggr_definitionContext,0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	any_operator() {
	    return this.getTypedRuleContext(Any_operatorContext,0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	any_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_nameContext);
	    } else {
	        return this.getTypedRuleContext(Any_nameContext,i);
	    }
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	opttablefuncelementlist() {
	    return this.getTypedRuleContext(OpttablefuncelementlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	ENUM_P() {
	    return this.getToken(PostgreSQLParser.ENUM_P, 0);
	};

	opt_enum_val_list() {
	    return this.getTypedRuleContext(Opt_enum_val_listContext,0);
	};

	RANGE() {
	    return this.getToken(PostgreSQLParser.RANGE, 0);
	};

	TEXT_P() {
	    return this.getToken(PostgreSQLParser.TEXT_P, 0);
	};

	SEARCH() {
	    return this.getToken(PostgreSQLParser.SEARCH, 0);
	};

	PARSER() {
	    return this.getToken(PostgreSQLParser.PARSER, 0);
	};

	DICTIONARY() {
	    return this.getToken(PostgreSQLParser.DICTIONARY, 0);
	};

	TEMPLATE() {
	    return this.getToken(PostgreSQLParser.TEMPLATE, 0);
	};

	CONFIGURATION() {
	    return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
	};

	COLLATION() {
	    return this.getToken(PostgreSQLParser.COLLATION, 0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDefinestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_definition;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	def_list() {
	    return this.getTypedRuleContext(Def_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Def_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_def_list;
    }

	def_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Def_elemContext);
	    } else {
	        return this.getTypedRuleContext(Def_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDef_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Def_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_def_elem;
    }

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	def_arg() {
	    return this.getTypedRuleContext(Def_argContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDef_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Def_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_def_arg;
    }

	func_type() {
	    return this.getTypedRuleContext(Func_typeContext,0);
	};

	reserved_keyword() {
	    return this.getTypedRuleContext(Reserved_keywordContext,0);
	};

	qual_all_op() {
	    return this.getTypedRuleContext(Qual_all_opContext,0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	NONE() {
	    return this.getToken(PostgreSQLParser.NONE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDef_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Old_aggr_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_old_aggr_definition;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	old_aggr_list() {
	    return this.getTypedRuleContext(Old_aggr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOld_aggr_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Old_aggr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_old_aggr_list;
    }

	old_aggr_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Old_aggr_elemContext);
	    } else {
	        return this.getTypedRuleContext(Old_aggr_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOld_aggr_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Old_aggr_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_old_aggr_elem;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	def_arg() {
	    return this.getTypedRuleContext(Def_argContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOld_aggr_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_enum_val_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_enum_val_list;
    }

	enum_val_list() {
	    return this.getTypedRuleContext(Enum_val_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_enum_val_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enum_val_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_enum_val_list;
    }

	sconst = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SconstContext);
	    } else {
	        return this.getTypedRuleContext(SconstContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitEnum_val_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterenumstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterenumstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	ADD_P() {
	    return this.getToken(PostgreSQLParser.ADD_P, 0);
	};

	VALUE_P() {
	    return this.getToken(PostgreSQLParser.VALUE_P, 0);
	};

	opt_if_not_exists() {
	    return this.getTypedRuleContext(Opt_if_not_existsContext,0);
	};

	sconst = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SconstContext);
	    } else {
	        return this.getTypedRuleContext(SconstContext,i);
	    }
	};

	BEFORE() {
	    return this.getToken(PostgreSQLParser.BEFORE, 0);
	};

	AFTER() {
	    return this.getToken(PostgreSQLParser.AFTER, 0);
	};

	RENAME() {
	    return this.getToken(PostgreSQLParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterenumstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_if_not_existsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_if_not_exists;
    }

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_if_not_exists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateopclassstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createopclassstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	CLASS() {
	    return this.getToken(PostgreSQLParser.CLASS, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	opt_default() {
	    return this.getTypedRuleContext(Opt_defaultContext,0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_opfamily() {
	    return this.getTypedRuleContext(Opt_opfamilyContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	opclass_item_list() {
	    return this.getTypedRuleContext(Opclass_item_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateopclassstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opclass_item_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opclass_item_list;
    }

	opclass_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Opclass_itemContext);
	    } else {
	        return this.getTypedRuleContext(Opclass_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpclass_item_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opclass_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opclass_item;
    }

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	any_operator() {
	    return this.getTypedRuleContext(Any_operatorContext,0);
	};

	opclass_purpose() {
	    return this.getTypedRuleContext(Opclass_purposeContext,0);
	};

	opt_recheck() {
	    return this.getTypedRuleContext(Opt_recheckContext,0);
	};

	operator_with_argtypes() {
	    return this.getTypedRuleContext(Operator_with_argtypesContext,0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes() {
	    return this.getTypedRuleContext(Function_with_argtypesContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	type_list() {
	    return this.getTypedRuleContext(Type_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	STORAGE() {
	    return this.getToken(PostgreSQLParser.STORAGE, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpclass_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_default;
    }

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_opfamilyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_opfamily;
    }

	FAMILY() {
	    return this.getToken(PostgreSQLParser.FAMILY, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_opfamily(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opclass_purposeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opclass_purpose;
    }

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	SEARCH() {
	    return this.getToken(PostgreSQLParser.SEARCH, 0);
	};

	ORDER() {
	    return this.getToken(PostgreSQLParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpclass_purpose(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_recheckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_recheck;
    }

	RECHECK() {
	    return this.getToken(PostgreSQLParser.RECHECK, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_recheck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateopfamilystmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createopfamilystmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	FAMILY() {
	    return this.getToken(PostgreSQLParser.FAMILY, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateopfamilystmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlteropfamilystmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alteropfamilystmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	FAMILY() {
	    return this.getToken(PostgreSQLParser.FAMILY, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ADD_P() {
	    return this.getToken(PostgreSQLParser.ADD_P, 0);
	};

	opclass_item_list() {
	    return this.getTypedRuleContext(Opclass_item_listContext,0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	opclass_drop_list() {
	    return this.getTypedRuleContext(Opclass_drop_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlteropfamilystmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opclass_drop_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opclass_drop_list;
    }

	opclass_drop = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Opclass_dropContext);
	    } else {
	        return this.getTypedRuleContext(Opclass_dropContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpclass_drop_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opclass_dropContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opclass_drop;
    }

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	type_list() {
	    return this.getTypedRuleContext(Type_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpclass_drop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropopclassstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dropopclassstmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	CLASS() {
	    return this.getToken(PostgreSQLParser.CLASS, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDropopclassstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropopfamilystmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dropopfamilystmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	FAMILY() {
	    return this.getToken(PostgreSQLParser.FAMILY, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDropopfamilystmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropownedstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dropownedstmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	OWNED() {
	    return this.getToken(PostgreSQLParser.OWNED, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDropownedstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReassignownedstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reassignownedstmt;
    }

	REASSIGN() {
	    return this.getToken(PostgreSQLParser.REASSIGN, 0);
	};

	OWNED() {
	    return this.getToken(PostgreSQLParser.OWNED, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReassignownedstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dropstmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	object_type_any_name() {
	    return this.getTypedRuleContext(Object_type_any_nameContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	any_name_list() {
	    return this.getTypedRuleContext(Any_name_listContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	drop_type_name() {
	    return this.getTypedRuleContext(Drop_type_nameContext,0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	object_type_name_on_any_name() {
	    return this.getTypedRuleContext(Object_type_name_on_any_nameContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	type_name_list() {
	    return this.getTypedRuleContext(Type_name_listContext,0);
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	CONCURRENTLY() {
	    return this.getToken(PostgreSQLParser.CONCURRENTLY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDropstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_type_any_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_object_type_any_name;
    }

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	SEQUENCE() {
	    return this.getToken(PostgreSQLParser.SEQUENCE, 0);
	};

	VIEW() {
	    return this.getToken(PostgreSQLParser.VIEW, 0);
	};

	MATERIALIZED() {
	    return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
	};

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	COLLATION() {
	    return this.getToken(PostgreSQLParser.COLLATION, 0);
	};

	CONVERSION_P() {
	    return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
	};

	STATISTICS() {
	    return this.getToken(PostgreSQLParser.STATISTICS, 0);
	};

	TEXT_P() {
	    return this.getToken(PostgreSQLParser.TEXT_P, 0);
	};

	SEARCH() {
	    return this.getToken(PostgreSQLParser.SEARCH, 0);
	};

	PARSER() {
	    return this.getToken(PostgreSQLParser.PARSER, 0);
	};

	DICTIONARY() {
	    return this.getToken(PostgreSQLParser.DICTIONARY, 0);
	};

	TEMPLATE() {
	    return this.getToken(PostgreSQLParser.TEMPLATE, 0);
	};

	CONFIGURATION() {
	    return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitObject_type_any_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_object_type_name;
    }

	drop_type_name() {
	    return this.getTypedRuleContext(Drop_type_nameContext,0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	ROLE() {
	    return this.getToken(PostgreSQLParser.ROLE, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitObject_type_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_drop_type_name;
    }

	ACCESS() {
	    return this.getToken(PostgreSQLParser.ACCESS, 0);
	};

	METHOD() {
	    return this.getToken(PostgreSQLParser.METHOD, 0);
	};

	EVENT() {
	    return this.getToken(PostgreSQLParser.EVENT, 0);
	};

	TRIGGER() {
	    return this.getToken(PostgreSQLParser.TRIGGER, 0);
	};

	EXTENSION() {
	    return this.getToken(PostgreSQLParser.EXTENSION, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	DATA_P() {
	    return this.getToken(PostgreSQLParser.DATA_P, 0);
	};

	WRAPPER() {
	    return this.getToken(PostgreSQLParser.WRAPPER, 0);
	};

	opt_procedural() {
	    return this.getTypedRuleContext(Opt_proceduralContext,0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	PUBLICATION() {
	    return this.getToken(PostgreSQLParser.PUBLICATION, 0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDrop_type_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_type_name_on_any_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_object_type_name_on_any_name;
    }

	POLICY() {
	    return this.getToken(PostgreSQLParser.POLICY, 0);
	};

	RULE() {
	    return this.getToken(PostgreSQLParser.RULE, 0);
	};

	TRIGGER() {
	    return this.getToken(PostgreSQLParser.TRIGGER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitObject_type_name_on_any_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Any_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_any_name_list;
    }

	any_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_nameContext);
	    } else {
	        return this.getTypedRuleContext(Any_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAny_name_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Any_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_any_name;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	attrs() {
	    return this.getTypedRuleContext(AttrsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAny_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttrsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_attrs;
    }

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.DOT);
	    } else {
	        return this.getToken(PostgreSQLParser.DOT, i);
	    }
	};


	attr_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Attr_nameContext);
	    } else {
	        return this.getTypedRuleContext(Attr_nameContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAttrs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_type_name_list;
    }

	typename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypenameContext);
	    } else {
	        return this.getTypedRuleContext(TypenameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitType_name_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TruncatestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_truncatestmt;
    }

	TRUNCATE() {
	    return this.getToken(PostgreSQLParser.TRUNCATE, 0);
	};

	opt_table() {
	    return this.getTypedRuleContext(Opt_tableContext,0);
	};

	relation_expr_list() {
	    return this.getTypedRuleContext(Relation_expr_listContext,0);
	};

	opt_restart_seqs() {
	    return this.getTypedRuleContext(Opt_restart_seqsContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTruncatestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_restart_seqsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_restart_seqs;
    }

	CONTINUE_P() {
	    return this.getToken(PostgreSQLParser.CONTINUE_P, 0);
	};

	IDENTITY_P() {
	    return this.getToken(PostgreSQLParser.IDENTITY_P, 0);
	};

	RESTART() {
	    return this.getToken(PostgreSQLParser.RESTART, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_restart_seqs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommentstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_commentstmt;
    }

	COMMENT() {
	    return this.getToken(PostgreSQLParser.COMMENT, 0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.ON);
	    } else {
	        return this.getToken(PostgreSQLParser.ON, i);
	    }
	};


	object_type_any_name() {
	    return this.getTypedRuleContext(Object_type_any_nameContext,0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	IS() {
	    return this.getToken(PostgreSQLParser.IS, 0);
	};

	comment_text() {
	    return this.getTypedRuleContext(Comment_textContext,0);
	};

	COLUMN() {
	    return this.getToken(PostgreSQLParser.COLUMN, 0);
	};

	object_type_name() {
	    return this.getTypedRuleContext(Object_type_nameContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	typename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypenameContext);
	    } else {
	        return this.getTypedRuleContext(TypenameContext,i);
	    }
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	AGGREGATE() {
	    return this.getToken(PostgreSQLParser.AGGREGATE, 0);
	};

	aggregate_with_argtypes() {
	    return this.getTypedRuleContext(Aggregate_with_argtypesContext,0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes() {
	    return this.getTypedRuleContext(Function_with_argtypesContext,0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	operator_with_argtypes() {
	    return this.getTypedRuleContext(Operator_with_argtypesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
	};

	object_type_name_on_any_name() {
	    return this.getTypedRuleContext(Object_type_name_on_any_nameContext,0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	TRANSFORM() {
	    return this.getToken(PostgreSQLParser.TRANSFORM, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	CLASS() {
	    return this.getToken(PostgreSQLParser.CLASS, 0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	FAMILY() {
	    return this.getToken(PostgreSQLParser.FAMILY, 0);
	};

	LARGE_P() {
	    return this.getToken(PostgreSQLParser.LARGE_P, 0);
	};

	OBJECT_P() {
	    return this.getToken(PostgreSQLParser.OBJECT_P, 0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	CAST() {
	    return this.getToken(PostgreSQLParser.CAST, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCommentstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comment_textContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_comment_text;
    }

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitComment_text(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SeclabelstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_seclabelstmt;
    }

	SECURITY() {
	    return this.getToken(PostgreSQLParser.SECURITY, 0);
	};

	LABEL() {
	    return this.getToken(PostgreSQLParser.LABEL, 0);
	};

	opt_provider() {
	    return this.getTypedRuleContext(Opt_providerContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	object_type_any_name() {
	    return this.getTypedRuleContext(Object_type_any_nameContext,0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	IS() {
	    return this.getToken(PostgreSQLParser.IS, 0);
	};

	security_label() {
	    return this.getTypedRuleContext(Security_labelContext,0);
	};

	COLUMN() {
	    return this.getToken(PostgreSQLParser.COLUMN, 0);
	};

	object_type_name() {
	    return this.getTypedRuleContext(Object_type_nameContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	AGGREGATE() {
	    return this.getToken(PostgreSQLParser.AGGREGATE, 0);
	};

	aggregate_with_argtypes() {
	    return this.getTypedRuleContext(Aggregate_with_argtypesContext,0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes() {
	    return this.getTypedRuleContext(Function_with_argtypesContext,0);
	};

	LARGE_P() {
	    return this.getToken(PostgreSQLParser.LARGE_P, 0);
	};

	OBJECT_P() {
	    return this.getToken(PostgreSQLParser.OBJECT_P, 0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSeclabelstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_providerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_provider;
    }

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	nonreservedword_or_sconst() {
	    return this.getTypedRuleContext(Nonreservedword_or_sconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_provider(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Security_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_security_label;
    }

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSecurity_label(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FetchstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_fetchstmt;
    }

	FETCH() {
	    return this.getToken(PostgreSQLParser.FETCH, 0);
	};

	fetch_args() {
	    return this.getTypedRuleContext(Fetch_argsContext,0);
	};

	MOVE() {
	    return this.getToken(PostgreSQLParser.MOVE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFetchstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fetch_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_fetch_args;
    }

	cursor_name() {
	    return this.getTypedRuleContext(Cursor_nameContext,0);
	};

	from_in() {
	    return this.getTypedRuleContext(From_inContext,0);
	};

	NEXT() {
	    return this.getToken(PostgreSQLParser.NEXT, 0);
	};

	opt_from_in() {
	    return this.getTypedRuleContext(Opt_from_inContext,0);
	};

	PRIOR() {
	    return this.getToken(PostgreSQLParser.PRIOR, 0);
	};

	FIRST_P() {
	    return this.getToken(PostgreSQLParser.FIRST_P, 0);
	};

	LAST_P() {
	    return this.getToken(PostgreSQLParser.LAST_P, 0);
	};

	ABSOLUTE_P() {
	    return this.getToken(PostgreSQLParser.ABSOLUTE_P, 0);
	};

	signediconst() {
	    return this.getTypedRuleContext(SignediconstContext,0);
	};

	RELATIVE_P() {
	    return this.getToken(PostgreSQLParser.RELATIVE_P, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	FORWARD() {
	    return this.getToken(PostgreSQLParser.FORWARD, 0);
	};

	BACKWARD() {
	    return this.getToken(PostgreSQLParser.BACKWARD, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFetch_args(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class From_inContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_from_in;
    }

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFrom_in(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_from_inContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_from_in;
    }

	from_in() {
	    return this.getTypedRuleContext(From_inContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_from_in(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_grantstmt;
    }

	GRANT() {
	    return this.getToken(PostgreSQLParser.GRANT, 0);
	};

	privileges() {
	    return this.getTypedRuleContext(PrivilegesContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	privilege_target() {
	    return this.getTypedRuleContext(Privilege_targetContext,0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	grantee_list() {
	    return this.getTypedRuleContext(Grantee_listContext,0);
	};

	opt_grant_grant_option() {
	    return this.getTypedRuleContext(Opt_grant_grant_optionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGrantstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_revokestmt;
    }

	REVOKE() {
	    return this.getToken(PostgreSQLParser.REVOKE, 0);
	};

	privileges() {
	    return this.getTypedRuleContext(PrivilegesContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	privilege_target() {
	    return this.getTypedRuleContext(Privilege_targetContext,0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	grantee_list() {
	    return this.getTypedRuleContext(Grantee_listContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	GRANT() {
	    return this.getToken(PostgreSQLParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(PostgreSQLParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRevokestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_privileges;
    }

	privilege_list() {
	    return this.getTypedRuleContext(Privilege_listContext,0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(PostgreSQLParser.PRIVILEGES, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	columnlist() {
	    return this.getTypedRuleContext(ColumnlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPrivileges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Privilege_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_privilege_list;
    }

	privilege = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivilegeContext);
	    } else {
	        return this.getTypedRuleContext(PrivilegeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPrivilege_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_privilege;
    }

	SELECT() {
	    return this.getToken(PostgreSQLParser.SELECT, 0);
	};

	opt_column_list() {
	    return this.getTypedRuleContext(Opt_column_listContext,0);
	};

	REFERENCES() {
	    return this.getToken(PostgreSQLParser.REFERENCES, 0);
	};

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPrivilege(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Privilege_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_privilege_target;
    }

	qualified_name_list() {
	    return this.getTypedRuleContext(Qualified_name_listContext,0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	SEQUENCE() {
	    return this.getToken(PostgreSQLParser.SEQUENCE, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	DATA_P() {
	    return this.getToken(PostgreSQLParser.DATA_P, 0);
	};

	WRAPPER() {
	    return this.getToken(PostgreSQLParser.WRAPPER, 0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes_list() {
	    return this.getTypedRuleContext(Function_with_argtypes_listContext,0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	any_name_list() {
	    return this.getTypedRuleContext(Any_name_listContext,0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	LARGE_P() {
	    return this.getToken(PostgreSQLParser.LARGE_P, 0);
	};

	OBJECT_P() {
	    return this.getToken(PostgreSQLParser.OBJECT_P, 0);
	};

	numericonly_list() {
	    return this.getTypedRuleContext(Numericonly_listContext,0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	TABLES() {
	    return this.getToken(PostgreSQLParser.TABLES, 0);
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	SEQUENCES() {
	    return this.getToken(PostgreSQLParser.SEQUENCES, 0);
	};

	FUNCTIONS() {
	    return this.getToken(PostgreSQLParser.FUNCTIONS, 0);
	};

	PROCEDURES() {
	    return this.getToken(PostgreSQLParser.PROCEDURES, 0);
	};

	ROUTINES() {
	    return this.getToken(PostgreSQLParser.ROUTINES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPrivilege_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Grantee_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_grantee_list;
    }

	grantee = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GranteeContext);
	    } else {
	        return this.getTypedRuleContext(GranteeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGrantee_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GranteeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_grantee;
    }

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	GROUP_P() {
	    return this.getToken(PostgreSQLParser.GROUP_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGrantee(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_grant_grant_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_grant_grant_option;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	GRANT() {
	    return this.getToken(PostgreSQLParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(PostgreSQLParser.OPTION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_grant_grant_option(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantrolestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_grantrolestmt;
    }

	GRANT() {
	    return this.getToken(PostgreSQLParser.GRANT, 0);
	};

	privilege_list() {
	    return this.getTypedRuleContext(Privilege_listContext,0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	opt_grant_admin_option() {
	    return this.getTypedRuleContext(Opt_grant_admin_optionContext,0);
	};

	opt_granted_by() {
	    return this.getTypedRuleContext(Opt_granted_byContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGrantrolestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokerolestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_revokerolestmt;
    }

	REVOKE() {
	    return this.getToken(PostgreSQLParser.REVOKE, 0);
	};

	privilege_list() {
	    return this.getTypedRuleContext(Privilege_listContext,0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	opt_granted_by() {
	    return this.getTypedRuleContext(Opt_granted_byContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	ADMIN() {
	    return this.getToken(PostgreSQLParser.ADMIN, 0);
	};

	OPTION() {
	    return this.getToken(PostgreSQLParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRevokerolestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_grant_admin_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_grant_admin_option;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	ADMIN() {
	    return this.getToken(PostgreSQLParser.ADMIN, 0);
	};

	OPTION() {
	    return this.getToken(PostgreSQLParser.OPTION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_grant_admin_option(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_granted_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_granted_by;
    }

	GRANTED() {
	    return this.getToken(PostgreSQLParser.GRANTED, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_granted_by(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterdefaultprivilegesstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterdefaultprivilegesstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	PRIVILEGES() {
	    return this.getToken(PostgreSQLParser.PRIVILEGES, 0);
	};

	defacloptionlist() {
	    return this.getTypedRuleContext(DefacloptionlistContext,0);
	};

	defaclaction() {
	    return this.getTypedRuleContext(DefaclactionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterdefaultprivilegesstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefacloptionlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_defacloptionlist;
    }

	defacloption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefacloptionContext);
	    } else {
	        return this.getTypedRuleContext(DefacloptionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDefacloptionlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefacloptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_defacloption;
    }

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	ROLE() {
	    return this.getToken(PostgreSQLParser.ROLE, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDefacloption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaclactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_defaclaction;
    }

	GRANT() {
	    return this.getToken(PostgreSQLParser.GRANT, 0);
	};

	privileges() {
	    return this.getTypedRuleContext(PrivilegesContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	defacl_privilege_target() {
	    return this.getTypedRuleContext(Defacl_privilege_targetContext,0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	grantee_list() {
	    return this.getTypedRuleContext(Grantee_listContext,0);
	};

	opt_grant_grant_option() {
	    return this.getTypedRuleContext(Opt_grant_grant_optionContext,0);
	};

	REVOKE() {
	    return this.getToken(PostgreSQLParser.REVOKE, 0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	OPTION() {
	    return this.getToken(PostgreSQLParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDefaclaction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Defacl_privilege_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_defacl_privilege_target;
    }

	TABLES() {
	    return this.getToken(PostgreSQLParser.TABLES, 0);
	};

	FUNCTIONS() {
	    return this.getToken(PostgreSQLParser.FUNCTIONS, 0);
	};

	ROUTINES() {
	    return this.getToken(PostgreSQLParser.ROUTINES, 0);
	};

	SEQUENCES() {
	    return this.getToken(PostgreSQLParser.SEQUENCES, 0);
	};

	TYPES_P() {
	    return this.getToken(PostgreSQLParser.TYPES_P, 0);
	};

	SCHEMAS() {
	    return this.getToken(PostgreSQLParser.SCHEMAS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDefacl_privilege_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_indexstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opt_unique() {
	    return this.getTypedRuleContext(Opt_uniqueContext,0);
	};

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	opt_concurrently() {
	    return this.getTypedRuleContext(Opt_concurrentlyContext,0);
	};

	opt_index_name() {
	    return this.getTypedRuleContext(Opt_index_nameContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	relation_expr() {
	    return this.getTypedRuleContext(Relation_exprContext,0);
	};

	access_method_clause() {
	    return this.getTypedRuleContext(Access_method_clauseContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	index_params() {
	    return this.getTypedRuleContext(Index_paramsContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	opt_include() {
	    return this.getTypedRuleContext(Opt_includeContext,0);
	};

	opt_reloptions() {
	    return this.getTypedRuleContext(Opt_reloptionsContext,0);
	};

	opttablespace() {
	    return this.getTypedRuleContext(OpttablespaceContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIndexstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_uniqueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_unique;
    }

	UNIQUE() {
	    return this.getToken(PostgreSQLParser.UNIQUE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_unique(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_concurrentlyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_concurrently;
    }

	CONCURRENTLY() {
	    return this.getToken(PostgreSQLParser.CONCURRENTLY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_concurrently(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_index_name;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_index_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Access_method_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_access_method_clause;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAccess_method_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Index_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_index_params;
    }

	index_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Index_elemContext);
	    } else {
	        return this.getTypedRuleContext(Index_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIndex_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Index_elem_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_index_elem_options;
    }

	opt_collate() {
	    return this.getTypedRuleContext(Opt_collateContext,0);
	};

	opt_class() {
	    return this.getTypedRuleContext(Opt_classContext,0);
	};

	opt_asc_desc() {
	    return this.getTypedRuleContext(Opt_asc_descContext,0);
	};

	opt_nulls_order() {
	    return this.getTypedRuleContext(Opt_nulls_orderContext,0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	reloptions() {
	    return this.getTypedRuleContext(ReloptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIndex_elem_options(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Index_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_index_elem;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	index_elem_options() {
	    return this.getTypedRuleContext(Index_elem_optionsContext,0);
	};

	func_expr_windowless() {
	    return this.getTypedRuleContext(Func_expr_windowlessContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIndex_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_includeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_include;
    }

	INCLUDE() {
	    return this.getToken(PostgreSQLParser.INCLUDE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	index_including_params() {
	    return this.getTypedRuleContext(Index_including_paramsContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_include(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Index_including_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_index_including_params;
    }

	index_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Index_elemContext);
	    } else {
	        return this.getTypedRuleContext(Index_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIndex_including_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_collateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_collate;
    }

	COLLATE() {
	    return this.getToken(PostgreSQLParser.COLLATE, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_collate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_classContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_class;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_class(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_asc_descContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_asc_desc;
    }

	ASC() {
	    return this.getToken(PostgreSQLParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(PostgreSQLParser.DESC, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_asc_desc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_nulls_orderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_nulls_order;
    }

	NULLS_P() {
	    return this.getToken(PostgreSQLParser.NULLS_P, 0);
	};

	FIRST_P() {
	    return this.getToken(PostgreSQLParser.FIRST_P, 0);
	};

	LAST_P() {
	    return this.getToken(PostgreSQLParser.LAST_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_nulls_order(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatefunctionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createfunctionstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opt_or_replace() {
	    return this.getTypedRuleContext(Opt_or_replaceContext,0);
	};

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	func_args_with_defaults() {
	    return this.getTypedRuleContext(Func_args_with_defaultsContext,0);
	};

	createfunc_opt_list() {
	    return this.getTypedRuleContext(Createfunc_opt_listContext,0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	RETURNS() {
	    return this.getToken(PostgreSQLParser.RETURNS, 0);
	};

	func_return() {
	    return this.getTypedRuleContext(Func_returnContext,0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	table_func_column_list() {
	    return this.getTypedRuleContext(Table_func_column_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatefunctionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_or_replaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_or_replace;
    }

	OR() {
	    return this.getToken(PostgreSQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(PostgreSQLParser.REPLACE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_or_replace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_args;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	func_args_list() {
	    return this.getTypedRuleContext(Func_args_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_args(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_args_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_args_list;
    }

	func_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Func_argContext);
	    } else {
	        return this.getTypedRuleContext(Func_argContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_args_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_with_argtypes_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_function_with_argtypes_list;
    }

	function_with_argtypes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Function_with_argtypesContext);
	    } else {
	        return this.getTypedRuleContext(Function_with_argtypesContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunction_with_argtypes_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_with_argtypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_function_with_argtypes;
    }

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	func_args() {
	    return this.getTypedRuleContext(Func_argsContext,0);
	};

	type_func_name_keyword() {
	    return this.getTypedRuleContext(Type_func_name_keywordContext,0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	indirection() {
	    return this.getTypedRuleContext(IndirectionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunction_with_argtypes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_args_with_defaultsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_args_with_defaults;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	func_args_with_defaults_list() {
	    return this.getTypedRuleContext(Func_args_with_defaults_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_args_with_defaults(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_args_with_defaults_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_args_with_defaults_list;
    }

	func_arg_with_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Func_arg_with_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Func_arg_with_defaultContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_args_with_defaults_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_arg;
    }

	arg_class() {
	    return this.getTypedRuleContext(Arg_classContext,0);
	};

	func_type() {
	    return this.getTypedRuleContext(Func_typeContext,0);
	};

	param_name() {
	    return this.getTypedRuleContext(Param_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arg_classContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_arg_class;
    }

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	OUT_P() {
	    return this.getToken(PostgreSQLParser.OUT_P, 0);
	};

	INOUT() {
	    return this.getToken(PostgreSQLParser.INOUT, 0);
	};

	VARIADIC() {
	    return this.getToken(PostgreSQLParser.VARIADIC, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitArg_class(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Param_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_param_name;
    }

	type_function_name() {
	    return this.getTypedRuleContext(Type_function_nameContext,0);
	};

	builtin_function_name() {
	    return this.getTypedRuleContext(Builtin_function_nameContext,0);
	};

	LEFT() {
	    return this.getToken(PostgreSQLParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(PostgreSQLParser.RIGHT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitParam_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_returnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_return;
    }

	func_type() {
	    return this.getTypedRuleContext(Func_typeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_return(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_type;
    }

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	attrs() {
	    return this.getTypedRuleContext(AttrsContext,0);
	};

	PERCENT() {
	    return this.getToken(PostgreSQLParser.PERCENT, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	builtin_function_name() {
	    return this.getTypedRuleContext(Builtin_function_nameContext,0);
	};

	type_function_name() {
	    return this.getTypedRuleContext(Type_function_nameContext,0);
	};

	LEFT() {
	    return this.getToken(PostgreSQLParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(PostgreSQLParser.RIGHT, 0);
	};

	SETOF() {
	    return this.getToken(PostgreSQLParser.SETOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_arg_with_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_arg_with_default;
    }

	func_arg() {
	    return this.getTypedRuleContext(Func_argContext,0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_arg_with_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aggr_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_aggr_arg;
    }

	func_arg() {
	    return this.getTypedRuleContext(Func_argContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAggr_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aggr_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_aggr_args;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	STAR() {
	    return this.getToken(PostgreSQLParser.STAR, 0);
	};

	aggr_args_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Aggr_args_listContext);
	    } else {
	        return this.getTypedRuleContext(Aggr_args_listContext,i);
	    }
	};

	ORDER() {
	    return this.getToken(PostgreSQLParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAggr_args(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aggr_args_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_aggr_args_list;
    }

	aggr_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Aggr_argContext);
	    } else {
	        return this.getTypedRuleContext(Aggr_argContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAggr_args_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aggregate_with_argtypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_aggregate_with_argtypes;
    }

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	aggr_args() {
	    return this.getTypedRuleContext(Aggr_argsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAggregate_with_argtypes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aggregate_with_argtypes_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_aggregate_with_argtypes_list;
    }

	aggregate_with_argtypes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Aggregate_with_argtypesContext);
	    } else {
	        return this.getTypedRuleContext(Aggregate_with_argtypesContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAggregate_with_argtypes_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Createfunc_opt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createfunc_opt_list;
    }

	createfunc_opt_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Createfunc_opt_itemContext);
	    } else {
	        return this.getTypedRuleContext(Createfunc_opt_itemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatefunc_opt_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Common_func_opt_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_common_func_opt_item;
    }

	CALLED() {
	    return this.getToken(PostgreSQLParser.CALLED, 0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	NULL_P = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.NULL_P);
	    } else {
	        return this.getToken(PostgreSQLParser.NULL_P, i);
	    }
	};


	INPUT_P() {
	    return this.getToken(PostgreSQLParser.INPUT_P, 0);
	};

	RETURNS() {
	    return this.getToken(PostgreSQLParser.RETURNS, 0);
	};

	STRICT_P() {
	    return this.getToken(PostgreSQLParser.STRICT_P, 0);
	};

	IMMUTABLE() {
	    return this.getToken(PostgreSQLParser.IMMUTABLE, 0);
	};

	STABLE() {
	    return this.getToken(PostgreSQLParser.STABLE, 0);
	};

	VOLATILE() {
	    return this.getToken(PostgreSQLParser.VOLATILE, 0);
	};

	EXTERNAL() {
	    return this.getToken(PostgreSQLParser.EXTERNAL, 0);
	};

	SECURITY() {
	    return this.getToken(PostgreSQLParser.SECURITY, 0);
	};

	DEFINER() {
	    return this.getToken(PostgreSQLParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(PostgreSQLParser.INVOKER, 0);
	};

	LEAKPROOF() {
	    return this.getToken(PostgreSQLParser.LEAKPROOF, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	COST() {
	    return this.getToken(PostgreSQLParser.COST, 0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	ROWS() {
	    return this.getToken(PostgreSQLParser.ROWS, 0);
	};

	SUPPORT() {
	    return this.getToken(PostgreSQLParser.SUPPORT, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	functionsetresetclause() {
	    return this.getTypedRuleContext(FunctionsetresetclauseContext,0);
	};

	PARALLEL() {
	    return this.getToken(PostgreSQLParser.PARALLEL, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCommon_func_opt_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Createfunc_opt_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createfunc_opt_item;
    }

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	func_as() {
	    return this.getTypedRuleContext(Func_asContext,0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	nonreservedword_or_sconst() {
	    return this.getTypedRuleContext(Nonreservedword_or_sconstContext,0);
	};

	TRANSFORM() {
	    return this.getToken(PostgreSQLParser.TRANSFORM, 0);
	};

	transform_type_list() {
	    return this.getTypedRuleContext(Transform_type_listContext,0);
	};

	WINDOW() {
	    return this.getToken(PostgreSQLParser.WINDOW, 0);
	};

	common_func_opt_item() {
	    return this.getTypedRuleContext(Common_func_opt_itemContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatefunc_opt_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_asContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_as;
        this.Definition = null
        this.def = null;
    }

	sconst = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SconstContext);
	    } else {
	        return this.getTypedRuleContext(SconstContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_as(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Transform_type_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_transform_type_list;
    }

	FOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.FOR);
	    } else {
	        return this.getToken(PostgreSQLParser.FOR, i);
	    }
	};


	TYPE_P = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.TYPE_P);
	    } else {
	        return this.getToken(PostgreSQLParser.TYPE_P, i);
	    }
	};


	typename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypenameContext);
	    } else {
	        return this.getTypedRuleContext(TypenameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTransform_type_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_definition;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	definition() {
	    return this.getTypedRuleContext(DefinitionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_func_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_table_func_column;
    }

	param_name() {
	    return this.getTypedRuleContext(Param_nameContext,0);
	};

	func_type() {
	    return this.getTypedRuleContext(Func_typeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTable_func_column(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_func_column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_table_func_column_list;
    }

	table_func_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_func_columnContext);
	    } else {
	        return this.getTypedRuleContext(Table_func_columnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTable_func_column_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterfunctionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterfunctionstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	function_with_argtypes() {
	    return this.getTypedRuleContext(Function_with_argtypesContext,0);
	};

	alterfunc_opt_list() {
	    return this.getTypedRuleContext(Alterfunc_opt_listContext,0);
	};

	opt_restrict() {
	    return this.getTypedRuleContext(Opt_restrictContext,0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterfunctionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alterfunc_opt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterfunc_opt_list;
    }

	common_func_opt_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_func_opt_itemContext);
	    } else {
	        return this.getTypedRuleContext(Common_func_opt_itemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterfunc_opt_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_restrictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_restrict;
    }

	RESTRICT() {
	    return this.getToken(PostgreSQLParser.RESTRICT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_restrict(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemovefuncstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_removefuncstmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes_list() {
	    return this.getTypedRuleContext(Function_with_argtypes_listContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRemovefuncstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemoveaggrstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_removeaggrstmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	AGGREGATE() {
	    return this.getToken(PostgreSQLParser.AGGREGATE, 0);
	};

	aggregate_with_argtypes_list() {
	    return this.getTypedRuleContext(Aggregate_with_argtypes_listContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRemoveaggrstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemoveoperstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_removeoperstmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	operator_with_argtypes_list() {
	    return this.getTypedRuleContext(Operator_with_argtypes_listContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRemoveoperstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Oper_argtypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_oper_argtypes;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	typename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypenameContext);
	    } else {
	        return this.getTypedRuleContext(TypenameContext,i);
	    }
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	NONE() {
	    return this.getToken(PostgreSQLParser.NONE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOper_argtypes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Any_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_any_operator;
    }

	all_op() {
	    return this.getTypedRuleContext(All_opContext,0);
	};

	colid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColidContext);
	    } else {
	        return this.getTypedRuleContext(ColidContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.DOT);
	    } else {
	        return this.getToken(PostgreSQLParser.DOT, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAny_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Operator_with_argtypes_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_operator_with_argtypes_list;
    }

	operator_with_argtypes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Operator_with_argtypesContext);
	    } else {
	        return this.getTypedRuleContext(Operator_with_argtypesContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOperator_with_argtypes_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Operator_with_argtypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_operator_with_argtypes;
    }

	any_operator() {
	    return this.getTypedRuleContext(Any_operatorContext,0);
	};

	oper_argtypes() {
	    return this.getTypedRuleContext(Oper_argtypesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOperator_with_argtypes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DostmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dostmt;
    }

	DO() {
	    return this.getToken(PostgreSQLParser.DO, 0);
	};

	dostmt_opt_list() {
	    return this.getTypedRuleContext(Dostmt_opt_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDostmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dostmt_opt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dostmt_opt_list;
    }

	dostmt_opt_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Dostmt_opt_itemContext);
	    } else {
	        return this.getTypedRuleContext(Dostmt_opt_itemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDostmt_opt_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dostmt_opt_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dostmt_opt_item;
    }

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	nonreservedword_or_sconst() {
	    return this.getTypedRuleContext(Nonreservedword_or_sconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDostmt_opt_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatecaststmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createcaststmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	CAST() {
	    return this.getToken(PostgreSQLParser.CAST, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	typename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypenameContext);
	    } else {
	        return this.getTypedRuleContext(TypenameContext,i);
	    }
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes() {
	    return this.getTypedRuleContext(Function_with_argtypesContext,0);
	};

	cast_context() {
	    return this.getTypedRuleContext(Cast_contextContext,0);
	};

	WITHOUT() {
	    return this.getToken(PostgreSQLParser.WITHOUT, 0);
	};

	INOUT() {
	    return this.getToken(PostgreSQLParser.INOUT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatecaststmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cast_contextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_cast_context;
    }

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	IMPLICIT_P() {
	    return this.getToken(PostgreSQLParser.IMPLICIT_P, 0);
	};

	ASSIGNMENT() {
	    return this.getToken(PostgreSQLParser.ASSIGNMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCast_context(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropcaststmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dropcaststmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	CAST() {
	    return this.getToken(PostgreSQLParser.CAST, 0);
	};

	opt_if_exists() {
	    return this.getTypedRuleContext(Opt_if_existsContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	typename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypenameContext);
	    } else {
	        return this.getTypedRuleContext(TypenameContext,i);
	    }
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDropcaststmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_if_existsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_if_exists;
    }

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_if_exists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatetransformstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createtransformstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opt_or_replace() {
	    return this.getTypedRuleContext(Opt_or_replaceContext,0);
	};

	TRANSFORM() {
	    return this.getToken(PostgreSQLParser.TRANSFORM, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	transform_element_list() {
	    return this.getTypedRuleContext(Transform_element_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatetransformstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Transform_element_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_transform_element_list;
    }

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	SQL_P = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.SQL_P);
	    } else {
	        return this.getToken(PostgreSQLParser.SQL_P, i);
	    }
	};


	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.WITH);
	    } else {
	        return this.getToken(PostgreSQLParser.WITH, i);
	    }
	};


	FUNCTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.FUNCTION);
	    } else {
	        return this.getToken(PostgreSQLParser.FUNCTION, i);
	    }
	};


	function_with_argtypes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Function_with_argtypesContext);
	    } else {
	        return this.getTypedRuleContext(Function_with_argtypesContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTransform_element_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DroptransformstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_droptransformstmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	TRANSFORM() {
	    return this.getToken(PostgreSQLParser.TRANSFORM, 0);
	};

	opt_if_exists() {
	    return this.getTypedRuleContext(Opt_if_existsContext,0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDroptransformstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReindexstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reindexstmt;
    }

	REINDEX() {
	    return this.getToken(PostgreSQLParser.REINDEX, 0);
	};

	reindex_target_type() {
	    return this.getTypedRuleContext(Reindex_target_typeContext,0);
	};

	opt_concurrently() {
	    return this.getTypedRuleContext(Opt_concurrentlyContext,0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	reindex_target_multitable() {
	    return this.getTypedRuleContext(Reindex_target_multitableContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	reindex_option_list() {
	    return this.getTypedRuleContext(Reindex_option_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReindexstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Reindex_target_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reindex_target_type;
    }

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReindex_target_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Reindex_target_multitableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reindex_target_multitable;
    }

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	SYSTEM_P() {
	    return this.getToken(PostgreSQLParser.SYSTEM_P, 0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReindex_target_multitable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Reindex_option_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reindex_option_list;
    }

	reindex_option_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Reindex_option_elemContext);
	    } else {
	        return this.getTypedRuleContext(Reindex_option_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReindex_option_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Reindex_option_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reindex_option_elem;
    }

	VERBOSE() {
	    return this.getToken(PostgreSQLParser.VERBOSE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReindex_option_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltertblspcstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altertblspcstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	reloptions() {
	    return this.getTypedRuleContext(ReloptionsContext,0);
	};

	RESET() {
	    return this.getToken(PostgreSQLParser.RESET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltertblspcstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RenamestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_renamestmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	AGGREGATE() {
	    return this.getToken(PostgreSQLParser.AGGREGATE, 0);
	};

	aggregate_with_argtypes() {
	    return this.getTypedRuleContext(Aggregate_with_argtypesContext,0);
	};

	RENAME() {
	    return this.getToken(PostgreSQLParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COLLATION() {
	    return this.getToken(PostgreSQLParser.COLLATION, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	CONVERSION_P() {
	    return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	CONSTRAINT() {
	    return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	DATA_P() {
	    return this.getToken(PostgreSQLParser.DATA_P, 0);
	};

	WRAPPER() {
	    return this.getToken(PostgreSQLParser.WRAPPER, 0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes() {
	    return this.getTypedRuleContext(Function_with_argtypesContext,0);
	};

	GROUP_P() {
	    return this.getToken(PostgreSQLParser.GROUP_P, 0);
	};

	roleid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoleidContext);
	    } else {
	        return this.getTypedRuleContext(RoleidContext,i);
	    }
	};

	opt_procedural() {
	    return this.getTypedRuleContext(Opt_proceduralContext,0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	CLASS() {
	    return this.getToken(PostgreSQLParser.CLASS, 0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	FAMILY() {
	    return this.getToken(PostgreSQLParser.FAMILY, 0);
	};

	POLICY() {
	    return this.getToken(PostgreSQLParser.POLICY, 0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	PUBLICATION() {
	    return this.getToken(PostgreSQLParser.PUBLICATION, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	relation_expr() {
	    return this.getTypedRuleContext(Relation_exprContext,0);
	};

	SEQUENCE() {
	    return this.getToken(PostgreSQLParser.SEQUENCE, 0);
	};

	VIEW() {
	    return this.getToken(PostgreSQLParser.VIEW, 0);
	};

	MATERIALIZED() {
	    return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
	};

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	opt_column() {
	    return this.getTypedRuleContext(Opt_columnContext,0);
	};

	RULE() {
	    return this.getToken(PostgreSQLParser.RULE, 0);
	};

	TRIGGER() {
	    return this.getToken(PostgreSQLParser.TRIGGER, 0);
	};

	EVENT() {
	    return this.getToken(PostgreSQLParser.EVENT, 0);
	};

	ROLE() {
	    return this.getToken(PostgreSQLParser.ROLE, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	STATISTICS() {
	    return this.getToken(PostgreSQLParser.STATISTICS, 0);
	};

	TEXT_P() {
	    return this.getToken(PostgreSQLParser.TEXT_P, 0);
	};

	SEARCH() {
	    return this.getToken(PostgreSQLParser.SEARCH, 0);
	};

	PARSER() {
	    return this.getToken(PostgreSQLParser.PARSER, 0);
	};

	DICTIONARY() {
	    return this.getToken(PostgreSQLParser.DICTIONARY, 0);
	};

	TEMPLATE() {
	    return this.getToken(PostgreSQLParser.TEMPLATE, 0);
	};

	CONFIGURATION() {
	    return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(PostgreSQLParser.ATTRIBUTE, 0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRenamestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_column;
    }

	COLUMN() {
	    return this.getToken(PostgreSQLParser.COLUMN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_column(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_set_dataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_set_data;
    }

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	DATA_P() {
	    return this.getToken(PostgreSQLParser.DATA_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_set_data(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterobjectdependsstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterobjectdependsstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes() {
	    return this.getTypedRuleContext(Function_with_argtypesContext,0);
	};

	opt_no() {
	    return this.getTypedRuleContext(Opt_noContext,0);
	};

	DEPENDS() {
	    return this.getToken(PostgreSQLParser.DEPENDS, 0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.ON);
	    } else {
	        return this.getToken(PostgreSQLParser.ON, i);
	    }
	};


	EXTENSION() {
	    return this.getToken(PostgreSQLParser.EXTENSION, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	TRIGGER() {
	    return this.getToken(PostgreSQLParser.TRIGGER, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	MATERIALIZED() {
	    return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(PostgreSQLParser.VIEW, 0);
	};

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterobjectdependsstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_noContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_no;
    }

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_no(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterobjectschemastmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterobjectschemastmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	AGGREGATE() {
	    return this.getToken(PostgreSQLParser.AGGREGATE, 0);
	};

	aggregate_with_argtypes() {
	    return this.getTypedRuleContext(Aggregate_with_argtypesContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COLLATION() {
	    return this.getToken(PostgreSQLParser.COLLATION, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	CONVERSION_P() {
	    return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	EXTENSION() {
	    return this.getToken(PostgreSQLParser.EXTENSION, 0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes() {
	    return this.getTypedRuleContext(Function_with_argtypesContext,0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	operator_with_argtypes() {
	    return this.getTypedRuleContext(Operator_with_argtypesContext,0);
	};

	CLASS() {
	    return this.getToken(PostgreSQLParser.CLASS, 0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	FAMILY() {
	    return this.getToken(PostgreSQLParser.FAMILY, 0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	relation_expr() {
	    return this.getTypedRuleContext(Relation_exprContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	STATISTICS() {
	    return this.getToken(PostgreSQLParser.STATISTICS, 0);
	};

	TEXT_P() {
	    return this.getToken(PostgreSQLParser.TEXT_P, 0);
	};

	SEARCH() {
	    return this.getToken(PostgreSQLParser.SEARCH, 0);
	};

	PARSER() {
	    return this.getToken(PostgreSQLParser.PARSER, 0);
	};

	DICTIONARY() {
	    return this.getToken(PostgreSQLParser.DICTIONARY, 0);
	};

	TEMPLATE() {
	    return this.getToken(PostgreSQLParser.TEMPLATE, 0);
	};

	CONFIGURATION() {
	    return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
	};

	SEQUENCE() {
	    return this.getToken(PostgreSQLParser.SEQUENCE, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	VIEW() {
	    return this.getToken(PostgreSQLParser.VIEW, 0);
	};

	MATERIALIZED() {
	    return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterobjectschemastmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlteroperatorstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alteroperatorstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	operator_with_argtypes() {
	    return this.getTypedRuleContext(Operator_with_argtypesContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	operator_def_list() {
	    return this.getTypedRuleContext(Operator_def_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlteroperatorstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Operator_def_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_operator_def_list;
    }

	operator_def_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Operator_def_elemContext);
	    } else {
	        return this.getTypedRuleContext(Operator_def_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOperator_def_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Operator_def_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_operator_def_elem;
    }

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	NONE() {
	    return this.getToken(PostgreSQLParser.NONE, 0);
	};

	operator_def_arg() {
	    return this.getTypedRuleContext(Operator_def_argContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOperator_def_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Operator_def_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_operator_def_arg;
    }

	func_type() {
	    return this.getTypedRuleContext(Func_typeContext,0);
	};

	reserved_keyword() {
	    return this.getTypedRuleContext(Reserved_keywordContext,0);
	};

	qual_all_op() {
	    return this.getTypedRuleContext(Qual_all_opContext,0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOperator_def_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltertypestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altertypestmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	operator_def_list() {
	    return this.getTypedRuleContext(Operator_def_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltertypestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterownerstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterownerstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	AGGREGATE() {
	    return this.getToken(PostgreSQLParser.AGGREGATE, 0);
	};

	aggregate_with_argtypes() {
	    return this.getTypedRuleContext(Aggregate_with_argtypesContext,0);
	};

	OWNER() {
	    return this.getToken(PostgreSQLParser.OWNER, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	COLLATION() {
	    return this.getToken(PostgreSQLParser.COLLATION, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	CONVERSION_P() {
	    return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	function_with_argtypes() {
	    return this.getTypedRuleContext(Function_with_argtypesContext,0);
	};

	opt_procedural() {
	    return this.getTypedRuleContext(Opt_proceduralContext,0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	LARGE_P() {
	    return this.getToken(PostgreSQLParser.LARGE_P, 0);
	};

	OBJECT_P() {
	    return this.getToken(PostgreSQLParser.OBJECT_P, 0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	operator_with_argtypes() {
	    return this.getTypedRuleContext(Operator_with_argtypesContext,0);
	};

	CLASS() {
	    return this.getToken(PostgreSQLParser.CLASS, 0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	FAMILY() {
	    return this.getToken(PostgreSQLParser.FAMILY, 0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	STATISTICS() {
	    return this.getToken(PostgreSQLParser.STATISTICS, 0);
	};

	TEXT_P() {
	    return this.getToken(PostgreSQLParser.TEXT_P, 0);
	};

	SEARCH() {
	    return this.getToken(PostgreSQLParser.SEARCH, 0);
	};

	DICTIONARY() {
	    return this.getToken(PostgreSQLParser.DICTIONARY, 0);
	};

	CONFIGURATION() {
	    return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	DATA_P() {
	    return this.getToken(PostgreSQLParser.DATA_P, 0);
	};

	WRAPPER() {
	    return this.getToken(PostgreSQLParser.WRAPPER, 0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	EVENT() {
	    return this.getToken(PostgreSQLParser.EVENT, 0);
	};

	TRIGGER() {
	    return this.getToken(PostgreSQLParser.TRIGGER, 0);
	};

	PUBLICATION() {
	    return this.getToken(PostgreSQLParser.PUBLICATION, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterownerstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatepublicationstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createpublicationstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	PUBLICATION() {
	    return this.getToken(PostgreSQLParser.PUBLICATION, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_publication_for_tables() {
	    return this.getTypedRuleContext(Opt_publication_for_tablesContext,0);
	};

	opt_definition() {
	    return this.getTypedRuleContext(Opt_definitionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatepublicationstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_publication_for_tablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_publication_for_tables;
    }

	publication_for_tables() {
	    return this.getTypedRuleContext(Publication_for_tablesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_publication_for_tables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Publication_for_tablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_publication_for_tables;
    }

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	relation_expr_list() {
	    return this.getTypedRuleContext(Relation_expr_listContext,0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	TABLES() {
	    return this.getToken(PostgreSQLParser.TABLES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPublication_for_tables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterpublicationstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterpublicationstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	PUBLICATION() {
	    return this.getToken(PostgreSQLParser.PUBLICATION, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	definition() {
	    return this.getTypedRuleContext(DefinitionContext,0);
	};

	ADD_P() {
	    return this.getToken(PostgreSQLParser.ADD_P, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	relation_expr_list() {
	    return this.getTypedRuleContext(Relation_expr_listContext,0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterpublicationstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatesubscriptionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createsubscriptionstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	CONNECTION() {
	    return this.getToken(PostgreSQLParser.CONNECTION, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	PUBLICATION() {
	    return this.getToken(PostgreSQLParser.PUBLICATION, 0);
	};

	publication_name_list() {
	    return this.getTypedRuleContext(Publication_name_listContext,0);
	};

	opt_definition() {
	    return this.getTypedRuleContext(Opt_definitionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatesubscriptionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Publication_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_publication_name_list;
    }

	publication_name_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Publication_name_itemContext);
	    } else {
	        return this.getTypedRuleContext(Publication_name_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPublication_name_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Publication_name_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_publication_name_item;
    }

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPublication_name_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltersubscriptionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altersubscriptionstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	definition() {
	    return this.getTypedRuleContext(DefinitionContext,0);
	};

	CONNECTION() {
	    return this.getToken(PostgreSQLParser.CONNECTION, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	REFRESH() {
	    return this.getToken(PostgreSQLParser.REFRESH, 0);
	};

	PUBLICATION() {
	    return this.getToken(PostgreSQLParser.PUBLICATION, 0);
	};

	opt_definition() {
	    return this.getTypedRuleContext(Opt_definitionContext,0);
	};

	publication_name_list() {
	    return this.getTypedRuleContext(Publication_name_listContext,0);
	};

	ENABLE_P() {
	    return this.getToken(PostgreSQLParser.ENABLE_P, 0);
	};

	DISABLE_P() {
	    return this.getToken(PostgreSQLParser.DISABLE_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltersubscriptionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropsubscriptionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dropsubscriptionstmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDropsubscriptionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RulestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rulestmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opt_or_replace() {
	    return this.getTypedRuleContext(Opt_or_replaceContext,0);
	};

	RULE() {
	    return this.getToken(PostgreSQLParser.RULE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	event() {
	    return this.getTypedRuleContext(EventContext,0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	DO() {
	    return this.getToken(PostgreSQLParser.DO, 0);
	};

	opt_instead() {
	    return this.getTypedRuleContext(Opt_insteadContext,0);
	};

	ruleactionlist() {
	    return this.getTypedRuleContext(RuleactionlistContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRulestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuleactionlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_ruleactionlist;
    }

	NOTHING() {
	    return this.getToken(PostgreSQLParser.NOTHING, 0);
	};

	ruleactionstmt() {
	    return this.getTypedRuleContext(RuleactionstmtContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	ruleactionmulti() {
	    return this.getTypedRuleContext(RuleactionmultiContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRuleactionlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuleactionmultiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_ruleactionmulti;
    }

	ruleactionstmtOrEmpty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RuleactionstmtOrEmptyContext);
	    } else {
	        return this.getTypedRuleContext(RuleactionstmtOrEmptyContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.SEMI);
	    } else {
	        return this.getToken(PostgreSQLParser.SEMI, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRuleactionmulti(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuleactionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_ruleactionstmt;
    }

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	insertstmt() {
	    return this.getTypedRuleContext(InsertstmtContext,0);
	};

	updatestmt() {
	    return this.getTypedRuleContext(UpdatestmtContext,0);
	};

	deletestmt() {
	    return this.getTypedRuleContext(DeletestmtContext,0);
	};

	notifystmt() {
	    return this.getTypedRuleContext(NotifystmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRuleactionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuleactionstmtOrEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_ruleactionstmtOrEmpty;
    }

	ruleactionstmt() {
	    return this.getTypedRuleContext(RuleactionstmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRuleactionstmtOrEmpty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_event;
    }

	SELECT() {
	    return this.getToken(PostgreSQLParser.SELECT, 0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	DELETE_P() {
	    return this.getToken(PostgreSQLParser.DELETE_P, 0);
	};

	INSERT() {
	    return this.getToken(PostgreSQLParser.INSERT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_insteadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_instead;
    }

	INSTEAD() {
	    return this.getToken(PostgreSQLParser.INSTEAD, 0);
	};

	ALSO() {
	    return this.getToken(PostgreSQLParser.ALSO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_instead(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NotifystmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_notifystmt;
    }

	NOTIFY() {
	    return this.getToken(PostgreSQLParser.NOTIFY, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	notify_payload() {
	    return this.getTypedRuleContext(Notify_payloadContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitNotifystmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Notify_payloadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_notify_payload;
    }

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitNotify_payload(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListenstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_listenstmt;
    }

	LISTEN() {
	    return this.getToken(PostgreSQLParser.LISTEN, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitListenstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnlistenstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_unlistenstmt;
    }

	UNLISTEN() {
	    return this.getToken(PostgreSQLParser.UNLISTEN, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	STAR() {
	    return this.getToken(PostgreSQLParser.STAR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitUnlistenstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_transactionstmt;
    }

	ABORT_P() {
	    return this.getToken(PostgreSQLParser.ABORT_P, 0);
	};

	opt_transaction() {
	    return this.getTypedRuleContext(Opt_transactionContext,0);
	};

	opt_transaction_chain() {
	    return this.getTypedRuleContext(Opt_transaction_chainContext,0);
	};

	BEGIN_P() {
	    return this.getToken(PostgreSQLParser.BEGIN_P, 0);
	};

	transaction_mode_list_or_empty() {
	    return this.getTypedRuleContext(Transaction_mode_list_or_emptyContext,0);
	};

	START() {
	    return this.getToken(PostgreSQLParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(PostgreSQLParser.TRANSACTION, 0);
	};

	COMMIT() {
	    return this.getToken(PostgreSQLParser.COMMIT, 0);
	};

	END_P() {
	    return this.getToken(PostgreSQLParser.END_P, 0);
	};

	ROLLBACK() {
	    return this.getToken(PostgreSQLParser.ROLLBACK, 0);
	};

	SAVEPOINT() {
	    return this.getToken(PostgreSQLParser.SAVEPOINT, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	RELEASE() {
	    return this.getToken(PostgreSQLParser.RELEASE, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	PREPARE() {
	    return this.getToken(PostgreSQLParser.PREPARE, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	PREPARED() {
	    return this.getToken(PostgreSQLParser.PREPARED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTransactionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_transactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_transaction;
    }

	WORK() {
	    return this.getToken(PostgreSQLParser.WORK, 0);
	};

	TRANSACTION() {
	    return this.getToken(PostgreSQLParser.TRANSACTION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_transaction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Transaction_mode_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_transaction_mode_item;
    }

	ISOLATION() {
	    return this.getToken(PostgreSQLParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(PostgreSQLParser.LEVEL, 0);
	};

	iso_level() {
	    return this.getTypedRuleContext(Iso_levelContext,0);
	};

	READ() {
	    return this.getToken(PostgreSQLParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(PostgreSQLParser.ONLY, 0);
	};

	WRITE() {
	    return this.getToken(PostgreSQLParser.WRITE, 0);
	};

	DEFERRABLE() {
	    return this.getToken(PostgreSQLParser.DEFERRABLE, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTransaction_mode_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Transaction_mode_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_transaction_mode_list;
    }

	transaction_mode_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Transaction_mode_itemContext);
	    } else {
	        return this.getTypedRuleContext(Transaction_mode_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTransaction_mode_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Transaction_mode_list_or_emptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_transaction_mode_list_or_empty;
    }

	transaction_mode_list() {
	    return this.getTypedRuleContext(Transaction_mode_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTransaction_mode_list_or_empty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_transaction_chainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_transaction_chain;
    }

	AND() {
	    return this.getToken(PostgreSQLParser.AND, 0);
	};

	CHAIN() {
	    return this.getToken(PostgreSQLParser.CHAIN, 0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_transaction_chain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_viewstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opttemp() {
	    return this.getTypedRuleContext(OpttempContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	opt_check_option() {
	    return this.getTypedRuleContext(Opt_check_optionContext,0);
	};

	VIEW() {
	    return this.getToken(PostgreSQLParser.VIEW, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	opt_column_list() {
	    return this.getTypedRuleContext(Opt_column_listContext,0);
	};

	opt_reloptions() {
	    return this.getTypedRuleContext(Opt_reloptionsContext,0);
	};

	RECURSIVE() {
	    return this.getToken(PostgreSQLParser.RECURSIVE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	columnlist() {
	    return this.getTypedRuleContext(ColumnlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	OR() {
	    return this.getToken(PostgreSQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(PostgreSQLParser.REPLACE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitViewstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_check_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_check_option;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	CHECK() {
	    return this.getToken(PostgreSQLParser.CHECK, 0);
	};

	OPTION() {
	    return this.getToken(PostgreSQLParser.OPTION, 0);
	};

	CASCADED() {
	    return this.getToken(PostgreSQLParser.CASCADED, 0);
	};

	LOCAL() {
	    return this.getToken(PostgreSQLParser.LOCAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_check_option(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_loadstmt;
    }

	LOAD() {
	    return this.getToken(PostgreSQLParser.LOAD, 0);
	};

	file_name() {
	    return this.getTypedRuleContext(File_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitLoadstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatedbstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createdbstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	createdb_opt_list() {
	    return this.getTypedRuleContext(Createdb_opt_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatedbstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Createdb_opt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createdb_opt_list;
    }

	createdb_opt_items() {
	    return this.getTypedRuleContext(Createdb_opt_itemsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatedb_opt_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Createdb_opt_itemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createdb_opt_items;
    }

	createdb_opt_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Createdb_opt_itemContext);
	    } else {
	        return this.getTypedRuleContext(Createdb_opt_itemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatedb_opt_items(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Createdb_opt_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createdb_opt_item;
    }

	createdb_opt_name() {
	    return this.getTypedRuleContext(Createdb_opt_nameContext,0);
	};

	opt_equal() {
	    return this.getTypedRuleContext(Opt_equalContext,0);
	};

	signediconst() {
	    return this.getTypedRuleContext(SignediconstContext,0);
	};

	opt_boolean_or_string() {
	    return this.getTypedRuleContext(Opt_boolean_or_stringContext,0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatedb_opt_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Createdb_opt_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createdb_opt_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CONNECTION() {
	    return this.getToken(PostgreSQLParser.CONNECTION, 0);
	};

	LIMIT() {
	    return this.getToken(PostgreSQLParser.LIMIT, 0);
	};

	ENCODING() {
	    return this.getToken(PostgreSQLParser.ENCODING, 0);
	};

	LOCATION() {
	    return this.getToken(PostgreSQLParser.LOCATION, 0);
	};

	OWNER() {
	    return this.getToken(PostgreSQLParser.OWNER, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	TEMPLATE() {
	    return this.getToken(PostgreSQLParser.TEMPLATE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatedb_opt_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_equalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_equal;
    }

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_equal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterdatabasestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterdatabasestmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	createdb_opt_list() {
	    return this.getTypedRuleContext(Createdb_opt_listContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterdatabasestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterdatabasesetstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterdatabasesetstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	setresetclause() {
	    return this.getTypedRuleContext(SetresetclauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterdatabasesetstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropdbstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_dropdbstmt;
    }

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	drop_option_list() {
	    return this.getTypedRuleContext(Drop_option_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDropdbstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_option_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_drop_option_list;
    }

	drop_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Drop_optionContext);
	    } else {
	        return this.getTypedRuleContext(Drop_optionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDrop_option_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_drop_option;
    }

	FORCE() {
	    return this.getToken(PostgreSQLParser.FORCE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDrop_option(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltercollationstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altercollationstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	COLLATION() {
	    return this.getToken(PostgreSQLParser.COLLATION, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	REFRESH() {
	    return this.getToken(PostgreSQLParser.REFRESH, 0);
	};

	VERSION_P() {
	    return this.getToken(PostgreSQLParser.VERSION_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltercollationstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltersystemstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altersystemstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	SYSTEM_P() {
	    return this.getToken(PostgreSQLParser.SYSTEM_P, 0);
	};

	generic_set() {
	    return this.getTypedRuleContext(Generic_setContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	RESET() {
	    return this.getToken(PostgreSQLParser.RESET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltersystemstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatedomainstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createdomainstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	opt_as() {
	    return this.getTypedRuleContext(Opt_asContext,0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	colquallist() {
	    return this.getTypedRuleContext(ColquallistContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreatedomainstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterdomainstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alterdomainstmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	alter_column_default() {
	    return this.getTypedRuleContext(Alter_column_defaultContext,0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	ADD_P() {
	    return this.getToken(PostgreSQLParser.ADD_P, 0);
	};

	tableconstraint() {
	    return this.getTypedRuleContext(TableconstraintContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_drop_behavior() {
	    return this.getTypedRuleContext(Opt_drop_behaviorContext,0);
	};

	VALIDATE() {
	    return this.getToken(PostgreSQLParser.VALIDATE, 0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlterdomainstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_asContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_as;
    }

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_as(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltertsdictionarystmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altertsdictionarystmt;
    }

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	TEXT_P() {
	    return this.getToken(PostgreSQLParser.TEXT_P, 0);
	};

	SEARCH() {
	    return this.getToken(PostgreSQLParser.SEARCH, 0);
	};

	DICTIONARY() {
	    return this.getToken(PostgreSQLParser.DICTIONARY, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	definition() {
	    return this.getTypedRuleContext(DefinitionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltertsdictionarystmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltertsconfigurationstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_altertsconfigurationstmt;
    }

	ALTER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.ALTER);
	    } else {
	        return this.getToken(PostgreSQLParser.ALTER, i);
	    }
	};


	TEXT_P() {
	    return this.getToken(PostgreSQLParser.TEXT_P, 0);
	};

	SEARCH() {
	    return this.getToken(PostgreSQLParser.SEARCH, 0);
	};

	CONFIGURATION() {
	    return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
	};

	any_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_nameContext);
	    } else {
	        return this.getTypedRuleContext(Any_nameContext,i);
	    }
	};

	ADD_P() {
	    return this.getToken(PostgreSQLParser.ADD_P, 0);
	};

	MAPPING() {
	    return this.getToken(PostgreSQLParser.MAPPING, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	any_with() {
	    return this.getTypedRuleContext(Any_withContext,0);
	};

	any_name_list() {
	    return this.getTypedRuleContext(Any_name_listContext,0);
	};

	REPLACE() {
	    return this.getToken(PostgreSQLParser.REPLACE, 0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAltertsconfigurationstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Any_withContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_any_with;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAny_with(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateconversionstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_createconversionstmt;
    }

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opt_default() {
	    return this.getTypedRuleContext(Opt_defaultContext,0);
	};

	CONVERSION_P() {
	    return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
	};

	any_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_nameContext);
	    } else {
	        return this.getTypedRuleContext(Any_nameContext,i);
	    }
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	sconst = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SconstContext);
	    } else {
	        return this.getTypedRuleContext(SconstContext,i);
	    }
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCreateconversionstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClusterstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_clusterstmt;
    }

	CLUSTER() {
	    return this.getToken(PostgreSQLParser.CLUSTER, 0);
	};

	opt_verbose() {
	    return this.getTypedRuleContext(Opt_verboseContext,0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	cluster_index_specification() {
	    return this.getTypedRuleContext(Cluster_index_specificationContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitClusterstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cluster_index_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_cluster_index_specification;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCluster_index_specification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VacuumstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_vacuumstmt;
    }

	VACUUM() {
	    return this.getToken(PostgreSQLParser.VACUUM, 0);
	};

	opt_full() {
	    return this.getTypedRuleContext(Opt_fullContext,0);
	};

	opt_freeze() {
	    return this.getTypedRuleContext(Opt_freezeContext,0);
	};

	opt_verbose() {
	    return this.getTypedRuleContext(Opt_verboseContext,0);
	};

	opt_analyze() {
	    return this.getTypedRuleContext(Opt_analyzeContext,0);
	};

	opt_vacuum_relation_list() {
	    return this.getTypedRuleContext(Opt_vacuum_relation_listContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	vac_analyze_option_list() {
	    return this.getTypedRuleContext(Vac_analyze_option_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVacuumstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnalyzestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_analyzestmt;
    }

	analyze_keyword() {
	    return this.getTypedRuleContext(Analyze_keywordContext,0);
	};

	opt_verbose() {
	    return this.getTypedRuleContext(Opt_verboseContext,0);
	};

	opt_vacuum_relation_list() {
	    return this.getTypedRuleContext(Opt_vacuum_relation_listContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	vac_analyze_option_list() {
	    return this.getTypedRuleContext(Vac_analyze_option_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAnalyzestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Vac_analyze_option_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_vac_analyze_option_list;
    }

	vac_analyze_option_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Vac_analyze_option_elemContext);
	    } else {
	        return this.getTypedRuleContext(Vac_analyze_option_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVac_analyze_option_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Analyze_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_analyze_keyword;
    }

	ANALYZE() {
	    return this.getToken(PostgreSQLParser.ANALYZE, 0);
	};

	ANALYSE() {
	    return this.getToken(PostgreSQLParser.ANALYSE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAnalyze_keyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Vac_analyze_option_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_vac_analyze_option_elem;
    }

	vac_analyze_option_name() {
	    return this.getTypedRuleContext(Vac_analyze_option_nameContext,0);
	};

	vac_analyze_option_arg() {
	    return this.getTypedRuleContext(Vac_analyze_option_argContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVac_analyze_option_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Vac_analyze_option_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_vac_analyze_option_name;
    }

	nonreservedword() {
	    return this.getTypedRuleContext(NonreservedwordContext,0);
	};

	analyze_keyword() {
	    return this.getTypedRuleContext(Analyze_keywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVac_analyze_option_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Vac_analyze_option_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_vac_analyze_option_arg;
    }

	opt_boolean_or_string() {
	    return this.getTypedRuleContext(Opt_boolean_or_stringContext,0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVac_analyze_option_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_analyzeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_analyze;
    }

	analyze_keyword() {
	    return this.getTypedRuleContext(Analyze_keywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_analyze(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_verboseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_verbose;
    }

	VERBOSE() {
	    return this.getToken(PostgreSQLParser.VERBOSE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_verbose(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_fullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_full;
    }

	FULL() {
	    return this.getToken(PostgreSQLParser.FULL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_full(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_freezeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_freeze;
    }

	FREEZE() {
	    return this.getToken(PostgreSQLParser.FREEZE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_freeze(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_name_list;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_name_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Vacuum_relationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_vacuum_relation;
    }

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	opt_name_list() {
	    return this.getTypedRuleContext(Opt_name_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVacuum_relation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Vacuum_relation_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_vacuum_relation_list;
    }

	vacuum_relation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Vacuum_relationContext);
	    } else {
	        return this.getTypedRuleContext(Vacuum_relationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitVacuum_relation_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_vacuum_relation_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_vacuum_relation_list;
    }

	vacuum_relation_list() {
	    return this.getTypedRuleContext(Vacuum_relation_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_vacuum_relation_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplainstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_explainstmt;
    }

	EXPLAIN() {
	    return this.getToken(PostgreSQLParser.EXPLAIN, 0);
	};

	explainablestmt() {
	    return this.getTypedRuleContext(ExplainablestmtContext,0);
	};

	analyze_keyword() {
	    return this.getTypedRuleContext(Analyze_keywordContext,0);
	};

	opt_verbose() {
	    return this.getTypedRuleContext(Opt_verboseContext,0);
	};

	VERBOSE() {
	    return this.getToken(PostgreSQLParser.VERBOSE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	explain_option_list() {
	    return this.getTypedRuleContext(Explain_option_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExplainstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplainablestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_explainablestmt;
    }

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	insertstmt() {
	    return this.getTypedRuleContext(InsertstmtContext,0);
	};

	updatestmt() {
	    return this.getTypedRuleContext(UpdatestmtContext,0);
	};

	deletestmt() {
	    return this.getTypedRuleContext(DeletestmtContext,0);
	};

	declarecursorstmt() {
	    return this.getTypedRuleContext(DeclarecursorstmtContext,0);
	};

	createasstmt() {
	    return this.getTypedRuleContext(CreateasstmtContext,0);
	};

	creatematviewstmt() {
	    return this.getTypedRuleContext(CreatematviewstmtContext,0);
	};

	refreshmatviewstmt() {
	    return this.getTypedRuleContext(RefreshmatviewstmtContext,0);
	};

	executestmt() {
	    return this.getTypedRuleContext(ExecutestmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExplainablestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Explain_option_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_explain_option_list;
    }

	explain_option_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Explain_option_elemContext);
	    } else {
	        return this.getTypedRuleContext(Explain_option_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExplain_option_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Explain_option_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_explain_option_elem;
    }

	explain_option_name() {
	    return this.getTypedRuleContext(Explain_option_nameContext,0);
	};

	explain_option_arg() {
	    return this.getTypedRuleContext(Explain_option_argContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExplain_option_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Explain_option_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_explain_option_name;
    }

	nonreservedword() {
	    return this.getTypedRuleContext(NonreservedwordContext,0);
	};

	analyze_keyword() {
	    return this.getTypedRuleContext(Analyze_keywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExplain_option_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Explain_option_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_explain_option_arg;
    }

	opt_boolean_or_string() {
	    return this.getTypedRuleContext(Opt_boolean_or_stringContext,0);
	};

	numericonly() {
	    return this.getTypedRuleContext(NumericonlyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExplain_option_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreparestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_preparestmt;
    }

	PREPARE() {
	    return this.getToken(PostgreSQLParser.PREPARE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	prep_type_clause() {
	    return this.getTypedRuleContext(Prep_type_clauseContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	preparablestmt() {
	    return this.getTypedRuleContext(PreparablestmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPreparestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Prep_type_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_prep_type_clause;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	type_list() {
	    return this.getTypedRuleContext(Type_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPrep_type_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreparablestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_preparablestmt;
    }

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	insertstmt() {
	    return this.getTypedRuleContext(InsertstmtContext,0);
	};

	updatestmt() {
	    return this.getTypedRuleContext(UpdatestmtContext,0);
	};

	deletestmt() {
	    return this.getTypedRuleContext(DeletestmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPreparablestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExecutestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_executestmt;
    }

	EXECUTE() {
	    return this.getToken(PostgreSQLParser.EXECUTE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	execute_param_clause() {
	    return this.getTypedRuleContext(Execute_param_clauseContext,0);
	};

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	opttemp() {
	    return this.getTypedRuleContext(OpttempContext,0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	create_as_target() {
	    return this.getTypedRuleContext(Create_as_targetContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	opt_with_data() {
	    return this.getTypedRuleContext(Opt_with_dataContext,0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExecutestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Execute_param_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_execute_param_clause;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExecute_param_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeallocatestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_deallocatestmt;
    }

	DEALLOCATE() {
	    return this.getToken(PostgreSQLParser.DEALLOCATE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	PREPARE() {
	    return this.getToken(PostgreSQLParser.PREPARE, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDeallocatestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_insertstmt;
    }

	opt_with_clause() {
	    return this.getTypedRuleContext(Opt_with_clauseContext,0);
	};

	INSERT() {
	    return this.getToken(PostgreSQLParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(PostgreSQLParser.INTO, 0);
	};

	insert_target() {
	    return this.getTypedRuleContext(Insert_targetContext,0);
	};

	insert_rest() {
	    return this.getTypedRuleContext(Insert_restContext,0);
	};

	opt_on_conflict() {
	    return this.getTypedRuleContext(Opt_on_conflictContext,0);
	};

	returning_clause() {
	    return this.getTypedRuleContext(Returning_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitInsertstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Insert_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_insert_target;
    }

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitInsert_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Insert_restContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_insert_rest;
    }

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	OVERRIDING() {
	    return this.getToken(PostgreSQLParser.OVERRIDING, 0);
	};

	override_kind() {
	    return this.getTypedRuleContext(Override_kindContext,0);
	};

	VALUE_P() {
	    return this.getToken(PostgreSQLParser.VALUE_P, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	insert_column_list() {
	    return this.getTypedRuleContext(Insert_column_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	VALUES() {
	    return this.getToken(PostgreSQLParser.VALUES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitInsert_rest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Override_kindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_override_kind;
    }

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	SYSTEM_P() {
	    return this.getToken(PostgreSQLParser.SYSTEM_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOverride_kind(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Insert_column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_insert_column_list;
    }

	insert_column_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Insert_column_itemContext);
	    } else {
	        return this.getTypedRuleContext(Insert_column_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitInsert_column_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Insert_column_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_insert_column_item;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	opt_indirection() {
	    return this.getTypedRuleContext(Opt_indirectionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitInsert_column_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_on_conflictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_on_conflict;
    }

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	CONFLICT() {
	    return this.getToken(PostgreSQLParser.CONFLICT, 0);
	};

	opt_conf_expr() {
	    return this.getTypedRuleContext(Opt_conf_exprContext,0);
	};

	DO() {
	    return this.getToken(PostgreSQLParser.DO, 0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	set_clause_list() {
	    return this.getTypedRuleContext(Set_clause_listContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	NOTHING() {
	    return this.getToken(PostgreSQLParser.NOTHING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_on_conflict(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_conf_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_conf_expr;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	index_params() {
	    return this.getTypedRuleContext(Index_paramsContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	CONSTRAINT() {
	    return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_conf_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Returning_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_returning_clause;
    }

	RETURNING() {
	    return this.getToken(PostgreSQLParser.RETURNING, 0);
	};

	target_list() {
	    return this.getTypedRuleContext(Target_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReturning_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_mergestmt;
    }

	MERGE() {
	    return this.getToken(PostgreSQLParser.MERGE, 0);
	};

	qualified_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Qualified_nameContext);
	    } else {
	        return this.getTypedRuleContext(Qualified_nameContext,i);
	    }
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	select_with_parens() {
	    return this.getTypedRuleContext(Select_with_parensContext,0);
	};

	merge_insert_clause() {
	    return this.getTypedRuleContext(Merge_insert_clauseContext,0);
	};

	merge_update_clause() {
	    return this.getTypedRuleContext(Merge_update_clauseContext,0);
	};

	INTO() {
	    return this.getToken(PostgreSQLParser.INTO, 0);
	};

	alias_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alias_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Alias_clauseContext,i);
	    }
	};

	merge_delete_clause() {
	    return this.getTypedRuleContext(Merge_delete_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitMergestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Merge_insert_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_merge_insert_clause;
    }

	WHEN() {
	    return this.getToken(PostgreSQLParser.WHEN, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	MATCHED() {
	    return this.getToken(PostgreSQLParser.MATCHED, 0);
	};

	INSERT() {
	    return this.getToken(PostgreSQLParser.INSERT, 0);
	};

	values_clause() {
	    return this.getTypedRuleContext(Values_clauseContext,0);
	};

	AND() {
	    return this.getToken(PostgreSQLParser.AND, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	THEN() {
	    return this.getToken(PostgreSQLParser.THEN, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	insert_column_list() {
	    return this.getTypedRuleContext(Insert_column_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitMerge_insert_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Merge_update_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_merge_update_clause;
    }

	WHEN() {
	    return this.getToken(PostgreSQLParser.WHEN, 0);
	};

	MATCHED() {
	    return this.getToken(PostgreSQLParser.MATCHED, 0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	set_clause_list() {
	    return this.getTypedRuleContext(Set_clause_listContext,0);
	};

	AND() {
	    return this.getToken(PostgreSQLParser.AND, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	THEN() {
	    return this.getToken(PostgreSQLParser.THEN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitMerge_update_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Merge_delete_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_merge_delete_clause;
    }

	WHEN() {
	    return this.getToken(PostgreSQLParser.WHEN, 0);
	};

	MATCHED() {
	    return this.getToken(PostgreSQLParser.MATCHED, 0);
	};

	DELETE_P() {
	    return this.getToken(PostgreSQLParser.DELETE_P, 0);
	};

	THEN() {
	    return this.getToken(PostgreSQLParser.THEN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitMerge_delete_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeletestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_deletestmt;
    }

	opt_with_clause() {
	    return this.getTypedRuleContext(Opt_with_clauseContext,0);
	};

	DELETE_P() {
	    return this.getToken(PostgreSQLParser.DELETE_P, 0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	relation_expr_opt_alias() {
	    return this.getTypedRuleContext(Relation_expr_opt_aliasContext,0);
	};

	using_clause() {
	    return this.getTypedRuleContext(Using_clauseContext,0);
	};

	where_or_current_clause() {
	    return this.getTypedRuleContext(Where_or_current_clauseContext,0);
	};

	returning_clause() {
	    return this.getTypedRuleContext(Returning_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDeletestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Using_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_using_clause;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	from_list() {
	    return this.getTypedRuleContext(From_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitUsing_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_lockstmt;
    }

	LOCK_P() {
	    return this.getToken(PostgreSQLParser.LOCK_P, 0);
	};

	opt_table() {
	    return this.getTypedRuleContext(Opt_tableContext,0);
	};

	relation_expr_list() {
	    return this.getTypedRuleContext(Relation_expr_listContext,0);
	};

	opt_lock() {
	    return this.getTypedRuleContext(Opt_lockContext,0);
	};

	opt_nowait() {
	    return this.getTypedRuleContext(Opt_nowaitContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitLockstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_lockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_lock;
    }

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	lock_type() {
	    return this.getTypedRuleContext(Lock_typeContext,0);
	};

	MODE() {
	    return this.getToken(PostgreSQLParser.MODE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_lock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lock_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_lock_type;
    }

	ACCESS() {
	    return this.getToken(PostgreSQLParser.ACCESS, 0);
	};

	SHARE() {
	    return this.getToken(PostgreSQLParser.SHARE, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(PostgreSQLParser.EXCLUSIVE, 0);
	};

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitLock_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_nowaitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_nowait;
    }

	NOWAIT() {
	    return this.getToken(PostgreSQLParser.NOWAIT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_nowait(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_nowait_or_skipContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_nowait_or_skip;
    }

	NOWAIT() {
	    return this.getToken(PostgreSQLParser.NOWAIT, 0);
	};

	SKIP_P() {
	    return this.getToken(PostgreSQLParser.SKIP_P, 0);
	};

	LOCKED() {
	    return this.getToken(PostgreSQLParser.LOCKED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_nowait_or_skip(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdatestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_updatestmt;
    }

	opt_with_clause() {
	    return this.getTypedRuleContext(Opt_with_clauseContext,0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	relation_expr_opt_alias() {
	    return this.getTypedRuleContext(Relation_expr_opt_aliasContext,0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	set_clause_list() {
	    return this.getTypedRuleContext(Set_clause_listContext,0);
	};

	from_clause() {
	    return this.getTypedRuleContext(From_clauseContext,0);
	};

	where_or_current_clause() {
	    return this.getTypedRuleContext(Where_or_current_clauseContext,0);
	};

	returning_clause() {
	    return this.getTypedRuleContext(Returning_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitUpdatestmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_clause_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_set_clause_list;
    }

	set_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Set_clauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSet_clause_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_set_clause;
    }

	set_target() {
	    return this.getTypedRuleContext(Set_targetContext,0);
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	set_target_list() {
	    return this.getTypedRuleContext(Set_target_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSet_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_set_target;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	opt_indirection() {
	    return this.getTypedRuleContext(Opt_indirectionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSet_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_target_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_set_target_list;
    }

	set_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_targetContext);
	    } else {
	        return this.getTypedRuleContext(Set_targetContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSet_target_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarecursorstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_declarecursorstmt;
    }

	DECLARE() {
	    return this.getToken(PostgreSQLParser.DECLARE, 0);
	};

	cursor_name() {
	    return this.getTypedRuleContext(Cursor_nameContext,0);
	};

	cursor_options() {
	    return this.getTypedRuleContext(Cursor_optionsContext,0);
	};

	CURSOR() {
	    return this.getToken(PostgreSQLParser.CURSOR, 0);
	};

	opt_hold() {
	    return this.getTypedRuleContext(Opt_holdContext,0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDeclarecursorstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cursor_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_cursor_name;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCursor_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cursor_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_cursor_options;
    }

	NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.NO);
	    } else {
	        return this.getToken(PostgreSQLParser.NO, i);
	    }
	};


	SCROLL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.SCROLL);
	    } else {
	        return this.getToken(PostgreSQLParser.SCROLL, i);
	    }
	};


	BINARY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.BINARY);
	    } else {
	        return this.getToken(PostgreSQLParser.BINARY, i);
	    }
	};


	INSENSITIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.INSENSITIVE);
	    } else {
	        return this.getToken(PostgreSQLParser.INSENSITIVE, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCursor_options(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_holdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_hold;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	HOLD() {
	    return this.getToken(PostgreSQLParser.HOLD, 0);
	};

	WITHOUT() {
	    return this.getToken(PostgreSQLParser.WITHOUT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_hold(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_selectstmt;
    }

	select_no_parens() {
	    return this.getTypedRuleContext(Select_no_parensContext,0);
	};

	select_with_parens() {
	    return this.getTypedRuleContext(Select_with_parensContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSelectstmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_with_parensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_select_with_parens;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	select_no_parens() {
	    return this.getTypedRuleContext(Select_no_parensContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	select_with_parens() {
	    return this.getTypedRuleContext(Select_with_parensContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSelect_with_parens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_no_parensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_select_no_parens;
    }

	select_clause() {
	    return this.getTypedRuleContext(Select_clauseContext,0);
	};

	opt_sort_clause() {
	    return this.getTypedRuleContext(Opt_sort_clauseContext,0);
	};

	for_locking_clause() {
	    return this.getTypedRuleContext(For_locking_clauseContext,0);
	};

	opt_select_limit() {
	    return this.getTypedRuleContext(Opt_select_limitContext,0);
	};

	select_limit() {
	    return this.getTypedRuleContext(Select_limitContext,0);
	};

	opt_for_locking_clause() {
	    return this.getTypedRuleContext(Opt_for_locking_clauseContext,0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSelect_no_parens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_select_clause;
    }

	simple_select() {
	    return this.getTypedRuleContext(Simple_selectContext,0);
	};

	select_with_parens() {
	    return this.getTypedRuleContext(Select_with_parensContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSelect_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_selectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_simple_select;
    }

	SELECT() {
	    return this.getToken(PostgreSQLParser.SELECT, 0);
	};

	into_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Into_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Into_clauseContext,i);
	    }
	};

	from_clause() {
	    return this.getTypedRuleContext(From_clauseContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	group_clause() {
	    return this.getTypedRuleContext(Group_clauseContext,0);
	};

	having_clause() {
	    return this.getTypedRuleContext(Having_clauseContext,0);
	};

	window_clause() {
	    return this.getTypedRuleContext(Window_clauseContext,0);
	};

	values_clause() {
	    return this.getTypedRuleContext(Values_clauseContext,0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	relation_expr() {
	    return this.getTypedRuleContext(Relation_exprContext,0);
	};

	select_with_parens = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_with_parensContext);
	    } else {
	        return this.getTypedRuleContext(Select_with_parensContext,i);
	    }
	};

	set_operator_with_all_or_distinct = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_operator_with_all_or_distinctContext);
	    } else {
	        return this.getTypedRuleContext(Set_operator_with_all_or_distinctContext,i);
	    }
	};

	opt_all_clause() {
	    return this.getTypedRuleContext(Opt_all_clauseContext,0);
	};

	opt_target_list() {
	    return this.getTypedRuleContext(Opt_target_listContext,0);
	};

	distinct_clause() {
	    return this.getTypedRuleContext(Distinct_clauseContext,0);
	};

	target_list() {
	    return this.getTypedRuleContext(Target_listContext,0);
	};

	simple_select = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_selectContext);
	    } else {
	        return this.getTypedRuleContext(Simple_selectContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSimple_select(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_set_operator;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IntersectContext extends Set_operatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTERSECT() {
	    return this.getToken(PostgreSQLParser.INTERSECT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIntersect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PostgreSQLParser.IntersectContext = IntersectContext;

class ExceptContext extends Set_operatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXCEPT() {
	    return this.getToken(PostgreSQLParser.EXCEPT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExcept(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PostgreSQLParser.ExceptContext = ExceptContext;

class UnionContext extends Set_operatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNION() {
	    return this.getToken(PostgreSQLParser.UNION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitUnion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PostgreSQLParser.UnionContext = UnionContext;

class Set_operator_with_all_or_distinctContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_set_operator_with_all_or_distinct;
    }

	set_operator() {
	    return this.getTypedRuleContext(Set_operatorContext,0);
	};

	all_or_distinct() {
	    return this.getTypedRuleContext(All_or_distinctContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSet_operator_with_all_or_distinct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_with_clause;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	cte_list() {
	    return this.getTypedRuleContext(Cte_listContext,0);
	};

	RECURSIVE() {
	    return this.getToken(PostgreSQLParser.RECURSIVE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitWith_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cte_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_cte_list;
    }

	common_table_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_table_exprContext);
	    } else {
	        return this.getTypedRuleContext(Common_table_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCte_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Common_table_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_common_table_expr;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	opt_name_list() {
	    return this.getTypedRuleContext(Opt_name_listContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	opt_materialized() {
	    return this.getTypedRuleContext(Opt_materializedContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	preparablestmt() {
	    return this.getTypedRuleContext(PreparablestmtContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCommon_table_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_materializedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_materialized;
    }

	MATERIALIZED() {
	    return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_materialized(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_with_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_with_clause;
    }

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_with_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Into_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_into_clause;
    }

	INTO() {
	    return this.getToken(PostgreSQLParser.INTO, 0);
	};

	opt_strict() {
	    return this.getTypedRuleContext(Opt_strictContext,0);
	};

	opttempTableName() {
	    return this.getTypedRuleContext(OpttempTableNameContext,0);
	};

	into_target() {
	    return this.getTypedRuleContext(Into_targetContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitInto_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_strictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_strict;
    }

	STRICT_P() {
	    return this.getToken(PostgreSQLParser.STRICT_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_strict(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpttempTableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opttempTableName;
    }

	opt_table() {
	    return this.getTypedRuleContext(Opt_tableContext,0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	TEMPORARY() {
	    return this.getToken(PostgreSQLParser.TEMPORARY, 0);
	};

	TEMP() {
	    return this.getToken(PostgreSQLParser.TEMP, 0);
	};

	LOCAL() {
	    return this.getToken(PostgreSQLParser.LOCAL, 0);
	};

	GLOBAL() {
	    return this.getToken(PostgreSQLParser.GLOBAL, 0);
	};

	UNLOGGED() {
	    return this.getToken(PostgreSQLParser.UNLOGGED, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpttempTableName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_table;
    }

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class All_or_distinctContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_all_or_distinct;
    }

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(PostgreSQLParser.DISTINCT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAll_or_distinct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Distinct_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_distinct_clause;
    }

	DISTINCT() {
	    return this.getToken(PostgreSQLParser.DISTINCT, 0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDistinct_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_all_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_all_clause;
    }

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_all_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_sort_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_sort_clause;
    }

	sort_clause() {
	    return this.getTypedRuleContext(Sort_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_sort_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sort_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_sort_clause;
    }

	ORDER() {
	    return this.getToken(PostgreSQLParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	sortby_list() {
	    return this.getTypedRuleContext(Sortby_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSort_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sortby_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_sortby_list;
    }

	sortby = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortbyContext);
	    } else {
	        return this.getTypedRuleContext(SortbyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSortby_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SortbyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_sortby;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	opt_nulls_order() {
	    return this.getTypedRuleContext(Opt_nulls_orderContext,0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	qual_all_op() {
	    return this.getTypedRuleContext(Qual_all_opContext,0);
	};

	opt_asc_desc() {
	    return this.getTypedRuleContext(Opt_asc_descContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSortby(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_limitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_select_limit;
    }

	limit_clause() {
	    return this.getTypedRuleContext(Limit_clauseContext,0);
	};

	offset_clause() {
	    return this.getTypedRuleContext(Offset_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSelect_limit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_select_limitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_select_limit;
    }

	select_limit() {
	    return this.getTypedRuleContext(Select_limitContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_select_limit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Limit_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_limit_clause;
    }

	LIMIT() {
	    return this.getToken(PostgreSQLParser.LIMIT, 0);
	};

	select_limit_value() {
	    return this.getTypedRuleContext(Select_limit_valueContext,0);
	};

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	select_offset_value() {
	    return this.getTypedRuleContext(Select_offset_valueContext,0);
	};

	FETCH() {
	    return this.getToken(PostgreSQLParser.FETCH, 0);
	};

	first_or_next() {
	    return this.getTypedRuleContext(First_or_nextContext,0);
	};

	select_fetch_first_value() {
	    return this.getTypedRuleContext(Select_fetch_first_valueContext,0);
	};

	row_or_rows() {
	    return this.getTypedRuleContext(Row_or_rowsContext,0);
	};

	ONLY() {
	    return this.getToken(PostgreSQLParser.ONLY, 0);
	};

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	TIES() {
	    return this.getToken(PostgreSQLParser.TIES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitLimit_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Offset_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_offset_clause;
    }

	OFFSET() {
	    return this.getToken(PostgreSQLParser.OFFSET, 0);
	};

	select_offset_value() {
	    return this.getTypedRuleContext(Select_offset_valueContext,0);
	};

	select_fetch_first_value() {
	    return this.getTypedRuleContext(Select_fetch_first_valueContext,0);
	};

	row_or_rows() {
	    return this.getTypedRuleContext(Row_or_rowsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOffset_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_limit_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_select_limit_value;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSelect_limit_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_offset_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_select_offset_value;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSelect_offset_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_fetch_first_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_select_fetch_first_value;
    }

	c_expr() {
	    return this.getTypedRuleContext(C_exprContext,0);
	};

	PLUS() {
	    return this.getToken(PostgreSQLParser.PLUS, 0);
	};

	i_or_f_const() {
	    return this.getTypedRuleContext(I_or_f_constContext,0);
	};

	MINUS() {
	    return this.getToken(PostgreSQLParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSelect_fetch_first_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class I_or_f_constContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_i_or_f_const;
    }

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	fconst() {
	    return this.getTypedRuleContext(FconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitI_or_f_const(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Row_or_rowsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_row_or_rows;
    }

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(PostgreSQLParser.ROWS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRow_or_rows(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class First_or_nextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_first_or_next;
    }

	FIRST_P() {
	    return this.getToken(PostgreSQLParser.FIRST_P, 0);
	};

	NEXT() {
	    return this.getToken(PostgreSQLParser.NEXT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFirst_or_next(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Group_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_group_clause;
    }

	GROUP_P() {
	    return this.getToken(PostgreSQLParser.GROUP_P, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	group_by_list() {
	    return this.getTypedRuleContext(Group_by_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGroup_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Group_by_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_group_by_list;
    }

	group_by_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Group_by_itemContext);
	    } else {
	        return this.getTypedRuleContext(Group_by_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGroup_by_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Group_by_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_group_by_item;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	empty_grouping_set() {
	    return this.getTypedRuleContext(Empty_grouping_setContext,0);
	};

	cube_clause() {
	    return this.getTypedRuleContext(Cube_clauseContext,0);
	};

	rollup_clause() {
	    return this.getTypedRuleContext(Rollup_clauseContext,0);
	};

	grouping_sets_clause() {
	    return this.getTypedRuleContext(Grouping_sets_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGroup_by_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Empty_grouping_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_empty_grouping_set;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitEmpty_grouping_set(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Rollup_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rollup_clause;
    }

	ROLLUP() {
	    return this.getToken(PostgreSQLParser.ROLLUP, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRollup_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cube_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_cube_clause;
    }

	CUBE() {
	    return this.getToken(PostgreSQLParser.CUBE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCube_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Grouping_sets_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_grouping_sets_clause;
    }

	GROUPING() {
	    return this.getToken(PostgreSQLParser.GROUPING, 0);
	};

	SETS() {
	    return this.getToken(PostgreSQLParser.SETS, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	group_by_list() {
	    return this.getTypedRuleContext(Group_by_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGrouping_sets_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Having_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_having_clause;
    }

	HAVING() {
	    return this.getToken(PostgreSQLParser.HAVING, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitHaving_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_locking_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_for_locking_clause;
    }

	for_locking_items() {
	    return this.getTypedRuleContext(For_locking_itemsContext,0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	READ() {
	    return this.getToken(PostgreSQLParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(PostgreSQLParser.ONLY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFor_locking_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_for_locking_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_for_locking_clause;
    }

	for_locking_clause() {
	    return this.getTypedRuleContext(For_locking_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_for_locking_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_locking_itemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_for_locking_items;
    }

	for_locking_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(For_locking_itemContext);
	    } else {
	        return this.getTypedRuleContext(For_locking_itemContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFor_locking_items(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_locking_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_for_locking_item;
    }

	for_locking_strength() {
	    return this.getTypedRuleContext(For_locking_strengthContext,0);
	};

	locked_rels_list() {
	    return this.getTypedRuleContext(Locked_rels_listContext,0);
	};

	opt_nowait_or_skip() {
	    return this.getTypedRuleContext(Opt_nowait_or_skipContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFor_locking_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_locking_strengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_for_locking_strength;
    }

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	SHARE() {
	    return this.getToken(PostgreSQLParser.SHARE, 0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	KEY() {
	    return this.getToken(PostgreSQLParser.KEY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFor_locking_strength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Locked_rels_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_locked_rels_list;
    }

	OF() {
	    return this.getToken(PostgreSQLParser.OF, 0);
	};

	qualified_name_list() {
	    return this.getTypedRuleContext(Qualified_name_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitLocked_rels_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Values_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_values_clause;
    }

	VALUES() {
	    return this.getToken(PostgreSQLParser.VALUES, 0);
	};

	OPEN_PAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.OPEN_PAREN);
	    } else {
	        return this.getToken(PostgreSQLParser.OPEN_PAREN, i);
	    }
	};


	expr_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr_listContext);
	    } else {
	        return this.getTypedRuleContext(Expr_listContext,i);
	    }
	};

	CLOSE_PAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.CLOSE_PAREN);
	    } else {
	        return this.getToken(PostgreSQLParser.CLOSE_PAREN, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitValues_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class From_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_from_clause;
    }

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	from_list() {
	    return this.getTypedRuleContext(From_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFrom_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class From_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_from_list;
    }

	non_ansi_join() {
	    return this.getTypedRuleContext(Non_ansi_joinContext,0);
	};

	table_ref = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_refContext);
	    } else {
	        return this.getTypedRuleContext(Table_refContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFrom_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Non_ansi_joinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_non_ansi_join;
    }

	table_ref = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_refContext);
	    } else {
	        return this.getTypedRuleContext(Table_refContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitNon_ansi_join(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_table_ref;
    }

	relation_expr() {
	    return this.getTypedRuleContext(Relation_exprContext,0);
	};

	opt_alias_clause() {
	    return this.getTypedRuleContext(Opt_alias_clauseContext,0);
	};

	func_table() {
	    return this.getTypedRuleContext(Func_tableContext,0);
	};

	func_alias_clause() {
	    return this.getTypedRuleContext(Func_alias_clauseContext,0);
	};

	xmltable() {
	    return this.getTypedRuleContext(XmltableContext,0);
	};

	select_with_parens() {
	    return this.getTypedRuleContext(Select_with_parensContext,0);
	};

	LATERAL_P() {
	    return this.getToken(PostgreSQLParser.LATERAL_P, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	table_ref = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_refContext);
	    } else {
	        return this.getTypedRuleContext(Table_refContext,i);
	    }
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	CROSS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.CROSS);
	    } else {
	        return this.getToken(PostgreSQLParser.CROSS, i);
	    }
	};


	JOIN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.JOIN);
	    } else {
	        return this.getToken(PostgreSQLParser.JOIN, i);
	    }
	};


	NATURAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.NATURAL);
	    } else {
	        return this.getToken(PostgreSQLParser.NATURAL, i);
	    }
	};


	join_qual = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_qualContext);
	    } else {
	        return this.getTypedRuleContext(Join_qualContext,i);
	    }
	};

	tablesample_clause() {
	    return this.getTypedRuleContext(Tablesample_clauseContext,0);
	};

	join_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_typeContext);
	    } else {
	        return this.getTypedRuleContext(Join_typeContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTable_ref(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alias_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_alias_clause;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAlias_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_alias_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_alias_clause;
    }

	table_alias_clause() {
	    return this.getTypedRuleContext(Table_alias_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_alias_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_alias_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_table_alias_clause;
    }

	table_alias() {
	    return this.getTypedRuleContext(Table_aliasContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTable_alias_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_alias_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_alias_clause;
    }

	alias_clause() {
	    return this.getTypedRuleContext(Alias_clauseContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	tablefuncelementlist() {
	    return this.getTypedRuleContext(TablefuncelementlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_alias_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Join_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_join_type;
    }

	FULL() {
	    return this.getToken(PostgreSQLParser.FULL, 0);
	};

	LEFT() {
	    return this.getToken(PostgreSQLParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(PostgreSQLParser.RIGHT, 0);
	};

	INNER_P() {
	    return this.getToken(PostgreSQLParser.INNER_P, 0);
	};

	OUTER_P() {
	    return this.getToken(PostgreSQLParser.OUTER_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitJoin_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Join_qualContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_join_qual;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitJoin_qual(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Relation_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_relation_expr;
    }

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	STAR() {
	    return this.getToken(PostgreSQLParser.STAR, 0);
	};

	ONLY() {
	    return this.getToken(PostgreSQLParser.ONLY, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRelation_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Relation_expr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_relation_expr_list;
    }

	relation_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Relation_exprContext);
	    } else {
	        return this.getTypedRuleContext(Relation_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRelation_expr_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Relation_expr_opt_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_relation_expr_opt_alias;
    }

	relation_expr() {
	    return this.getTypedRuleContext(Relation_exprContext,0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRelation_expr_opt_alias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Tablesample_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_tablesample_clause;
    }

	TABLESAMPLE() {
	    return this.getToken(PostgreSQLParser.TABLESAMPLE, 0);
	};

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	opt_repeatable_clause() {
	    return this.getTypedRuleContext(Opt_repeatable_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTablesample_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_repeatable_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_repeatable_clause;
    }

	REPEATABLE() {
	    return this.getToken(PostgreSQLParser.REPEATABLE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_repeatable_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_table;
    }

	func_expr_windowless() {
	    return this.getTypedRuleContext(Func_expr_windowlessContext,0);
	};

	opt_ordinality() {
	    return this.getTypedRuleContext(Opt_ordinalityContext,0);
	};

	ROWS() {
	    return this.getToken(PostgreSQLParser.ROWS, 0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	rowsfrom_list() {
	    return this.getTypedRuleContext(Rowsfrom_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Rowsfrom_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rowsfrom_item;
    }

	func_expr_windowless() {
	    return this.getTypedRuleContext(Func_expr_windowlessContext,0);
	};

	opt_col_def_list() {
	    return this.getTypedRuleContext(Opt_col_def_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRowsfrom_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Rowsfrom_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rowsfrom_list;
    }

	rowsfrom_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rowsfrom_itemContext);
	    } else {
	        return this.getTypedRuleContext(Rowsfrom_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRowsfrom_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_col_def_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_col_def_list;
    }

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	tablefuncelementlist() {
	    return this.getTypedRuleContext(TablefuncelementlistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_col_def_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_ordinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_ordinality;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	ORDINALITY() {
	    return this.getToken(PostgreSQLParser.ORDINALITY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_ordinality(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Where_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_where_clause;
    }

	WHERE() {
	    return this.getToken(PostgreSQLParser.WHERE, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitWhere_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Where_or_current_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_where_or_current_clause;
    }

	WHERE() {
	    return this.getToken(PostgreSQLParser.WHERE, 0);
	};

	CURRENT_P() {
	    return this.getToken(PostgreSQLParser.CURRENT_P, 0);
	};

	OF() {
	    return this.getToken(PostgreSQLParser.OF, 0);
	};

	cursor_name() {
	    return this.getTypedRuleContext(Cursor_nameContext,0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitWhere_or_current_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpttablefuncelementlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opttablefuncelementlist;
    }

	tablefuncelementlist() {
	    return this.getTypedRuleContext(TablefuncelementlistContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpttablefuncelementlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablefuncelementlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_tablefuncelementlist;
    }

	tablefuncelement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablefuncelementContext);
	    } else {
	        return this.getTypedRuleContext(TablefuncelementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTablefuncelementlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablefuncelementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_tablefuncelement;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	opt_collate_clause() {
	    return this.getTypedRuleContext(Opt_collate_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTablefuncelement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XmltableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xmltable;
    }

	XMLTABLE() {
	    return this.getToken(PostgreSQLParser.XMLTABLE, 0);
	};

	OPEN_PAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.OPEN_PAREN);
	    } else {
	        return this.getToken(PostgreSQLParser.OPEN_PAREN, i);
	    }
	};


	CLOSE_PAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.CLOSE_PAREN);
	    } else {
	        return this.getToken(PostgreSQLParser.CLOSE_PAREN, i);
	    }
	};


	c_expr() {
	    return this.getTypedRuleContext(C_exprContext,0);
	};

	xmlexists_argument() {
	    return this.getTypedRuleContext(Xmlexists_argumentContext,0);
	};

	COLUMNS() {
	    return this.getToken(PostgreSQLParser.COLUMNS, 0);
	};

	xmltable_column_list() {
	    return this.getTypedRuleContext(Xmltable_column_listContext,0);
	};

	XMLNAMESPACES() {
	    return this.getToken(PostgreSQLParser.XMLNAMESPACES, 0);
	};

	xml_namespace_list() {
	    return this.getTypedRuleContext(Xml_namespace_listContext,0);
	};

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXmltable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xmltable_column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xmltable_column_list;
    }

	xmltable_column_el = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Xmltable_column_elContext);
	    } else {
	        return this.getTypedRuleContext(Xmltable_column_elContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXmltable_column_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xmltable_column_elContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xmltable_column_el;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	ORDINALITY() {
	    return this.getToken(PostgreSQLParser.ORDINALITY, 0);
	};

	xmltable_column_option_list() {
	    return this.getTypedRuleContext(Xmltable_column_option_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXmltable_column_el(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xmltable_column_option_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xmltable_column_option_list;
    }

	xmltable_column_option_el = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Xmltable_column_option_elContext);
	    } else {
	        return this.getTypedRuleContext(Xmltable_column_option_elContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXmltable_column_option_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xmltable_column_option_elContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xmltable_column_option_el;
    }

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXmltable_column_option_el(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xml_namespace_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xml_namespace_list;
    }

	xml_namespace_el = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Xml_namespace_elContext);
	    } else {
	        return this.getTypedRuleContext(Xml_namespace_elContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXml_namespace_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xml_namespace_elContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xml_namespace_el;
    }

	b_expr() {
	    return this.getTypedRuleContext(B_exprContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXml_namespace_el(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_typename;
    }

	simpletypename() {
	    return this.getTypedRuleContext(SimpletypenameContext,0);
	};

	opt_array_bounds() {
	    return this.getTypedRuleContext(Opt_array_boundsContext,0);
	};

	ARRAY() {
	    return this.getToken(PostgreSQLParser.ARRAY, 0);
	};

	SETOF() {
	    return this.getToken(PostgreSQLParser.SETOF, 0);
	};

	OPEN_BRACKET() {
	    return this.getToken(PostgreSQLParser.OPEN_BRACKET, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(PostgreSQLParser.CLOSE_BRACKET, 0);
	};

	qualified_name() {
	    return this.getTypedRuleContext(Qualified_nameContext,0);
	};

	PERCENT() {
	    return this.getToken(PostgreSQLParser.PERCENT, 0);
	};

	ROWTYPE() {
	    return this.getToken(PostgreSQLParser.ROWTYPE, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTypename(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_array_boundsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_array_bounds;
    }

	OPEN_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.OPEN_BRACKET);
	    } else {
	        return this.getToken(PostgreSQLParser.OPEN_BRACKET, i);
	    }
	};


	CLOSE_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.CLOSE_BRACKET);
	    } else {
	        return this.getToken(PostgreSQLParser.CLOSE_BRACKET, i);
	    }
	};


	iconst = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IconstContext);
	    } else {
	        return this.getTypedRuleContext(IconstContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_array_bounds(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpletypenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_simpletypename;
    }

	generictype() {
	    return this.getTypedRuleContext(GenerictypeContext,0);
	};

	numeric() {
	    return this.getTypedRuleContext(NumericContext,0);
	};

	bit() {
	    return this.getTypedRuleContext(BitContext,0);
	};

	character() {
	    return this.getTypedRuleContext(CharacterContext,0);
	};

	constdatetime() {
	    return this.getTypedRuleContext(ConstdatetimeContext,0);
	};

	constinterval() {
	    return this.getTypedRuleContext(ConstintervalContext,0);
	};

	opt_interval() {
	    return this.getTypedRuleContext(Opt_intervalContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSimpletypename(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConsttypenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_consttypename;
    }

	numeric() {
	    return this.getTypedRuleContext(NumericContext,0);
	};

	constbit() {
	    return this.getTypedRuleContext(ConstbitContext,0);
	};

	constcharacter() {
	    return this.getTypedRuleContext(ConstcharacterContext,0);
	};

	constdatetime() {
	    return this.getTypedRuleContext(ConstdatetimeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConsttypename(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenerictypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_generictype;
    }

	opt_type_modifiers() {
	    return this.getTypedRuleContext(Opt_type_modifiersContext,0);
	};

	builtin_function_name() {
	    return this.getTypedRuleContext(Builtin_function_nameContext,0);
	};

	type_function_name() {
	    return this.getTypedRuleContext(Type_function_nameContext,0);
	};

	LEFT() {
	    return this.getToken(PostgreSQLParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(PostgreSQLParser.RIGHT, 0);
	};

	attrs() {
	    return this.getTypedRuleContext(AttrsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGenerictype(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_type_modifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_type_modifiers;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_type_modifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_numeric;
    }

	INT_P() {
	    return this.getToken(PostgreSQLParser.INT_P, 0);
	};

	INTEGER() {
	    return this.getToken(PostgreSQLParser.INTEGER, 0);
	};

	SMALLINT() {
	    return this.getToken(PostgreSQLParser.SMALLINT, 0);
	};

	BIGINT() {
	    return this.getToken(PostgreSQLParser.BIGINT, 0);
	};

	REAL() {
	    return this.getToken(PostgreSQLParser.REAL, 0);
	};

	FLOAT_P() {
	    return this.getToken(PostgreSQLParser.FLOAT_P, 0);
	};

	opt_float() {
	    return this.getTypedRuleContext(Opt_floatContext,0);
	};

	DOUBLE_P() {
	    return this.getToken(PostgreSQLParser.DOUBLE_P, 0);
	};

	PRECISION() {
	    return this.getToken(PostgreSQLParser.PRECISION, 0);
	};

	DECIMAL_P() {
	    return this.getToken(PostgreSQLParser.DECIMAL_P, 0);
	};

	opt_type_modifiers() {
	    return this.getTypedRuleContext(Opt_type_modifiersContext,0);
	};

	DEC() {
	    return this.getToken(PostgreSQLParser.DEC, 0);
	};

	NUMERIC() {
	    return this.getToken(PostgreSQLParser.NUMERIC, 0);
	};

	BOOLEAN_P() {
	    return this.getToken(PostgreSQLParser.BOOLEAN_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitNumeric(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_floatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_float;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_float(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_bit;
    }

	bitwithlength() {
	    return this.getTypedRuleContext(BitwithlengthContext,0);
	};

	bitwithoutlength() {
	    return this.getTypedRuleContext(BitwithoutlengthContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitBit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstbitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constbit;
    }

	bitwithlength() {
	    return this.getTypedRuleContext(BitwithlengthContext,0);
	};

	bitwithoutlength() {
	    return this.getTypedRuleContext(BitwithoutlengthContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstbit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BitwithlengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_bitwithlength;
    }

	BIT() {
	    return this.getToken(PostgreSQLParser.BIT, 0);
	};

	opt_varying() {
	    return this.getTypedRuleContext(Opt_varyingContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitBitwithlength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BitwithoutlengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_bitwithoutlength;
    }

	BIT() {
	    return this.getToken(PostgreSQLParser.BIT, 0);
	};

	opt_varying() {
	    return this.getTypedRuleContext(Opt_varyingContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitBitwithoutlength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharacterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_character;
    }

	character_c() {
	    return this.getTypedRuleContext(Character_cContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCharacter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstcharacterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constcharacter;
    }

	character_c() {
	    return this.getTypedRuleContext(Character_cContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstcharacter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Character_cContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_character_c;
    }

	opt_varying() {
	    return this.getTypedRuleContext(Opt_varyingContext,0);
	};

	CHARACTER() {
	    return this.getToken(PostgreSQLParser.CHARACTER, 0);
	};

	CHAR_P() {
	    return this.getToken(PostgreSQLParser.CHAR_P, 0);
	};

	NCHAR() {
	    return this.getToken(PostgreSQLParser.NCHAR, 0);
	};

	VARCHAR() {
	    return this.getToken(PostgreSQLParser.VARCHAR, 0);
	};

	NATIONAL() {
	    return this.getToken(PostgreSQLParser.NATIONAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCharacter_c(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_varyingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_varying;
    }

	VARYING() {
	    return this.getToken(PostgreSQLParser.VARYING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_varying(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstdatetimeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constdatetime;
    }

	opt_timezone() {
	    return this.getTypedRuleContext(Opt_timezoneContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(PostgreSQLParser.TIMESTAMP, 0);
	};

	TIME() {
	    return this.getToken(PostgreSQLParser.TIME, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstdatetime(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstintervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_constinterval;
    }

	INTERVAL() {
	    return this.getToken(PostgreSQLParser.INTERVAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitConstinterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_timezoneContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_timezone;
    }

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	TIME() {
	    return this.getToken(PostgreSQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(PostgreSQLParser.ZONE, 0);
	};

	WITHOUT() {
	    return this.getToken(PostgreSQLParser.WITHOUT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_timezone(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_intervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_interval;
    }

	YEAR_P() {
	    return this.getToken(PostgreSQLParser.YEAR_P, 0);
	};

	MONTH_P() {
	    return this.getToken(PostgreSQLParser.MONTH_P, 0);
	};

	DAY_P() {
	    return this.getToken(PostgreSQLParser.DAY_P, 0);
	};

	HOUR_P() {
	    return this.getToken(PostgreSQLParser.HOUR_P, 0);
	};

	MINUTE_P() {
	    return this.getToken(PostgreSQLParser.MINUTE_P, 0);
	};

	interval_second() {
	    return this.getTypedRuleContext(Interval_secondContext,0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_interval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interval_secondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_interval_second;
    }

	SECOND_P() {
	    return this.getToken(PostgreSQLParser.SECOND_P, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitInterval_second(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_escapeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_escape;
    }

	ESCAPE() {
	    return this.getToken(PostgreSQLParser.ESCAPE, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_escape(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr;
    }

	a_expr_qual() {
	    return this.getTypedRuleContext(A_expr_qualContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_qualContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_qual;
    }

	a_expr_lessless() {
	    return this.getTypedRuleContext(A_expr_lesslessContext,0);
	};

	qual_op() {
	    return this.getTypedRuleContext(Qual_opContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_qual(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_lesslessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_lessless;
    }

	a_expr_or = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_expr_orContext);
	    } else {
	        return this.getTypedRuleContext(A_expr_orContext,i);
	    }
	};

	LESS_LESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.LESS_LESS);
	    } else {
	        return this.getToken(PostgreSQLParser.LESS_LESS, i);
	    }
	};


	GREATER_GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.GREATER_GREATER);
	    } else {
	        return this.getToken(PostgreSQLParser.GREATER_GREATER, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_lessless(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_or;
    }

	a_expr_and = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_expr_andContext);
	    } else {
	        return this.getTypedRuleContext(A_expr_andContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.OR);
	    } else {
	        return this.getToken(PostgreSQLParser.OR, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_andContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_and;
    }

	a_expr_between = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_expr_betweenContext);
	    } else {
	        return this.getTypedRuleContext(A_expr_betweenContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.AND);
	    } else {
	        return this.getToken(PostgreSQLParser.AND, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_and(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_betweenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_between;
    }

	a_expr_in = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_expr_inContext);
	    } else {
	        return this.getTypedRuleContext(A_expr_inContext,i);
	    }
	};

	BETWEEN() {
	    return this.getToken(PostgreSQLParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(PostgreSQLParser.AND, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	SYMMETRIC() {
	    return this.getToken(PostgreSQLParser.SYMMETRIC, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_between(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_inContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_in;
    }

	a_expr_unary_not() {
	    return this.getTypedRuleContext(A_expr_unary_notContext,0);
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	in_expr() {
	    return this.getTypedRuleContext(In_exprContext,0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_in(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_unary_notContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_unary_not;
    }

	a_expr_isnull() {
	    return this.getTypedRuleContext(A_expr_isnullContext,0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_unary_not(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_isnullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_isnull;
    }

	a_expr_is_not() {
	    return this.getTypedRuleContext(A_expr_is_notContext,0);
	};

	ISNULL() {
	    return this.getToken(PostgreSQLParser.ISNULL, 0);
	};

	NOTNULL() {
	    return this.getToken(PostgreSQLParser.NOTNULL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_isnull(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_is_notContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_is_not;
    }

	a_expr_compare() {
	    return this.getTypedRuleContext(A_expr_compareContext,0);
	};

	IS() {
	    return this.getToken(PostgreSQLParser.IS, 0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	TRUE_P() {
	    return this.getToken(PostgreSQLParser.TRUE_P, 0);
	};

	FALSE_P() {
	    return this.getToken(PostgreSQLParser.FALSE_P, 0);
	};

	UNKNOWN() {
	    return this.getToken(PostgreSQLParser.UNKNOWN, 0);
	};

	DISTINCT() {
	    return this.getToken(PostgreSQLParser.DISTINCT, 0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	OF() {
	    return this.getToken(PostgreSQLParser.OF, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	type_list() {
	    return this.getTypedRuleContext(Type_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	DOCUMENT_P() {
	    return this.getToken(PostgreSQLParser.DOCUMENT_P, 0);
	};

	NORMALIZED() {
	    return this.getToken(PostgreSQLParser.NORMALIZED, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	unicode_normal_form() {
	    return this.getTypedRuleContext(Unicode_normal_formContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_is_not(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_compareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_compare;
    }

	a_expr_like = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_expr_likeContext);
	    } else {
	        return this.getTypedRuleContext(A_expr_likeContext,i);
	    }
	};

	subquery_Op() {
	    return this.getTypedRuleContext(Subquery_OpContext,0);
	};

	sub_type() {
	    return this.getTypedRuleContext(Sub_typeContext,0);
	};

	LT() {
	    return this.getToken(PostgreSQLParser.LT, 0);
	};

	GT() {
	    return this.getToken(PostgreSQLParser.GT, 0);
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	LESS_EQUALS() {
	    return this.getToken(PostgreSQLParser.LESS_EQUALS, 0);
	};

	GREATER_EQUALS() {
	    return this.getToken(PostgreSQLParser.GREATER_EQUALS, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(PostgreSQLParser.NOT_EQUALS, 0);
	};

	select_with_parens() {
	    return this.getTypedRuleContext(Select_with_parensContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_compare(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_likeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_like;
    }

	a_expr_qual_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_expr_qual_opContext);
	    } else {
	        return this.getTypedRuleContext(A_expr_qual_opContext,i);
	    }
	};

	opt_escape() {
	    return this.getTypedRuleContext(Opt_escapeContext,0);
	};

	LIKE() {
	    return this.getToken(PostgreSQLParser.LIKE, 0);
	};

	ILIKE() {
	    return this.getToken(PostgreSQLParser.ILIKE, 0);
	};

	SIMILAR() {
	    return this.getToken(PostgreSQLParser.SIMILAR, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_like(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_qual_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_qual_op;
    }

	a_expr_unary_qualop = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_expr_unary_qualopContext);
	    } else {
	        return this.getTypedRuleContext(A_expr_unary_qualopContext,i);
	    }
	};

	qual_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Qual_opContext);
	    } else {
	        return this.getTypedRuleContext(Qual_opContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_qual_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_unary_qualopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_unary_qualop;
    }

	a_expr_add() {
	    return this.getTypedRuleContext(A_expr_addContext,0);
	};

	qual_op() {
	    return this.getTypedRuleContext(Qual_opContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_unary_qualop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_addContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_add;
    }

	a_expr_mul = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_expr_mulContext);
	    } else {
	        return this.getTypedRuleContext(A_expr_mulContext,i);
	    }
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.MINUS);
	    } else {
	        return this.getToken(PostgreSQLParser.MINUS, i);
	    }
	};


	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.PLUS);
	    } else {
	        return this.getToken(PostgreSQLParser.PLUS, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_add(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_mulContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_mul;
    }

	a_expr_caret = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_expr_caretContext);
	    } else {
	        return this.getTypedRuleContext(A_expr_caretContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.STAR);
	    } else {
	        return this.getToken(PostgreSQLParser.STAR, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.SLASH);
	    } else {
	        return this.getToken(PostgreSQLParser.SLASH, i);
	    }
	};


	PERCENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.PERCENT);
	    } else {
	        return this.getToken(PostgreSQLParser.PERCENT, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_mul(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_caretContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_caret;
    }

	a_expr_unary_sign() {
	    return this.getTypedRuleContext(A_expr_unary_signContext,0);
	};

	CARET() {
	    return this.getToken(PostgreSQLParser.CARET, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_caret(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_unary_signContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_unary_sign;
    }

	a_expr_at_time_zone() {
	    return this.getTypedRuleContext(A_expr_at_time_zoneContext,0);
	};

	MINUS() {
	    return this.getToken(PostgreSQLParser.MINUS, 0);
	};

	PLUS() {
	    return this.getToken(PostgreSQLParser.PLUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_unary_sign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_at_time_zoneContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_at_time_zone;
    }

	a_expr_collate() {
	    return this.getTypedRuleContext(A_expr_collateContext,0);
	};

	AT() {
	    return this.getToken(PostgreSQLParser.AT, 0);
	};

	TIME() {
	    return this.getToken(PostgreSQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(PostgreSQLParser.ZONE, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_at_time_zone(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_collateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_collate;
    }

	a_expr_typecast() {
	    return this.getTypedRuleContext(A_expr_typecastContext,0);
	};

	COLLATE() {
	    return this.getToken(PostgreSQLParser.COLLATE, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_collate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class A_expr_typecastContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_a_expr_typecast;
    }

	c_expr() {
	    return this.getTypedRuleContext(C_exprContext,0);
	};

	TYPECAST = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.TYPECAST);
	    } else {
	        return this.getToken(PostgreSQLParser.TYPECAST, i);
	    }
	};


	typename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypenameContext);
	    } else {
	        return this.getTypedRuleContext(TypenameContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitA_expr_typecast(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class B_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_b_expr;
    }

	c_expr() {
	    return this.getTypedRuleContext(C_exprContext,0);
	};

	b_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(B_exprContext);
	    } else {
	        return this.getTypedRuleContext(B_exprContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(PostgreSQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(PostgreSQLParser.MINUS, 0);
	};

	qual_op() {
	    return this.getTypedRuleContext(Qual_opContext,0);
	};

	CARET() {
	    return this.getToken(PostgreSQLParser.CARET, 0);
	};

	STAR() {
	    return this.getToken(PostgreSQLParser.STAR, 0);
	};

	SLASH() {
	    return this.getToken(PostgreSQLParser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(PostgreSQLParser.PERCENT, 0);
	};

	LT() {
	    return this.getToken(PostgreSQLParser.LT, 0);
	};

	GT() {
	    return this.getToken(PostgreSQLParser.GT, 0);
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	LESS_EQUALS() {
	    return this.getToken(PostgreSQLParser.LESS_EQUALS, 0);
	};

	GREATER_EQUALS() {
	    return this.getToken(PostgreSQLParser.GREATER_EQUALS, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(PostgreSQLParser.NOT_EQUALS, 0);
	};

	TYPECAST() {
	    return this.getToken(PostgreSQLParser.TYPECAST, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	IS() {
	    return this.getToken(PostgreSQLParser.IS, 0);
	};

	DISTINCT() {
	    return this.getToken(PostgreSQLParser.DISTINCT, 0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	OF() {
	    return this.getToken(PostgreSQLParser.OF, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	type_list() {
	    return this.getTypedRuleContext(Type_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	DOCUMENT_P() {
	    return this.getToken(PostgreSQLParser.DOCUMENT_P, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitB_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class C_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_c_expr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class C_expr_existsContext extends C_exprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	select_with_parens() {
	    return this.getTypedRuleContext(Select_with_parensContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitC_expr_exists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PostgreSQLParser.C_expr_existsContext = C_expr_existsContext;

class C_expr_caseContext extends C_exprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	case_expr() {
	    return this.getTypedRuleContext(Case_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitC_expr_case(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PostgreSQLParser.C_expr_caseContext = C_expr_caseContext;

class C_expr_exprContext extends C_exprContext {

    constructor(parser, ctx) {
        super(parser);
        this.a_expr_in_parens = null;;
        super.copyFrom(ctx);
    }

	ARRAY() {
	    return this.getToken(PostgreSQLParser.ARRAY, 0);
	};

	select_with_parens() {
	    return this.getTypedRuleContext(Select_with_parensContext,0);
	};

	array_expr() {
	    return this.getTypedRuleContext(Array_exprContext,0);
	};

	PARAM() {
	    return this.getToken(PostgreSQLParser.PARAM, 0);
	};

	opt_indirection() {
	    return this.getTypedRuleContext(Opt_indirectionContext,0);
	};

	GROUPING() {
	    return this.getToken(PostgreSQLParser.GROUPING, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	UNIQUE() {
	    return this.getToken(PostgreSQLParser.UNIQUE, 0);
	};

	columnref() {
	    return this.getTypedRuleContext(ColumnrefContext,0);
	};

	aexprconst() {
	    return this.getTypedRuleContext(AexprconstContext,0);
	};

	plsqlvariablename() {
	    return this.getTypedRuleContext(PlsqlvariablenameContext,0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	func_expr() {
	    return this.getTypedRuleContext(Func_exprContext,0);
	};

	indirection() {
	    return this.getTypedRuleContext(IndirectionContext,0);
	};

	explicit_row() {
	    return this.getTypedRuleContext(Explicit_rowContext,0);
	};

	implicit_row() {
	    return this.getTypedRuleContext(Implicit_rowContext,0);
	};

	row = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RowContext);
	    } else {
	        return this.getTypedRuleContext(RowContext,i);
	    }
	};

	OVERLAPS() {
	    return this.getToken(PostgreSQLParser.OVERLAPS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitC_expr_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PostgreSQLParser.C_expr_exprContext = C_expr_exprContext;

class PlsqlvariablenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_plsqlvariablename;
    }

	PLSQLVARIABLENAME() {
	    return this.getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPlsqlvariablename(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_applicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_application;
    }

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	func_arg_list() {
	    return this.getTypedRuleContext(Func_arg_listContext,0);
	};

	opt_sort_clause() {
	    return this.getTypedRuleContext(Opt_sort_clauseContext,0);
	};

	VARIADIC() {
	    return this.getToken(PostgreSQLParser.VARIADIC, 0);
	};

	func_arg_expr() {
	    return this.getTypedRuleContext(Func_arg_exprContext,0);
	};

	STAR() {
	    return this.getToken(PostgreSQLParser.STAR, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(PostgreSQLParser.DISTINCT, 0);
	};

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_application(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_expr;
    }

	func_application() {
	    return this.getTypedRuleContext(Func_applicationContext,0);
	};

	within_group_clause() {
	    return this.getTypedRuleContext(Within_group_clauseContext,0);
	};

	filter_clause() {
	    return this.getTypedRuleContext(Filter_clauseContext,0);
	};

	over_clause() {
	    return this.getTypedRuleContext(Over_clauseContext,0);
	};

	func_expr_common_subexpr() {
	    return this.getTypedRuleContext(Func_expr_common_subexprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_expr_windowlessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_expr_windowless;
    }

	func_application() {
	    return this.getTypedRuleContext(Func_applicationContext,0);
	};

	func_expr_common_subexpr() {
	    return this.getTypedRuleContext(Func_expr_common_subexprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_expr_windowless(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_expr_common_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_expr_common_subexpr;
    }

	COLLATION() {
	    return this.getToken(PostgreSQLParser.COLLATION, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_exprContext);
	    } else {
	        return this.getTypedRuleContext(A_exprContext,i);
	    }
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(PostgreSQLParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(PostgreSQLParser.CURRENT_TIME, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0);
	};

	LOCALTIME() {
	    return this.getToken(PostgreSQLParser.LOCALTIME, 0);
	};

	LOCALTIMESTAMP() {
	    return this.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0);
	};

	CURRENT_ROLE() {
	    return this.getToken(PostgreSQLParser.CURRENT_ROLE, 0);
	};

	CURRENT_USER() {
	    return this.getToken(PostgreSQLParser.CURRENT_USER, 0);
	};

	SESSION_USER() {
	    return this.getToken(PostgreSQLParser.SESSION_USER, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	CURRENT_CATALOG() {
	    return this.getToken(PostgreSQLParser.CURRENT_CATALOG, 0);
	};

	CURRENT_SCHEMA() {
	    return this.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0);
	};

	CAST() {
	    return this.getToken(PostgreSQLParser.CAST, 0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	EXTRACT() {
	    return this.getToken(PostgreSQLParser.EXTRACT, 0);
	};

	extract_list() {
	    return this.getTypedRuleContext(Extract_listContext,0);
	};

	NORMALIZE() {
	    return this.getToken(PostgreSQLParser.NORMALIZE, 0);
	};

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	unicode_normal_form() {
	    return this.getTypedRuleContext(Unicode_normal_formContext,0);
	};

	OVERLAY() {
	    return this.getToken(PostgreSQLParser.OVERLAY, 0);
	};

	overlay_list() {
	    return this.getTypedRuleContext(Overlay_listContext,0);
	};

	POSITION() {
	    return this.getToken(PostgreSQLParser.POSITION, 0);
	};

	position_list() {
	    return this.getTypedRuleContext(Position_listContext,0);
	};

	SUBSTRING() {
	    return this.getToken(PostgreSQLParser.SUBSTRING, 0);
	};

	substr_list() {
	    return this.getTypedRuleContext(Substr_listContext,0);
	};

	TREAT() {
	    return this.getToken(PostgreSQLParser.TREAT, 0);
	};

	TRIM() {
	    return this.getToken(PostgreSQLParser.TRIM, 0);
	};

	trim_list() {
	    return this.getTypedRuleContext(Trim_listContext,0);
	};

	BOTH() {
	    return this.getToken(PostgreSQLParser.BOTH, 0);
	};

	LEADING() {
	    return this.getToken(PostgreSQLParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(PostgreSQLParser.TRAILING, 0);
	};

	NULLIF() {
	    return this.getToken(PostgreSQLParser.NULLIF, 0);
	};

	COALESCE() {
	    return this.getToken(PostgreSQLParser.COALESCE, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	GREATEST() {
	    return this.getToken(PostgreSQLParser.GREATEST, 0);
	};

	LEAST() {
	    return this.getToken(PostgreSQLParser.LEAST, 0);
	};

	XMLCONCAT() {
	    return this.getToken(PostgreSQLParser.XMLCONCAT, 0);
	};

	XMLELEMENT() {
	    return this.getToken(PostgreSQLParser.XMLELEMENT, 0);
	};

	NAME_P() {
	    return this.getToken(PostgreSQLParser.NAME_P, 0);
	};

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	xml_attributes() {
	    return this.getTypedRuleContext(Xml_attributesContext,0);
	};

	XMLEXISTS() {
	    return this.getToken(PostgreSQLParser.XMLEXISTS, 0);
	};

	c_expr() {
	    return this.getTypedRuleContext(C_exprContext,0);
	};

	xmlexists_argument() {
	    return this.getTypedRuleContext(Xmlexists_argumentContext,0);
	};

	XMLFOREST() {
	    return this.getToken(PostgreSQLParser.XMLFOREST, 0);
	};

	xml_attribute_list() {
	    return this.getTypedRuleContext(Xml_attribute_listContext,0);
	};

	XMLPARSE() {
	    return this.getToken(PostgreSQLParser.XMLPARSE, 0);
	};

	document_or_content() {
	    return this.getTypedRuleContext(Document_or_contentContext,0);
	};

	xml_whitespace_option() {
	    return this.getTypedRuleContext(Xml_whitespace_optionContext,0);
	};

	XMLPI() {
	    return this.getToken(PostgreSQLParser.XMLPI, 0);
	};

	XMLROOT() {
	    return this.getToken(PostgreSQLParser.XMLROOT, 0);
	};

	XML_P() {
	    return this.getToken(PostgreSQLParser.XML_P, 0);
	};

	xml_root_version() {
	    return this.getTypedRuleContext(Xml_root_versionContext,0);
	};

	opt_xml_root_standalone() {
	    return this.getTypedRuleContext(Opt_xml_root_standaloneContext,0);
	};

	XMLSERIALIZE() {
	    return this.getToken(PostgreSQLParser.XMLSERIALIZE, 0);
	};

	simpletypename() {
	    return this.getTypedRuleContext(SimpletypenameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_expr_common_subexpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xml_root_versionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xml_root_version;
    }

	VERSION_P() {
	    return this.getToken(PostgreSQLParser.VERSION_P, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	VALUE_P() {
	    return this.getToken(PostgreSQLParser.VALUE_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXml_root_version(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_xml_root_standaloneContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_xml_root_standalone;
    }

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	STANDALONE_P() {
	    return this.getToken(PostgreSQLParser.STANDALONE_P, 0);
	};

	YES_P() {
	    return this.getToken(PostgreSQLParser.YES_P, 0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	VALUE_P() {
	    return this.getToken(PostgreSQLParser.VALUE_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_xml_root_standalone(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xml_attributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xml_attributes;
    }

	XMLATTRIBUTES() {
	    return this.getToken(PostgreSQLParser.XMLATTRIBUTES, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	xml_attribute_list() {
	    return this.getTypedRuleContext(Xml_attribute_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXml_attributes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xml_attribute_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xml_attribute_list;
    }

	xml_attribute_el = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Xml_attribute_elContext);
	    } else {
	        return this.getTypedRuleContext(Xml_attribute_elContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXml_attribute_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xml_attribute_elContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xml_attribute_el;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXml_attribute_el(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Document_or_contentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_document_or_content;
    }

	DOCUMENT_P() {
	    return this.getToken(PostgreSQLParser.DOCUMENT_P, 0);
	};

	CONTENT_P() {
	    return this.getToken(PostgreSQLParser.CONTENT_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDocument_or_content(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xml_whitespace_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xml_whitespace_option;
    }

	PRESERVE() {
	    return this.getToken(PostgreSQLParser.PRESERVE, 0);
	};

	WHITESPACE_P() {
	    return this.getToken(PostgreSQLParser.WHITESPACE_P, 0);
	};

	STRIP_P() {
	    return this.getToken(PostgreSQLParser.STRIP_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXml_whitespace_option(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xmlexists_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xmlexists_argument;
    }

	PASSING() {
	    return this.getToken(PostgreSQLParser.PASSING, 0);
	};

	c_expr() {
	    return this.getTypedRuleContext(C_exprContext,0);
	};

	xml_passing_mech = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Xml_passing_mechContext);
	    } else {
	        return this.getTypedRuleContext(Xml_passing_mechContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXmlexists_argument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xml_passing_mechContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xml_passing_mech;
    }

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	REF() {
	    return this.getToken(PostgreSQLParser.REF, 0);
	};

	VALUE_P() {
	    return this.getToken(PostgreSQLParser.VALUE_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXml_passing_mech(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Within_group_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_within_group_clause;
    }

	WITHIN() {
	    return this.getToken(PostgreSQLParser.WITHIN, 0);
	};

	GROUP_P() {
	    return this.getToken(PostgreSQLParser.GROUP_P, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	sort_clause() {
	    return this.getTypedRuleContext(Sort_clauseContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitWithin_group_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Filter_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_filter_clause;
    }

	FILTER() {
	    return this.getToken(PostgreSQLParser.FILTER, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	WHERE() {
	    return this.getToken(PostgreSQLParser.WHERE, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFilter_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_window_clause;
    }

	WINDOW() {
	    return this.getToken(PostgreSQLParser.WINDOW, 0);
	};

	window_definition_list() {
	    return this.getTypedRuleContext(Window_definition_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitWindow_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_definition_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_window_definition_list;
    }

	window_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Window_definitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitWindow_definition_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_window_definition;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitWindow_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Over_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_over_clause;
    }

	OVER() {
	    return this.getToken(PostgreSQLParser.OVER, 0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOver_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_window_specification;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	opt_existing_window_name() {
	    return this.getTypedRuleContext(Opt_existing_window_nameContext,0);
	};

	opt_partition_clause() {
	    return this.getTypedRuleContext(Opt_partition_clauseContext,0);
	};

	opt_sort_clause() {
	    return this.getTypedRuleContext(Opt_sort_clauseContext,0);
	};

	opt_frame_clause() {
	    return this.getTypedRuleContext(Opt_frame_clauseContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitWindow_specification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_existing_window_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_existing_window_name;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_existing_window_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_partition_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_partition_clause;
    }

	PARTITION() {
	    return this.getToken(PostgreSQLParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_partition_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_frame_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_frame_clause;
    }

	RANGE() {
	    return this.getToken(PostgreSQLParser.RANGE, 0);
	};

	frame_extent() {
	    return this.getTypedRuleContext(Frame_extentContext,0);
	};

	opt_window_exclusion_clause() {
	    return this.getTypedRuleContext(Opt_window_exclusion_clauseContext,0);
	};

	ROWS() {
	    return this.getToken(PostgreSQLParser.ROWS, 0);
	};

	GROUPS() {
	    return this.getToken(PostgreSQLParser.GROUPS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_frame_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Frame_extentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_frame_extent;
    }

	frame_bound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Frame_boundContext);
	    } else {
	        return this.getTypedRuleContext(Frame_boundContext,i);
	    }
	};

	BETWEEN() {
	    return this.getToken(PostgreSQLParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(PostgreSQLParser.AND, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFrame_extent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Frame_boundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_frame_bound;
    }

	UNBOUNDED() {
	    return this.getToken(PostgreSQLParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(PostgreSQLParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(PostgreSQLParser.FOLLOWING, 0);
	};

	CURRENT_P() {
	    return this.getToken(PostgreSQLParser.CURRENT_P, 0);
	};

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFrame_bound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_window_exclusion_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_window_exclusion_clause;
    }

	EXCLUDE() {
	    return this.getToken(PostgreSQLParser.EXCLUDE, 0);
	};

	CURRENT_P() {
	    return this.getToken(PostgreSQLParser.CURRENT_P, 0);
	};

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	GROUP_P() {
	    return this.getToken(PostgreSQLParser.GROUP_P, 0);
	};

	TIES() {
	    return this.getToken(PostgreSQLParser.TIES, 0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	OTHERS() {
	    return this.getToken(PostgreSQLParser.OTHERS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_window_exclusion_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_row;
    }

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Explicit_rowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_explicit_row;
    }

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExplicit_row(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Implicit_rowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_implicit_row;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitImplicit_row(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sub_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_sub_type;
    }

	ANY() {
	    return this.getToken(PostgreSQLParser.ANY, 0);
	};

	SOME() {
	    return this.getToken(PostgreSQLParser.SOME, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSub_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class All_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_all_op;
    }

	Operator() {
	    return this.getToken(PostgreSQLParser.Operator, 0);
	};

	mathop() {
	    return this.getTypedRuleContext(MathopContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAll_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MathopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_mathop;
    }

	PLUS() {
	    return this.getToken(PostgreSQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(PostgreSQLParser.MINUS, 0);
	};

	STAR() {
	    return this.getToken(PostgreSQLParser.STAR, 0);
	};

	SLASH() {
	    return this.getToken(PostgreSQLParser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(PostgreSQLParser.PERCENT, 0);
	};

	CARET() {
	    return this.getToken(PostgreSQLParser.CARET, 0);
	};

	LT() {
	    return this.getToken(PostgreSQLParser.LT, 0);
	};

	GT() {
	    return this.getToken(PostgreSQLParser.GT, 0);
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	LESS_EQUALS() {
	    return this.getToken(PostgreSQLParser.LESS_EQUALS, 0);
	};

	GREATER_EQUALS() {
	    return this.getToken(PostgreSQLParser.GREATER_EQUALS, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(PostgreSQLParser.NOT_EQUALS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitMathop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Qual_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_qual_op;
    }

	Operator() {
	    return this.getToken(PostgreSQLParser.Operator, 0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	any_operator() {
	    return this.getTypedRuleContext(Any_operatorContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitQual_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Qual_all_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_qual_all_op;
    }

	all_op() {
	    return this.getTypedRuleContext(All_opContext,0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	any_operator() {
	    return this.getTypedRuleContext(Any_operatorContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitQual_all_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Subquery_OpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_subquery_Op;
    }

	all_op() {
	    return this.getTypedRuleContext(All_opContext,0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	any_operator() {
	    return this.getTypedRuleContext(Any_operatorContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	LIKE() {
	    return this.getToken(PostgreSQLParser.LIKE, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	ILIKE() {
	    return this.getToken(PostgreSQLParser.ILIKE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSubquery_Op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_expr_list;
    }

	a_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_exprContext);
	    } else {
	        return this.getTypedRuleContext(A_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExpr_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_arg_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_arg_list;
    }

	func_arg_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Func_arg_exprContext);
	    } else {
	        return this.getTypedRuleContext(Func_arg_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_arg_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_arg_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_arg_expr;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	param_name() {
	    return this.getTypedRuleContext(Param_nameContext,0);
	};

	COLON_EQUALS() {
	    return this.getToken(PostgreSQLParser.COLON_EQUALS, 0);
	};

	EQUALS_GREATER() {
	    return this.getToken(PostgreSQLParser.EQUALS_GREATER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_arg_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_type_list;
    }

	typename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypenameContext);
	    } else {
	        return this.getTypedRuleContext(TypenameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitType_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Array_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_array_expr;
    }

	OPEN_BRACKET() {
	    return this.getToken(PostgreSQLParser.OPEN_BRACKET, 0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(PostgreSQLParser.CLOSE_BRACKET, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	array_expr_list() {
	    return this.getTypedRuleContext(Array_expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitArray_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Array_expr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_array_expr_list;
    }

	array_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Array_exprContext);
	    } else {
	        return this.getTypedRuleContext(Array_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitArray_expr_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Extract_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_extract_list;
    }

	extract_arg() {
	    return this.getTypedRuleContext(Extract_argContext,0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExtract_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Extract_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_extract_arg;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	YEAR_P() {
	    return this.getToken(PostgreSQLParser.YEAR_P, 0);
	};

	MONTH_P() {
	    return this.getToken(PostgreSQLParser.MONTH_P, 0);
	};

	DAY_P() {
	    return this.getToken(PostgreSQLParser.DAY_P, 0);
	};

	HOUR_P() {
	    return this.getToken(PostgreSQLParser.HOUR_P, 0);
	};

	MINUTE_P() {
	    return this.getToken(PostgreSQLParser.MINUTE_P, 0);
	};

	SECOND_P() {
	    return this.getToken(PostgreSQLParser.SECOND_P, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExtract_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Unicode_normal_formContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_unicode_normal_form;
    }

	NFC() {
	    return this.getToken(PostgreSQLParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(PostgreSQLParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(PostgreSQLParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(PostgreSQLParser.NFKD, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitUnicode_normal_form(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Overlay_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_overlay_list;
    }

	a_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_exprContext);
	    } else {
	        return this.getTypedRuleContext(A_exprContext,i);
	    }
	};

	PLACING() {
	    return this.getToken(PostgreSQLParser.PLACING, 0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOverlay_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Position_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_position_list;
    }

	b_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(B_exprContext);
	    } else {
	        return this.getTypedRuleContext(B_exprContext,i);
	    }
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPosition_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Substr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_substr_list;
    }

	a_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_exprContext);
	    } else {
	        return this.getTypedRuleContext(A_exprContext,i);
	    }
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	SIMILAR() {
	    return this.getToken(PostgreSQLParser.SIMILAR, 0);
	};

	ESCAPE() {
	    return this.getToken(PostgreSQLParser.ESCAPE, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSubstr_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Trim_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_trim_list;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTrim_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class In_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_in_expr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class In_expr_listContext extends In_exprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIn_expr_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PostgreSQLParser.In_expr_listContext = In_expr_listContext;

class In_expr_selectContext extends In_exprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	select_with_parens() {
	    return this.getTypedRuleContext(Select_with_parensContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIn_expr_select(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PostgreSQLParser.In_expr_selectContext = In_expr_selectContext;

class Case_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_case_expr;
    }

	CASE() {
	    return this.getToken(PostgreSQLParser.CASE, 0);
	};

	case_arg() {
	    return this.getTypedRuleContext(Case_argContext,0);
	};

	when_clause_list() {
	    return this.getTypedRuleContext(When_clause_listContext,0);
	};

	case_default() {
	    return this.getTypedRuleContext(Case_defaultContext,0);
	};

	END_P() {
	    return this.getToken(PostgreSQLParser.END_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCase_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class When_clause_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_when_clause_list;
    }

	when_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(When_clauseContext);
	    } else {
	        return this.getTypedRuleContext(When_clauseContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitWhen_clause_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class When_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_when_clause;
    }

	WHEN() {
	    return this.getToken(PostgreSQLParser.WHEN, 0);
	};

	a_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_exprContext);
	    } else {
	        return this.getTypedRuleContext(A_exprContext,i);
	    }
	};

	THEN() {
	    return this.getToken(PostgreSQLParser.THEN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitWhen_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Case_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_case_default;
    }

	ELSE() {
	    return this.getToken(PostgreSQLParser.ELSE, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCase_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Case_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_case_arg;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCase_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnrefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_columnref;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	indirection() {
	    return this.getTypedRuleContext(IndirectionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitColumnref(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Indirection_elContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_indirection_el;
    }

	DOT() {
	    return this.getToken(PostgreSQLParser.DOT, 0);
	};

	attr_name() {
	    return this.getTypedRuleContext(Attr_nameContext,0);
	};

	STAR() {
	    return this.getToken(PostgreSQLParser.STAR, 0);
	};

	OPEN_BRACKET() {
	    return this.getToken(PostgreSQLParser.OPEN_BRACKET, 0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(PostgreSQLParser.CLOSE_BRACKET, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	opt_slice_bound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Opt_slice_boundContext);
	    } else {
	        return this.getTypedRuleContext(Opt_slice_boundContext,i);
	    }
	};

	COLON() {
	    return this.getToken(PostgreSQLParser.COLON, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIndirection_el(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_slice_boundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_slice_bound;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_slice_bound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_indirection;
    }

	indirection_el = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indirection_elContext);
	    } else {
	        return this.getTypedRuleContext(Indirection_elContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIndirection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_indirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_indirection;
    }

	indirection_el = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indirection_elContext);
	    } else {
	        return this.getTypedRuleContext(Indirection_elContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_indirection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_target_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_target_list;
    }

	target_list() {
	    return this.getTypedRuleContext(Target_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_target_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Target_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_target_list;
    }

	target_el = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Target_elContext);
	    } else {
	        return this.getTypedRuleContext(Target_elContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTarget_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Target_elContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_target_el;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Target_labelContext extends Target_elContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTarget_label(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PostgreSQLParser.Target_labelContext = Target_labelContext;

class Target_starContext extends Target_elContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STAR() {
	    return this.getToken(PostgreSQLParser.STAR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTarget_star(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PostgreSQLParser.Target_starContext = Target_starContext;

class Qualified_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_qualified_name_list;
    }

	qualified_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Qualified_nameContext);
	    } else {
	        return this.getTypedRuleContext(Qualified_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitQualified_name_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Qualified_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_qualified_name;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	indirection() {
	    return this.getTypedRuleContext(IndirectionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitQualified_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_name_list;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitName_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_name;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Attr_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_attr_name;
    }

	collabel() {
	    return this.getTypedRuleContext(CollabelContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAttr_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class File_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_file_name;
    }

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFile_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_func_name;
    }

	builtin_function_name() {
	    return this.getTypedRuleContext(Builtin_function_nameContext,0);
	};

	type_function_name() {
	    return this.getTypedRuleContext(Type_function_nameContext,0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	indirection() {
	    return this.getTypedRuleContext(IndirectionContext,0);
	};

	LEFT() {
	    return this.getToken(PostgreSQLParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(PostgreSQLParser.RIGHT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFunc_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AexprconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_aexprconst;
    }

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	fconst() {
	    return this.getTypedRuleContext(FconstContext,0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	bconst() {
	    return this.getTypedRuleContext(BconstContext,0);
	};

	xconst() {
	    return this.getTypedRuleContext(XconstContext,0);
	};

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	func_arg_list() {
	    return this.getTypedRuleContext(Func_arg_listContext,0);
	};

	opt_sort_clause() {
	    return this.getTypedRuleContext(Opt_sort_clauseContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	consttypename() {
	    return this.getTypedRuleContext(ConsttypenameContext,0);
	};

	constinterval() {
	    return this.getTypedRuleContext(ConstintervalContext,0);
	};

	opt_interval() {
	    return this.getTypedRuleContext(Opt_intervalContext,0);
	};

	TRUE_P() {
	    return this.getToken(PostgreSQLParser.TRUE_P, 0);
	};

	FALSE_P() {
	    return this.getToken(PostgreSQLParser.FALSE_P, 0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAexprconst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_xconst;
    }

	HexadecimalStringConstant() {
	    return this.getToken(PostgreSQLParser.HexadecimalStringConstant, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitXconst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_bconst;
    }

	BinaryStringConstant() {
	    return this.getToken(PostgreSQLParser.BinaryStringConstant, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitBconst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_fconst;
    }

	Numeric() {
	    return this.getToken(PostgreSQLParser.Numeric, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFconst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_iconst;
    }

	Integral() {
	    return this.getToken(PostgreSQLParser.Integral, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIconst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_sconst;
    }

	anysconst() {
	    return this.getTypedRuleContext(AnysconstContext,0);
	};

	opt_uescape() {
	    return this.getTypedRuleContext(Opt_uescapeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSconst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnysconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_anysconst;
    }

	StringConstant() {
	    return this.getToken(PostgreSQLParser.StringConstant, 0);
	};

	UnicodeEscapeStringConstant() {
	    return this.getToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0);
	};

	BeginDollarStringConstant() {
	    return this.getToken(PostgreSQLParser.BeginDollarStringConstant, 0);
	};

	EndDollarStringConstant() {
	    return this.getToken(PostgreSQLParser.EndDollarStringConstant, 0);
	};

	DollarText = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.DollarText);
	    } else {
	        return this.getToken(PostgreSQLParser.DollarText, i);
	    }
	};


	EscapeStringConstant() {
	    return this.getToken(PostgreSQLParser.EscapeStringConstant, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAnysconst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_uescapeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_uescape;
    }

	UESCAPE() {
	    return this.getToken(PostgreSQLParser.UESCAPE, 0);
	};

	anysconst() {
	    return this.getTypedRuleContext(AnysconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_uescape(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SignediconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_signediconst;
    }

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	PLUS() {
	    return this.getToken(PostgreSQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(PostgreSQLParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSignediconst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_roleid;
    }

	rolespec() {
	    return this.getTypedRuleContext(RolespecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRoleid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RolespecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_rolespec;
    }

	nonreservedword() {
	    return this.getTypedRuleContext(NonreservedwordContext,0);
	};

	CURRENT_USER() {
	    return this.getToken(PostgreSQLParser.CURRENT_USER, 0);
	};

	SESSION_USER() {
	    return this.getToken(PostgreSQLParser.SESSION_USER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRolespec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Role_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_role_list;
    }

	rolespec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RolespecContext);
	    } else {
	        return this.getTypedRuleContext(RolespecContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitRole_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_colid;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	unreserved_keyword() {
	    return this.getTypedRuleContext(Unreserved_keywordContext,0);
	};

	col_name_keyword() {
	    return this.getTypedRuleContext(Col_name_keywordContext,0);
	};

	plsql_unreserved_keyword() {
	    return this.getTypedRuleContext(Plsql_unreserved_keywordContext,0);
	};

	LEFT() {
	    return this.getToken(PostgreSQLParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(PostgreSQLParser.RIGHT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitColid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_table_alias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	unreserved_keyword() {
	    return this.getTypedRuleContext(Unreserved_keywordContext,0);
	};

	col_name_keyword() {
	    return this.getTypedRuleContext(Col_name_keywordContext,0);
	};

	plsql_unreserved_keyword() {
	    return this.getTypedRuleContext(Plsql_unreserved_keywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitTable_alias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_type_function_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	unreserved_keyword() {
	    return this.getTypedRuleContext(Unreserved_keywordContext,0);
	};

	plsql_unreserved_keyword() {
	    return this.getTypedRuleContext(Plsql_unreserved_keywordContext,0);
	};

	type_func_name_keyword() {
	    return this.getTypedRuleContext(Type_func_name_keywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitType_function_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonreservedwordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_nonreservedword;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	unreserved_keyword() {
	    return this.getTypedRuleContext(Unreserved_keywordContext,0);
	};

	col_name_keyword() {
	    return this.getTypedRuleContext(Col_name_keywordContext,0);
	};

	type_func_name_keyword() {
	    return this.getTypedRuleContext(Type_func_name_keywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitNonreservedword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CollabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_collabel;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	plsql_unreserved_keyword() {
	    return this.getTypedRuleContext(Plsql_unreserved_keywordContext,0);
	};

	unreserved_keyword() {
	    return this.getTypedRuleContext(Unreserved_keywordContext,0);
	};

	col_name_keyword() {
	    return this.getTypedRuleContext(Col_name_keywordContext,0);
	};

	type_func_name_keyword() {
	    return this.getTypedRuleContext(Type_func_name_keywordContext,0);
	};

	reserved_keyword() {
	    return this.getTypedRuleContext(Reserved_keywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCollabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(PostgreSQLParser.Identifier, 0);
	};

	opt_uescape() {
	    return this.getTypedRuleContext(Opt_uescapeContext,0);
	};

	QuotedIdentifier() {
	    return this.getToken(PostgreSQLParser.QuotedIdentifier, 0);
	};

	UnicodeQuotedIdentifier() {
	    return this.getToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0);
	};

	plsqlvariablename() {
	    return this.getTypedRuleContext(PlsqlvariablenameContext,0);
	};

	plsqlidentifier() {
	    return this.getTypedRuleContext(PlsqlidentifierContext,0);
	};

	plsql_unreserved_keyword() {
	    return this.getTypedRuleContext(Plsql_unreserved_keywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlsqlidentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_plsqlidentifier;
    }

	PLSQLIDENTIFIER() {
	    return this.getToken(PostgreSQLParser.PLSQLIDENTIFIER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPlsqlidentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Unreserved_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_unreserved_keyword;
    }

	ABORT_P() {
	    return this.getToken(PostgreSQLParser.ABORT_P, 0);
	};

	ABSOLUTE_P() {
	    return this.getToken(PostgreSQLParser.ABSOLUTE_P, 0);
	};

	ACCESS() {
	    return this.getToken(PostgreSQLParser.ACCESS, 0);
	};

	ACTION() {
	    return this.getToken(PostgreSQLParser.ACTION, 0);
	};

	ADD_P() {
	    return this.getToken(PostgreSQLParser.ADD_P, 0);
	};

	ADMIN() {
	    return this.getToken(PostgreSQLParser.ADMIN, 0);
	};

	AFTER() {
	    return this.getToken(PostgreSQLParser.AFTER, 0);
	};

	AGGREGATE() {
	    return this.getToken(PostgreSQLParser.AGGREGATE, 0);
	};

	ALSO() {
	    return this.getToken(PostgreSQLParser.ALSO, 0);
	};

	ALTER() {
	    return this.getToken(PostgreSQLParser.ALTER, 0);
	};

	ALWAYS() {
	    return this.getToken(PostgreSQLParser.ALWAYS, 0);
	};

	ASSERTION() {
	    return this.getToken(PostgreSQLParser.ASSERTION, 0);
	};

	ASSIGNMENT() {
	    return this.getToken(PostgreSQLParser.ASSIGNMENT, 0);
	};

	AT() {
	    return this.getToken(PostgreSQLParser.AT, 0);
	};

	ATTACH() {
	    return this.getToken(PostgreSQLParser.ATTACH, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(PostgreSQLParser.ATTRIBUTE, 0);
	};

	BACKWARD() {
	    return this.getToken(PostgreSQLParser.BACKWARD, 0);
	};

	BEFORE() {
	    return this.getToken(PostgreSQLParser.BEFORE, 0);
	};

	BEGIN_P() {
	    return this.getToken(PostgreSQLParser.BEGIN_P, 0);
	};

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	CACHE() {
	    return this.getToken(PostgreSQLParser.CACHE, 0);
	};

	CALL() {
	    return this.getToken(PostgreSQLParser.CALL, 0);
	};

	CALLED() {
	    return this.getToken(PostgreSQLParser.CALLED, 0);
	};

	CASCADE() {
	    return this.getToken(PostgreSQLParser.CASCADE, 0);
	};

	CASCADED() {
	    return this.getToken(PostgreSQLParser.CASCADED, 0);
	};

	CATALOG() {
	    return this.getToken(PostgreSQLParser.CATALOG, 0);
	};

	CHAIN() {
	    return this.getToken(PostgreSQLParser.CHAIN, 0);
	};

	CHARACTERISTICS() {
	    return this.getToken(PostgreSQLParser.CHARACTERISTICS, 0);
	};

	CHECKPOINT() {
	    return this.getToken(PostgreSQLParser.CHECKPOINT, 0);
	};

	CLASS() {
	    return this.getToken(PostgreSQLParser.CLASS, 0);
	};

	CLOSE() {
	    return this.getToken(PostgreSQLParser.CLOSE, 0);
	};

	CLUSTER() {
	    return this.getToken(PostgreSQLParser.CLUSTER, 0);
	};

	COLUMNS() {
	    return this.getToken(PostgreSQLParser.COLUMNS, 0);
	};

	COMMENT() {
	    return this.getToken(PostgreSQLParser.COMMENT, 0);
	};

	COMMENTS() {
	    return this.getToken(PostgreSQLParser.COMMENTS, 0);
	};

	COMMIT() {
	    return this.getToken(PostgreSQLParser.COMMIT, 0);
	};

	COMMITTED() {
	    return this.getToken(PostgreSQLParser.COMMITTED, 0);
	};

	CONFIGURATION() {
	    return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
	};

	CONFLICT() {
	    return this.getToken(PostgreSQLParser.CONFLICT, 0);
	};

	CONNECTION() {
	    return this.getToken(PostgreSQLParser.CONNECTION, 0);
	};

	CONSTRAINTS() {
	    return this.getToken(PostgreSQLParser.CONSTRAINTS, 0);
	};

	CONTENT_P() {
	    return this.getToken(PostgreSQLParser.CONTENT_P, 0);
	};

	CONTINUE_P() {
	    return this.getToken(PostgreSQLParser.CONTINUE_P, 0);
	};

	CONVERSION_P() {
	    return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
	};

	COPY() {
	    return this.getToken(PostgreSQLParser.COPY, 0);
	};

	COST() {
	    return this.getToken(PostgreSQLParser.COST, 0);
	};

	CSV() {
	    return this.getToken(PostgreSQLParser.CSV, 0);
	};

	CUBE() {
	    return this.getToken(PostgreSQLParser.CUBE, 0);
	};

	CURRENT_P() {
	    return this.getToken(PostgreSQLParser.CURRENT_P, 0);
	};

	CURSOR() {
	    return this.getToken(PostgreSQLParser.CURSOR, 0);
	};

	CYCLE() {
	    return this.getToken(PostgreSQLParser.CYCLE, 0);
	};

	DATA_P() {
	    return this.getToken(PostgreSQLParser.DATA_P, 0);
	};

	DATABASE() {
	    return this.getToken(PostgreSQLParser.DATABASE, 0);
	};

	DAY_P() {
	    return this.getToken(PostgreSQLParser.DAY_P, 0);
	};

	DEALLOCATE() {
	    return this.getToken(PostgreSQLParser.DEALLOCATE, 0);
	};

	DECLARE() {
	    return this.getToken(PostgreSQLParser.DECLARE, 0);
	};

	DEFAULTS() {
	    return this.getToken(PostgreSQLParser.DEFAULTS, 0);
	};

	DEFERRED() {
	    return this.getToken(PostgreSQLParser.DEFERRED, 0);
	};

	DEFINER() {
	    return this.getToken(PostgreSQLParser.DEFINER, 0);
	};

	DELETE_P() {
	    return this.getToken(PostgreSQLParser.DELETE_P, 0);
	};

	DELIMITER() {
	    return this.getToken(PostgreSQLParser.DELIMITER, 0);
	};

	DELIMITERS() {
	    return this.getToken(PostgreSQLParser.DELIMITERS, 0);
	};

	DEPENDS() {
	    return this.getToken(PostgreSQLParser.DEPENDS, 0);
	};

	DETACH() {
	    return this.getToken(PostgreSQLParser.DETACH, 0);
	};

	DICTIONARY() {
	    return this.getToken(PostgreSQLParser.DICTIONARY, 0);
	};

	DISABLE_P() {
	    return this.getToken(PostgreSQLParser.DISABLE_P, 0);
	};

	DISCARD() {
	    return this.getToken(PostgreSQLParser.DISCARD, 0);
	};

	DOCUMENT_P() {
	    return this.getToken(PostgreSQLParser.DOCUMENT_P, 0);
	};

	DOMAIN_P() {
	    return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
	};

	DOUBLE_P() {
	    return this.getToken(PostgreSQLParser.DOUBLE_P, 0);
	};

	DROP() {
	    return this.getToken(PostgreSQLParser.DROP, 0);
	};

	EACH() {
	    return this.getToken(PostgreSQLParser.EACH, 0);
	};

	ENABLE_P() {
	    return this.getToken(PostgreSQLParser.ENABLE_P, 0);
	};

	ENCODING() {
	    return this.getToken(PostgreSQLParser.ENCODING, 0);
	};

	ENCRYPTED() {
	    return this.getToken(PostgreSQLParser.ENCRYPTED, 0);
	};

	ENUM_P() {
	    return this.getToken(PostgreSQLParser.ENUM_P, 0);
	};

	ESCAPE() {
	    return this.getToken(PostgreSQLParser.ESCAPE, 0);
	};

	EVENT() {
	    return this.getToken(PostgreSQLParser.EVENT, 0);
	};

	EXCLUDE() {
	    return this.getToken(PostgreSQLParser.EXCLUDE, 0);
	};

	EXCLUDING() {
	    return this.getToken(PostgreSQLParser.EXCLUDING, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(PostgreSQLParser.EXCLUSIVE, 0);
	};

	EXECUTE() {
	    return this.getToken(PostgreSQLParser.EXECUTE, 0);
	};

	EXPLAIN() {
	    return this.getToken(PostgreSQLParser.EXPLAIN, 0);
	};

	EXPRESSION() {
	    return this.getToken(PostgreSQLParser.EXPRESSION, 0);
	};

	EXTENSION() {
	    return this.getToken(PostgreSQLParser.EXTENSION, 0);
	};

	EXTERNAL() {
	    return this.getToken(PostgreSQLParser.EXTERNAL, 0);
	};

	FAMILY() {
	    return this.getToken(PostgreSQLParser.FAMILY, 0);
	};

	FILTER() {
	    return this.getToken(PostgreSQLParser.FILTER, 0);
	};

	FIRST_P() {
	    return this.getToken(PostgreSQLParser.FIRST_P, 0);
	};

	FOLLOWING() {
	    return this.getToken(PostgreSQLParser.FOLLOWING, 0);
	};

	FORCE() {
	    return this.getToken(PostgreSQLParser.FORCE, 0);
	};

	FORWARD() {
	    return this.getToken(PostgreSQLParser.FORWARD, 0);
	};

	FUNCTION() {
	    return this.getToken(PostgreSQLParser.FUNCTION, 0);
	};

	FUNCTIONS() {
	    return this.getToken(PostgreSQLParser.FUNCTIONS, 0);
	};

	GENERATED() {
	    return this.getToken(PostgreSQLParser.GENERATED, 0);
	};

	GLOBAL() {
	    return this.getToken(PostgreSQLParser.GLOBAL, 0);
	};

	GRANTED() {
	    return this.getToken(PostgreSQLParser.GRANTED, 0);
	};

	GROUPS() {
	    return this.getToken(PostgreSQLParser.GROUPS, 0);
	};

	HANDLER() {
	    return this.getToken(PostgreSQLParser.HANDLER, 0);
	};

	HEADER_P() {
	    return this.getToken(PostgreSQLParser.HEADER_P, 0);
	};

	HOLD() {
	    return this.getToken(PostgreSQLParser.HOLD, 0);
	};

	HOUR_P() {
	    return this.getToken(PostgreSQLParser.HOUR_P, 0);
	};

	IDENTITY_P() {
	    return this.getToken(PostgreSQLParser.IDENTITY_P, 0);
	};

	IF_P() {
	    return this.getToken(PostgreSQLParser.IF_P, 0);
	};

	IMMEDIATE() {
	    return this.getToken(PostgreSQLParser.IMMEDIATE, 0);
	};

	IMMUTABLE() {
	    return this.getToken(PostgreSQLParser.IMMUTABLE, 0);
	};

	IMPLICIT_P() {
	    return this.getToken(PostgreSQLParser.IMPLICIT_P, 0);
	};

	IMPORT_P() {
	    return this.getToken(PostgreSQLParser.IMPORT_P, 0);
	};

	INCLUDE() {
	    return this.getToken(PostgreSQLParser.INCLUDE, 0);
	};

	INCLUDING() {
	    return this.getToken(PostgreSQLParser.INCLUDING, 0);
	};

	INCREMENT() {
	    return this.getToken(PostgreSQLParser.INCREMENT, 0);
	};

	INDEX() {
	    return this.getToken(PostgreSQLParser.INDEX, 0);
	};

	INDEXES() {
	    return this.getToken(PostgreSQLParser.INDEXES, 0);
	};

	INHERIT() {
	    return this.getToken(PostgreSQLParser.INHERIT, 0);
	};

	INHERITS() {
	    return this.getToken(PostgreSQLParser.INHERITS, 0);
	};

	INLINE_P() {
	    return this.getToken(PostgreSQLParser.INLINE_P, 0);
	};

	INPUT_P() {
	    return this.getToken(PostgreSQLParser.INPUT_P, 0);
	};

	INSENSITIVE() {
	    return this.getToken(PostgreSQLParser.INSENSITIVE, 0);
	};

	INSERT() {
	    return this.getToken(PostgreSQLParser.INSERT, 0);
	};

	INSTEAD() {
	    return this.getToken(PostgreSQLParser.INSTEAD, 0);
	};

	INVOKER() {
	    return this.getToken(PostgreSQLParser.INVOKER, 0);
	};

	ISOLATION() {
	    return this.getToken(PostgreSQLParser.ISOLATION, 0);
	};

	KEY() {
	    return this.getToken(PostgreSQLParser.KEY, 0);
	};

	LABEL() {
	    return this.getToken(PostgreSQLParser.LABEL, 0);
	};

	LANGUAGE() {
	    return this.getToken(PostgreSQLParser.LANGUAGE, 0);
	};

	LARGE_P() {
	    return this.getToken(PostgreSQLParser.LARGE_P, 0);
	};

	LAST_P() {
	    return this.getToken(PostgreSQLParser.LAST_P, 0);
	};

	LEAKPROOF() {
	    return this.getToken(PostgreSQLParser.LEAKPROOF, 0);
	};

	LEVEL() {
	    return this.getToken(PostgreSQLParser.LEVEL, 0);
	};

	LISTEN() {
	    return this.getToken(PostgreSQLParser.LISTEN, 0);
	};

	LOAD() {
	    return this.getToken(PostgreSQLParser.LOAD, 0);
	};

	LOCAL() {
	    return this.getToken(PostgreSQLParser.LOCAL, 0);
	};

	LOCATION() {
	    return this.getToken(PostgreSQLParser.LOCATION, 0);
	};

	LOCK_P() {
	    return this.getToken(PostgreSQLParser.LOCK_P, 0);
	};

	LOCKED() {
	    return this.getToken(PostgreSQLParser.LOCKED, 0);
	};

	LOGGED() {
	    return this.getToken(PostgreSQLParser.LOGGED, 0);
	};

	MAPPING() {
	    return this.getToken(PostgreSQLParser.MAPPING, 0);
	};

	MATCH() {
	    return this.getToken(PostgreSQLParser.MATCH, 0);
	};

	MATERIALIZED() {
	    return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
	};

	MAXVALUE() {
	    return this.getToken(PostgreSQLParser.MAXVALUE, 0);
	};

	METHOD() {
	    return this.getToken(PostgreSQLParser.METHOD, 0);
	};

	MINUTE_P() {
	    return this.getToken(PostgreSQLParser.MINUTE_P, 0);
	};

	MINVALUE() {
	    return this.getToken(PostgreSQLParser.MINVALUE, 0);
	};

	MODE() {
	    return this.getToken(PostgreSQLParser.MODE, 0);
	};

	MONTH_P() {
	    return this.getToken(PostgreSQLParser.MONTH_P, 0);
	};

	MOVE() {
	    return this.getToken(PostgreSQLParser.MOVE, 0);
	};

	NAME_P() {
	    return this.getToken(PostgreSQLParser.NAME_P, 0);
	};

	NAMES() {
	    return this.getToken(PostgreSQLParser.NAMES, 0);
	};

	NEW() {
	    return this.getToken(PostgreSQLParser.NEW, 0);
	};

	NEXT() {
	    return this.getToken(PostgreSQLParser.NEXT, 0);
	};

	NFC() {
	    return this.getToken(PostgreSQLParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(PostgreSQLParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(PostgreSQLParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(PostgreSQLParser.NFKD, 0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	NORMALIZED() {
	    return this.getToken(PostgreSQLParser.NORMALIZED, 0);
	};

	NOTHING() {
	    return this.getToken(PostgreSQLParser.NOTHING, 0);
	};

	NOTIFY() {
	    return this.getToken(PostgreSQLParser.NOTIFY, 0);
	};

	NOWAIT() {
	    return this.getToken(PostgreSQLParser.NOWAIT, 0);
	};

	NULLS_P() {
	    return this.getToken(PostgreSQLParser.NULLS_P, 0);
	};

	OBJECT_P() {
	    return this.getToken(PostgreSQLParser.OBJECT_P, 0);
	};

	OF() {
	    return this.getToken(PostgreSQLParser.OF, 0);
	};

	OFF() {
	    return this.getToken(PostgreSQLParser.OFF, 0);
	};

	OIDS() {
	    return this.getToken(PostgreSQLParser.OIDS, 0);
	};

	OLD() {
	    return this.getToken(PostgreSQLParser.OLD, 0);
	};

	OPERATOR() {
	    return this.getToken(PostgreSQLParser.OPERATOR, 0);
	};

	OPTION() {
	    return this.getToken(PostgreSQLParser.OPTION, 0);
	};

	OPTIONS() {
	    return this.getToken(PostgreSQLParser.OPTIONS, 0);
	};

	ORDINALITY() {
	    return this.getToken(PostgreSQLParser.ORDINALITY, 0);
	};

	OTHERS() {
	    return this.getToken(PostgreSQLParser.OTHERS, 0);
	};

	OVER() {
	    return this.getToken(PostgreSQLParser.OVER, 0);
	};

	OVERRIDING() {
	    return this.getToken(PostgreSQLParser.OVERRIDING, 0);
	};

	OWNED() {
	    return this.getToken(PostgreSQLParser.OWNED, 0);
	};

	OWNER() {
	    return this.getToken(PostgreSQLParser.OWNER, 0);
	};

	PARALLEL() {
	    return this.getToken(PostgreSQLParser.PARALLEL, 0);
	};

	PARSER() {
	    return this.getToken(PostgreSQLParser.PARSER, 0);
	};

	PARTIAL() {
	    return this.getToken(PostgreSQLParser.PARTIAL, 0);
	};

	PARTITION() {
	    return this.getToken(PostgreSQLParser.PARTITION, 0);
	};

	PASSING() {
	    return this.getToken(PostgreSQLParser.PASSING, 0);
	};

	PASSWORD() {
	    return this.getToken(PostgreSQLParser.PASSWORD, 0);
	};

	PLANS() {
	    return this.getToken(PostgreSQLParser.PLANS, 0);
	};

	POLICY() {
	    return this.getToken(PostgreSQLParser.POLICY, 0);
	};

	PRECEDING() {
	    return this.getToken(PostgreSQLParser.PRECEDING, 0);
	};

	PREPARE() {
	    return this.getToken(PostgreSQLParser.PREPARE, 0);
	};

	PREPARED() {
	    return this.getToken(PostgreSQLParser.PREPARED, 0);
	};

	PRESERVE() {
	    return this.getToken(PostgreSQLParser.PRESERVE, 0);
	};

	PRIOR() {
	    return this.getToken(PostgreSQLParser.PRIOR, 0);
	};

	PRIVILEGES() {
	    return this.getToken(PostgreSQLParser.PRIVILEGES, 0);
	};

	PROCEDURAL() {
	    return this.getToken(PostgreSQLParser.PROCEDURAL, 0);
	};

	PROCEDURE() {
	    return this.getToken(PostgreSQLParser.PROCEDURE, 0);
	};

	PROCEDURES() {
	    return this.getToken(PostgreSQLParser.PROCEDURES, 0);
	};

	PROGRAM() {
	    return this.getToken(PostgreSQLParser.PROGRAM, 0);
	};

	PUBLICATION() {
	    return this.getToken(PostgreSQLParser.PUBLICATION, 0);
	};

	QUOTE() {
	    return this.getToken(PostgreSQLParser.QUOTE, 0);
	};

	RANGE() {
	    return this.getToken(PostgreSQLParser.RANGE, 0);
	};

	READ() {
	    return this.getToken(PostgreSQLParser.READ, 0);
	};

	REASSIGN() {
	    return this.getToken(PostgreSQLParser.REASSIGN, 0);
	};

	RECHECK() {
	    return this.getToken(PostgreSQLParser.RECHECK, 0);
	};

	RECURSIVE() {
	    return this.getToken(PostgreSQLParser.RECURSIVE, 0);
	};

	REF() {
	    return this.getToken(PostgreSQLParser.REF, 0);
	};

	REFERENCING() {
	    return this.getToken(PostgreSQLParser.REFERENCING, 0);
	};

	REFRESH() {
	    return this.getToken(PostgreSQLParser.REFRESH, 0);
	};

	REINDEX() {
	    return this.getToken(PostgreSQLParser.REINDEX, 0);
	};

	RELATIVE_P() {
	    return this.getToken(PostgreSQLParser.RELATIVE_P, 0);
	};

	RELEASE() {
	    return this.getToken(PostgreSQLParser.RELEASE, 0);
	};

	RENAME() {
	    return this.getToken(PostgreSQLParser.RENAME, 0);
	};

	REPEATABLE() {
	    return this.getToken(PostgreSQLParser.REPEATABLE, 0);
	};

	REPLICA() {
	    return this.getToken(PostgreSQLParser.REPLICA, 0);
	};

	RESET() {
	    return this.getToken(PostgreSQLParser.RESET, 0);
	};

	RESTART() {
	    return this.getToken(PostgreSQLParser.RESTART, 0);
	};

	RESTRICT() {
	    return this.getToken(PostgreSQLParser.RESTRICT, 0);
	};

	RETURNS() {
	    return this.getToken(PostgreSQLParser.RETURNS, 0);
	};

	REVOKE() {
	    return this.getToken(PostgreSQLParser.REVOKE, 0);
	};

	ROLE() {
	    return this.getToken(PostgreSQLParser.ROLE, 0);
	};

	ROLLBACK() {
	    return this.getToken(PostgreSQLParser.ROLLBACK, 0);
	};

	ROLLUP() {
	    return this.getToken(PostgreSQLParser.ROLLUP, 0);
	};

	ROUTINE() {
	    return this.getToken(PostgreSQLParser.ROUTINE, 0);
	};

	ROUTINES() {
	    return this.getToken(PostgreSQLParser.ROUTINES, 0);
	};

	ROWS() {
	    return this.getToken(PostgreSQLParser.ROWS, 0);
	};

	RULE() {
	    return this.getToken(PostgreSQLParser.RULE, 0);
	};

	SAVEPOINT() {
	    return this.getToken(PostgreSQLParser.SAVEPOINT, 0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	SCHEMAS() {
	    return this.getToken(PostgreSQLParser.SCHEMAS, 0);
	};

	SCROLL() {
	    return this.getToken(PostgreSQLParser.SCROLL, 0);
	};

	SEARCH() {
	    return this.getToken(PostgreSQLParser.SEARCH, 0);
	};

	SECOND_P() {
	    return this.getToken(PostgreSQLParser.SECOND_P, 0);
	};

	SECURITY() {
	    return this.getToken(PostgreSQLParser.SECURITY, 0);
	};

	SEQUENCE() {
	    return this.getToken(PostgreSQLParser.SEQUENCE, 0);
	};

	SEQUENCES() {
	    return this.getToken(PostgreSQLParser.SEQUENCES, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(PostgreSQLParser.SERIALIZABLE, 0);
	};

	SERVER() {
	    return this.getToken(PostgreSQLParser.SERVER, 0);
	};

	SESSION() {
	    return this.getToken(PostgreSQLParser.SESSION, 0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	SETS() {
	    return this.getToken(PostgreSQLParser.SETS, 0);
	};

	SHARE() {
	    return this.getToken(PostgreSQLParser.SHARE, 0);
	};

	SHOW() {
	    return this.getToken(PostgreSQLParser.SHOW, 0);
	};

	SIMPLE() {
	    return this.getToken(PostgreSQLParser.SIMPLE, 0);
	};

	SKIP_P() {
	    return this.getToken(PostgreSQLParser.SKIP_P, 0);
	};

	SNAPSHOT() {
	    return this.getToken(PostgreSQLParser.SNAPSHOT, 0);
	};

	SQL_P() {
	    return this.getToken(PostgreSQLParser.SQL_P, 0);
	};

	STABLE() {
	    return this.getToken(PostgreSQLParser.STABLE, 0);
	};

	STANDALONE_P() {
	    return this.getToken(PostgreSQLParser.STANDALONE_P, 0);
	};

	START() {
	    return this.getToken(PostgreSQLParser.START, 0);
	};

	STATEMENT() {
	    return this.getToken(PostgreSQLParser.STATEMENT, 0);
	};

	STATISTICS() {
	    return this.getToken(PostgreSQLParser.STATISTICS, 0);
	};

	STDIN() {
	    return this.getToken(PostgreSQLParser.STDIN, 0);
	};

	STDOUT() {
	    return this.getToken(PostgreSQLParser.STDOUT, 0);
	};

	STORAGE() {
	    return this.getToken(PostgreSQLParser.STORAGE, 0);
	};

	STORED() {
	    return this.getToken(PostgreSQLParser.STORED, 0);
	};

	STRICT_P() {
	    return this.getToken(PostgreSQLParser.STRICT_P, 0);
	};

	STRIP_P() {
	    return this.getToken(PostgreSQLParser.STRIP_P, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
	};

	SUPPORT() {
	    return this.getToken(PostgreSQLParser.SUPPORT, 0);
	};

	SYSID() {
	    return this.getToken(PostgreSQLParser.SYSID, 0);
	};

	SYSTEM_P() {
	    return this.getToken(PostgreSQLParser.SYSTEM_P, 0);
	};

	TABLES() {
	    return this.getToken(PostgreSQLParser.TABLES, 0);
	};

	TABLESPACE() {
	    return this.getToken(PostgreSQLParser.TABLESPACE, 0);
	};

	TEMP() {
	    return this.getToken(PostgreSQLParser.TEMP, 0);
	};

	TEMPLATE() {
	    return this.getToken(PostgreSQLParser.TEMPLATE, 0);
	};

	TEMPORARY() {
	    return this.getToken(PostgreSQLParser.TEMPORARY, 0);
	};

	TEXT_P() {
	    return this.getToken(PostgreSQLParser.TEXT_P, 0);
	};

	TIES() {
	    return this.getToken(PostgreSQLParser.TIES, 0);
	};

	TRANSACTION() {
	    return this.getToken(PostgreSQLParser.TRANSACTION, 0);
	};

	TRANSFORM() {
	    return this.getToken(PostgreSQLParser.TRANSFORM, 0);
	};

	TRIGGER() {
	    return this.getToken(PostgreSQLParser.TRIGGER, 0);
	};

	TRUNCATE() {
	    return this.getToken(PostgreSQLParser.TRUNCATE, 0);
	};

	TRUSTED() {
	    return this.getToken(PostgreSQLParser.TRUSTED, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	TYPES_P() {
	    return this.getToken(PostgreSQLParser.TYPES_P, 0);
	};

	UESCAPE() {
	    return this.getToken(PostgreSQLParser.UESCAPE, 0);
	};

	UNBOUNDED() {
	    return this.getToken(PostgreSQLParser.UNBOUNDED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(PostgreSQLParser.UNCOMMITTED, 0);
	};

	UNENCRYPTED() {
	    return this.getToken(PostgreSQLParser.UNENCRYPTED, 0);
	};

	UNKNOWN() {
	    return this.getToken(PostgreSQLParser.UNKNOWN, 0);
	};

	UNLISTEN() {
	    return this.getToken(PostgreSQLParser.UNLISTEN, 0);
	};

	UNLOGGED() {
	    return this.getToken(PostgreSQLParser.UNLOGGED, 0);
	};

	UNTIL() {
	    return this.getToken(PostgreSQLParser.UNTIL, 0);
	};

	UPDATE() {
	    return this.getToken(PostgreSQLParser.UPDATE, 0);
	};

	VACUUM() {
	    return this.getToken(PostgreSQLParser.VACUUM, 0);
	};

	VALID() {
	    return this.getToken(PostgreSQLParser.VALID, 0);
	};

	VALIDATE() {
	    return this.getToken(PostgreSQLParser.VALIDATE, 0);
	};

	VALIDATOR() {
	    return this.getToken(PostgreSQLParser.VALIDATOR, 0);
	};

	VALUE_P() {
	    return this.getToken(PostgreSQLParser.VALUE_P, 0);
	};

	VARYING() {
	    return this.getToken(PostgreSQLParser.VARYING, 0);
	};

	VERSION_P() {
	    return this.getToken(PostgreSQLParser.VERSION_P, 0);
	};

	VIEW() {
	    return this.getToken(PostgreSQLParser.VIEW, 0);
	};

	VIEWS() {
	    return this.getToken(PostgreSQLParser.VIEWS, 0);
	};

	VOLATILE() {
	    return this.getToken(PostgreSQLParser.VOLATILE, 0);
	};

	WHITESPACE_P() {
	    return this.getToken(PostgreSQLParser.WHITESPACE_P, 0);
	};

	WITHIN() {
	    return this.getToken(PostgreSQLParser.WITHIN, 0);
	};

	WITHOUT() {
	    return this.getToken(PostgreSQLParser.WITHOUT, 0);
	};

	WORK() {
	    return this.getToken(PostgreSQLParser.WORK, 0);
	};

	WRAPPER() {
	    return this.getToken(PostgreSQLParser.WRAPPER, 0);
	};

	WRITE() {
	    return this.getToken(PostgreSQLParser.WRITE, 0);
	};

	XML_P() {
	    return this.getToken(PostgreSQLParser.XML_P, 0);
	};

	YEAR_P() {
	    return this.getToken(PostgreSQLParser.YEAR_P, 0);
	};

	YES_P() {
	    return this.getToken(PostgreSQLParser.YES_P, 0);
	};

	ZONE() {
	    return this.getToken(PostgreSQLParser.ZONE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitUnreserved_keyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Col_name_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_col_name_keyword;
    }

	BETWEEN() {
	    return this.getToken(PostgreSQLParser.BETWEEN, 0);
	};

	BIGINT() {
	    return this.getToken(PostgreSQLParser.BIGINT, 0);
	};

	bit() {
	    return this.getTypedRuleContext(BitContext,0);
	};

	BOOLEAN_P() {
	    return this.getToken(PostgreSQLParser.BOOLEAN_P, 0);
	};

	CHAR_P() {
	    return this.getToken(PostgreSQLParser.CHAR_P, 0);
	};

	character() {
	    return this.getTypedRuleContext(CharacterContext,0);
	};

	COALESCE() {
	    return this.getToken(PostgreSQLParser.COALESCE, 0);
	};

	DEC() {
	    return this.getToken(PostgreSQLParser.DEC, 0);
	};

	DECIMAL_P() {
	    return this.getToken(PostgreSQLParser.DECIMAL_P, 0);
	};

	EXISTS() {
	    return this.getToken(PostgreSQLParser.EXISTS, 0);
	};

	EXTRACT() {
	    return this.getToken(PostgreSQLParser.EXTRACT, 0);
	};

	FLOAT_P() {
	    return this.getToken(PostgreSQLParser.FLOAT_P, 0);
	};

	GREATEST() {
	    return this.getToken(PostgreSQLParser.GREATEST, 0);
	};

	GROUPING() {
	    return this.getToken(PostgreSQLParser.GROUPING, 0);
	};

	INOUT() {
	    return this.getToken(PostgreSQLParser.INOUT, 0);
	};

	INT_P() {
	    return this.getToken(PostgreSQLParser.INT_P, 0);
	};

	INTEGER() {
	    return this.getToken(PostgreSQLParser.INTEGER, 0);
	};

	INTERVAL() {
	    return this.getToken(PostgreSQLParser.INTERVAL, 0);
	};

	LEAST() {
	    return this.getToken(PostgreSQLParser.LEAST, 0);
	};

	NATIONAL() {
	    return this.getToken(PostgreSQLParser.NATIONAL, 0);
	};

	NCHAR() {
	    return this.getToken(PostgreSQLParser.NCHAR, 0);
	};

	NONE() {
	    return this.getToken(PostgreSQLParser.NONE, 0);
	};

	NORMALIZE() {
	    return this.getToken(PostgreSQLParser.NORMALIZE, 0);
	};

	NULLIF() {
	    return this.getToken(PostgreSQLParser.NULLIF, 0);
	};

	numeric() {
	    return this.getTypedRuleContext(NumericContext,0);
	};

	OUT_P() {
	    return this.getToken(PostgreSQLParser.OUT_P, 0);
	};

	OVERLAY() {
	    return this.getToken(PostgreSQLParser.OVERLAY, 0);
	};

	POSITION() {
	    return this.getToken(PostgreSQLParser.POSITION, 0);
	};

	PRECISION() {
	    return this.getToken(PostgreSQLParser.PRECISION, 0);
	};

	REAL() {
	    return this.getToken(PostgreSQLParser.REAL, 0);
	};

	ROW() {
	    return this.getToken(PostgreSQLParser.ROW, 0);
	};

	SETOF() {
	    return this.getToken(PostgreSQLParser.SETOF, 0);
	};

	SMALLINT() {
	    return this.getToken(PostgreSQLParser.SMALLINT, 0);
	};

	SUBSTRING() {
	    return this.getToken(PostgreSQLParser.SUBSTRING, 0);
	};

	TIME() {
	    return this.getToken(PostgreSQLParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(PostgreSQLParser.TIMESTAMP, 0);
	};

	TREAT() {
	    return this.getToken(PostgreSQLParser.TREAT, 0);
	};

	TRIM() {
	    return this.getToken(PostgreSQLParser.TRIM, 0);
	};

	VALUES() {
	    return this.getToken(PostgreSQLParser.VALUES, 0);
	};

	VARCHAR() {
	    return this.getToken(PostgreSQLParser.VARCHAR, 0);
	};

	XMLATTRIBUTES() {
	    return this.getToken(PostgreSQLParser.XMLATTRIBUTES, 0);
	};

	XMLCONCAT() {
	    return this.getToken(PostgreSQLParser.XMLCONCAT, 0);
	};

	XMLELEMENT() {
	    return this.getToken(PostgreSQLParser.XMLELEMENT, 0);
	};

	XMLEXISTS() {
	    return this.getToken(PostgreSQLParser.XMLEXISTS, 0);
	};

	XMLFOREST() {
	    return this.getToken(PostgreSQLParser.XMLFOREST, 0);
	};

	XMLNAMESPACES() {
	    return this.getToken(PostgreSQLParser.XMLNAMESPACES, 0);
	};

	XMLPARSE() {
	    return this.getToken(PostgreSQLParser.XMLPARSE, 0);
	};

	XMLPI() {
	    return this.getToken(PostgreSQLParser.XMLPI, 0);
	};

	XMLROOT() {
	    return this.getToken(PostgreSQLParser.XMLROOT, 0);
	};

	XMLSERIALIZE() {
	    return this.getToken(PostgreSQLParser.XMLSERIALIZE, 0);
	};

	XMLTABLE() {
	    return this.getToken(PostgreSQLParser.XMLTABLE, 0);
	};

	builtin_function_name() {
	    return this.getTypedRuleContext(Builtin_function_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCol_name_keyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_func_name_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_type_func_name_keyword;
    }

	AUTHORIZATION() {
	    return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
	};

	BINARY() {
	    return this.getToken(PostgreSQLParser.BINARY, 0);
	};

	COLLATION() {
	    return this.getToken(PostgreSQLParser.COLLATION, 0);
	};

	CONCURRENTLY() {
	    return this.getToken(PostgreSQLParser.CONCURRENTLY, 0);
	};

	CROSS() {
	    return this.getToken(PostgreSQLParser.CROSS, 0);
	};

	CURRENT_SCHEMA() {
	    return this.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0);
	};

	FREEZE() {
	    return this.getToken(PostgreSQLParser.FREEZE, 0);
	};

	FULL() {
	    return this.getToken(PostgreSQLParser.FULL, 0);
	};

	ILIKE() {
	    return this.getToken(PostgreSQLParser.ILIKE, 0);
	};

	INNER_P() {
	    return this.getToken(PostgreSQLParser.INNER_P, 0);
	};

	IS() {
	    return this.getToken(PostgreSQLParser.IS, 0);
	};

	ISNULL() {
	    return this.getToken(PostgreSQLParser.ISNULL, 0);
	};

	JOIN() {
	    return this.getToken(PostgreSQLParser.JOIN, 0);
	};

	LIKE() {
	    return this.getToken(PostgreSQLParser.LIKE, 0);
	};

	NATURAL() {
	    return this.getToken(PostgreSQLParser.NATURAL, 0);
	};

	NOTNULL() {
	    return this.getToken(PostgreSQLParser.NOTNULL, 0);
	};

	OUTER_P() {
	    return this.getToken(PostgreSQLParser.OUTER_P, 0);
	};

	OVERLAPS() {
	    return this.getToken(PostgreSQLParser.OVERLAPS, 0);
	};

	SIMILAR() {
	    return this.getToken(PostgreSQLParser.SIMILAR, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(PostgreSQLParser.TABLESAMPLE, 0);
	};

	VERBOSE() {
	    return this.getToken(PostgreSQLParser.VERBOSE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitType_func_name_keyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Reserved_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_reserved_keyword;
    }

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	ANALYSE() {
	    return this.getToken(PostgreSQLParser.ANALYSE, 0);
	};

	ANALYZE() {
	    return this.getToken(PostgreSQLParser.ANALYZE, 0);
	};

	AND() {
	    return this.getToken(PostgreSQLParser.AND, 0);
	};

	ANY() {
	    return this.getToken(PostgreSQLParser.ANY, 0);
	};

	ARRAY() {
	    return this.getToken(PostgreSQLParser.ARRAY, 0);
	};

	AS() {
	    return this.getToken(PostgreSQLParser.AS, 0);
	};

	ASC() {
	    return this.getToken(PostgreSQLParser.ASC, 0);
	};

	ASYMMETRIC() {
	    return this.getToken(PostgreSQLParser.ASYMMETRIC, 0);
	};

	BOTH() {
	    return this.getToken(PostgreSQLParser.BOTH, 0);
	};

	CASE() {
	    return this.getToken(PostgreSQLParser.CASE, 0);
	};

	CAST() {
	    return this.getToken(PostgreSQLParser.CAST, 0);
	};

	CHECK() {
	    return this.getToken(PostgreSQLParser.CHECK, 0);
	};

	COLLATE() {
	    return this.getToken(PostgreSQLParser.COLLATE, 0);
	};

	COLUMN() {
	    return this.getToken(PostgreSQLParser.COLUMN, 0);
	};

	CONSTRAINT() {
	    return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
	};

	CREATE() {
	    return this.getToken(PostgreSQLParser.CREATE, 0);
	};

	CURRENT_CATALOG() {
	    return this.getToken(PostgreSQLParser.CURRENT_CATALOG, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(PostgreSQLParser.CURRENT_DATE, 0);
	};

	CURRENT_ROLE() {
	    return this.getToken(PostgreSQLParser.CURRENT_ROLE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(PostgreSQLParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0);
	};

	CURRENT_USER() {
	    return this.getToken(PostgreSQLParser.CURRENT_USER, 0);
	};

	DEFERRABLE() {
	    return this.getToken(PostgreSQLParser.DEFERRABLE, 0);
	};

	DESC() {
	    return this.getToken(PostgreSQLParser.DESC, 0);
	};

	DISTINCT() {
	    return this.getToken(PostgreSQLParser.DISTINCT, 0);
	};

	DO() {
	    return this.getToken(PostgreSQLParser.DO, 0);
	};

	ELSE() {
	    return this.getToken(PostgreSQLParser.ELSE, 0);
	};

	END_P() {
	    return this.getToken(PostgreSQLParser.END_P, 0);
	};

	EXCEPT() {
	    return this.getToken(PostgreSQLParser.EXCEPT, 0);
	};

	FALSE_P() {
	    return this.getToken(PostgreSQLParser.FALSE_P, 0);
	};

	FETCH() {
	    return this.getToken(PostgreSQLParser.FETCH, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	FOREIGN() {
	    return this.getToken(PostgreSQLParser.FOREIGN, 0);
	};

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	GRANT() {
	    return this.getToken(PostgreSQLParser.GRANT, 0);
	};

	GROUP_P() {
	    return this.getToken(PostgreSQLParser.GROUP_P, 0);
	};

	HAVING() {
	    return this.getToken(PostgreSQLParser.HAVING, 0);
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	INITIALLY() {
	    return this.getToken(PostgreSQLParser.INITIALLY, 0);
	};

	INTERSECT() {
	    return this.getToken(PostgreSQLParser.INTERSECT, 0);
	};

	LATERAL_P() {
	    return this.getToken(PostgreSQLParser.LATERAL_P, 0);
	};

	LEADING() {
	    return this.getToken(PostgreSQLParser.LEADING, 0);
	};

	LIMIT() {
	    return this.getToken(PostgreSQLParser.LIMIT, 0);
	};

	LOCALTIME() {
	    return this.getToken(PostgreSQLParser.LOCALTIME, 0);
	};

	LOCALTIMESTAMP() {
	    return this.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0);
	};

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	OFFSET() {
	    return this.getToken(PostgreSQLParser.OFFSET, 0);
	};

	ON() {
	    return this.getToken(PostgreSQLParser.ON, 0);
	};

	ONLY() {
	    return this.getToken(PostgreSQLParser.ONLY, 0);
	};

	OR() {
	    return this.getToken(PostgreSQLParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(PostgreSQLParser.ORDER, 0);
	};

	PLACING() {
	    return this.getToken(PostgreSQLParser.PLACING, 0);
	};

	PRIMARY() {
	    return this.getToken(PostgreSQLParser.PRIMARY, 0);
	};

	REFERENCES() {
	    return this.getToken(PostgreSQLParser.REFERENCES, 0);
	};

	RETURNING() {
	    return this.getToken(PostgreSQLParser.RETURNING, 0);
	};

	SELECT() {
	    return this.getToken(PostgreSQLParser.SELECT, 0);
	};

	SESSION_USER() {
	    return this.getToken(PostgreSQLParser.SESSION_USER, 0);
	};

	SOME() {
	    return this.getToken(PostgreSQLParser.SOME, 0);
	};

	SYMMETRIC() {
	    return this.getToken(PostgreSQLParser.SYMMETRIC, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	THEN() {
	    return this.getToken(PostgreSQLParser.THEN, 0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	TRAILING() {
	    return this.getToken(PostgreSQLParser.TRAILING, 0);
	};

	TRUE_P() {
	    return this.getToken(PostgreSQLParser.TRUE_P, 0);
	};

	UNION() {
	    return this.getToken(PostgreSQLParser.UNION, 0);
	};

	UNIQUE() {
	    return this.getToken(PostgreSQLParser.UNIQUE, 0);
	};

	USER() {
	    return this.getToken(PostgreSQLParser.USER, 0);
	};

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	VARIADIC() {
	    return this.getToken(PostgreSQLParser.VARIADIC, 0);
	};

	WHEN() {
	    return this.getToken(PostgreSQLParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(PostgreSQLParser.WHERE, 0);
	};

	WINDOW() {
	    return this.getToken(PostgreSQLParser.WINDOW, 0);
	};

	WITH() {
	    return this.getToken(PostgreSQLParser.WITH, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitReserved_keyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Builtin_function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_builtin_function_name;
    }

	XMLCOMMENT() {
	    return this.getToken(PostgreSQLParser.XMLCOMMENT, 0);
	};

	XML_IS_WELL_FORMED() {
	    return this.getToken(PostgreSQLParser.XML_IS_WELL_FORMED, 0);
	};

	XML_IS_WELL_FORMED_DOCUMENT() {
	    return this.getToken(PostgreSQLParser.XML_IS_WELL_FORMED_DOCUMENT, 0);
	};

	XML_IS_WELL_FORMED_CONTENT() {
	    return this.getToken(PostgreSQLParser.XML_IS_WELL_FORMED_CONTENT, 0);
	};

	XMLAGG() {
	    return this.getToken(PostgreSQLParser.XMLAGG, 0);
	};

	XPATH() {
	    return this.getToken(PostgreSQLParser.XPATH, 0);
	};

	XPATH_EXISTS() {
	    return this.getToken(PostgreSQLParser.XPATH_EXISTS, 0);
	};

	ABS() {
	    return this.getToken(PostgreSQLParser.ABS, 0);
	};

	CBRT() {
	    return this.getToken(PostgreSQLParser.CBRT, 0);
	};

	CEIL() {
	    return this.getToken(PostgreSQLParser.CEIL, 0);
	};

	CEILING() {
	    return this.getToken(PostgreSQLParser.CEILING, 0);
	};

	DEGREES() {
	    return this.getToken(PostgreSQLParser.DEGREES, 0);
	};

	DIV() {
	    return this.getToken(PostgreSQLParser.DIV, 0);
	};

	EXP() {
	    return this.getToken(PostgreSQLParser.EXP, 0);
	};

	FACTORIAL() {
	    return this.getToken(PostgreSQLParser.FACTORIAL, 0);
	};

	FLOOR() {
	    return this.getToken(PostgreSQLParser.FLOOR, 0);
	};

	GCD() {
	    return this.getToken(PostgreSQLParser.GCD, 0);
	};

	LCM() {
	    return this.getToken(PostgreSQLParser.LCM, 0);
	};

	LN() {
	    return this.getToken(PostgreSQLParser.LN, 0);
	};

	LOG() {
	    return this.getToken(PostgreSQLParser.LOG, 0);
	};

	LOG10() {
	    return this.getToken(PostgreSQLParser.LOG10, 0);
	};

	MIN_SCALE() {
	    return this.getToken(PostgreSQLParser.MIN_SCALE, 0);
	};

	MOD() {
	    return this.getToken(PostgreSQLParser.MOD, 0);
	};

	PI() {
	    return this.getToken(PostgreSQLParser.PI, 0);
	};

	POWER() {
	    return this.getToken(PostgreSQLParser.POWER, 0);
	};

	RADIANS() {
	    return this.getToken(PostgreSQLParser.RADIANS, 0);
	};

	ROUND() {
	    return this.getToken(PostgreSQLParser.ROUND, 0);
	};

	SCALE() {
	    return this.getToken(PostgreSQLParser.SCALE, 0);
	};

	SIGN() {
	    return this.getToken(PostgreSQLParser.SIGN, 0);
	};

	SQRT() {
	    return this.getToken(PostgreSQLParser.SQRT, 0);
	};

	TRIM_SCALE() {
	    return this.getToken(PostgreSQLParser.TRIM_SCALE, 0);
	};

	TRUNC() {
	    return this.getToken(PostgreSQLParser.TRUNC, 0);
	};

	WIDTH_BUCKET() {
	    return this.getToken(PostgreSQLParser.WIDTH_BUCKET, 0);
	};

	RANDOM() {
	    return this.getToken(PostgreSQLParser.RANDOM, 0);
	};

	SETSEED() {
	    return this.getToken(PostgreSQLParser.SETSEED, 0);
	};

	ACOS() {
	    return this.getToken(PostgreSQLParser.ACOS, 0);
	};

	ACOSD() {
	    return this.getToken(PostgreSQLParser.ACOSD, 0);
	};

	ACOSH() {
	    return this.getToken(PostgreSQLParser.ACOSH, 0);
	};

	ASIN() {
	    return this.getToken(PostgreSQLParser.ASIN, 0);
	};

	ASIND() {
	    return this.getToken(PostgreSQLParser.ASIND, 0);
	};

	ASINH() {
	    return this.getToken(PostgreSQLParser.ASINH, 0);
	};

	ATAN() {
	    return this.getToken(PostgreSQLParser.ATAN, 0);
	};

	ATAND() {
	    return this.getToken(PostgreSQLParser.ATAND, 0);
	};

	ATANH() {
	    return this.getToken(PostgreSQLParser.ATANH, 0);
	};

	ATAN2() {
	    return this.getToken(PostgreSQLParser.ATAN2, 0);
	};

	ATAN2D() {
	    return this.getToken(PostgreSQLParser.ATAN2D, 0);
	};

	COS() {
	    return this.getToken(PostgreSQLParser.COS, 0);
	};

	COSD() {
	    return this.getToken(PostgreSQLParser.COSD, 0);
	};

	COSH() {
	    return this.getToken(PostgreSQLParser.COSH, 0);
	};

	COT() {
	    return this.getToken(PostgreSQLParser.COT, 0);
	};

	COTD() {
	    return this.getToken(PostgreSQLParser.COTD, 0);
	};

	SIN() {
	    return this.getToken(PostgreSQLParser.SIN, 0);
	};

	SIND() {
	    return this.getToken(PostgreSQLParser.SIND, 0);
	};

	SINH() {
	    return this.getToken(PostgreSQLParser.SINH, 0);
	};

	TAN() {
	    return this.getToken(PostgreSQLParser.TAN, 0);
	};

	TAND() {
	    return this.getToken(PostgreSQLParser.TAND, 0);
	};

	TANH() {
	    return this.getToken(PostgreSQLParser.TANH, 0);
	};

	BIT_LENGTH() {
	    return this.getToken(PostgreSQLParser.BIT_LENGTH, 0);
	};

	CHAR_LENGTH() {
	    return this.getToken(PostgreSQLParser.CHAR_LENGTH, 0);
	};

	CHARACTER_LENGTH() {
	    return this.getToken(PostgreSQLParser.CHARACTER_LENGTH, 0);
	};

	LOWER() {
	    return this.getToken(PostgreSQLParser.LOWER, 0);
	};

	OCTET_LENGTH() {
	    return this.getToken(PostgreSQLParser.OCTET_LENGTH, 0);
	};

	UPPER() {
	    return this.getToken(PostgreSQLParser.UPPER, 0);
	};

	ASCII() {
	    return this.getToken(PostgreSQLParser.ASCII, 0);
	};

	BTRIM() {
	    return this.getToken(PostgreSQLParser.BTRIM, 0);
	};

	CHR() {
	    return this.getToken(PostgreSQLParser.CHR, 0);
	};

	CONCAT() {
	    return this.getToken(PostgreSQLParser.CONCAT, 0);
	};

	CONCAT_WS() {
	    return this.getToken(PostgreSQLParser.CONCAT_WS, 0);
	};

	FORMAT() {
	    return this.getToken(PostgreSQLParser.FORMAT, 0);
	};

	INITCAP() {
	    return this.getToken(PostgreSQLParser.INITCAP, 0);
	};

	LENGTH() {
	    return this.getToken(PostgreSQLParser.LENGTH, 0);
	};

	LPAD() {
	    return this.getToken(PostgreSQLParser.LPAD, 0);
	};

	LTRIM() {
	    return this.getToken(PostgreSQLParser.LTRIM, 0);
	};

	MD5() {
	    return this.getToken(PostgreSQLParser.MD5, 0);
	};

	PARSE_IDENT() {
	    return this.getToken(PostgreSQLParser.PARSE_IDENT, 0);
	};

	PG_CLIENT_ENCODING() {
	    return this.getToken(PostgreSQLParser.PG_CLIENT_ENCODING, 0);
	};

	QUOTE_IDENT() {
	    return this.getToken(PostgreSQLParser.QUOTE_IDENT, 0);
	};

	QUOTE_LITERAL() {
	    return this.getToken(PostgreSQLParser.QUOTE_LITERAL, 0);
	};

	QUOTE_NULLABLE() {
	    return this.getToken(PostgreSQLParser.QUOTE_NULLABLE, 0);
	};

	REGEXP_COUNT() {
	    return this.getToken(PostgreSQLParser.REGEXP_COUNT, 0);
	};

	REGEXP_INSTR() {
	    return this.getToken(PostgreSQLParser.REGEXP_INSTR, 0);
	};

	REGEXP_LIKE() {
	    return this.getToken(PostgreSQLParser.REGEXP_LIKE, 0);
	};

	REGEXP_MATCH() {
	    return this.getToken(PostgreSQLParser.REGEXP_MATCH, 0);
	};

	REGEXP_MATCHES() {
	    return this.getToken(PostgreSQLParser.REGEXP_MATCHES, 0);
	};

	REGEXP_REPLACE() {
	    return this.getToken(PostgreSQLParser.REGEXP_REPLACE, 0);
	};

	REGEXP_SPLIT_TO_ARRAY() {
	    return this.getToken(PostgreSQLParser.REGEXP_SPLIT_TO_ARRAY, 0);
	};

	REGEXP_SPLIT_TO_TABLE() {
	    return this.getToken(PostgreSQLParser.REGEXP_SPLIT_TO_TABLE, 0);
	};

	REGEXP_SUBSTR() {
	    return this.getToken(PostgreSQLParser.REGEXP_SUBSTR, 0);
	};

	REPEAT() {
	    return this.getToken(PostgreSQLParser.REPEAT, 0);
	};

	REPLACE() {
	    return this.getToken(PostgreSQLParser.REPLACE, 0);
	};

	REVERSE() {
	    return this.getToken(PostgreSQLParser.REVERSE, 0);
	};

	RPAD() {
	    return this.getToken(PostgreSQLParser.RPAD, 0);
	};

	RTRIM() {
	    return this.getToken(PostgreSQLParser.RTRIM, 0);
	};

	SPLIT_PART() {
	    return this.getToken(PostgreSQLParser.SPLIT_PART, 0);
	};

	STARTS_WITH() {
	    return this.getToken(PostgreSQLParser.STARTS_WITH, 0);
	};

	STRING_TO_ARRAY() {
	    return this.getToken(PostgreSQLParser.STRING_TO_ARRAY, 0);
	};

	STRING_TO_TABLE() {
	    return this.getToken(PostgreSQLParser.STRING_TO_TABLE, 0);
	};

	STRPOS() {
	    return this.getToken(PostgreSQLParser.STRPOS, 0);
	};

	SUBSTR() {
	    return this.getToken(PostgreSQLParser.SUBSTR, 0);
	};

	TO_ASCII() {
	    return this.getToken(PostgreSQLParser.TO_ASCII, 0);
	};

	TO_HEX() {
	    return this.getToken(PostgreSQLParser.TO_HEX, 0);
	};

	TRANSLATE() {
	    return this.getToken(PostgreSQLParser.TRANSLATE, 0);
	};

	UNISTR() {
	    return this.getToken(PostgreSQLParser.UNISTR, 0);
	};

	AGE() {
	    return this.getToken(PostgreSQLParser.AGE, 0);
	};

	DATE_BIN() {
	    return this.getToken(PostgreSQLParser.DATE_BIN, 0);
	};

	DATE_PART() {
	    return this.getToken(PostgreSQLParser.DATE_PART, 0);
	};

	DATE_TRUNC() {
	    return this.getToken(PostgreSQLParser.DATE_TRUNC, 0);
	};

	ISFINITE() {
	    return this.getToken(PostgreSQLParser.ISFINITE, 0);
	};

	JUSTIFY_DAYS() {
	    return this.getToken(PostgreSQLParser.JUSTIFY_DAYS, 0);
	};

	JUSTIFY_HOURS() {
	    return this.getToken(PostgreSQLParser.JUSTIFY_HOURS, 0);
	};

	JUSTIFY_INTERVAL() {
	    return this.getToken(PostgreSQLParser.JUSTIFY_INTERVAL, 0);
	};

	MAKE_DATE() {
	    return this.getToken(PostgreSQLParser.MAKE_DATE, 0);
	};

	MAKE_INTERVAL() {
	    return this.getToken(PostgreSQLParser.MAKE_INTERVAL, 0);
	};

	MAKE_TIME() {
	    return this.getToken(PostgreSQLParser.MAKE_TIME, 0);
	};

	MAKE_TIMESTAMP() {
	    return this.getToken(PostgreSQLParser.MAKE_TIMESTAMP, 0);
	};

	MAKE_TIMESTAMPTZ() {
	    return this.getToken(PostgreSQLParser.MAKE_TIMESTAMPTZ, 0);
	};

	CLOCK_TIMESTAMP() {
	    return this.getToken(PostgreSQLParser.CLOCK_TIMESTAMP, 0);
	};

	NOW() {
	    return this.getToken(PostgreSQLParser.NOW, 0);
	};

	STATEMENT_TIMESTAMP() {
	    return this.getToken(PostgreSQLParser.STATEMENT_TIMESTAMP, 0);
	};

	TIMEOFDAY() {
	    return this.getToken(PostgreSQLParser.TIMEOFDAY, 0);
	};

	TRANSACTION_TIMESTAMP() {
	    return this.getToken(PostgreSQLParser.TRANSACTION_TIMESTAMP, 0);
	};

	TO_TIMESTAMP() {
	    return this.getToken(PostgreSQLParser.TO_TIMESTAMP, 0);
	};

	TO_CHAR() {
	    return this.getToken(PostgreSQLParser.TO_CHAR, 0);
	};

	TO_DATE() {
	    return this.getToken(PostgreSQLParser.TO_DATE, 0);
	};

	TO_NUMBER() {
	    return this.getToken(PostgreSQLParser.TO_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitBuiltin_function_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pl_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_pl_function;
    }

	comp_options() {
	    return this.getTypedRuleContext(Comp_optionsContext,0);
	};

	pl_block() {
	    return this.getTypedRuleContext(Pl_blockContext,0);
	};

	opt_semi() {
	    return this.getTypedRuleContext(Opt_semiContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPl_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comp_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_comp_options;
    }

	comp_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comp_optionContext);
	    } else {
	        return this.getTypedRuleContext(Comp_optionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitComp_options(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comp_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_comp_option;
    }

	sharp() {
	    return this.getTypedRuleContext(SharpContext,0);
	};

	OPTION() {
	    return this.getToken(PostgreSQLParser.OPTION, 0);
	};

	DUMP() {
	    return this.getToken(PostgreSQLParser.DUMP, 0);
	};

	PRINT_STRICT_PARAMS() {
	    return this.getToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0);
	};

	option_value() {
	    return this.getTypedRuleContext(Option_valueContext,0);
	};

	VARIABLE_CONFLICT() {
	    return this.getToken(PostgreSQLParser.VARIABLE_CONFLICT, 0);
	};

	ERROR() {
	    return this.getToken(PostgreSQLParser.ERROR, 0);
	};

	USE_VARIABLE() {
	    return this.getToken(PostgreSQLParser.USE_VARIABLE, 0);
	};

	USE_COLUMN() {
	    return this.getToken(PostgreSQLParser.USE_COLUMN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitComp_option(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SharpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_sharp;
    }

	Operator() {
	    return this.getToken(PostgreSQLParser.Operator, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSharp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Option_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_option_value;
    }

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	reserved_keyword() {
	    return this.getTypedRuleContext(Reserved_keywordContext,0);
	};

	plsql_unreserved_keyword() {
	    return this.getTypedRuleContext(Plsql_unreserved_keywordContext,0);
	};

	unreserved_keyword() {
	    return this.getTypedRuleContext(Unreserved_keywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOption_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_semiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_semi;
    }

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_semi(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pl_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_pl_block;
    }

	decl_sect() {
	    return this.getTypedRuleContext(Decl_sectContext,0);
	};

	BEGIN_P() {
	    return this.getToken(PostgreSQLParser.BEGIN_P, 0);
	};

	proc_sect() {
	    return this.getTypedRuleContext(Proc_sectContext,0);
	};

	exception_sect() {
	    return this.getTypedRuleContext(Exception_sectContext,0);
	};

	END_P() {
	    return this.getToken(PostgreSQLParser.END_P, 0);
	};

	opt_label() {
	    return this.getTypedRuleContext(Opt_labelContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPl_block(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_sectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_sect;
    }

	opt_block_label() {
	    return this.getTypedRuleContext(Opt_block_labelContext,0);
	};

	decl_start() {
	    return this.getTypedRuleContext(Decl_startContext,0);
	};

	decl_stmts() {
	    return this.getTypedRuleContext(Decl_stmtsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_sect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_startContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_start;
    }

	DECLARE() {
	    return this.getToken(PostgreSQLParser.DECLARE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_start(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_stmtsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_stmts;
    }

	decl_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Decl_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Decl_stmtContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_stmts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Label_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_label_decl;
    }

	LESS_LESS() {
	    return this.getToken(PostgreSQLParser.LESS_LESS, 0);
	};

	any_identifier() {
	    return this.getTypedRuleContext(Any_identifierContext,0);
	};

	GREATER_GREATER() {
	    return this.getToken(PostgreSQLParser.GREATER_GREATER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitLabel_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_stmt;
    }

	decl_statement() {
	    return this.getTypedRuleContext(Decl_statementContext,0);
	};

	DECLARE() {
	    return this.getToken(PostgreSQLParser.DECLARE, 0);
	};

	label_decl() {
	    return this.getTypedRuleContext(Label_declContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_statement;
    }

	decl_varname() {
	    return this.getTypedRuleContext(Decl_varnameContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	ALIAS() {
	    return this.getToken(PostgreSQLParser.ALIAS, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	decl_aliasitem() {
	    return this.getTypedRuleContext(Decl_aliasitemContext,0);
	};

	decl_const() {
	    return this.getTypedRuleContext(Decl_constContext,0);
	};

	decl_datatype() {
	    return this.getTypedRuleContext(Decl_datatypeContext,0);
	};

	decl_collate() {
	    return this.getTypedRuleContext(Decl_collateContext,0);
	};

	decl_notnull() {
	    return this.getTypedRuleContext(Decl_notnullContext,0);
	};

	decl_defval() {
	    return this.getTypedRuleContext(Decl_defvalContext,0);
	};

	opt_scrollable() {
	    return this.getTypedRuleContext(Opt_scrollableContext,0);
	};

	CURSOR() {
	    return this.getToken(PostgreSQLParser.CURSOR, 0);
	};

	decl_cursor_args() {
	    return this.getTypedRuleContext(Decl_cursor_argsContext,0);
	};

	decl_is_for() {
	    return this.getTypedRuleContext(Decl_is_forContext,0);
	};

	decl_cursor_query() {
	    return this.getTypedRuleContext(Decl_cursor_queryContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_scrollableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_scrollable;
    }

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	SCROLL() {
	    return this.getToken(PostgreSQLParser.SCROLL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_scrollable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_cursor_queryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_cursor_query;
    }

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_cursor_query(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_cursor_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_cursor_args;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	decl_cursor_arglist() {
	    return this.getTypedRuleContext(Decl_cursor_arglistContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_cursor_args(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_cursor_arglistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_cursor_arglist;
    }

	decl_cursor_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Decl_cursor_argContext);
	    } else {
	        return this.getTypedRuleContext(Decl_cursor_argContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_cursor_arglist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_cursor_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_cursor_arg;
    }

	decl_varname() {
	    return this.getTypedRuleContext(Decl_varnameContext,0);
	};

	decl_datatype() {
	    return this.getTypedRuleContext(Decl_datatypeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_cursor_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_is_forContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_is_for;
    }

	IS() {
	    return this.getToken(PostgreSQLParser.IS, 0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_is_for(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_aliasitemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_aliasitem;
    }

	PARAM() {
	    return this.getToken(PostgreSQLParser.PARAM, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_aliasitem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_varnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_varname;
    }

	any_identifier() {
	    return this.getTypedRuleContext(Any_identifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_varname(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_constContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_const;
    }

	CONSTANT() {
	    return this.getToken(PostgreSQLParser.CONSTANT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_const(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_datatypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_datatype;
    }

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_datatype(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_collateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_collate;
    }

	COLLATE() {
	    return this.getToken(PostgreSQLParser.COLLATE, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_collate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_notnullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_notnull;
    }

	NOT() {
	    return this.getToken(PostgreSQLParser.NOT, 0);
	};

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_notnull(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_defvalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_defval;
    }

	decl_defkey() {
	    return this.getTypedRuleContext(Decl_defkeyContext,0);
	};

	sql_expression() {
	    return this.getTypedRuleContext(Sql_expressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_defval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Decl_defkeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_decl_defkey;
    }

	assign_operator() {
	    return this.getTypedRuleContext(Assign_operatorContext,0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitDecl_defkey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_assign_operator;
    }

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	COLON_EQUALS() {
	    return this.getToken(PostgreSQLParser.COLON_EQUALS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAssign_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Proc_sectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_proc_sect;
    }

	proc_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Proc_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Proc_stmtContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitProc_sect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Proc_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_proc_stmt;
    }

	pl_block() {
	    return this.getTypedRuleContext(Pl_blockContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	stmt_return() {
	    return this.getTypedRuleContext(Stmt_returnContext,0);
	};

	stmt_raise() {
	    return this.getTypedRuleContext(Stmt_raiseContext,0);
	};

	stmt_assign() {
	    return this.getTypedRuleContext(Stmt_assignContext,0);
	};

	stmt_if() {
	    return this.getTypedRuleContext(Stmt_ifContext,0);
	};

	stmt_case() {
	    return this.getTypedRuleContext(Stmt_caseContext,0);
	};

	stmt_loop() {
	    return this.getTypedRuleContext(Stmt_loopContext,0);
	};

	stmt_while() {
	    return this.getTypedRuleContext(Stmt_whileContext,0);
	};

	stmt_for() {
	    return this.getTypedRuleContext(Stmt_forContext,0);
	};

	stmt_foreach_a() {
	    return this.getTypedRuleContext(Stmt_foreach_aContext,0);
	};

	stmt_exit() {
	    return this.getTypedRuleContext(Stmt_exitContext,0);
	};

	stmt_assert() {
	    return this.getTypedRuleContext(Stmt_assertContext,0);
	};

	stmt_execsql() {
	    return this.getTypedRuleContext(Stmt_execsqlContext,0);
	};

	stmt_dynexecute() {
	    return this.getTypedRuleContext(Stmt_dynexecuteContext,0);
	};

	stmt_perform() {
	    return this.getTypedRuleContext(Stmt_performContext,0);
	};

	stmt_call() {
	    return this.getTypedRuleContext(Stmt_callContext,0);
	};

	stmt_getdiag() {
	    return this.getTypedRuleContext(Stmt_getdiagContext,0);
	};

	stmt_open() {
	    return this.getTypedRuleContext(Stmt_openContext,0);
	};

	stmt_fetch() {
	    return this.getTypedRuleContext(Stmt_fetchContext,0);
	};

	stmt_move() {
	    return this.getTypedRuleContext(Stmt_moveContext,0);
	};

	stmt_close() {
	    return this.getTypedRuleContext(Stmt_closeContext,0);
	};

	stmt_null() {
	    return this.getTypedRuleContext(Stmt_nullContext,0);
	};

	stmt_commit() {
	    return this.getTypedRuleContext(Stmt_commitContext,0);
	};

	stmt_rollback() {
	    return this.getTypedRuleContext(Stmt_rollbackContext,0);
	};

	stmt_set() {
	    return this.getTypedRuleContext(Stmt_setContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitProc_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_performContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_perform;
    }

	PERFORM() {
	    return this.getToken(PostgreSQLParser.PERFORM, 0);
	};

	expr_until_semi() {
	    return this.getTypedRuleContext(Expr_until_semiContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_perform(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_callContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_call;
    }

	CALL() {
	    return this.getToken(PostgreSQLParser.CALL, 0);
	};

	any_identifier() {
	    return this.getTypedRuleContext(Any_identifierContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	opt_expr_list() {
	    return this.getTypedRuleContext(Opt_expr_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	DO() {
	    return this.getToken(PostgreSQLParser.DO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_call(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_expr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_expr_list;
    }

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_expr_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_assignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_assign;
    }

	assign_var() {
	    return this.getTypedRuleContext(Assign_varContext,0);
	};

	assign_operator() {
	    return this.getTypedRuleContext(Assign_operatorContext,0);
	};

	sql_expression() {
	    return this.getTypedRuleContext(Sql_expressionContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_assign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_getdiagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_getdiag;
    }

	GET() {
	    return this.getToken(PostgreSQLParser.GET, 0);
	};

	getdiag_area_opt() {
	    return this.getTypedRuleContext(Getdiag_area_optContext,0);
	};

	DIAGNOSTICS() {
	    return this.getToken(PostgreSQLParser.DIAGNOSTICS, 0);
	};

	getdiag_list() {
	    return this.getTypedRuleContext(Getdiag_listContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_getdiag(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Getdiag_area_optContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_getdiag_area_opt;
    }

	CURRENT_P() {
	    return this.getToken(PostgreSQLParser.CURRENT_P, 0);
	};

	STACKED() {
	    return this.getToken(PostgreSQLParser.STACKED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGetdiag_area_opt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Getdiag_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_getdiag_list;
    }

	getdiag_list_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Getdiag_list_itemContext);
	    } else {
	        return this.getTypedRuleContext(Getdiag_list_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGetdiag_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Getdiag_list_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_getdiag_list_item;
    }

	getdiag_target() {
	    return this.getTypedRuleContext(Getdiag_targetContext,0);
	};

	assign_operator() {
	    return this.getTypedRuleContext(Assign_operatorContext,0);
	};

	getdiag_item() {
	    return this.getTypedRuleContext(Getdiag_itemContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGetdiag_list_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Getdiag_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_getdiag_item;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGetdiag_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Getdiag_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_getdiag_target;
    }

	assign_var() {
	    return this.getTypedRuleContext(Assign_varContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitGetdiag_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_varContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_assign_var;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	PARAM() {
	    return this.getToken(PostgreSQLParser.PARAM, 0);
	};

	OPEN_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.OPEN_BRACKET);
	    } else {
	        return this.getToken(PostgreSQLParser.OPEN_BRACKET, i);
	    }
	};


	expr_until_rightbracket = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr_until_rightbracketContext);
	    } else {
	        return this.getTypedRuleContext(Expr_until_rightbracketContext,i);
	    }
	};

	CLOSE_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.CLOSE_BRACKET);
	    } else {
	        return this.getToken(PostgreSQLParser.CLOSE_BRACKET, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAssign_var(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_ifContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_if;
    }

	IF_P = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.IF_P);
	    } else {
	        return this.getToken(PostgreSQLParser.IF_P, i);
	    }
	};


	expr_until_then() {
	    return this.getTypedRuleContext(Expr_until_thenContext,0);
	};

	THEN() {
	    return this.getToken(PostgreSQLParser.THEN, 0);
	};

	proc_sect() {
	    return this.getTypedRuleContext(Proc_sectContext,0);
	};

	stmt_elsifs() {
	    return this.getTypedRuleContext(Stmt_elsifsContext,0);
	};

	stmt_else() {
	    return this.getTypedRuleContext(Stmt_elseContext,0);
	};

	END_P() {
	    return this.getToken(PostgreSQLParser.END_P, 0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_if(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_elsifsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_elsifs;
    }

	ELSIF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.ELSIF);
	    } else {
	        return this.getToken(PostgreSQLParser.ELSIF, i);
	    }
	};


	a_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_exprContext);
	    } else {
	        return this.getTypedRuleContext(A_exprContext,i);
	    }
	};

	THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.THEN);
	    } else {
	        return this.getToken(PostgreSQLParser.THEN, i);
	    }
	};


	proc_sect = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Proc_sectContext);
	    } else {
	        return this.getTypedRuleContext(Proc_sectContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_elsifs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_elseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_else;
    }

	ELSE() {
	    return this.getToken(PostgreSQLParser.ELSE, 0);
	};

	proc_sect() {
	    return this.getTypedRuleContext(Proc_sectContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_else(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_caseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_case;
    }

	CASE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.CASE);
	    } else {
	        return this.getToken(PostgreSQLParser.CASE, i);
	    }
	};


	opt_expr_until_when() {
	    return this.getTypedRuleContext(Opt_expr_until_whenContext,0);
	};

	case_when_list() {
	    return this.getTypedRuleContext(Case_when_listContext,0);
	};

	opt_case_else() {
	    return this.getTypedRuleContext(Opt_case_elseContext,0);
	};

	END_P() {
	    return this.getToken(PostgreSQLParser.END_P, 0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_case(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_expr_until_whenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_expr_until_when;
    }

	sql_expression() {
	    return this.getTypedRuleContext(Sql_expressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_expr_until_when(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Case_when_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_case_when_list;
    }

	case_when = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Case_whenContext);
	    } else {
	        return this.getTypedRuleContext(Case_whenContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCase_when_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Case_whenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_case_when;
    }

	WHEN() {
	    return this.getToken(PostgreSQLParser.WHEN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	THEN() {
	    return this.getToken(PostgreSQLParser.THEN, 0);
	};

	proc_sect() {
	    return this.getTypedRuleContext(Proc_sectContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCase_when(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_case_elseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_case_else;
    }

	ELSE() {
	    return this.getToken(PostgreSQLParser.ELSE, 0);
	};

	proc_sect() {
	    return this.getTypedRuleContext(Proc_sectContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_case_else(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_loop;
    }

	opt_loop_label() {
	    return this.getTypedRuleContext(Opt_loop_labelContext,0);
	};

	loop_body() {
	    return this.getTypedRuleContext(Loop_bodyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_loop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_whileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_while;
    }

	opt_loop_label() {
	    return this.getTypedRuleContext(Opt_loop_labelContext,0);
	};

	WHILE() {
	    return this.getToken(PostgreSQLParser.WHILE, 0);
	};

	expr_until_loop() {
	    return this.getTypedRuleContext(Expr_until_loopContext,0);
	};

	loop_body() {
	    return this.getTypedRuleContext(Loop_bodyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_while(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_forContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_for;
    }

	opt_loop_label() {
	    return this.getTypedRuleContext(Opt_loop_labelContext,0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	for_control() {
	    return this.getTypedRuleContext(For_controlContext,0);
	};

	loop_body() {
	    return this.getTypedRuleContext(Loop_bodyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_for(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_controlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_for_control;
    }

	for_variable() {
	    return this.getTypedRuleContext(For_variableContext,0);
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	cursor_name() {
	    return this.getTypedRuleContext(Cursor_nameContext,0);
	};

	opt_cursor_parameters() {
	    return this.getTypedRuleContext(Opt_cursor_parametersContext,0);
	};

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	explainstmt() {
	    return this.getTypedRuleContext(ExplainstmtContext,0);
	};

	EXECUTE() {
	    return this.getToken(PostgreSQLParser.EXECUTE, 0);
	};

	a_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_exprContext);
	    } else {
	        return this.getTypedRuleContext(A_exprContext,i);
	    }
	};

	opt_for_using_expression() {
	    return this.getTypedRuleContext(Opt_for_using_expressionContext,0);
	};

	opt_reverse() {
	    return this.getTypedRuleContext(Opt_reverseContext,0);
	};

	DOT_DOT() {
	    return this.getToken(PostgreSQLParser.DOT_DOT, 0);
	};

	opt_by_expression() {
	    return this.getTypedRuleContext(Opt_by_expressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFor_control(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_for_using_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_for_using_expression;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_for_using_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_cursor_parametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_cursor_parameters;
    }

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	a_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_exprContext);
	    } else {
	        return this.getTypedRuleContext(A_exprContext,i);
	    }
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_cursor_parameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_reverseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_reverse;
    }

	REVERSE() {
	    return this.getToken(PostgreSQLParser.REVERSE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_reverse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_by_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_by_expression;
    }

	BY() {
	    return this.getToken(PostgreSQLParser.BY, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_by_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_for_variable;
    }

	any_name_list() {
	    return this.getTypedRuleContext(Any_name_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitFor_variable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_foreach_aContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_foreach_a;
    }

	opt_loop_label() {
	    return this.getTypedRuleContext(Opt_loop_labelContext,0);
	};

	FOREACH() {
	    return this.getToken(PostgreSQLParser.FOREACH, 0);
	};

	for_variable() {
	    return this.getTypedRuleContext(For_variableContext,0);
	};

	foreach_slice() {
	    return this.getTypedRuleContext(Foreach_sliceContext,0);
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	ARRAY() {
	    return this.getToken(PostgreSQLParser.ARRAY, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	loop_body() {
	    return this.getTypedRuleContext(Loop_bodyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_foreach_a(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Foreach_sliceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_foreach_slice;
    }

	SLICE() {
	    return this.getToken(PostgreSQLParser.SLICE, 0);
	};

	iconst() {
	    return this.getTypedRuleContext(IconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitForeach_slice(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_exitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_exit;
    }

	exit_type() {
	    return this.getTypedRuleContext(Exit_typeContext,0);
	};

	opt_label() {
	    return this.getTypedRuleContext(Opt_labelContext,0);
	};

	opt_exitcond() {
	    return this.getTypedRuleContext(Opt_exitcondContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_exit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Exit_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_exit_type;
    }

	EXIT() {
	    return this.getToken(PostgreSQLParser.EXIT, 0);
	};

	CONTINUE_P() {
	    return this.getToken(PostgreSQLParser.CONTINUE_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExit_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_returnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_return;
    }

	RETURN() {
	    return this.getToken(PostgreSQLParser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	NEXT() {
	    return this.getToken(PostgreSQLParser.NEXT, 0);
	};

	sql_expression() {
	    return this.getTypedRuleContext(Sql_expressionContext,0);
	};

	QUERY() {
	    return this.getToken(PostgreSQLParser.QUERY, 0);
	};

	opt_return_result() {
	    return this.getTypedRuleContext(Opt_return_resultContext,0);
	};

	EXECUTE() {
	    return this.getToken(PostgreSQLParser.EXECUTE, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	opt_for_using_expression() {
	    return this.getTypedRuleContext(Opt_for_using_expressionContext,0);
	};

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_return(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_return_resultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_return_result;
    }

	sql_expression() {
	    return this.getTypedRuleContext(Sql_expressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_return_result(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_raiseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_raise;
    }

	RAISE() {
	    return this.getToken(PostgreSQLParser.RAISE, 0);
	};

	opt_stmt_raise_level() {
	    return this.getTypedRuleContext(Opt_stmt_raise_levelContext,0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	opt_raise_list() {
	    return this.getTypedRuleContext(Opt_raise_listContext,0);
	};

	opt_raise_using() {
	    return this.getTypedRuleContext(Opt_raise_usingContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SQLSTATE() {
	    return this.getToken(PostgreSQLParser.SQLSTATE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_raise(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_stmt_raise_levelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_stmt_raise_level;
    }

	DEBUG() {
	    return this.getToken(PostgreSQLParser.DEBUG, 0);
	};

	LOG() {
	    return this.getToken(PostgreSQLParser.LOG, 0);
	};

	INFO() {
	    return this.getToken(PostgreSQLParser.INFO, 0);
	};

	NOTICE() {
	    return this.getToken(PostgreSQLParser.NOTICE, 0);
	};

	WARNING() {
	    return this.getToken(PostgreSQLParser.WARNING, 0);
	};

	EXCEPTION() {
	    return this.getToken(PostgreSQLParser.EXCEPTION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_stmt_raise_level(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_raise_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_raise_list;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	a_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_exprContext);
	    } else {
	        return this.getTypedRuleContext(A_exprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_raise_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_raise_usingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_raise_using;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	opt_raise_using_elem_list() {
	    return this.getTypedRuleContext(Opt_raise_using_elem_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_raise_using(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_raise_using_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_raise_using_elem;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(PostgreSQLParser.EQUAL, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_raise_using_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_raise_using_elem_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_raise_using_elem_list;
    }

	opt_raise_using_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Opt_raise_using_elemContext);
	    } else {
	        return this.getTypedRuleContext(Opt_raise_using_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_raise_using_elem_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_assertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_assert;
    }

	ASSERT() {
	    return this.getToken(PostgreSQLParser.ASSERT, 0);
	};

	sql_expression() {
	    return this.getTypedRuleContext(Sql_expressionContext,0);
	};

	opt_stmt_assert_message() {
	    return this.getTypedRuleContext(Opt_stmt_assert_messageContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_assert(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_stmt_assert_messageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_stmt_assert_message;
    }

	COMMA() {
	    return this.getToken(PostgreSQLParser.COMMA, 0);
	};

	sql_expression() {
	    return this.getTypedRuleContext(Sql_expressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_stmt_assert_message(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Loop_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_loop_body;
    }

	LOOP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.LOOP);
	    } else {
	        return this.getToken(PostgreSQLParser.LOOP, i);
	    }
	};


	proc_sect() {
	    return this.getTypedRuleContext(Proc_sectContext,0);
	};

	END_P() {
	    return this.getToken(PostgreSQLParser.END_P, 0);
	};

	opt_label() {
	    return this.getTypedRuleContext(Opt_labelContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitLoop_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_execsqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_execsql;
    }

	make_execsql_stmt() {
	    return this.getTypedRuleContext(Make_execsql_stmtContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_execsql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_dynexecuteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_dynexecute;
    }

	EXECUTE() {
	    return this.getToken(PostgreSQLParser.EXECUTE, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	opt_execute_into() {
	    return this.getTypedRuleContext(Opt_execute_intoContext,0);
	};

	opt_execute_using() {
	    return this.getTypedRuleContext(Opt_execute_usingContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_dynexecute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_execute_usingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_execute_using;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	opt_execute_using_list() {
	    return this.getTypedRuleContext(Opt_execute_using_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_execute_using(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_execute_using_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_execute_using_list;
    }

	a_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_exprContext);
	    } else {
	        return this.getTypedRuleContext(A_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_execute_using_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_execute_intoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_execute_into;
    }

	INTO() {
	    return this.getToken(PostgreSQLParser.INTO, 0);
	};

	into_target() {
	    return this.getTypedRuleContext(Into_targetContext,0);
	};

	STRICT_P() {
	    return this.getToken(PostgreSQLParser.STRICT_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_execute_into(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_openContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_open;
    }

	OPEN() {
	    return this.getToken(PostgreSQLParser.OPEN, 0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	cursor_variable() {
	    return this.getTypedRuleContext(Cursor_variableContext,0);
	};

	opt_scroll_option() {
	    return this.getTypedRuleContext(Opt_scroll_optionContext,0);
	};

	FOR() {
	    return this.getToken(PostgreSQLParser.FOR, 0);
	};

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	selectstmt() {
	    return this.getTypedRuleContext(SelectstmtContext,0);
	};

	EXECUTE() {
	    return this.getToken(PostgreSQLParser.EXECUTE, 0);
	};

	sql_expression() {
	    return this.getTypedRuleContext(Sql_expressionContext,0);
	};

	opt_open_using() {
	    return this.getTypedRuleContext(Opt_open_usingContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
	};

	opt_open_bound_list() {
	    return this.getTypedRuleContext(Opt_open_bound_listContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_open(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_open_bound_list_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_open_bound_list_item;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	COLON_EQUALS() {
	    return this.getToken(PostgreSQLParser.COLON_EQUALS, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_open_bound_list_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_open_bound_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_open_bound_list;
    }

	opt_open_bound_list_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Opt_open_bound_list_itemContext);
	    } else {
	        return this.getTypedRuleContext(Opt_open_bound_list_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.COMMA);
	    } else {
	        return this.getToken(PostgreSQLParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_open_bound_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_open_usingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_open_using;
    }

	USING() {
	    return this.getToken(PostgreSQLParser.USING, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_open_using(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_scroll_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_scroll_option;
    }

	opt_scroll_option_no() {
	    return this.getTypedRuleContext(Opt_scroll_option_noContext,0);
	};

	SCROLL() {
	    return this.getToken(PostgreSQLParser.SCROLL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_scroll_option(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_scroll_option_noContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_scroll_option_no;
    }

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_scroll_option_no(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_fetchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_fetch;
        this.direction = null;
    }

	FETCH() {
	    return this.getToken(PostgreSQLParser.FETCH, 0);
	};

	opt_cursor_from() {
	    return this.getTypedRuleContext(Opt_cursor_fromContext,0);
	};

	cursor_variable() {
	    return this.getTypedRuleContext(Cursor_variableContext,0);
	};

	INTO() {
	    return this.getToken(PostgreSQLParser.INTO, 0);
	};

	into_target() {
	    return this.getTypedRuleContext(Into_targetContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	opt_fetch_direction() {
	    return this.getTypedRuleContext(Opt_fetch_directionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_fetch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Into_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_into_target;
    }

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitInto_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_cursor_fromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_cursor_from;
    }

	FROM() {
	    return this.getToken(PostgreSQLParser.FROM, 0);
	};

	IN_P() {
	    return this.getToken(PostgreSQLParser.IN_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_cursor_from(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_fetch_directionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_fetch_direction;
    }

	NEXT() {
	    return this.getToken(PostgreSQLParser.NEXT, 0);
	};

	PRIOR() {
	    return this.getToken(PostgreSQLParser.PRIOR, 0);
	};

	FIRST_P() {
	    return this.getToken(PostgreSQLParser.FIRST_P, 0);
	};

	LAST_P() {
	    return this.getToken(PostgreSQLParser.LAST_P, 0);
	};

	ABSOLUTE_P() {
	    return this.getToken(PostgreSQLParser.ABSOLUTE_P, 0);
	};

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	RELATIVE_P() {
	    return this.getToken(PostgreSQLParser.RELATIVE_P, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	FORWARD() {
	    return this.getToken(PostgreSQLParser.FORWARD, 0);
	};

	BACKWARD() {
	    return this.getToken(PostgreSQLParser.BACKWARD, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_fetch_direction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_moveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_move;
    }

	MOVE() {
	    return this.getToken(PostgreSQLParser.MOVE, 0);
	};

	opt_fetch_direction() {
	    return this.getTypedRuleContext(Opt_fetch_directionContext,0);
	};

	cursor_variable() {
	    return this.getTypedRuleContext(Cursor_variableContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_move(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_closeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_close;
    }

	CLOSE() {
	    return this.getToken(PostgreSQLParser.CLOSE, 0);
	};

	cursor_variable() {
	    return this.getTypedRuleContext(Cursor_variableContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_close(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_nullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_null;
    }

	NULL_P() {
	    return this.getToken(PostgreSQLParser.NULL_P, 0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_null(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_commitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_commit;
    }

	COMMIT() {
	    return this.getToken(PostgreSQLParser.COMMIT, 0);
	};

	plsql_opt_transaction_chain() {
	    return this.getTypedRuleContext(Plsql_opt_transaction_chainContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_commit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_rollbackContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_rollback;
    }

	ROLLBACK() {
	    return this.getToken(PostgreSQLParser.ROLLBACK, 0);
	};

	plsql_opt_transaction_chain() {
	    return this.getTypedRuleContext(Plsql_opt_transaction_chainContext,0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_rollback(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Plsql_opt_transaction_chainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_plsql_opt_transaction_chain;
    }

	AND() {
	    return this.getToken(PostgreSQLParser.AND, 0);
	};

	CHAIN() {
	    return this.getToken(PostgreSQLParser.CHAIN, 0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPlsql_opt_transaction_chain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stmt_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_stmt_set;
    }

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	TO() {
	    return this.getToken(PostgreSQLParser.TO, 0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	SEMI() {
	    return this.getToken(PostgreSQLParser.SEMI, 0);
	};

	RESET() {
	    return this.getToken(PostgreSQLParser.RESET, 0);
	};

	ALL() {
	    return this.getToken(PostgreSQLParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitStmt_set(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cursor_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_cursor_variable;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	PARAM() {
	    return this.getToken(PostgreSQLParser.PARAM, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitCursor_variable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Exception_sectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_exception_sect;
    }

	EXCEPTION() {
	    return this.getToken(PostgreSQLParser.EXCEPTION, 0);
	};

	proc_exceptions() {
	    return this.getTypedRuleContext(Proc_exceptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitException_sect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Proc_exceptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_proc_exceptions;
    }

	proc_exception = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Proc_exceptionContext);
	    } else {
	        return this.getTypedRuleContext(Proc_exceptionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitProc_exceptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Proc_exceptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_proc_exception;
    }

	WHEN() {
	    return this.getToken(PostgreSQLParser.WHEN, 0);
	};

	proc_conditions() {
	    return this.getTypedRuleContext(Proc_conditionsContext,0);
	};

	THEN() {
	    return this.getToken(PostgreSQLParser.THEN, 0);
	};

	proc_sect() {
	    return this.getTypedRuleContext(Proc_sectContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitProc_exception(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Proc_conditionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_proc_conditions;
    }

	proc_condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Proc_conditionContext);
	    } else {
	        return this.getTypedRuleContext(Proc_conditionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PostgreSQLParser.OR);
	    } else {
	        return this.getToken(PostgreSQLParser.OR, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitProc_conditions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Proc_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_proc_condition;
    }

	any_identifier() {
	    return this.getTypedRuleContext(Any_identifierContext,0);
	};

	SQLSTATE() {
	    return this.getToken(PostgreSQLParser.SQLSTATE, 0);
	};

	sconst() {
	    return this.getTypedRuleContext(SconstContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitProc_condition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_block_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_block_label;
    }

	label_decl() {
	    return this.getTypedRuleContext(Label_declContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_block_label(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_loop_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_loop_label;
    }

	label_decl() {
	    return this.getTypedRuleContext(Label_declContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_loop_label(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_label;
    }

	any_identifier() {
	    return this.getTypedRuleContext(Any_identifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_label(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_exitcondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_exitcond;
    }

	WHEN() {
	    return this.getToken(PostgreSQLParser.WHEN, 0);
	};

	expr_until_semi() {
	    return this.getTypedRuleContext(Expr_until_semiContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_exitcond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Any_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_any_identifier;
    }

	colid() {
	    return this.getTypedRuleContext(ColidContext,0);
	};

	plsql_unreserved_keyword() {
	    return this.getTypedRuleContext(Plsql_unreserved_keywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitAny_identifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Plsql_unreserved_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_plsql_unreserved_keyword;
    }

	ABSOLUTE_P() {
	    return this.getToken(PostgreSQLParser.ABSOLUTE_P, 0);
	};

	ALIAS() {
	    return this.getToken(PostgreSQLParser.ALIAS, 0);
	};

	AND() {
	    return this.getToken(PostgreSQLParser.AND, 0);
	};

	ARRAY() {
	    return this.getToken(PostgreSQLParser.ARRAY, 0);
	};

	ASSERT() {
	    return this.getToken(PostgreSQLParser.ASSERT, 0);
	};

	BACKWARD() {
	    return this.getToken(PostgreSQLParser.BACKWARD, 0);
	};

	CALL() {
	    return this.getToken(PostgreSQLParser.CALL, 0);
	};

	CHAIN() {
	    return this.getToken(PostgreSQLParser.CHAIN, 0);
	};

	CLOSE() {
	    return this.getToken(PostgreSQLParser.CLOSE, 0);
	};

	COLLATE() {
	    return this.getToken(PostgreSQLParser.COLLATE, 0);
	};

	COLUMN() {
	    return this.getToken(PostgreSQLParser.COLUMN, 0);
	};

	COMMIT() {
	    return this.getToken(PostgreSQLParser.COMMIT, 0);
	};

	CONSTANT() {
	    return this.getToken(PostgreSQLParser.CONSTANT, 0);
	};

	CONTINUE_P() {
	    return this.getToken(PostgreSQLParser.CONTINUE_P, 0);
	};

	CURRENT_P() {
	    return this.getToken(PostgreSQLParser.CURRENT_P, 0);
	};

	CURSOR() {
	    return this.getToken(PostgreSQLParser.CURSOR, 0);
	};

	DEBUG() {
	    return this.getToken(PostgreSQLParser.DEBUG, 0);
	};

	DEFAULT() {
	    return this.getToken(PostgreSQLParser.DEFAULT, 0);
	};

	DIAGNOSTICS() {
	    return this.getToken(PostgreSQLParser.DIAGNOSTICS, 0);
	};

	DO() {
	    return this.getToken(PostgreSQLParser.DO, 0);
	};

	DUMP() {
	    return this.getToken(PostgreSQLParser.DUMP, 0);
	};

	ELSIF() {
	    return this.getToken(PostgreSQLParser.ELSIF, 0);
	};

	ERROR() {
	    return this.getToken(PostgreSQLParser.ERROR, 0);
	};

	EXCEPTION() {
	    return this.getToken(PostgreSQLParser.EXCEPTION, 0);
	};

	EXIT() {
	    return this.getToken(PostgreSQLParser.EXIT, 0);
	};

	FETCH() {
	    return this.getToken(PostgreSQLParser.FETCH, 0);
	};

	FIRST_P() {
	    return this.getToken(PostgreSQLParser.FIRST_P, 0);
	};

	FORWARD() {
	    return this.getToken(PostgreSQLParser.FORWARD, 0);
	};

	GET() {
	    return this.getToken(PostgreSQLParser.GET, 0);
	};

	INFO() {
	    return this.getToken(PostgreSQLParser.INFO, 0);
	};

	INSERT() {
	    return this.getToken(PostgreSQLParser.INSERT, 0);
	};

	IS() {
	    return this.getToken(PostgreSQLParser.IS, 0);
	};

	LAST_P() {
	    return this.getToken(PostgreSQLParser.LAST_P, 0);
	};

	MOVE() {
	    return this.getToken(PostgreSQLParser.MOVE, 0);
	};

	NEXT() {
	    return this.getToken(PostgreSQLParser.NEXT, 0);
	};

	NO() {
	    return this.getToken(PostgreSQLParser.NO, 0);
	};

	NOTICE() {
	    return this.getToken(PostgreSQLParser.NOTICE, 0);
	};

	OPEN() {
	    return this.getToken(PostgreSQLParser.OPEN, 0);
	};

	OPTION() {
	    return this.getToken(PostgreSQLParser.OPTION, 0);
	};

	PERFORM() {
	    return this.getToken(PostgreSQLParser.PERFORM, 0);
	};

	PRINT_STRICT_PARAMS() {
	    return this.getToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0);
	};

	PRIOR() {
	    return this.getToken(PostgreSQLParser.PRIOR, 0);
	};

	QUERY() {
	    return this.getToken(PostgreSQLParser.QUERY, 0);
	};

	RAISE() {
	    return this.getToken(PostgreSQLParser.RAISE, 0);
	};

	RELATIVE_P() {
	    return this.getToken(PostgreSQLParser.RELATIVE_P, 0);
	};

	RESET() {
	    return this.getToken(PostgreSQLParser.RESET, 0);
	};

	RETURN() {
	    return this.getToken(PostgreSQLParser.RETURN, 0);
	};

	ROLLBACK() {
	    return this.getToken(PostgreSQLParser.ROLLBACK, 0);
	};

	ROWTYPE() {
	    return this.getToken(PostgreSQLParser.ROWTYPE, 0);
	};

	SCHEMA() {
	    return this.getToken(PostgreSQLParser.SCHEMA, 0);
	};

	SCROLL() {
	    return this.getToken(PostgreSQLParser.SCROLL, 0);
	};

	SET() {
	    return this.getToken(PostgreSQLParser.SET, 0);
	};

	SLICE() {
	    return this.getToken(PostgreSQLParser.SLICE, 0);
	};

	SQLSTATE() {
	    return this.getToken(PostgreSQLParser.SQLSTATE, 0);
	};

	STACKED() {
	    return this.getToken(PostgreSQLParser.STACKED, 0);
	};

	TABLE() {
	    return this.getToken(PostgreSQLParser.TABLE, 0);
	};

	TYPE_P() {
	    return this.getToken(PostgreSQLParser.TYPE_P, 0);
	};

	USE_COLUMN() {
	    return this.getToken(PostgreSQLParser.USE_COLUMN, 0);
	};

	USE_VARIABLE() {
	    return this.getToken(PostgreSQLParser.USE_VARIABLE, 0);
	};

	VARIABLE_CONFLICT() {
	    return this.getToken(PostgreSQLParser.VARIABLE_CONFLICT, 0);
	};

	WARNING() {
	    return this.getToken(PostgreSQLParser.WARNING, 0);
	};

	OUTER_P() {
	    return this.getToken(PostgreSQLParser.OUTER_P, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitPlsql_unreserved_keyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sql_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_sql_expression;
    }

	opt_target_list() {
	    return this.getTypedRuleContext(Opt_target_listContext,0);
	};

	into_clause() {
	    return this.getTypedRuleContext(Into_clauseContext,0);
	};

	from_clause() {
	    return this.getTypedRuleContext(From_clauseContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	group_clause() {
	    return this.getTypedRuleContext(Group_clauseContext,0);
	};

	having_clause() {
	    return this.getTypedRuleContext(Having_clauseContext,0);
	};

	window_clause() {
	    return this.getTypedRuleContext(Window_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitSql_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_until_thenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_expr_until_then;
    }

	sql_expression() {
	    return this.getTypedRuleContext(Sql_expressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExpr_until_then(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_until_semiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_expr_until_semi;
    }

	sql_expression() {
	    return this.getTypedRuleContext(Sql_expressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExpr_until_semi(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_until_rightbracketContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_expr_until_rightbracket;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExpr_until_rightbracket(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_until_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_expr_until_loop;
    }

	a_expr() {
	    return this.getTypedRuleContext(A_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitExpr_until_loop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Make_execsql_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_make_execsql_stmt;
    }

	stmt() {
	    return this.getTypedRuleContext(StmtContext,0);
	};

	opt_returning_clause_into() {
	    return this.getTypedRuleContext(Opt_returning_clause_intoContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitMake_execsql_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Opt_returning_clause_intoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PostgreSQLParser.RULE_opt_returning_clause_into;
    }

	INTO() {
	    return this.getToken(PostgreSQLParser.INTO, 0);
	};

	opt_strict() {
	    return this.getTypedRuleContext(Opt_strictContext,0);
	};

	into_target() {
	    return this.getTypedRuleContext(Into_targetContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PostgreSQLParserVisitor ) {
	        return visitor.visitOpt_returning_clause_into(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




PostgreSQLParser.RootContext = RootContext; 
PostgreSQLParser.PlsqlrootContext = PlsqlrootContext; 
PostgreSQLParser.StmtblockContext = StmtblockContext; 
PostgreSQLParser.StmtmultiContext = StmtmultiContext; 
PostgreSQLParser.StmtContext = StmtContext; 
PostgreSQLParser.PlsqlconsolecommandContext = PlsqlconsolecommandContext; 
PostgreSQLParser.CallstmtContext = CallstmtContext; 
PostgreSQLParser.CreaterolestmtContext = CreaterolestmtContext; 
PostgreSQLParser.Opt_withContext = Opt_withContext; 
PostgreSQLParser.OptrolelistContext = OptrolelistContext; 
PostgreSQLParser.AlteroptrolelistContext = AlteroptrolelistContext; 
PostgreSQLParser.AlteroptroleelemContext = AlteroptroleelemContext; 
PostgreSQLParser.CreateoptroleelemContext = CreateoptroleelemContext; 
PostgreSQLParser.CreateuserstmtContext = CreateuserstmtContext; 
PostgreSQLParser.AlterrolestmtContext = AlterrolestmtContext; 
PostgreSQLParser.Opt_in_databaseContext = Opt_in_databaseContext; 
PostgreSQLParser.AlterrolesetstmtContext = AlterrolesetstmtContext; 
PostgreSQLParser.DroprolestmtContext = DroprolestmtContext; 
PostgreSQLParser.CreategroupstmtContext = CreategroupstmtContext; 
PostgreSQLParser.AltergroupstmtContext = AltergroupstmtContext; 
PostgreSQLParser.Add_dropContext = Add_dropContext; 
PostgreSQLParser.CreateschemastmtContext = CreateschemastmtContext; 
PostgreSQLParser.OptschemanameContext = OptschemanameContext; 
PostgreSQLParser.OptschemaeltlistContext = OptschemaeltlistContext; 
PostgreSQLParser.Schema_stmtContext = Schema_stmtContext; 
PostgreSQLParser.VariablesetstmtContext = VariablesetstmtContext; 
PostgreSQLParser.Set_restContext = Set_restContext; 
PostgreSQLParser.Generic_setContext = Generic_setContext; 
PostgreSQLParser.Set_rest_moreContext = Set_rest_moreContext; 
PostgreSQLParser.Var_nameContext = Var_nameContext; 
PostgreSQLParser.Var_listContext = Var_listContext; 
PostgreSQLParser.Var_valueContext = Var_valueContext; 
PostgreSQLParser.Iso_levelContext = Iso_levelContext; 
PostgreSQLParser.Opt_boolean_or_stringContext = Opt_boolean_or_stringContext; 
PostgreSQLParser.Zone_valueContext = Zone_valueContext; 
PostgreSQLParser.Opt_encodingContext = Opt_encodingContext; 
PostgreSQLParser.Nonreservedword_or_sconstContext = Nonreservedword_or_sconstContext; 
PostgreSQLParser.VariableresetstmtContext = VariableresetstmtContext; 
PostgreSQLParser.Reset_restContext = Reset_restContext; 
PostgreSQLParser.Generic_resetContext = Generic_resetContext; 
PostgreSQLParser.SetresetclauseContext = SetresetclauseContext; 
PostgreSQLParser.FunctionsetresetclauseContext = FunctionsetresetclauseContext; 
PostgreSQLParser.VariableshowstmtContext = VariableshowstmtContext; 
PostgreSQLParser.ConstraintssetstmtContext = ConstraintssetstmtContext; 
PostgreSQLParser.Constraints_set_listContext = Constraints_set_listContext; 
PostgreSQLParser.Constraints_set_modeContext = Constraints_set_modeContext; 
PostgreSQLParser.CheckpointstmtContext = CheckpointstmtContext; 
PostgreSQLParser.DiscardstmtContext = DiscardstmtContext; 
PostgreSQLParser.AltertablestmtContext = AltertablestmtContext; 
PostgreSQLParser.Alter_table_cmdsContext = Alter_table_cmdsContext; 
PostgreSQLParser.Partition_cmdContext = Partition_cmdContext; 
PostgreSQLParser.Index_partition_cmdContext = Index_partition_cmdContext; 
PostgreSQLParser.Alter_table_cmdContext = Alter_table_cmdContext; 
PostgreSQLParser.Alter_column_defaultContext = Alter_column_defaultContext; 
PostgreSQLParser.Opt_drop_behaviorContext = Opt_drop_behaviorContext; 
PostgreSQLParser.Opt_collate_clauseContext = Opt_collate_clauseContext; 
PostgreSQLParser.Alter_usingContext = Alter_usingContext; 
PostgreSQLParser.Replica_identityContext = Replica_identityContext; 
PostgreSQLParser.ReloptionsContext = ReloptionsContext; 
PostgreSQLParser.Opt_reloptionsContext = Opt_reloptionsContext; 
PostgreSQLParser.Reloption_listContext = Reloption_listContext; 
PostgreSQLParser.Reloption_elemContext = Reloption_elemContext; 
PostgreSQLParser.Alter_identity_column_option_listContext = Alter_identity_column_option_listContext; 
PostgreSQLParser.Alter_identity_column_optionContext = Alter_identity_column_optionContext; 
PostgreSQLParser.PartitionboundspecContext = PartitionboundspecContext; 
PostgreSQLParser.Hash_partbound_elemContext = Hash_partbound_elemContext; 
PostgreSQLParser.Hash_partboundContext = Hash_partboundContext; 
PostgreSQLParser.AltercompositetypestmtContext = AltercompositetypestmtContext; 
PostgreSQLParser.Alter_type_cmdsContext = Alter_type_cmdsContext; 
PostgreSQLParser.Alter_type_cmdContext = Alter_type_cmdContext; 
PostgreSQLParser.CloseportalstmtContext = CloseportalstmtContext; 
PostgreSQLParser.CopystmtContext = CopystmtContext; 
PostgreSQLParser.Copy_fromContext = Copy_fromContext; 
PostgreSQLParser.Opt_programContext = Opt_programContext; 
PostgreSQLParser.Copy_file_nameContext = Copy_file_nameContext; 
PostgreSQLParser.Copy_optionsContext = Copy_optionsContext; 
PostgreSQLParser.Copy_opt_listContext = Copy_opt_listContext; 
PostgreSQLParser.Copy_opt_itemContext = Copy_opt_itemContext; 
PostgreSQLParser.Opt_binaryContext = Opt_binaryContext; 
PostgreSQLParser.Copy_delimiterContext = Copy_delimiterContext; 
PostgreSQLParser.Opt_usingContext = Opt_usingContext; 
PostgreSQLParser.Copy_generic_opt_listContext = Copy_generic_opt_listContext; 
PostgreSQLParser.Copy_generic_opt_elemContext = Copy_generic_opt_elemContext; 
PostgreSQLParser.Copy_generic_opt_argContext = Copy_generic_opt_argContext; 
PostgreSQLParser.Copy_generic_opt_arg_listContext = Copy_generic_opt_arg_listContext; 
PostgreSQLParser.Copy_generic_opt_arg_list_itemContext = Copy_generic_opt_arg_list_itemContext; 
PostgreSQLParser.CreatestmtContext = CreatestmtContext; 
PostgreSQLParser.OpttempContext = OpttempContext; 
PostgreSQLParser.OpttableelementlistContext = OpttableelementlistContext; 
PostgreSQLParser.OpttypedtableelementlistContext = OpttypedtableelementlistContext; 
PostgreSQLParser.TableelementlistContext = TableelementlistContext; 
PostgreSQLParser.TypedtableelementlistContext = TypedtableelementlistContext; 
PostgreSQLParser.TableelementContext = TableelementContext; 
PostgreSQLParser.TypedtableelementContext = TypedtableelementContext; 
PostgreSQLParser.ColumnDefContext = ColumnDefContext; 
PostgreSQLParser.ColumnOptionsContext = ColumnOptionsContext; 
PostgreSQLParser.ColquallistContext = ColquallistContext; 
PostgreSQLParser.ColconstraintContext = ColconstraintContext; 
PostgreSQLParser.ColconstraintelemContext = ColconstraintelemContext; 
PostgreSQLParser.Generated_whenContext = Generated_whenContext; 
PostgreSQLParser.ConstraintattrContext = ConstraintattrContext; 
PostgreSQLParser.TablelikeclauseContext = TablelikeclauseContext; 
PostgreSQLParser.TablelikeoptionlistContext = TablelikeoptionlistContext; 
PostgreSQLParser.TablelikeoptionContext = TablelikeoptionContext; 
PostgreSQLParser.TableconstraintContext = TableconstraintContext; 
PostgreSQLParser.ConstraintelemContext = ConstraintelemContext; 
PostgreSQLParser.Opt_no_inheritContext = Opt_no_inheritContext; 
PostgreSQLParser.Opt_column_listContext = Opt_column_listContext; 
PostgreSQLParser.ColumnlistContext = ColumnlistContext; 
PostgreSQLParser.ColumnElemContext = ColumnElemContext; 
PostgreSQLParser.Opt_c_includeContext = Opt_c_includeContext; 
PostgreSQLParser.Key_matchContext = Key_matchContext; 
PostgreSQLParser.ExclusionconstraintlistContext = ExclusionconstraintlistContext; 
PostgreSQLParser.ExclusionconstraintelemContext = ExclusionconstraintelemContext; 
PostgreSQLParser.ExclusionwhereclauseContext = ExclusionwhereclauseContext; 
PostgreSQLParser.Key_actionsContext = Key_actionsContext; 
PostgreSQLParser.Key_updateContext = Key_updateContext; 
PostgreSQLParser.Key_deleteContext = Key_deleteContext; 
PostgreSQLParser.Key_actionContext = Key_actionContext; 
PostgreSQLParser.OptinheritContext = OptinheritContext; 
PostgreSQLParser.OptpartitionspecContext = OptpartitionspecContext; 
PostgreSQLParser.PartitionspecContext = PartitionspecContext; 
PostgreSQLParser.Part_paramsContext = Part_paramsContext; 
PostgreSQLParser.Part_elemContext = Part_elemContext; 
PostgreSQLParser.Table_access_method_clauseContext = Table_access_method_clauseContext; 
PostgreSQLParser.OptwithContext = OptwithContext; 
PostgreSQLParser.OncommitoptionContext = OncommitoptionContext; 
PostgreSQLParser.OpttablespaceContext = OpttablespaceContext; 
PostgreSQLParser.OptconstablespaceContext = OptconstablespaceContext; 
PostgreSQLParser.ExistingindexContext = ExistingindexContext; 
PostgreSQLParser.CreatestatsstmtContext = CreatestatsstmtContext; 
PostgreSQLParser.AlterstatsstmtContext = AlterstatsstmtContext; 
PostgreSQLParser.CreateasstmtContext = CreateasstmtContext; 
PostgreSQLParser.Create_as_targetContext = Create_as_targetContext; 
PostgreSQLParser.Opt_with_dataContext = Opt_with_dataContext; 
PostgreSQLParser.CreatematviewstmtContext = CreatematviewstmtContext; 
PostgreSQLParser.Create_mv_targetContext = Create_mv_targetContext; 
PostgreSQLParser.OptnologContext = OptnologContext; 
PostgreSQLParser.RefreshmatviewstmtContext = RefreshmatviewstmtContext; 
PostgreSQLParser.CreateseqstmtContext = CreateseqstmtContext; 
PostgreSQLParser.AlterseqstmtContext = AlterseqstmtContext; 
PostgreSQLParser.OptseqoptlistContext = OptseqoptlistContext; 
PostgreSQLParser.OptparenthesizedseqoptlistContext = OptparenthesizedseqoptlistContext; 
PostgreSQLParser.SeqoptlistContext = SeqoptlistContext; 
PostgreSQLParser.SeqoptelemContext = SeqoptelemContext; 
PostgreSQLParser.Opt_byContext = Opt_byContext; 
PostgreSQLParser.NumericonlyContext = NumericonlyContext; 
PostgreSQLParser.Numericonly_listContext = Numericonly_listContext; 
PostgreSQLParser.CreateplangstmtContext = CreateplangstmtContext; 
PostgreSQLParser.Opt_trustedContext = Opt_trustedContext; 
PostgreSQLParser.Handler_nameContext = Handler_nameContext; 
PostgreSQLParser.Opt_inline_handlerContext = Opt_inline_handlerContext; 
PostgreSQLParser.Validator_clauseContext = Validator_clauseContext; 
PostgreSQLParser.Opt_validatorContext = Opt_validatorContext; 
PostgreSQLParser.Opt_proceduralContext = Opt_proceduralContext; 
PostgreSQLParser.CreatetablespacestmtContext = CreatetablespacestmtContext; 
PostgreSQLParser.OpttablespaceownerContext = OpttablespaceownerContext; 
PostgreSQLParser.DroptablespacestmtContext = DroptablespacestmtContext; 
PostgreSQLParser.CreateextensionstmtContext = CreateextensionstmtContext; 
PostgreSQLParser.Create_extension_opt_listContext = Create_extension_opt_listContext; 
PostgreSQLParser.Create_extension_opt_itemContext = Create_extension_opt_itemContext; 
PostgreSQLParser.AlterextensionstmtContext = AlterextensionstmtContext; 
PostgreSQLParser.Alter_extension_opt_listContext = Alter_extension_opt_listContext; 
PostgreSQLParser.Alter_extension_opt_itemContext = Alter_extension_opt_itemContext; 
PostgreSQLParser.AlterextensioncontentsstmtContext = AlterextensioncontentsstmtContext; 
PostgreSQLParser.CreatefdwstmtContext = CreatefdwstmtContext; 
PostgreSQLParser.Fdw_optionContext = Fdw_optionContext; 
PostgreSQLParser.Fdw_optionsContext = Fdw_optionsContext; 
PostgreSQLParser.Opt_fdw_optionsContext = Opt_fdw_optionsContext; 
PostgreSQLParser.AlterfdwstmtContext = AlterfdwstmtContext; 
PostgreSQLParser.Create_generic_optionsContext = Create_generic_optionsContext; 
PostgreSQLParser.Generic_option_listContext = Generic_option_listContext; 
PostgreSQLParser.Alter_generic_optionsContext = Alter_generic_optionsContext; 
PostgreSQLParser.Alter_generic_option_listContext = Alter_generic_option_listContext; 
PostgreSQLParser.Alter_generic_option_elemContext = Alter_generic_option_elemContext; 
PostgreSQLParser.Generic_option_elemContext = Generic_option_elemContext; 
PostgreSQLParser.Generic_option_nameContext = Generic_option_nameContext; 
PostgreSQLParser.Generic_option_argContext = Generic_option_argContext; 
PostgreSQLParser.CreateforeignserverstmtContext = CreateforeignserverstmtContext; 
PostgreSQLParser.Opt_typeContext = Opt_typeContext; 
PostgreSQLParser.Foreign_server_versionContext = Foreign_server_versionContext; 
PostgreSQLParser.Opt_foreign_server_versionContext = Opt_foreign_server_versionContext; 
PostgreSQLParser.AlterforeignserverstmtContext = AlterforeignserverstmtContext; 
PostgreSQLParser.CreateforeigntablestmtContext = CreateforeigntablestmtContext; 
PostgreSQLParser.ImportforeignschemastmtContext = ImportforeignschemastmtContext; 
PostgreSQLParser.Import_qualification_typeContext = Import_qualification_typeContext; 
PostgreSQLParser.Import_qualificationContext = Import_qualificationContext; 
PostgreSQLParser.CreateusermappingstmtContext = CreateusermappingstmtContext; 
PostgreSQLParser.Auth_identContext = Auth_identContext; 
PostgreSQLParser.DropusermappingstmtContext = DropusermappingstmtContext; 
PostgreSQLParser.AlterusermappingstmtContext = AlterusermappingstmtContext; 
PostgreSQLParser.CreatepolicystmtContext = CreatepolicystmtContext; 
PostgreSQLParser.AlterpolicystmtContext = AlterpolicystmtContext; 
PostgreSQLParser.RowsecurityoptionalexprContext = RowsecurityoptionalexprContext; 
PostgreSQLParser.RowsecurityoptionalwithcheckContext = RowsecurityoptionalwithcheckContext; 
PostgreSQLParser.RowsecuritydefaulttoroleContext = RowsecuritydefaulttoroleContext; 
PostgreSQLParser.RowsecurityoptionaltoroleContext = RowsecurityoptionaltoroleContext; 
PostgreSQLParser.RowsecuritydefaultpermissiveContext = RowsecuritydefaultpermissiveContext; 
PostgreSQLParser.RowsecuritydefaultforcmdContext = RowsecuritydefaultforcmdContext; 
PostgreSQLParser.Row_security_cmdContext = Row_security_cmdContext; 
PostgreSQLParser.CreateamstmtContext = CreateamstmtContext; 
PostgreSQLParser.Am_typeContext = Am_typeContext; 
PostgreSQLParser.CreatetrigstmtContext = CreatetrigstmtContext; 
PostgreSQLParser.TriggeractiontimeContext = TriggeractiontimeContext; 
PostgreSQLParser.TriggereventsContext = TriggereventsContext; 
PostgreSQLParser.TriggeroneeventContext = TriggeroneeventContext; 
PostgreSQLParser.TriggerreferencingContext = TriggerreferencingContext; 
PostgreSQLParser.TriggertransitionsContext = TriggertransitionsContext; 
PostgreSQLParser.TriggertransitionContext = TriggertransitionContext; 
PostgreSQLParser.TransitionoldornewContext = TransitionoldornewContext; 
PostgreSQLParser.TransitionrowortableContext = TransitionrowortableContext; 
PostgreSQLParser.TransitionrelnameContext = TransitionrelnameContext; 
PostgreSQLParser.TriggerforspecContext = TriggerforspecContext; 
PostgreSQLParser.TriggerforopteachContext = TriggerforopteachContext; 
PostgreSQLParser.TriggerfortypeContext = TriggerfortypeContext; 
PostgreSQLParser.TriggerwhenContext = TriggerwhenContext; 
PostgreSQLParser.Function_or_procedureContext = Function_or_procedureContext; 
PostgreSQLParser.TriggerfuncargsContext = TriggerfuncargsContext; 
PostgreSQLParser.TriggerfuncargContext = TriggerfuncargContext; 
PostgreSQLParser.OptconstrfromtableContext = OptconstrfromtableContext; 
PostgreSQLParser.ConstraintattributespecContext = ConstraintattributespecContext; 
PostgreSQLParser.ConstraintattributeElemContext = ConstraintattributeElemContext; 
PostgreSQLParser.CreateeventtrigstmtContext = CreateeventtrigstmtContext; 
PostgreSQLParser.Event_trigger_when_listContext = Event_trigger_when_listContext; 
PostgreSQLParser.Event_trigger_when_itemContext = Event_trigger_when_itemContext; 
PostgreSQLParser.Event_trigger_value_listContext = Event_trigger_value_listContext; 
PostgreSQLParser.AltereventtrigstmtContext = AltereventtrigstmtContext; 
PostgreSQLParser.Enable_triggerContext = Enable_triggerContext; 
PostgreSQLParser.CreateassertionstmtContext = CreateassertionstmtContext; 
PostgreSQLParser.DefinestmtContext = DefinestmtContext; 
PostgreSQLParser.DefinitionContext = DefinitionContext; 
PostgreSQLParser.Def_listContext = Def_listContext; 
PostgreSQLParser.Def_elemContext = Def_elemContext; 
PostgreSQLParser.Def_argContext = Def_argContext; 
PostgreSQLParser.Old_aggr_definitionContext = Old_aggr_definitionContext; 
PostgreSQLParser.Old_aggr_listContext = Old_aggr_listContext; 
PostgreSQLParser.Old_aggr_elemContext = Old_aggr_elemContext; 
PostgreSQLParser.Opt_enum_val_listContext = Opt_enum_val_listContext; 
PostgreSQLParser.Enum_val_listContext = Enum_val_listContext; 
PostgreSQLParser.AlterenumstmtContext = AlterenumstmtContext; 
PostgreSQLParser.Opt_if_not_existsContext = Opt_if_not_existsContext; 
PostgreSQLParser.CreateopclassstmtContext = CreateopclassstmtContext; 
PostgreSQLParser.Opclass_item_listContext = Opclass_item_listContext; 
PostgreSQLParser.Opclass_itemContext = Opclass_itemContext; 
PostgreSQLParser.Opt_defaultContext = Opt_defaultContext; 
PostgreSQLParser.Opt_opfamilyContext = Opt_opfamilyContext; 
PostgreSQLParser.Opclass_purposeContext = Opclass_purposeContext; 
PostgreSQLParser.Opt_recheckContext = Opt_recheckContext; 
PostgreSQLParser.CreateopfamilystmtContext = CreateopfamilystmtContext; 
PostgreSQLParser.AlteropfamilystmtContext = AlteropfamilystmtContext; 
PostgreSQLParser.Opclass_drop_listContext = Opclass_drop_listContext; 
PostgreSQLParser.Opclass_dropContext = Opclass_dropContext; 
PostgreSQLParser.DropopclassstmtContext = DropopclassstmtContext; 
PostgreSQLParser.DropopfamilystmtContext = DropopfamilystmtContext; 
PostgreSQLParser.DropownedstmtContext = DropownedstmtContext; 
PostgreSQLParser.ReassignownedstmtContext = ReassignownedstmtContext; 
PostgreSQLParser.DropstmtContext = DropstmtContext; 
PostgreSQLParser.Object_type_any_nameContext = Object_type_any_nameContext; 
PostgreSQLParser.Object_type_nameContext = Object_type_nameContext; 
PostgreSQLParser.Drop_type_nameContext = Drop_type_nameContext; 
PostgreSQLParser.Object_type_name_on_any_nameContext = Object_type_name_on_any_nameContext; 
PostgreSQLParser.Any_name_listContext = Any_name_listContext; 
PostgreSQLParser.Any_nameContext = Any_nameContext; 
PostgreSQLParser.AttrsContext = AttrsContext; 
PostgreSQLParser.Type_name_listContext = Type_name_listContext; 
PostgreSQLParser.TruncatestmtContext = TruncatestmtContext; 
PostgreSQLParser.Opt_restart_seqsContext = Opt_restart_seqsContext; 
PostgreSQLParser.CommentstmtContext = CommentstmtContext; 
PostgreSQLParser.Comment_textContext = Comment_textContext; 
PostgreSQLParser.SeclabelstmtContext = SeclabelstmtContext; 
PostgreSQLParser.Opt_providerContext = Opt_providerContext; 
PostgreSQLParser.Security_labelContext = Security_labelContext; 
PostgreSQLParser.FetchstmtContext = FetchstmtContext; 
PostgreSQLParser.Fetch_argsContext = Fetch_argsContext; 
PostgreSQLParser.From_inContext = From_inContext; 
PostgreSQLParser.Opt_from_inContext = Opt_from_inContext; 
PostgreSQLParser.GrantstmtContext = GrantstmtContext; 
PostgreSQLParser.RevokestmtContext = RevokestmtContext; 
PostgreSQLParser.PrivilegesContext = PrivilegesContext; 
PostgreSQLParser.Privilege_listContext = Privilege_listContext; 
PostgreSQLParser.PrivilegeContext = PrivilegeContext; 
PostgreSQLParser.Privilege_targetContext = Privilege_targetContext; 
PostgreSQLParser.Grantee_listContext = Grantee_listContext; 
PostgreSQLParser.GranteeContext = GranteeContext; 
PostgreSQLParser.Opt_grant_grant_optionContext = Opt_grant_grant_optionContext; 
PostgreSQLParser.GrantrolestmtContext = GrantrolestmtContext; 
PostgreSQLParser.RevokerolestmtContext = RevokerolestmtContext; 
PostgreSQLParser.Opt_grant_admin_optionContext = Opt_grant_admin_optionContext; 
PostgreSQLParser.Opt_granted_byContext = Opt_granted_byContext; 
PostgreSQLParser.AlterdefaultprivilegesstmtContext = AlterdefaultprivilegesstmtContext; 
PostgreSQLParser.DefacloptionlistContext = DefacloptionlistContext; 
PostgreSQLParser.DefacloptionContext = DefacloptionContext; 
PostgreSQLParser.DefaclactionContext = DefaclactionContext; 
PostgreSQLParser.Defacl_privilege_targetContext = Defacl_privilege_targetContext; 
PostgreSQLParser.IndexstmtContext = IndexstmtContext; 
PostgreSQLParser.Opt_uniqueContext = Opt_uniqueContext; 
PostgreSQLParser.Opt_concurrentlyContext = Opt_concurrentlyContext; 
PostgreSQLParser.Opt_index_nameContext = Opt_index_nameContext; 
PostgreSQLParser.Access_method_clauseContext = Access_method_clauseContext; 
PostgreSQLParser.Index_paramsContext = Index_paramsContext; 
PostgreSQLParser.Index_elem_optionsContext = Index_elem_optionsContext; 
PostgreSQLParser.Index_elemContext = Index_elemContext; 
PostgreSQLParser.Opt_includeContext = Opt_includeContext; 
PostgreSQLParser.Index_including_paramsContext = Index_including_paramsContext; 
PostgreSQLParser.Opt_collateContext = Opt_collateContext; 
PostgreSQLParser.Opt_classContext = Opt_classContext; 
PostgreSQLParser.Opt_asc_descContext = Opt_asc_descContext; 
PostgreSQLParser.Opt_nulls_orderContext = Opt_nulls_orderContext; 
PostgreSQLParser.CreatefunctionstmtContext = CreatefunctionstmtContext; 
PostgreSQLParser.Opt_or_replaceContext = Opt_or_replaceContext; 
PostgreSQLParser.Func_argsContext = Func_argsContext; 
PostgreSQLParser.Func_args_listContext = Func_args_listContext; 
PostgreSQLParser.Function_with_argtypes_listContext = Function_with_argtypes_listContext; 
PostgreSQLParser.Function_with_argtypesContext = Function_with_argtypesContext; 
PostgreSQLParser.Func_args_with_defaultsContext = Func_args_with_defaultsContext; 
PostgreSQLParser.Func_args_with_defaults_listContext = Func_args_with_defaults_listContext; 
PostgreSQLParser.Func_argContext = Func_argContext; 
PostgreSQLParser.Arg_classContext = Arg_classContext; 
PostgreSQLParser.Param_nameContext = Param_nameContext; 
PostgreSQLParser.Func_returnContext = Func_returnContext; 
PostgreSQLParser.Func_typeContext = Func_typeContext; 
PostgreSQLParser.Func_arg_with_defaultContext = Func_arg_with_defaultContext; 
PostgreSQLParser.Aggr_argContext = Aggr_argContext; 
PostgreSQLParser.Aggr_argsContext = Aggr_argsContext; 
PostgreSQLParser.Aggr_args_listContext = Aggr_args_listContext; 
PostgreSQLParser.Aggregate_with_argtypesContext = Aggregate_with_argtypesContext; 
PostgreSQLParser.Aggregate_with_argtypes_listContext = Aggregate_with_argtypes_listContext; 
PostgreSQLParser.Createfunc_opt_listContext = Createfunc_opt_listContext; 
PostgreSQLParser.Common_func_opt_itemContext = Common_func_opt_itemContext; 
PostgreSQLParser.Createfunc_opt_itemContext = Createfunc_opt_itemContext; 
PostgreSQLParser.Func_asContext = Func_asContext; 
PostgreSQLParser.Transform_type_listContext = Transform_type_listContext; 
PostgreSQLParser.Opt_definitionContext = Opt_definitionContext; 
PostgreSQLParser.Table_func_columnContext = Table_func_columnContext; 
PostgreSQLParser.Table_func_column_listContext = Table_func_column_listContext; 
PostgreSQLParser.AlterfunctionstmtContext = AlterfunctionstmtContext; 
PostgreSQLParser.Alterfunc_opt_listContext = Alterfunc_opt_listContext; 
PostgreSQLParser.Opt_restrictContext = Opt_restrictContext; 
PostgreSQLParser.RemovefuncstmtContext = RemovefuncstmtContext; 
PostgreSQLParser.RemoveaggrstmtContext = RemoveaggrstmtContext; 
PostgreSQLParser.RemoveoperstmtContext = RemoveoperstmtContext; 
PostgreSQLParser.Oper_argtypesContext = Oper_argtypesContext; 
PostgreSQLParser.Any_operatorContext = Any_operatorContext; 
PostgreSQLParser.Operator_with_argtypes_listContext = Operator_with_argtypes_listContext; 
PostgreSQLParser.Operator_with_argtypesContext = Operator_with_argtypesContext; 
PostgreSQLParser.DostmtContext = DostmtContext; 
PostgreSQLParser.Dostmt_opt_listContext = Dostmt_opt_listContext; 
PostgreSQLParser.Dostmt_opt_itemContext = Dostmt_opt_itemContext; 
PostgreSQLParser.CreatecaststmtContext = CreatecaststmtContext; 
PostgreSQLParser.Cast_contextContext = Cast_contextContext; 
PostgreSQLParser.DropcaststmtContext = DropcaststmtContext; 
PostgreSQLParser.Opt_if_existsContext = Opt_if_existsContext; 
PostgreSQLParser.CreatetransformstmtContext = CreatetransformstmtContext; 
PostgreSQLParser.Transform_element_listContext = Transform_element_listContext; 
PostgreSQLParser.DroptransformstmtContext = DroptransformstmtContext; 
PostgreSQLParser.ReindexstmtContext = ReindexstmtContext; 
PostgreSQLParser.Reindex_target_typeContext = Reindex_target_typeContext; 
PostgreSQLParser.Reindex_target_multitableContext = Reindex_target_multitableContext; 
PostgreSQLParser.Reindex_option_listContext = Reindex_option_listContext; 
PostgreSQLParser.Reindex_option_elemContext = Reindex_option_elemContext; 
PostgreSQLParser.AltertblspcstmtContext = AltertblspcstmtContext; 
PostgreSQLParser.RenamestmtContext = RenamestmtContext; 
PostgreSQLParser.Opt_columnContext = Opt_columnContext; 
PostgreSQLParser.Opt_set_dataContext = Opt_set_dataContext; 
PostgreSQLParser.AlterobjectdependsstmtContext = AlterobjectdependsstmtContext; 
PostgreSQLParser.Opt_noContext = Opt_noContext; 
PostgreSQLParser.AlterobjectschemastmtContext = AlterobjectschemastmtContext; 
PostgreSQLParser.AlteroperatorstmtContext = AlteroperatorstmtContext; 
PostgreSQLParser.Operator_def_listContext = Operator_def_listContext; 
PostgreSQLParser.Operator_def_elemContext = Operator_def_elemContext; 
PostgreSQLParser.Operator_def_argContext = Operator_def_argContext; 
PostgreSQLParser.AltertypestmtContext = AltertypestmtContext; 
PostgreSQLParser.AlterownerstmtContext = AlterownerstmtContext; 
PostgreSQLParser.CreatepublicationstmtContext = CreatepublicationstmtContext; 
PostgreSQLParser.Opt_publication_for_tablesContext = Opt_publication_for_tablesContext; 
PostgreSQLParser.Publication_for_tablesContext = Publication_for_tablesContext; 
PostgreSQLParser.AlterpublicationstmtContext = AlterpublicationstmtContext; 
PostgreSQLParser.CreatesubscriptionstmtContext = CreatesubscriptionstmtContext; 
PostgreSQLParser.Publication_name_listContext = Publication_name_listContext; 
PostgreSQLParser.Publication_name_itemContext = Publication_name_itemContext; 
PostgreSQLParser.AltersubscriptionstmtContext = AltersubscriptionstmtContext; 
PostgreSQLParser.DropsubscriptionstmtContext = DropsubscriptionstmtContext; 
PostgreSQLParser.RulestmtContext = RulestmtContext; 
PostgreSQLParser.RuleactionlistContext = RuleactionlistContext; 
PostgreSQLParser.RuleactionmultiContext = RuleactionmultiContext; 
PostgreSQLParser.RuleactionstmtContext = RuleactionstmtContext; 
PostgreSQLParser.RuleactionstmtOrEmptyContext = RuleactionstmtOrEmptyContext; 
PostgreSQLParser.EventContext = EventContext; 
PostgreSQLParser.Opt_insteadContext = Opt_insteadContext; 
PostgreSQLParser.NotifystmtContext = NotifystmtContext; 
PostgreSQLParser.Notify_payloadContext = Notify_payloadContext; 
PostgreSQLParser.ListenstmtContext = ListenstmtContext; 
PostgreSQLParser.UnlistenstmtContext = UnlistenstmtContext; 
PostgreSQLParser.TransactionstmtContext = TransactionstmtContext; 
PostgreSQLParser.Opt_transactionContext = Opt_transactionContext; 
PostgreSQLParser.Transaction_mode_itemContext = Transaction_mode_itemContext; 
PostgreSQLParser.Transaction_mode_listContext = Transaction_mode_listContext; 
PostgreSQLParser.Transaction_mode_list_or_emptyContext = Transaction_mode_list_or_emptyContext; 
PostgreSQLParser.Opt_transaction_chainContext = Opt_transaction_chainContext; 
PostgreSQLParser.ViewstmtContext = ViewstmtContext; 
PostgreSQLParser.Opt_check_optionContext = Opt_check_optionContext; 
PostgreSQLParser.LoadstmtContext = LoadstmtContext; 
PostgreSQLParser.CreatedbstmtContext = CreatedbstmtContext; 
PostgreSQLParser.Createdb_opt_listContext = Createdb_opt_listContext; 
PostgreSQLParser.Createdb_opt_itemsContext = Createdb_opt_itemsContext; 
PostgreSQLParser.Createdb_opt_itemContext = Createdb_opt_itemContext; 
PostgreSQLParser.Createdb_opt_nameContext = Createdb_opt_nameContext; 
PostgreSQLParser.Opt_equalContext = Opt_equalContext; 
PostgreSQLParser.AlterdatabasestmtContext = AlterdatabasestmtContext; 
PostgreSQLParser.AlterdatabasesetstmtContext = AlterdatabasesetstmtContext; 
PostgreSQLParser.DropdbstmtContext = DropdbstmtContext; 
PostgreSQLParser.Drop_option_listContext = Drop_option_listContext; 
PostgreSQLParser.Drop_optionContext = Drop_optionContext; 
PostgreSQLParser.AltercollationstmtContext = AltercollationstmtContext; 
PostgreSQLParser.AltersystemstmtContext = AltersystemstmtContext; 
PostgreSQLParser.CreatedomainstmtContext = CreatedomainstmtContext; 
PostgreSQLParser.AlterdomainstmtContext = AlterdomainstmtContext; 
PostgreSQLParser.Opt_asContext = Opt_asContext; 
PostgreSQLParser.AltertsdictionarystmtContext = AltertsdictionarystmtContext; 
PostgreSQLParser.AltertsconfigurationstmtContext = AltertsconfigurationstmtContext; 
PostgreSQLParser.Any_withContext = Any_withContext; 
PostgreSQLParser.CreateconversionstmtContext = CreateconversionstmtContext; 
PostgreSQLParser.ClusterstmtContext = ClusterstmtContext; 
PostgreSQLParser.Cluster_index_specificationContext = Cluster_index_specificationContext; 
PostgreSQLParser.VacuumstmtContext = VacuumstmtContext; 
PostgreSQLParser.AnalyzestmtContext = AnalyzestmtContext; 
PostgreSQLParser.Vac_analyze_option_listContext = Vac_analyze_option_listContext; 
PostgreSQLParser.Analyze_keywordContext = Analyze_keywordContext; 
PostgreSQLParser.Vac_analyze_option_elemContext = Vac_analyze_option_elemContext; 
PostgreSQLParser.Vac_analyze_option_nameContext = Vac_analyze_option_nameContext; 
PostgreSQLParser.Vac_analyze_option_argContext = Vac_analyze_option_argContext; 
PostgreSQLParser.Opt_analyzeContext = Opt_analyzeContext; 
PostgreSQLParser.Opt_verboseContext = Opt_verboseContext; 
PostgreSQLParser.Opt_fullContext = Opt_fullContext; 
PostgreSQLParser.Opt_freezeContext = Opt_freezeContext; 
PostgreSQLParser.Opt_name_listContext = Opt_name_listContext; 
PostgreSQLParser.Vacuum_relationContext = Vacuum_relationContext; 
PostgreSQLParser.Vacuum_relation_listContext = Vacuum_relation_listContext; 
PostgreSQLParser.Opt_vacuum_relation_listContext = Opt_vacuum_relation_listContext; 
PostgreSQLParser.ExplainstmtContext = ExplainstmtContext; 
PostgreSQLParser.ExplainablestmtContext = ExplainablestmtContext; 
PostgreSQLParser.Explain_option_listContext = Explain_option_listContext; 
PostgreSQLParser.Explain_option_elemContext = Explain_option_elemContext; 
PostgreSQLParser.Explain_option_nameContext = Explain_option_nameContext; 
PostgreSQLParser.Explain_option_argContext = Explain_option_argContext; 
PostgreSQLParser.PreparestmtContext = PreparestmtContext; 
PostgreSQLParser.Prep_type_clauseContext = Prep_type_clauseContext; 
PostgreSQLParser.PreparablestmtContext = PreparablestmtContext; 
PostgreSQLParser.ExecutestmtContext = ExecutestmtContext; 
PostgreSQLParser.Execute_param_clauseContext = Execute_param_clauseContext; 
PostgreSQLParser.DeallocatestmtContext = DeallocatestmtContext; 
PostgreSQLParser.InsertstmtContext = InsertstmtContext; 
PostgreSQLParser.Insert_targetContext = Insert_targetContext; 
PostgreSQLParser.Insert_restContext = Insert_restContext; 
PostgreSQLParser.Override_kindContext = Override_kindContext; 
PostgreSQLParser.Insert_column_listContext = Insert_column_listContext; 
PostgreSQLParser.Insert_column_itemContext = Insert_column_itemContext; 
PostgreSQLParser.Opt_on_conflictContext = Opt_on_conflictContext; 
PostgreSQLParser.Opt_conf_exprContext = Opt_conf_exprContext; 
PostgreSQLParser.Returning_clauseContext = Returning_clauseContext; 
PostgreSQLParser.MergestmtContext = MergestmtContext; 
PostgreSQLParser.Merge_insert_clauseContext = Merge_insert_clauseContext; 
PostgreSQLParser.Merge_update_clauseContext = Merge_update_clauseContext; 
PostgreSQLParser.Merge_delete_clauseContext = Merge_delete_clauseContext; 
PostgreSQLParser.DeletestmtContext = DeletestmtContext; 
PostgreSQLParser.Using_clauseContext = Using_clauseContext; 
PostgreSQLParser.LockstmtContext = LockstmtContext; 
PostgreSQLParser.Opt_lockContext = Opt_lockContext; 
PostgreSQLParser.Lock_typeContext = Lock_typeContext; 
PostgreSQLParser.Opt_nowaitContext = Opt_nowaitContext; 
PostgreSQLParser.Opt_nowait_or_skipContext = Opt_nowait_or_skipContext; 
PostgreSQLParser.UpdatestmtContext = UpdatestmtContext; 
PostgreSQLParser.Set_clause_listContext = Set_clause_listContext; 
PostgreSQLParser.Set_clauseContext = Set_clauseContext; 
PostgreSQLParser.Set_targetContext = Set_targetContext; 
PostgreSQLParser.Set_target_listContext = Set_target_listContext; 
PostgreSQLParser.DeclarecursorstmtContext = DeclarecursorstmtContext; 
PostgreSQLParser.Cursor_nameContext = Cursor_nameContext; 
PostgreSQLParser.Cursor_optionsContext = Cursor_optionsContext; 
PostgreSQLParser.Opt_holdContext = Opt_holdContext; 
PostgreSQLParser.SelectstmtContext = SelectstmtContext; 
PostgreSQLParser.Select_with_parensContext = Select_with_parensContext; 
PostgreSQLParser.Select_no_parensContext = Select_no_parensContext; 
PostgreSQLParser.Select_clauseContext = Select_clauseContext; 
PostgreSQLParser.Simple_selectContext = Simple_selectContext; 
PostgreSQLParser.Set_operatorContext = Set_operatorContext; 
PostgreSQLParser.Set_operator_with_all_or_distinctContext = Set_operator_with_all_or_distinctContext; 
PostgreSQLParser.With_clauseContext = With_clauseContext; 
PostgreSQLParser.Cte_listContext = Cte_listContext; 
PostgreSQLParser.Common_table_exprContext = Common_table_exprContext; 
PostgreSQLParser.Opt_materializedContext = Opt_materializedContext; 
PostgreSQLParser.Opt_with_clauseContext = Opt_with_clauseContext; 
PostgreSQLParser.Into_clauseContext = Into_clauseContext; 
PostgreSQLParser.Opt_strictContext = Opt_strictContext; 
PostgreSQLParser.OpttempTableNameContext = OpttempTableNameContext; 
PostgreSQLParser.Opt_tableContext = Opt_tableContext; 
PostgreSQLParser.All_or_distinctContext = All_or_distinctContext; 
PostgreSQLParser.Distinct_clauseContext = Distinct_clauseContext; 
PostgreSQLParser.Opt_all_clauseContext = Opt_all_clauseContext; 
PostgreSQLParser.Opt_sort_clauseContext = Opt_sort_clauseContext; 
PostgreSQLParser.Sort_clauseContext = Sort_clauseContext; 
PostgreSQLParser.Sortby_listContext = Sortby_listContext; 
PostgreSQLParser.SortbyContext = SortbyContext; 
PostgreSQLParser.Select_limitContext = Select_limitContext; 
PostgreSQLParser.Opt_select_limitContext = Opt_select_limitContext; 
PostgreSQLParser.Limit_clauseContext = Limit_clauseContext; 
PostgreSQLParser.Offset_clauseContext = Offset_clauseContext; 
PostgreSQLParser.Select_limit_valueContext = Select_limit_valueContext; 
PostgreSQLParser.Select_offset_valueContext = Select_offset_valueContext; 
PostgreSQLParser.Select_fetch_first_valueContext = Select_fetch_first_valueContext; 
PostgreSQLParser.I_or_f_constContext = I_or_f_constContext; 
PostgreSQLParser.Row_or_rowsContext = Row_or_rowsContext; 
PostgreSQLParser.First_or_nextContext = First_or_nextContext; 
PostgreSQLParser.Group_clauseContext = Group_clauseContext; 
PostgreSQLParser.Group_by_listContext = Group_by_listContext; 
PostgreSQLParser.Group_by_itemContext = Group_by_itemContext; 
PostgreSQLParser.Empty_grouping_setContext = Empty_grouping_setContext; 
PostgreSQLParser.Rollup_clauseContext = Rollup_clauseContext; 
PostgreSQLParser.Cube_clauseContext = Cube_clauseContext; 
PostgreSQLParser.Grouping_sets_clauseContext = Grouping_sets_clauseContext; 
PostgreSQLParser.Having_clauseContext = Having_clauseContext; 
PostgreSQLParser.For_locking_clauseContext = For_locking_clauseContext; 
PostgreSQLParser.Opt_for_locking_clauseContext = Opt_for_locking_clauseContext; 
PostgreSQLParser.For_locking_itemsContext = For_locking_itemsContext; 
PostgreSQLParser.For_locking_itemContext = For_locking_itemContext; 
PostgreSQLParser.For_locking_strengthContext = For_locking_strengthContext; 
PostgreSQLParser.Locked_rels_listContext = Locked_rels_listContext; 
PostgreSQLParser.Values_clauseContext = Values_clauseContext; 
PostgreSQLParser.From_clauseContext = From_clauseContext; 
PostgreSQLParser.From_listContext = From_listContext; 
PostgreSQLParser.Non_ansi_joinContext = Non_ansi_joinContext; 
PostgreSQLParser.Table_refContext = Table_refContext; 
PostgreSQLParser.Alias_clauseContext = Alias_clauseContext; 
PostgreSQLParser.Opt_alias_clauseContext = Opt_alias_clauseContext; 
PostgreSQLParser.Table_alias_clauseContext = Table_alias_clauseContext; 
PostgreSQLParser.Func_alias_clauseContext = Func_alias_clauseContext; 
PostgreSQLParser.Join_typeContext = Join_typeContext; 
PostgreSQLParser.Join_qualContext = Join_qualContext; 
PostgreSQLParser.Relation_exprContext = Relation_exprContext; 
PostgreSQLParser.Relation_expr_listContext = Relation_expr_listContext; 
PostgreSQLParser.Relation_expr_opt_aliasContext = Relation_expr_opt_aliasContext; 
PostgreSQLParser.Tablesample_clauseContext = Tablesample_clauseContext; 
PostgreSQLParser.Opt_repeatable_clauseContext = Opt_repeatable_clauseContext; 
PostgreSQLParser.Func_tableContext = Func_tableContext; 
PostgreSQLParser.Rowsfrom_itemContext = Rowsfrom_itemContext; 
PostgreSQLParser.Rowsfrom_listContext = Rowsfrom_listContext; 
PostgreSQLParser.Opt_col_def_listContext = Opt_col_def_listContext; 
PostgreSQLParser.Opt_ordinalityContext = Opt_ordinalityContext; 
PostgreSQLParser.Where_clauseContext = Where_clauseContext; 
PostgreSQLParser.Where_or_current_clauseContext = Where_or_current_clauseContext; 
PostgreSQLParser.OpttablefuncelementlistContext = OpttablefuncelementlistContext; 
PostgreSQLParser.TablefuncelementlistContext = TablefuncelementlistContext; 
PostgreSQLParser.TablefuncelementContext = TablefuncelementContext; 
PostgreSQLParser.XmltableContext = XmltableContext; 
PostgreSQLParser.Xmltable_column_listContext = Xmltable_column_listContext; 
PostgreSQLParser.Xmltable_column_elContext = Xmltable_column_elContext; 
PostgreSQLParser.Xmltable_column_option_listContext = Xmltable_column_option_listContext; 
PostgreSQLParser.Xmltable_column_option_elContext = Xmltable_column_option_elContext; 
PostgreSQLParser.Xml_namespace_listContext = Xml_namespace_listContext; 
PostgreSQLParser.Xml_namespace_elContext = Xml_namespace_elContext; 
PostgreSQLParser.TypenameContext = TypenameContext; 
PostgreSQLParser.Opt_array_boundsContext = Opt_array_boundsContext; 
PostgreSQLParser.SimpletypenameContext = SimpletypenameContext; 
PostgreSQLParser.ConsttypenameContext = ConsttypenameContext; 
PostgreSQLParser.GenerictypeContext = GenerictypeContext; 
PostgreSQLParser.Opt_type_modifiersContext = Opt_type_modifiersContext; 
PostgreSQLParser.NumericContext = NumericContext; 
PostgreSQLParser.Opt_floatContext = Opt_floatContext; 
PostgreSQLParser.BitContext = BitContext; 
PostgreSQLParser.ConstbitContext = ConstbitContext; 
PostgreSQLParser.BitwithlengthContext = BitwithlengthContext; 
PostgreSQLParser.BitwithoutlengthContext = BitwithoutlengthContext; 
PostgreSQLParser.CharacterContext = CharacterContext; 
PostgreSQLParser.ConstcharacterContext = ConstcharacterContext; 
PostgreSQLParser.Character_cContext = Character_cContext; 
PostgreSQLParser.Opt_varyingContext = Opt_varyingContext; 
PostgreSQLParser.ConstdatetimeContext = ConstdatetimeContext; 
PostgreSQLParser.ConstintervalContext = ConstintervalContext; 
PostgreSQLParser.Opt_timezoneContext = Opt_timezoneContext; 
PostgreSQLParser.Opt_intervalContext = Opt_intervalContext; 
PostgreSQLParser.Interval_secondContext = Interval_secondContext; 
PostgreSQLParser.Opt_escapeContext = Opt_escapeContext; 
PostgreSQLParser.A_exprContext = A_exprContext; 
PostgreSQLParser.A_expr_qualContext = A_expr_qualContext; 
PostgreSQLParser.A_expr_lesslessContext = A_expr_lesslessContext; 
PostgreSQLParser.A_expr_orContext = A_expr_orContext; 
PostgreSQLParser.A_expr_andContext = A_expr_andContext; 
PostgreSQLParser.A_expr_betweenContext = A_expr_betweenContext; 
PostgreSQLParser.A_expr_inContext = A_expr_inContext; 
PostgreSQLParser.A_expr_unary_notContext = A_expr_unary_notContext; 
PostgreSQLParser.A_expr_isnullContext = A_expr_isnullContext; 
PostgreSQLParser.A_expr_is_notContext = A_expr_is_notContext; 
PostgreSQLParser.A_expr_compareContext = A_expr_compareContext; 
PostgreSQLParser.A_expr_likeContext = A_expr_likeContext; 
PostgreSQLParser.A_expr_qual_opContext = A_expr_qual_opContext; 
PostgreSQLParser.A_expr_unary_qualopContext = A_expr_unary_qualopContext; 
PostgreSQLParser.A_expr_addContext = A_expr_addContext; 
PostgreSQLParser.A_expr_mulContext = A_expr_mulContext; 
PostgreSQLParser.A_expr_caretContext = A_expr_caretContext; 
PostgreSQLParser.A_expr_unary_signContext = A_expr_unary_signContext; 
PostgreSQLParser.A_expr_at_time_zoneContext = A_expr_at_time_zoneContext; 
PostgreSQLParser.A_expr_collateContext = A_expr_collateContext; 
PostgreSQLParser.A_expr_typecastContext = A_expr_typecastContext; 
PostgreSQLParser.B_exprContext = B_exprContext; 
PostgreSQLParser.C_exprContext = C_exprContext; 
PostgreSQLParser.PlsqlvariablenameContext = PlsqlvariablenameContext; 
PostgreSQLParser.Func_applicationContext = Func_applicationContext; 
PostgreSQLParser.Func_exprContext = Func_exprContext; 
PostgreSQLParser.Func_expr_windowlessContext = Func_expr_windowlessContext; 
PostgreSQLParser.Func_expr_common_subexprContext = Func_expr_common_subexprContext; 
PostgreSQLParser.Xml_root_versionContext = Xml_root_versionContext; 
PostgreSQLParser.Opt_xml_root_standaloneContext = Opt_xml_root_standaloneContext; 
PostgreSQLParser.Xml_attributesContext = Xml_attributesContext; 
PostgreSQLParser.Xml_attribute_listContext = Xml_attribute_listContext; 
PostgreSQLParser.Xml_attribute_elContext = Xml_attribute_elContext; 
PostgreSQLParser.Document_or_contentContext = Document_or_contentContext; 
PostgreSQLParser.Xml_whitespace_optionContext = Xml_whitespace_optionContext; 
PostgreSQLParser.Xmlexists_argumentContext = Xmlexists_argumentContext; 
PostgreSQLParser.Xml_passing_mechContext = Xml_passing_mechContext; 
PostgreSQLParser.Within_group_clauseContext = Within_group_clauseContext; 
PostgreSQLParser.Filter_clauseContext = Filter_clauseContext; 
PostgreSQLParser.Window_clauseContext = Window_clauseContext; 
PostgreSQLParser.Window_definition_listContext = Window_definition_listContext; 
PostgreSQLParser.Window_definitionContext = Window_definitionContext; 
PostgreSQLParser.Over_clauseContext = Over_clauseContext; 
PostgreSQLParser.Window_specificationContext = Window_specificationContext; 
PostgreSQLParser.Opt_existing_window_nameContext = Opt_existing_window_nameContext; 
PostgreSQLParser.Opt_partition_clauseContext = Opt_partition_clauseContext; 
PostgreSQLParser.Opt_frame_clauseContext = Opt_frame_clauseContext; 
PostgreSQLParser.Frame_extentContext = Frame_extentContext; 
PostgreSQLParser.Frame_boundContext = Frame_boundContext; 
PostgreSQLParser.Opt_window_exclusion_clauseContext = Opt_window_exclusion_clauseContext; 
PostgreSQLParser.RowContext = RowContext; 
PostgreSQLParser.Explicit_rowContext = Explicit_rowContext; 
PostgreSQLParser.Implicit_rowContext = Implicit_rowContext; 
PostgreSQLParser.Sub_typeContext = Sub_typeContext; 
PostgreSQLParser.All_opContext = All_opContext; 
PostgreSQLParser.MathopContext = MathopContext; 
PostgreSQLParser.Qual_opContext = Qual_opContext; 
PostgreSQLParser.Qual_all_opContext = Qual_all_opContext; 
PostgreSQLParser.Subquery_OpContext = Subquery_OpContext; 
PostgreSQLParser.Expr_listContext = Expr_listContext; 
PostgreSQLParser.Func_arg_listContext = Func_arg_listContext; 
PostgreSQLParser.Func_arg_exprContext = Func_arg_exprContext; 
PostgreSQLParser.Type_listContext = Type_listContext; 
PostgreSQLParser.Array_exprContext = Array_exprContext; 
PostgreSQLParser.Array_expr_listContext = Array_expr_listContext; 
PostgreSQLParser.Extract_listContext = Extract_listContext; 
PostgreSQLParser.Extract_argContext = Extract_argContext; 
PostgreSQLParser.Unicode_normal_formContext = Unicode_normal_formContext; 
PostgreSQLParser.Overlay_listContext = Overlay_listContext; 
PostgreSQLParser.Position_listContext = Position_listContext; 
PostgreSQLParser.Substr_listContext = Substr_listContext; 
PostgreSQLParser.Trim_listContext = Trim_listContext; 
PostgreSQLParser.In_exprContext = In_exprContext; 
PostgreSQLParser.Case_exprContext = Case_exprContext; 
PostgreSQLParser.When_clause_listContext = When_clause_listContext; 
PostgreSQLParser.When_clauseContext = When_clauseContext; 
PostgreSQLParser.Case_defaultContext = Case_defaultContext; 
PostgreSQLParser.Case_argContext = Case_argContext; 
PostgreSQLParser.ColumnrefContext = ColumnrefContext; 
PostgreSQLParser.Indirection_elContext = Indirection_elContext; 
PostgreSQLParser.Opt_slice_boundContext = Opt_slice_boundContext; 
PostgreSQLParser.IndirectionContext = IndirectionContext; 
PostgreSQLParser.Opt_indirectionContext = Opt_indirectionContext; 
PostgreSQLParser.Opt_target_listContext = Opt_target_listContext; 
PostgreSQLParser.Target_listContext = Target_listContext; 
PostgreSQLParser.Target_elContext = Target_elContext; 
PostgreSQLParser.Qualified_name_listContext = Qualified_name_listContext; 
PostgreSQLParser.Qualified_nameContext = Qualified_nameContext; 
PostgreSQLParser.Name_listContext = Name_listContext; 
PostgreSQLParser.NameContext = NameContext; 
PostgreSQLParser.Attr_nameContext = Attr_nameContext; 
PostgreSQLParser.File_nameContext = File_nameContext; 
PostgreSQLParser.Func_nameContext = Func_nameContext; 
PostgreSQLParser.AexprconstContext = AexprconstContext; 
PostgreSQLParser.XconstContext = XconstContext; 
PostgreSQLParser.BconstContext = BconstContext; 
PostgreSQLParser.FconstContext = FconstContext; 
PostgreSQLParser.IconstContext = IconstContext; 
PostgreSQLParser.SconstContext = SconstContext; 
PostgreSQLParser.AnysconstContext = AnysconstContext; 
PostgreSQLParser.Opt_uescapeContext = Opt_uescapeContext; 
PostgreSQLParser.SignediconstContext = SignediconstContext; 
PostgreSQLParser.RoleidContext = RoleidContext; 
PostgreSQLParser.RolespecContext = RolespecContext; 
PostgreSQLParser.Role_listContext = Role_listContext; 
PostgreSQLParser.ColidContext = ColidContext; 
PostgreSQLParser.Table_aliasContext = Table_aliasContext; 
PostgreSQLParser.Type_function_nameContext = Type_function_nameContext; 
PostgreSQLParser.NonreservedwordContext = NonreservedwordContext; 
PostgreSQLParser.CollabelContext = CollabelContext; 
PostgreSQLParser.IdentifierContext = IdentifierContext; 
PostgreSQLParser.PlsqlidentifierContext = PlsqlidentifierContext; 
PostgreSQLParser.Unreserved_keywordContext = Unreserved_keywordContext; 
PostgreSQLParser.Col_name_keywordContext = Col_name_keywordContext; 
PostgreSQLParser.Type_func_name_keywordContext = Type_func_name_keywordContext; 
PostgreSQLParser.Reserved_keywordContext = Reserved_keywordContext; 
PostgreSQLParser.Builtin_function_nameContext = Builtin_function_nameContext; 
PostgreSQLParser.Pl_functionContext = Pl_functionContext; 
PostgreSQLParser.Comp_optionsContext = Comp_optionsContext; 
PostgreSQLParser.Comp_optionContext = Comp_optionContext; 
PostgreSQLParser.SharpContext = SharpContext; 
PostgreSQLParser.Option_valueContext = Option_valueContext; 
PostgreSQLParser.Opt_semiContext = Opt_semiContext; 
PostgreSQLParser.Pl_blockContext = Pl_blockContext; 
PostgreSQLParser.Decl_sectContext = Decl_sectContext; 
PostgreSQLParser.Decl_startContext = Decl_startContext; 
PostgreSQLParser.Decl_stmtsContext = Decl_stmtsContext; 
PostgreSQLParser.Label_declContext = Label_declContext; 
PostgreSQLParser.Decl_stmtContext = Decl_stmtContext; 
PostgreSQLParser.Decl_statementContext = Decl_statementContext; 
PostgreSQLParser.Opt_scrollableContext = Opt_scrollableContext; 
PostgreSQLParser.Decl_cursor_queryContext = Decl_cursor_queryContext; 
PostgreSQLParser.Decl_cursor_argsContext = Decl_cursor_argsContext; 
PostgreSQLParser.Decl_cursor_arglistContext = Decl_cursor_arglistContext; 
PostgreSQLParser.Decl_cursor_argContext = Decl_cursor_argContext; 
PostgreSQLParser.Decl_is_forContext = Decl_is_forContext; 
PostgreSQLParser.Decl_aliasitemContext = Decl_aliasitemContext; 
PostgreSQLParser.Decl_varnameContext = Decl_varnameContext; 
PostgreSQLParser.Decl_constContext = Decl_constContext; 
PostgreSQLParser.Decl_datatypeContext = Decl_datatypeContext; 
PostgreSQLParser.Decl_collateContext = Decl_collateContext; 
PostgreSQLParser.Decl_notnullContext = Decl_notnullContext; 
PostgreSQLParser.Decl_defvalContext = Decl_defvalContext; 
PostgreSQLParser.Decl_defkeyContext = Decl_defkeyContext; 
PostgreSQLParser.Assign_operatorContext = Assign_operatorContext; 
PostgreSQLParser.Proc_sectContext = Proc_sectContext; 
PostgreSQLParser.Proc_stmtContext = Proc_stmtContext; 
PostgreSQLParser.Stmt_performContext = Stmt_performContext; 
PostgreSQLParser.Stmt_callContext = Stmt_callContext; 
PostgreSQLParser.Opt_expr_listContext = Opt_expr_listContext; 
PostgreSQLParser.Stmt_assignContext = Stmt_assignContext; 
PostgreSQLParser.Stmt_getdiagContext = Stmt_getdiagContext; 
PostgreSQLParser.Getdiag_area_optContext = Getdiag_area_optContext; 
PostgreSQLParser.Getdiag_listContext = Getdiag_listContext; 
PostgreSQLParser.Getdiag_list_itemContext = Getdiag_list_itemContext; 
PostgreSQLParser.Getdiag_itemContext = Getdiag_itemContext; 
PostgreSQLParser.Getdiag_targetContext = Getdiag_targetContext; 
PostgreSQLParser.Assign_varContext = Assign_varContext; 
PostgreSQLParser.Stmt_ifContext = Stmt_ifContext; 
PostgreSQLParser.Stmt_elsifsContext = Stmt_elsifsContext; 
PostgreSQLParser.Stmt_elseContext = Stmt_elseContext; 
PostgreSQLParser.Stmt_caseContext = Stmt_caseContext; 
PostgreSQLParser.Opt_expr_until_whenContext = Opt_expr_until_whenContext; 
PostgreSQLParser.Case_when_listContext = Case_when_listContext; 
PostgreSQLParser.Case_whenContext = Case_whenContext; 
PostgreSQLParser.Opt_case_elseContext = Opt_case_elseContext; 
PostgreSQLParser.Stmt_loopContext = Stmt_loopContext; 
PostgreSQLParser.Stmt_whileContext = Stmt_whileContext; 
PostgreSQLParser.Stmt_forContext = Stmt_forContext; 
PostgreSQLParser.For_controlContext = For_controlContext; 
PostgreSQLParser.Opt_for_using_expressionContext = Opt_for_using_expressionContext; 
PostgreSQLParser.Opt_cursor_parametersContext = Opt_cursor_parametersContext; 
PostgreSQLParser.Opt_reverseContext = Opt_reverseContext; 
PostgreSQLParser.Opt_by_expressionContext = Opt_by_expressionContext; 
PostgreSQLParser.For_variableContext = For_variableContext; 
PostgreSQLParser.Stmt_foreach_aContext = Stmt_foreach_aContext; 
PostgreSQLParser.Foreach_sliceContext = Foreach_sliceContext; 
PostgreSQLParser.Stmt_exitContext = Stmt_exitContext; 
PostgreSQLParser.Exit_typeContext = Exit_typeContext; 
PostgreSQLParser.Stmt_returnContext = Stmt_returnContext; 
PostgreSQLParser.Opt_return_resultContext = Opt_return_resultContext; 
PostgreSQLParser.Stmt_raiseContext = Stmt_raiseContext; 
PostgreSQLParser.Opt_stmt_raise_levelContext = Opt_stmt_raise_levelContext; 
PostgreSQLParser.Opt_raise_listContext = Opt_raise_listContext; 
PostgreSQLParser.Opt_raise_usingContext = Opt_raise_usingContext; 
PostgreSQLParser.Opt_raise_using_elemContext = Opt_raise_using_elemContext; 
PostgreSQLParser.Opt_raise_using_elem_listContext = Opt_raise_using_elem_listContext; 
PostgreSQLParser.Stmt_assertContext = Stmt_assertContext; 
PostgreSQLParser.Opt_stmt_assert_messageContext = Opt_stmt_assert_messageContext; 
PostgreSQLParser.Loop_bodyContext = Loop_bodyContext; 
PostgreSQLParser.Stmt_execsqlContext = Stmt_execsqlContext; 
PostgreSQLParser.Stmt_dynexecuteContext = Stmt_dynexecuteContext; 
PostgreSQLParser.Opt_execute_usingContext = Opt_execute_usingContext; 
PostgreSQLParser.Opt_execute_using_listContext = Opt_execute_using_listContext; 
PostgreSQLParser.Opt_execute_intoContext = Opt_execute_intoContext; 
PostgreSQLParser.Stmt_openContext = Stmt_openContext; 
PostgreSQLParser.Opt_open_bound_list_itemContext = Opt_open_bound_list_itemContext; 
PostgreSQLParser.Opt_open_bound_listContext = Opt_open_bound_listContext; 
PostgreSQLParser.Opt_open_usingContext = Opt_open_usingContext; 
PostgreSQLParser.Opt_scroll_optionContext = Opt_scroll_optionContext; 
PostgreSQLParser.Opt_scroll_option_noContext = Opt_scroll_option_noContext; 
PostgreSQLParser.Stmt_fetchContext = Stmt_fetchContext; 
PostgreSQLParser.Into_targetContext = Into_targetContext; 
PostgreSQLParser.Opt_cursor_fromContext = Opt_cursor_fromContext; 
PostgreSQLParser.Opt_fetch_directionContext = Opt_fetch_directionContext; 
PostgreSQLParser.Stmt_moveContext = Stmt_moveContext; 
PostgreSQLParser.Stmt_closeContext = Stmt_closeContext; 
PostgreSQLParser.Stmt_nullContext = Stmt_nullContext; 
PostgreSQLParser.Stmt_commitContext = Stmt_commitContext; 
PostgreSQLParser.Stmt_rollbackContext = Stmt_rollbackContext; 
PostgreSQLParser.Plsql_opt_transaction_chainContext = Plsql_opt_transaction_chainContext; 
PostgreSQLParser.Stmt_setContext = Stmt_setContext; 
PostgreSQLParser.Cursor_variableContext = Cursor_variableContext; 
PostgreSQLParser.Exception_sectContext = Exception_sectContext; 
PostgreSQLParser.Proc_exceptionsContext = Proc_exceptionsContext; 
PostgreSQLParser.Proc_exceptionContext = Proc_exceptionContext; 
PostgreSQLParser.Proc_conditionsContext = Proc_conditionsContext; 
PostgreSQLParser.Proc_conditionContext = Proc_conditionContext; 
PostgreSQLParser.Opt_block_labelContext = Opt_block_labelContext; 
PostgreSQLParser.Opt_loop_labelContext = Opt_loop_labelContext; 
PostgreSQLParser.Opt_labelContext = Opt_labelContext; 
PostgreSQLParser.Opt_exitcondContext = Opt_exitcondContext; 
PostgreSQLParser.Any_identifierContext = Any_identifierContext; 
PostgreSQLParser.Plsql_unreserved_keywordContext = Plsql_unreserved_keywordContext; 
PostgreSQLParser.Sql_expressionContext = Sql_expressionContext; 
PostgreSQLParser.Expr_until_thenContext = Expr_until_thenContext; 
PostgreSQLParser.Expr_until_semiContext = Expr_until_semiContext; 
PostgreSQLParser.Expr_until_rightbracketContext = Expr_until_rightbracketContext; 
PostgreSQLParser.Expr_until_loopContext = Expr_until_loopContext; 
PostgreSQLParser.Make_execsql_stmtContext = Make_execsql_stmtContext; 
PostgreSQLParser.Opt_returning_clause_intoContext = Opt_returning_clause_intoContext; 
